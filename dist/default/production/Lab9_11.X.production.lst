

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Nov 09 18:47:14 2023

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    91                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    96                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    97  0000                     
    98                           	psect	idataCOMRAM
    99  002246                     __pidataCOMRAM:
   100                           	opt stack 0
   101                           
   102                           ;initializer for _heater_set_temp
   103  002246  4B                 	db	75
   104                           
   105                           ;initializer for _tempSecond
   106  002247  FF                 	db	255
   107                           
   108                           ;initializer for _wrap
   109  002248  01                 	db	1
   110                           
   111                           	psect	idataBANK0
   112  001900                     __pidataBANK0:
   113                           	opt stack 0
   114                           
   115                           ;initializer for _array1
   116  001900  A2                 	db	162
   117  001901  62                 	db	98
   118  001902  E2                 	db	226
   119  001903  22                 	db	34
   120  001904  02                 	db	2
   121  001905  C2                 	db	194
   122  001906  E0                 	db	224
   123  001907  A8                 	db	168
   124  001908  90                 	db	144
   125  001909  68                 	db	104
   126  00190A  98                 	db	152
   127  00190B  B0                 	db	176
   128  00190C  30                 	db	48
   129  00190D  18                 	db	24
   130  00190E  7A                 	db	122
   131  00190F  10                 	db	16
   132  001910  38                 	db	56
   133  001911  5A                 	db	90
   134  001912  42                 	db	66
   135  001913  4A                 	db	74
   136  001914  52                 	db	82
   137                           
   138                           ;initializer for _alarm_time
   139  001915  30                 	db	48
   140  001916  30                 	db	48
   141  001917  3A                 	db	58
   142  001918  30                 	db	48
   143  001919  30                 	db	48
   144  00191A  3A                 	db	58
   145  00191B  30                 	db	48
   146  00191C  30                 	db	48
   147  00191D  00                 	db	0
   148                           
   149                           ;initializer for _setup_alarm_time
   150  00191E  30                 	db	48
   151  00191F  30                 	db	48
   152  001920  3A                 	db	58
   153  001921  30                 	db	48
   154  001922  30                 	db	48
   155  001923  3A                 	db	58
   156  001924  30                 	db	48
   157  001925  30                 	db	48
   158  001926  00                 	db	0
   159                           
   160                           ;initializer for _setup_date
   161  001927  30                 	db	48
   162  001928  31                 	db	49
   163  001929  2F                 	db	47
   164  00192A  30                 	db	48
   165  00192B  31                 	db	49
   166  00192C  2F                 	db	47
   167  00192D  30                 	db	48
   168  00192E  30                 	db	48
   169  00192F  00                 	db	0
   170                           
   171                           ;initializer for _setup_time
   172  001930  30                 	db	48
   173  001931  30                 	db	48
   174  001932  3A                 	db	58
   175  001933  30                 	db	48
   176  001934  30                 	db	48
   177  001935  3A                 	db	58
   178  001936  30                 	db	48
   179  001937  30                 	db	48
   180  001938  00                 	db	0
   181                           
   182                           ;initializer for _D2
   183  001939  01                 	db	1
   184  00193A  02                 	db	2
   185  00193B  03                 	db	3
   186  00193C  04                 	db	4
   187  00193D  05                 	db	5
   188  00193E  06                 	db	6
   189  00193F  07                 	db	7
   190                           
   191                           ;initializer for _Volt_Txt
   192  001940  30                 	db	48
   193  001941  2E                 	db	46
   194  001942  30                 	db	48
   195  001943  30                 	db	48
   196  001944  00                 	db	0
   197                           
   198                           ;initializer for _Alarm_SW_Txt
   199  001945  4F                 	db	79
   200  001946  46                 	db	70
   201  001947  46                 	db	70
   202  001948  00                 	db	0
   203                           
   204                           ;initializer for _Heater_Set_Temp_Txt
   205  001949  30                 	db	48
   206  00194A  30                 	db	48
   207  00194B  00                 	db	0
   208                           
   209                           ;initializer for _RTC_ALARM_Txt
   210  00194C  30                 	db	48
   211  00194D  00                 	db	0
   212                           
   213                           ;initializer for _date
   214  00194E  30                 	db	48
   215  00194F  30                 	db	48
   216  001950  2F                 	db	47
   217  001951  30                 	db	48
   218  001952  30                 	db	48
   219  001953  2F                 	db	47
   220  001954  30                 	db	48
   221  001955  30                 	db	48
   222  001956  00                 	db	0
   223                           
   224                           ;initializer for _time
   225  001957  30                 	db	48
   226  001958  30                 	db	48
   227  001959  3A                 	db	58
   228  00195A  30                 	db	48
   229  00195B  30                 	db	48
   230  00195C  3A                 	db	58
   231  00195D  30                 	db	48
   232  00195E  30                 	db	48
   233  00195F  00                 	db	0
   234                           
   235                           ;initializer for _RPM_Txt
   236  001960  30                 	db	48
   237  001961  30                 	db	48
   238  001962  30                 	db	48
   239  001963  30                 	db	48
   240  001964  00                 	db	0
   241                           
   242                           ;initializer for _DC_Txt
   243  001965  30                 	db	48
   244  001966  30                 	db	48
   245  001967  30                 	db	48
   246  001968  00                 	db	0
   247                           
   248                           ;initializer for _Fan_SW_Txt
   249  001969  4F                 	db	79
   250  00196A  46                 	db	70
   251  00196B  46                 	db	70
   252  00196C  00                 	db	0
   253                           
   254                           ;initializer for _tempC
   255  00196D  2B                 	db	43
   256  00196E  32                 	db	50
   257  00196F  35                 	db	53
   258  001970  00                 	db	0
   259                           
   260                           ;initializer for _tempF
   261  001971  2B                 	db	43
   262  001972  37                 	db	55
   263  001973  37                 	db	55
   264  001974  00                 	db	0
   265                           
   266                           	psect	idataBANK1
   267  00201A                     __pidataBANK1:
   268                           	opt stack 0
   269                           
   270                           ;initializer for _buffer
   271  00201A  20                 	db	32
   272  00201B  45                 	db	69
   273  00201C  43                 	db	67
   274  00201D  45                 	db	69
   275  00201E  33                 	db	51
   276  00201F  33                 	db	51
   277  002020  30                 	db	48
   278  002021  31                 	db	49
   279  002022  4C                 	db	76
   280  002023  20                 	db	32
   281  002024  46                 	db	70
   282  002025  32                 	db	50
   283  002026  33                 	db	51
   284  002027  20                 	db	32
   285  002028  4C                 	db	76
   286  002029  61                 	db	97
   287  00202A  62                 	db	98
   288  00202B  20                 	db	32
   289  00202C  39                 	db	57
   290  00202D  2D                 	db	45
   291  00202E  31                 	db	49
   292  00202F  31                 	db	49
   293  002030  00                 	db	0
   294  002031  00                 	db	0
   295  002032  00                 	db	0
   296  002033  00                 	db	0
   297  002034  00                 	db	0
   298  002035  00                 	db	0
   299  002036  00                 	db	0
   300  002037  00                 	db	0
   301  002038  00                 	db	0
   302                           
   303                           	psect	mediumconst
   304  00FCE0                     __pmediumconst:
   305                           	opt stack 0
   306  00FCE0  00                 	db	0
   307  00FCE1                     _font:
   308                           	opt stack 0
   309  00FCE1  00                 	db	0
   310  00FCE2  00                 	db	0
   311  00FCE3  00                 	db	0
   312  00FCE4  00                 	db	0
   313  00FCE5  00                 	db	0
   314  00FCE6  00                 	db	0
   315  00FCE7  00                 	db	0
   316  00FCE8  5F                 	db	95
   317  00FCE9  00                 	db	0
   318  00FCEA  00                 	db	0
   319  00FCEB  00                 	db	0
   320  00FCEC  07                 	db	7
   321  00FCED  00                 	db	0
   322  00FCEE  07                 	db	7
   323  00FCEF  00                 	db	0
   324  00FCF0  14                 	db	20
   325  00FCF1  7F                 	db	127
   326  00FCF2  14                 	db	20
   327  00FCF3  7F                 	db	127
   328  00FCF4  14                 	db	20
   329  00FCF5  24                 	db	36
   330  00FCF6  2A                 	db	42
   331  00FCF7  7F                 	db	127
   332  00FCF8  2A                 	db	42
   333  00FCF9  12                 	db	18
   334  00FCFA  23                 	db	35
   335  00FCFB  13                 	db	19
   336  00FCFC  08                 	db	8
   337  00FCFD  64                 	db	100
   338  00FCFE  62                 	db	98
   339  00FCFF  36                 	db	54
   340  00FD00  49                 	db	73
   341  00FD01  56                 	db	86
   342  00FD02  20                 	db	32
   343  00FD03  50                 	db	80
   344  00FD04  00                 	db	0
   345  00FD05  08                 	db	8
   346  00FD06  07                 	db	7
   347  00FD07  03                 	db	3
   348  00FD08  00                 	db	0
   349  00FD09  00                 	db	0
   350  00FD0A  1C                 	db	28
   351  00FD0B  22                 	db	34
   352  00FD0C  41                 	db	65
   353  00FD0D  00                 	db	0
   354  00FD0E  00                 	db	0
   355  00FD0F  41                 	db	65
   356  00FD10  22                 	db	34
   357  00FD11  1C                 	db	28
   358  00FD12  00                 	db	0
   359  00FD13  2A                 	db	42
   360  00FD14  1C                 	db	28
   361  00FD15  7F                 	db	127
   362  00FD16  1C                 	db	28
   363  00FD17  2A                 	db	42
   364  00FD18  08                 	db	8
   365  00FD19  08                 	db	8
   366  00FD1A  3E                 	db	62
   367  00FD1B  08                 	db	8
   368  00FD1C  08                 	db	8
   369  00FD1D  00                 	db	0
   370  00FD1E  80                 	db	128
   371  00FD1F  70                 	db	112
   372  00FD20  30                 	db	48
   373  00FD21  00                 	db	0
   374  00FD22  08                 	db	8
   375  00FD23  08                 	db	8
   376  00FD24  08                 	db	8
   377  00FD25  08                 	db	8
   378  00FD26  08                 	db	8
   379  00FD27  00                 	db	0
   380  00FD28  00                 	db	0
   381  00FD29  60                 	db	96
   382  00FD2A  60                 	db	96
   383  00FD2B  00                 	db	0
   384  00FD2C  20                 	db	32
   385  00FD2D  10                 	db	16
   386  00FD2E  08                 	db	8
   387  00FD2F  04                 	db	4
   388  00FD30  02                 	db	2
   389  00FD31  3E                 	db	62
   390  00FD32  51                 	db	81
   391  00FD33  49                 	db	73
   392  00FD34  45                 	db	69
   393  00FD35  3E                 	db	62
   394  00FD36  00                 	db	0
   395  00FD37  42                 	db	66
   396  00FD38  7F                 	db	127
   397  00FD39  40                 	db	64
   398  00FD3A  00                 	db	0
   399  00FD3B  72                 	db	114
   400  00FD3C  49                 	db	73
   401  00FD3D  49                 	db	73
   402  00FD3E  49                 	db	73
   403  00FD3F  46                 	db	70
   404  00FD40  21                 	db	33
   405  00FD41  41                 	db	65
   406  00FD42  49                 	db	73
   407  00FD43  4D                 	db	77
   408  00FD44  33                 	db	51
   409  00FD45  18                 	db	24
   410  00FD46  14                 	db	20
   411  00FD47  12                 	db	18
   412  00FD48  7F                 	db	127
   413  00FD49  10                 	db	16
   414  00FD4A  27                 	db	39
   415  00FD4B  45                 	db	69
   416  00FD4C  45                 	db	69
   417  00FD4D  45                 	db	69
   418  00FD4E  39                 	db	57
   419  00FD4F  3C                 	db	60
   420  00FD50  4A                 	db	74
   421  00FD51  49                 	db	73
   422  00FD52  49                 	db	73
   423  00FD53  31                 	db	49
   424  00FD54  41                 	db	65
   425  00FD55  21                 	db	33
   426  00FD56  11                 	db	17
   427  00FD57  09                 	db	9
   428  00FD58  07                 	db	7
   429  00FD59  36                 	db	54
   430  00FD5A  49                 	db	73
   431  00FD5B  49                 	db	73
   432  00FD5C  49                 	db	73
   433  00FD5D  36                 	db	54
   434  00FD5E  46                 	db	70
   435  00FD5F  49                 	db	73
   436  00FD60  49                 	db	73
   437  00FD61  29                 	db	41
   438  00FD62  1E                 	db	30
   439  00FD63  00                 	db	0
   440  00FD64  00                 	db	0
   441  00FD65  14                 	db	20
   442  00FD66  00                 	db	0
   443  00FD67  00                 	db	0
   444  00FD68  00                 	db	0
   445  00FD69  40                 	db	64
   446  00FD6A  34                 	db	52
   447  00FD6B  00                 	db	0
   448  00FD6C  00                 	db	0
   449  00FD6D  00                 	db	0
   450  00FD6E  08                 	db	8
   451  00FD6F  14                 	db	20
   452  00FD70  22                 	db	34
   453  00FD71  41                 	db	65
   454  00FD72  14                 	db	20
   455  00FD73  14                 	db	20
   456  00FD74  14                 	db	20
   457  00FD75  14                 	db	20
   458  00FD76  14                 	db	20
   459  00FD77  00                 	db	0
   460  00FD78  41                 	db	65
   461  00FD79  22                 	db	34
   462  00FD7A  14                 	db	20
   463  00FD7B  08                 	db	8
   464  00FD7C  02                 	db	2
   465  00FD7D  01                 	db	1
   466  00FD7E  59                 	db	89
   467  00FD7F  09                 	db	9
   468  00FD80  06                 	db	6
   469  00FD81  3E                 	db	62
   470  00FD82  41                 	db	65
   471  00FD83  5D                 	db	93
   472  00FD84  59                 	db	89
   473  00FD85  4E                 	db	78
   474  00FD86  7C                 	db	124
   475  00FD87  12                 	db	18
   476  00FD88  11                 	db	17
   477  00FD89  12                 	db	18
   478  00FD8A  7C                 	db	124
   479  00FD8B  7F                 	db	127
   480  00FD8C  49                 	db	73
   481  00FD8D  49                 	db	73
   482  00FD8E  49                 	db	73
   483  00FD8F  36                 	db	54
   484  00FD90  3E                 	db	62
   485  00FD91  41                 	db	65
   486  00FD92  41                 	db	65
   487  00FD93  41                 	db	65
   488  00FD94  22                 	db	34
   489  00FD95  7F                 	db	127
   490  00FD96  41                 	db	65
   491  00FD97  41                 	db	65
   492  00FD98  41                 	db	65
   493  00FD99  3E                 	db	62
   494  00FD9A  7F                 	db	127
   495  00FD9B  49                 	db	73
   496  00FD9C  49                 	db	73
   497  00FD9D  49                 	db	73
   498  00FD9E  41                 	db	65
   499  00FD9F  7F                 	db	127
   500  00FDA0  09                 	db	9
   501  00FDA1  09                 	db	9
   502  00FDA2  09                 	db	9
   503  00FDA3  01                 	db	1
   504  00FDA4  3E                 	db	62
   505  00FDA5  41                 	db	65
   506  00FDA6  41                 	db	65
   507  00FDA7  51                 	db	81
   508  00FDA8  73                 	db	115
   509  00FDA9  7F                 	db	127
   510  00FDAA  08                 	db	8
   511  00FDAB  08                 	db	8
   512  00FDAC  08                 	db	8
   513  00FDAD  7F                 	db	127
   514  00FDAE  00                 	db	0
   515  00FDAF  41                 	db	65
   516  00FDB0  7F                 	db	127
   517  00FDB1  41                 	db	65
   518  00FDB2  00                 	db	0
   519  00FDB3  20                 	db	32
   520  00FDB4  40                 	db	64
   521  00FDB5  41                 	db	65
   522  00FDB6  3F                 	db	63
   523  00FDB7  01                 	db	1
   524  00FDB8  7F                 	db	127
   525  00FDB9  08                 	db	8
   526  00FDBA  14                 	db	20
   527  00FDBB  22                 	db	34
   528  00FDBC  41                 	db	65
   529  00FDBD  7F                 	db	127
   530  00FDBE  40                 	db	64
   531  00FDBF  40                 	db	64
   532  00FDC0  40                 	db	64
   533  00FDC1  40                 	db	64
   534  00FDC2  7F                 	db	127
   535  00FDC3  02                 	db	2
   536  00FDC4  1C                 	db	28
   537  00FDC5  02                 	db	2
   538  00FDC6  7F                 	db	127
   539  00FDC7  7F                 	db	127
   540  00FDC8  04                 	db	4
   541  00FDC9  08                 	db	8
   542  00FDCA  10                 	db	16
   543  00FDCB  7F                 	db	127
   544  00FDCC  3E                 	db	62
   545  00FDCD  41                 	db	65
   546  00FDCE  41                 	db	65
   547  00FDCF  41                 	db	65
   548  00FDD0  3E                 	db	62
   549  00FDD1  7F                 	db	127
   550  00FDD2  09                 	db	9
   551  00FDD3  09                 	db	9
   552  00FDD4  09                 	db	9
   553  00FDD5  06                 	db	6
   554  00FDD6  3E                 	db	62
   555  00FDD7  41                 	db	65
   556  00FDD8  51                 	db	81
   557  00FDD9  21                 	db	33
   558  00FDDA  5E                 	db	94
   559  00FDDB  7F                 	db	127
   560  00FDDC  09                 	db	9
   561  00FDDD  19                 	db	25
   562  00FDDE  29                 	db	41
   563  00FDDF  46                 	db	70
   564  00FDE0                     __end_of_font:
   565                           	opt stack 0
   566  00FDE0                     _font2:
   567                           	opt stack 0
   568  00FDE0  26                 	db	38
   569  00FDE1  49                 	db	73
   570  00FDE2  49                 	db	73
   571  00FDE3  49                 	db	73
   572  00FDE4  32                 	db	50
   573  00FDE5  03                 	db	3
   574  00FDE6  01                 	db	1
   575  00FDE7  7F                 	db	127
   576  00FDE8  01                 	db	1
   577  00FDE9  03                 	db	3
   578  00FDEA  3F                 	db	63
   579  00FDEB  40                 	db	64
   580  00FDEC  40                 	db	64
   581  00FDED  40                 	db	64
   582  00FDEE  3F                 	db	63
   583  00FDEF  1F                 	db	31
   584  00FDF0  20                 	db	32
   585  00FDF1  40                 	db	64
   586  00FDF2  20                 	db	32
   587  00FDF3  1F                 	db	31
   588  00FDF4  3F                 	db	63
   589  00FDF5  40                 	db	64
   590  00FDF6  38                 	db	56
   591  00FDF7  40                 	db	64
   592  00FDF8  3F                 	db	63
   593  00FDF9  63                 	db	99
   594  00FDFA  14                 	db	20
   595  00FDFB  08                 	db	8
   596  00FDFC  14                 	db	20
   597  00FDFD  63                 	db	99
   598  00FDFE  03                 	db	3
   599  00FDFF  04                 	db	4
   600  00FE00  78                 	db	120
   601  00FE01  04                 	db	4
   602  00FE02  03                 	db	3
   603  00FE03  61                 	db	97
   604  00FE04  59                 	db	89
   605  00FE05  49                 	db	73
   606  00FE06  4D                 	db	77
   607  00FE07  43                 	db	67
   608  00FE08  00                 	db	0
   609  00FE09  7F                 	db	127
   610  00FE0A  41                 	db	65
   611  00FE0B  41                 	db	65
   612  00FE0C  41                 	db	65
   613  00FE0D  02                 	db	2
   614  00FE0E  04                 	db	4
   615  00FE0F  08                 	db	8
   616  00FE10  10                 	db	16
   617  00FE11  20                 	db	32
   618  00FE12  00                 	db	0
   619  00FE13  41                 	db	65
   620  00FE14  41                 	db	65
   621  00FE15  41                 	db	65
   622  00FE16  7F                 	db	127
   623  00FE17  04                 	db	4
   624  00FE18  02                 	db	2
   625  00FE19  01                 	db	1
   626  00FE1A  02                 	db	2
   627  00FE1B  04                 	db	4
   628  00FE1C  40                 	db	64
   629  00FE1D  40                 	db	64
   630  00FE1E  40                 	db	64
   631  00FE1F  40                 	db	64
   632  00FE20  40                 	db	64
   633  00FE21  00                 	db	0
   634  00FE22  03                 	db	3
   635  00FE23  07                 	db	7
   636  00FE24  08                 	db	8
   637  00FE25  00                 	db	0
   638  00FE26  20                 	db	32
   639  00FE27  54                 	db	84
   640  00FE28  54                 	db	84
   641  00FE29  78                 	db	120
   642  00FE2A  40                 	db	64
   643  00FE2B  7F                 	db	127
   644  00FE2C  28                 	db	40
   645  00FE2D  44                 	db	68
   646  00FE2E  44                 	db	68
   647  00FE2F  38                 	db	56
   648  00FE30  38                 	db	56
   649  00FE31  44                 	db	68
   650  00FE32  44                 	db	68
   651  00FE33  44                 	db	68
   652  00FE34  28                 	db	40
   653  00FE35  38                 	db	56
   654  00FE36  44                 	db	68
   655  00FE37  44                 	db	68
   656  00FE38  28                 	db	40
   657  00FE39  7F                 	db	127
   658  00FE3A  38                 	db	56
   659  00FE3B  54                 	db	84
   660  00FE3C  54                 	db	84
   661  00FE3D  54                 	db	84
   662  00FE3E  18                 	db	24
   663  00FE3F  00                 	db	0
   664  00FE40  08                 	db	8
   665  00FE41  7E                 	db	126
   666  00FE42  09                 	db	9
   667  00FE43  02                 	db	2
   668  00FE44  18                 	db	24
   669  00FE45  A4                 	db	164
   670  00FE46  A4                 	db	164
   671  00FE47  9C                 	db	156
   672  00FE48  78                 	db	120
   673  00FE49  7F                 	db	127
   674  00FE4A  08                 	db	8
   675  00FE4B  04                 	db	4
   676  00FE4C  04                 	db	4
   677  00FE4D  78                 	db	120
   678  00FE4E  00                 	db	0
   679  00FE4F  44                 	db	68
   680  00FE50  7D                 	db	125
   681  00FE51  40                 	db	64
   682  00FE52  00                 	db	0
   683  00FE53  20                 	db	32
   684  00FE54  40                 	db	64
   685  00FE55  40                 	db	64
   686  00FE56  3D                 	db	61
   687  00FE57  00                 	db	0
   688  00FE58  7F                 	db	127
   689  00FE59  10                 	db	16
   690  00FE5A  28                 	db	40
   691  00FE5B  44                 	db	68
   692  00FE5C  00                 	db	0
   693  00FE5D  00                 	db	0
   694  00FE5E  41                 	db	65
   695  00FE5F  7F                 	db	127
   696  00FE60  40                 	db	64
   697  00FE61  00                 	db	0
   698  00FE62  7C                 	db	124
   699  00FE63  04                 	db	4
   700  00FE64  78                 	db	120
   701  00FE65  04                 	db	4
   702  00FE66  78                 	db	120
   703  00FE67  7C                 	db	124
   704  00FE68  08                 	db	8
   705  00FE69  04                 	db	4
   706  00FE6A  04                 	db	4
   707  00FE6B  78                 	db	120
   708  00FE6C  38                 	db	56
   709  00FE6D  44                 	db	68
   710  00FE6E  44                 	db	68
   711  00FE6F  44                 	db	68
   712  00FE70  38                 	db	56
   713  00FE71  FC                 	db	252
   714  00FE72  18                 	db	24
   715  00FE73  24                 	db	36
   716  00FE74  24                 	db	36
   717  00FE75  18                 	db	24
   718  00FE76  18                 	db	24
   719  00FE77  24                 	db	36
   720  00FE78  24                 	db	36
   721  00FE79  18                 	db	24
   722  00FE7A  FC                 	db	252
   723  00FE7B  7C                 	db	124
   724  00FE7C  08                 	db	8
   725  00FE7D  04                 	db	4
   726  00FE7E  04                 	db	4
   727  00FE7F  08                 	db	8
   728  00FE80  48                 	db	72
   729  00FE81  54                 	db	84
   730  00FE82  54                 	db	84
   731  00FE83  54                 	db	84
   732  00FE84  24                 	db	36
   733  00FE85  04                 	db	4
   734  00FE86  04                 	db	4
   735  00FE87  3F                 	db	63
   736  00FE88  44                 	db	68
   737  00FE89  24                 	db	36
   738  00FE8A  3C                 	db	60
   739  00FE8B  40                 	db	64
   740  00FE8C  40                 	db	64
   741  00FE8D  20                 	db	32
   742  00FE8E  7C                 	db	124
   743  00FE8F  1C                 	db	28
   744  00FE90  20                 	db	32
   745  00FE91  40                 	db	64
   746  00FE92  20                 	db	32
   747  00FE93  1C                 	db	28
   748  00FE94  3C                 	db	60
   749  00FE95  40                 	db	64
   750  00FE96  30                 	db	48
   751  00FE97  40                 	db	64
   752  00FE98  3C                 	db	60
   753  00FE99  44                 	db	68
   754  00FE9A  28                 	db	40
   755  00FE9B  10                 	db	16
   756  00FE9C  28                 	db	40
   757  00FE9D  44                 	db	68
   758  00FE9E  4C                 	db	76
   759  00FE9F  90                 	db	144
   760  00FEA0  90                 	db	144
   761  00FEA1  90                 	db	144
   762  00FEA2  7C                 	db	124
   763  00FEA3  44                 	db	68
   764  00FEA4  64                 	db	100
   765  00FEA5  54                 	db	84
   766  00FEA6  4C                 	db	76
   767  00FEA7  44                 	db	68
   768  00FEA8  00                 	db	0
   769  00FEA9  08                 	db	8
   770  00FEAA  36                 	db	54
   771  00FEAB  41                 	db	65
   772  00FEAC  00                 	db	0
   773  00FEAD  00                 	db	0
   774  00FEAE  00                 	db	0
   775  00FEAF  77                 	db	119
   776  00FEB0  00                 	db	0
   777  00FEB1  00                 	db	0
   778  00FEB2  00                 	db	0
   779  00FEB3  41                 	db	65
   780  00FEB4  36                 	db	54
   781  00FEB5  08                 	db	8
   782  00FEB6  00                 	db	0
   783  00FEB7  02                 	db	2
   784  00FEB8  01                 	db	1
   785  00FEB9  02                 	db	2
   786  00FEBA  04                 	db	4
   787  00FEBB  02                 	db	2
   788  00FEBC                     __end_of_font2:
   789                           	opt stack 0
   790  00FEBC                     _dpowers:
   791                           	opt stack 0
   792  00FEBC  0001               	dw	1
   793  00FEBE  000A               	dw	10
   794  00FEC0  0064               	dw	100
   795  00FEC2  03E8               	dw	1000
   796  00FEC4  2710               	dw	10000
   797  00FEC6                     __end_of_dpowers:
   798                           	opt stack 0
   799  00FEC6                     _hexpowers:
   800                           	opt stack 0
   801  00FEC6  0001               	dw	1
   802  00FEC8  0010               	dw	16
   803  00FECA  0100               	dw	256
   804  00FECC  1000               	dw	4096
   805  00FECE                     __end_of_hexpowers:
   806                           	opt stack 0
   807  0000                     _ADCON0	set	4034
   808  0000                     _ADCON0bits	set	4034
   809  0000                     _ADCON1	set	4033
   810  0000                     _ADCON2	set	4032
   811  0000                     _ADRESH	set	4036
   812  0000                     _ADRESL	set	4035
   813  0000                     _CCP1CON	set	4029
   814  0000                     _CCP2CON	set	4026
   815  0000                     _CCPR1L	set	4030
   816  0000                     _CCPR2L	set	4027
   817  0000                     _INTCON2bits	set	4081
   818  0000                     _INTCON3bits	set	4080
   819  0000                     _INTCONbits	set	4082
   820  0000                     _OSCCON	set	4051
   821  0000                     _PIE1bits	set	3997
   822  0000                     _PIR1bits	set	3998
   823  0000                     _PORTAbits	set	3968
   824  0000                     _PORTB	set	3969
   825  0000                     _PORTBbits	set	3969
   826  0000                     _PORTCbits	set	3970
   827  0000                     _PORTDbits	set	3971
   828  0000                     _PORTE	set	3972
   829  0000                     _PR2	set	4043
   830  0000                     _RCSTA	set	4011
   831  0000                     _RCSTAbits	set	4011
   832  0000                     _SPBRG	set	4015
   833  0000                     _SPBRGH	set	4016
   834  0000                     _SSPBUF	set	4041
   835  0000                     _SSPCON1	set	4038
   836  0000                     _SSPSTAT	set	4039
   837  0000                     _SSPSTATbits	set	4039
   838  0000                     _T0CON	set	4053
   839  0000                     _T0CONbits	set	4053
   840  0000                     _T2CON	set	4042
   841  0000                     _T3CON	set	4017
   842  0000                     _T3CONbits	set	4017
   843  0000                     _TMR0H	set	4055
   844  0000                     _TMR0L	set	4054
   845  0000                     _TMR3L	set	4018
   846  0000                     _TRISA	set	3986
   847  0000                     _TRISB	set	3987
   848  0000                     _TRISC	set	3988
   849  0000                     _TRISCbits	set	3988
   850  0000                     _TRISD	set	3989
   851  0000                     _TRISDbits	set	3989
   852  0000                     _TRISE	set	3990
   853  0000                     _TXREG	set	4013
   854  0000                     _TXSTA	set	4012
   855  0000                     _TXSTAbits	set	4012
   856  0000                     _RBPU	set	32655
   857  0000                     _TRMT	set	32097
   858  00FECE                     STR_2:
   859  00FECE  20                 	db	32
   860  00FECF  54                 	db	84	;'T'
   861  00FED0  65                 	db	101	;'e'
   862  00FED1  6D                 	db	109	;'m'
   863  00FED2  70                 	db	112	;'p'
   864  00FED3  65                 	db	101	;'e'
   865  00FED4  72                 	db	114	;'r'
   866  00FED5  61                 	db	97	;'a'
   867  00FED6  74                 	db	116	;'t'
   868  00FED7  75                 	db	117	;'u'
   869  00FED8  72                 	db	114	;'r'
   870  00FED9  65                 	db	101	;'e'
   871  00FEDA  20                 	db	32
   872  00FEDB  3D                 	db	61	;'='
   873  00FEDC  20                 	db	32
   874  00FEDD  25                 	db	37
   875  00FEDE  64                 	db	100	;'d'
   876  00FEDF  20                 	db	32
   877  00FEE0  64                 	db	100	;'d'
   878  00FEE1  65                 	db	101	;'e'
   879  00FEE2  67                 	db	103	;'g'
   880  00FEE3  72                 	db	114	;'r'
   881  00FEE4  65                 	db	101	;'e'
   882  00FEE5  65                 	db	101	;'e'
   883  00FEE6  73                 	db	115	;'s'
   884  00FEE7  43                 	db	67	;'C'
   885  00FEE8  20                 	db	32
   886  00FEE9  3D                 	db	61	;'='
   887  00FEEA  20                 	db	32
   888  00FEEB  25                 	db	37
   889  00FEEC  64                 	db	100	;'d'
   890  00FEED  20                 	db	32
   891  00FEEE  64                 	db	100	;'d'
   892  00FEEF  65                 	db	101	;'e'
   893  00FEF0  67                 	db	103	;'g'
   894  00FEF1  72                 	db	114	;'r'
   895  00FEF2  65                 	db	101	;'e'
   896  00FEF3  65                 	db	101	;'e'
   897  00FEF4  73                 	db	115	;'s'
   898  00FEF5  46                 	db	70	;'F'
   899  00FEF6  0D                 	db	13
   900  00FEF7  0A                 	db	10
   901  00FEF8  00                 	db	0
   902  00FEF9                     STR_4:
   903  00FEF9  49                 	db	73	;'I'
   904  00FEFA  4E                 	db	78	;'N'
   905  00FEFB  54                 	db	84	;'T'
   906  00FEFC  30                 	db	48	;'0'
   907  00FEFD  20                 	db	32
   908  00FEFE  69                 	db	105	;'i'
   909  00FEFF  6E                 	db	110	;'n'
   910  00FF00  74                 	db	116	;'t'
   911  00FF01  65                 	db	101	;'e'
   912  00FF02  72                 	db	114	;'r'
   913  00FF03  72                 	db	114	;'r'
   914  00FF04  75                 	db	117	;'u'
   915  00FF05  70                 	db	112	;'p'
   916  00FF06  74                 	db	116	;'t'
   917  00FF07  20                 	db	32
   918  00FF08  70                 	db	112	;'p'
   919  00FF09  69                 	db	105	;'i'
   920  00FF0A  6E                 	db	110	;'n'
   921  00FF0B  20                 	db	32
   922  00FF0C  64                 	db	100	;'d'
   923  00FF0D  65                 	db	101	;'e'
   924  00FF0E  74                 	db	116	;'t'
   925  00FF0F  65                 	db	101	;'e'
   926  00FF10  63                 	db	99	;'c'
   927  00FF11  74                 	db	116	;'t'
   928  00FF12  65                 	db	101	;'e'
   929  00FF13  64                 	db	100	;'d'
   930  00FF14  20                 	db	32
   931  00FF15  0D                 	db	13
   932  00FF16  0A                 	db	10
   933  00FF17  00                 	db	0
   934  00FF18                     STR_5:
   935  00FF18  49                 	db	73	;'I'
   936  00FF19  4E                 	db	78	;'N'
   937  00FF1A  54                 	db	84	;'T'
   938  00FF1B  31                 	db	49	;'1'
   939  00FF1C  20                 	db	32
   940  00FF1D  69                 	db	105	;'i'
   941  00FF1E  6E                 	db	110	;'n'
   942  00FF1F  74                 	db	116	;'t'
   943  00FF20  65                 	db	101	;'e'
   944  00FF21  72                 	db	114	;'r'
   945  00FF22  72                 	db	114	;'r'
   946  00FF23  75                 	db	117	;'u'
   947  00FF24  70                 	db	112	;'p'
   948  00FF25  74                 	db	116	;'t'
   949  00FF26  20                 	db	32
   950  00FF27  70                 	db	112	;'p'
   951  00FF28  69                 	db	105	;'i'
   952  00FF29  6E                 	db	110	;'n'
   953  00FF2A  20                 	db	32
   954  00FF2B  64                 	db	100	;'d'
   955  00FF2C  65                 	db	101	;'e'
   956  00FF2D  74                 	db	116	;'t'
   957  00FF2E  65                 	db	101	;'e'
   958  00FF2F  63                 	db	99	;'c'
   959  00FF30  74                 	db	116	;'t'
   960  00FF31  65                 	db	101	;'e'
   961  00FF32  64                 	db	100	;'d'
   962  00FF33  20                 	db	32
   963  00FF34  0D                 	db	13
   964  00FF35  0A                 	db	10
   965  00FF36  00                 	db	0
   966  00FF37                     STR_6:
   967  00FF37  49                 	db	73	;'I'
   968  00FF38  4E                 	db	78	;'N'
   969  00FF39  54                 	db	84	;'T'
   970  00FF3A  32                 	db	50	;'2'
   971  00FF3B  20                 	db	32
   972  00FF3C  69                 	db	105	;'i'
   973  00FF3D  6E                 	db	110	;'n'
   974  00FF3E  74                 	db	116	;'t'
   975  00FF3F  65                 	db	101	;'e'
   976  00FF40  72                 	db	114	;'r'
   977  00FF41  72                 	db	114	;'r'
   978  00FF42  75                 	db	117	;'u'
   979  00FF43  70                 	db	112	;'p'
   980  00FF44  74                 	db	116	;'t'
   981  00FF45  20                 	db	32
   982  00FF46  70                 	db	112	;'p'
   983  00FF47  69                 	db	105	;'i'
   984  00FF48  6E                 	db	110	;'n'
   985  00FF49  20                 	db	32
   986  00FF4A  64                 	db	100	;'d'
   987  00FF4B  65                 	db	101	;'e'
   988  00FF4C  74                 	db	116	;'t'
   989  00FF4D  65                 	db	101	;'e'
   990  00FF4E  63                 	db	99	;'c'
   991  00FF4F  74                 	db	116	;'t'
   992  00FF50  65                 	db	101	;'e'
   993  00FF51  64                 	db	100	;'d'
   994  00FF52  20                 	db	32
   995  00FF53  0D                 	db	13
   996  00FF54  0A                 	db	10
   997  00FF55  00                 	db	0
   998  00FF56                     STR_1:
   999  00FF56  25                 	db	37
  1000  00FF57  30                 	db	48	;'0'
  1001  00FF58  32                 	db	50	;'2'
  1002  00FF59  78                 	db	120	;'x'
  1003  00FF5A  3A                 	db	58	;':'
  1004  00FF5B  25                 	db	37
  1005  00FF5C  30                 	db	48	;'0'
  1006  00FF5D  32                 	db	50	;'2'
  1007  00FF5E  78                 	db	120	;'x'
  1008  00FF5F  3A                 	db	58	;':'
  1009  00FF60  25                 	db	37
  1010  00FF61  30                 	db	48	;'0'
  1011  00FF62  32                 	db	50	;'2'
  1012  00FF63  78                 	db	120	;'x'
  1013  00FF64  20                 	db	32
  1014  00FF65  25                 	db	37
  1015  00FF66  30                 	db	48	;'0'
  1016  00FF67  32                 	db	50	;'2'
  1017  00FF68  78                 	db	120	;'x'
  1018  00FF69  2F                 	db	47
  1019  00FF6A  25                 	db	37
  1020  00FF6B  30                 	db	48	;'0'
  1021  00FF6C  32                 	db	50	;'2'
  1022  00FF6D  78                 	db	120	;'x'
  1023  00FF6E  2F                 	db	47
  1024  00FF6F  25                 	db	37
  1025  00FF70  30                 	db	48	;'0'
  1026  00FF71  32                 	db	50	;'2'
  1027  00FF72  78                 	db	120	;'x'
  1028  00FF73  00                 	db	0
  1029  00FF74  43                 	db	67	;'C'
  1030  00FF75  61                 	db	97	;'a'
  1031  00FF76  6E                 	db	110	;'n'
  1032  00FF77  6E                 	db	110	;'n'
  1033  00FF78  6F                 	db	111	;'o'
  1034  00FF79  74                 	db	116	;'t'
  1035  00FF7A  20                 	db	32
  1036  00FF7B  66                 	db	102	;'f'
  1037  00FF7C  69                 	db	105	;'i'
  1038  00FF7D  6E                 	db	110	;'n'
  1039  00FF7E  64                 	db	100	;'d'
  1040  00FF7F  20                 	db	32
  1041  00FF80  62                 	db	98	;'b'
  1042  00FF81  75                 	db	117	;'u'
  1043  00FF82  74                 	db	116	;'t'
  1044  00FF83  74                 	db	116	;'t'
  1045  00FF84  6F                 	db	111	;'o'
  1046  00FF85  6E                 	db	110	;'n'
  1047  00FF86  20                 	db	32
  1048  00FF87  0D                 	db	13
  1049  00FF88  0A                 	db	10
  1050  00FF89  00                 	db	0
  1051  00FF8A                     STR_7:
  1052  00FF8A  45                 	db	69	;'E'
  1053  00FF8B  43                 	db	67	;'C'
  1054  00FF8C  45                 	db	69	;'E'
  1055  00FF8D  33                 	db	51	;'3'
  1056  00FF8E  33                 	db	51	;'3'
  1057  00FF8F  30                 	db	48	;'0'
  1058  00FF90  31                 	db	49	;'1'
  1059  00FF91  4C                 	db	76	;'L'
  1060  00FF92  20                 	db	32
  1061  00FF93  53                 	db	83	;'S'
  1062  00FF94  70                 	db	112	;'p'
  1063  00FF95  72                 	db	114	;'r'
  1064  00FF96  69                 	db	105	;'i'
  1065  00FF97  6E                 	db	110	;'n'
  1066  00FF98  67                 	db	103	;'g'
  1067  00FF99  20                 	db	32
  1068  00FF9A  32                 	db	50	;'2'
  1069  00FF9B  32                 	db	50	;'2'
  1070  00FF9C  2D                 	db	45
  1071  00FF9D  53                 	db	83	;'S'
  1072  00FF9E  3F                 	db	63	;'?'
  1073  00FF9F  00                 	db	0
  1074  00FFA0                     STR_20:
  1075  00FFA0  30                 	db	48	;'0'
  1076  00FFA1  31                 	db	49	;'1'
  1077  00FFA2  32                 	db	50	;'2'
  1078  00FFA3  33                 	db	51	;'3'
  1079  00FFA4  34                 	db	52	;'4'
  1080  00FFA5  35                 	db	53	;'5'
  1081  00FFA6  36                 	db	54	;'6'
  1082  00FFA7  37                 	db	55	;'7'
  1083  00FFA8  38                 	db	56	;'8'
  1084  00FFA9  39                 	db	57	;'9'
  1085  00FFAA  61                 	db	97	;'a'
  1086  00FFAB  62                 	db	98	;'b'
  1087  00FFAC  63                 	db	99	;'c'
  1088  00FFAD  64                 	db	100	;'d'
  1089  00FFAE  65                 	db	101	;'e'
  1090  00FFAF  66                 	db	102	;'f'
  1091  00FFB0  00                 	db	0
  1092  00FFB1  4E                 	db	78	;'N'
  1093  00FFB2  45                 	db	69	;'E'
  1094  00FFB3  43                 	db	67	;'C'
  1095  00FFB4  5F                 	db	95	;'_'
  1096  00FFB5  43                 	db	67	;'C'
  1097  00FFB6  6F                 	db	111	;'o'
  1098  00FFB7  64                 	db	100	;'d'
  1099  00FFB8  65                 	db	101	;'e'
  1100  00FFB9  20                 	db	32
  1101  00FFBA  3D                 	db	61	;'='
  1102  00FFBB  20                 	db	32
  1103  00FFBC  25                 	db	37
  1104  00FFBD  78                 	db	120	;'x'
  1105  00FFBE  0D                 	db	13
  1106  00FFBF  0A                 	db	10
  1107  00FFC0  00                 	db	0
  1108  00FFC1                     STR_3:
  1109  00FFC1  52                 	db	82	;'R'
  1110  00FFC2  50                 	db	80	;'P'
  1111  00FFC3  4D                 	db	77	;'M'
  1112  00FFC4  3D                 	db	61	;'='
  1113  00FFC5  25                 	db	37
  1114  00FFC6  64                 	db	100	;'d'
  1115  00FFC7  20                 	db	32
  1116  00FFC8  44                 	db	68	;'D'
  1117  00FFC9  43                 	db	67	;'C'
  1118  00FFCA  3D                 	db	61	;'='
  1119  00FFCB  25                 	db	37
  1120  00FFCC  64                 	db	100	;'d'
  1121  00FFCD  0D                 	db	13
  1122  00FFCE  0A                 	db	10
  1123  00FFCF  00                 	db	0
  1124  00FFD0                     STR_8:
  1125  00FFD0  54                 	db	84	;'T'
  1126  00FFD1  65                 	db	101	;'e'
  1127  00FFD2  6D                 	db	109	;'m'
  1128  00FFD3  70                 	db	112	;'p'
  1129  00FFD4  65                 	db	101	;'e'
  1130  00FFD5  72                 	db	114	;'r'
  1131  00FFD6  61                 	db	97	;'a'
  1132  00FFD7  74                 	db	116	;'t'
  1133  00FFD8  75                 	db	117	;'u'
  1134  00FFD9  72                 	db	114	;'r'
  1135  00FFDA  65                 	db	101	;'e'
  1136  00FFDB  3A                 	db	58	;':'
  1137  00FFDC  00                 	db	0
  1138  00FFDD                     STR_13:
  1139  00FFDD  20                 	db	32
  1140  00FFDE  20                 	db	32
  1141  00FFDF  46                 	db	70	;'F'
  1142  00FFE0  41                 	db	65	;'A'
  1143  00FFE1  4E                 	db	78	;'N'
  1144  00FFE2  00                 	db	0
  1145  00FFE3                     STR_11:
  1146  00FFE3  54                 	db	84	;'T'
  1147  00FFE4  69                 	db	105	;'i'
  1148  00FFE5  6D                 	db	109	;'m'
  1149  00FFE6  65                 	db	101	;'e'
  1150  00FFE7  00                 	db	0
  1151  00FFE8                     STR_12:
  1152  00FFE8  44                 	db	68	;'D'
  1153  00FFE9  61                 	db	97	;'a'
  1154  00FFEA  74                 	db	116	;'t'
  1155  00FFEB  65                 	db	101	;'e'
  1156  00FFEC  00                 	db	0
  1157  00FFED                     STR_16:
  1158  00FFED  4F                 	db	79	;'O'
  1159  00FFEE  4E                 	db	78	;'N'
  1160  00FFEF  20                 	db	32
  1161  00FFF0  00                 	db	0
  1162  00FFF1                     STR_17:
  1163  00FFF1  4F                 	db	79	;'O'
  1164  00FFF2  46                 	db	70	;'F'
  1165  00FFF3  46                 	db	70	;'F'
  1166  00FFF4  00                 	db	0
  1167  00FFF5                     STR_15:
  1168  00FFF5  52                 	db	82	;'R'
  1169  00FFF6  50                 	db	80	;'P'
  1170  00FFF7  4D                 	db	77	;'M'
  1171  00FFF8  00                 	db	0
  1172  00FFF9                     STR_9:
  1173  00FFF9  43                 	db	67	;'C'
  1174  00FFFA  2F                 	db	47
  1175  00FFFB  00                 	db	0
  1176  00FFFC                     STR_14:
  1177  00FFFC  44                 	db	68	;'D'
  1178  00FFFD  43                 	db	67	;'C'
  1179  00FFFE  00                 	db	0
  1180  0000                     
  1181                           ; #config settings
  1182  00FFFF  00                 	db	0	; dummy byte at the end
  1183  0000                     
  1184                           	psect	cinit
  1185  001880                     __pcinit:
  1186                           	opt stack 0
  1187  001880                     start_initialization:
  1188                           	opt stack 0
  1189  001880                     __initialization:
  1190                           	opt stack 0
  1191                           
  1192                           ; Clear objects allocated to BANK0 (9 bytes)
  1193  001880  EE00  F0F5         	lfsr	0,__pbssBANK0
  1194  001884  0E09               	movlw	9
  1195  001886                     clear_0:
  1196  001886  6AEE               	clrf	postinc0,c
  1197  001888  06E8               	decf	wreg,f,c
  1198  00188A  E1FD               	bnz	clear_0
  1199                           
  1200                           ; Clear objects allocated to COMRAM (48 bytes)
  1201  00188C  EE00  F03F         	lfsr	0,__pbssCOMRAM
  1202  001890  0E30               	movlw	48
  1203  001892                     clear_1:
  1204  001892  6AEE               	clrf	postinc0,c
  1205  001894  06E8               	decf	wreg,f,c
  1206  001896  E1FD               	bnz	clear_1
  1207                           
  1208                           ; Initialize objects allocated to BANK1 (31 bytes)
  1209                           ; load TBLPTR registers with __pidataBANK1
  1210  001898  0E1A               	movlw	low __pidataBANK1
  1211  00189A  6EF6               	movwf	tblptrl,c
  1212  00189C  0E20               	movlw	high __pidataBANK1
  1213  00189E  6EF7               	movwf	tblptrh,c
  1214  0018A0  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1215  0018A2  6EF8               	movwf	tblptru,c
  1216  0018A4  EE01  F000         	lfsr	0,__pdataBANK1
  1217  0018A8  EE10 F01F          	lfsr	1,31
  1218  0018AC                     copy_data0:
  1219  0018AC  0009               	tblrd		*+
  1220  0018AE  CFF5 FFEE          	movff	tablat,postinc0
  1221  0018B2  50E5               	movf	postdec1,w,c
  1222  0018B4  50E1               	movf	fsr1l,w,c
  1223  0018B6  E1FA               	bnz	copy_data0
  1224                           
  1225                           ; Initialize objects allocated to BANK0 (117 bytes)
  1226                           ; load TBLPTR registers with __pidataBANK0
  1227  0018B8  0E00               	movlw	low __pidataBANK0
  1228  0018BA  6EF6               	movwf	tblptrl,c
  1229  0018BC  0E19               	movlw	high __pidataBANK0
  1230  0018BE  6EF7               	movwf	tblptrh,c
  1231  0018C0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1232  0018C2  6EF8               	movwf	tblptru,c
  1233  0018C4  EE00  F080         	lfsr	0,__pdataBANK0
  1234  0018C8  EE10 F075          	lfsr	1,117
  1235  0018CC                     copy_data1:
  1236  0018CC  0009               	tblrd		*+
  1237  0018CE  CFF5 FFEE          	movff	tablat,postinc0
  1238  0018D2  50E5               	movf	postdec1,w,c
  1239  0018D4  50E1               	movf	fsr1l,w,c
  1240  0018D6  E1FA               	bnz	copy_data1
  1241                           
  1242                           ; Initialize objects allocated to COMRAM (3 bytes)
  1243                           ; load TBLPTR registers with __pidataCOMRAM
  1244  0018D8  0E46               	movlw	low __pidataCOMRAM
  1245  0018DA  6EF6               	movwf	tblptrl,c
  1246  0018DC  0E22               	movlw	high __pidataCOMRAM
  1247  0018DE  6EF7               	movwf	tblptrh,c
  1248  0018E0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1249  0018E2  6EF8               	movwf	tblptru,c
  1250  0018E4  0009               	tblrd		*+	;fetch initializer
  1251  0018E6  CFF5 F06F          	movff	tablat,__pdataCOMRAM
  1252  0018EA  0009               	tblrd		*+	;fetch initializer
  1253  0018EC  CFF5 F070          	movff	tablat,__pdataCOMRAM+1
  1254  0018F0  0009               	tblrd		*+	;fetch initializer
  1255  0018F2  CFF5 F071          	movff	tablat,__pdataCOMRAM+2
  1256  0018F6                     end_of_initialization:
  1257                           	opt stack 0
  1258  0018F6                     __end_of__initialization:
  1259                           	opt stack 0
  1260  0018F6  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1261  0018F8  6EF8               	movwf	tblptru,c
  1262  0018FA  0100               	movlb	0
  1263  0018FC  EFA7  F005         	goto	_main	;jump to C main() function
  1264                           tblptru	equ	0xFF8
  1265                           tblptrh	equ	0xFF7
  1266                           tblptrl	equ	0xFF6
  1267                           tablat	equ	0xFF5
  1268                           postinc0	equ	0xFEE
  1269                           wreg	equ	0xFE8
  1270                           postdec1	equ	0xFE5
  1271                           fsr1l	equ	0xFE1
  1272                           
  1273                           	psect	bssCOMRAM
  1274  00003F                     __pbssCOMRAM:
  1275                           	opt stack 0
  1276  00003F                     _ALARMEN:
  1277                           	opt stack 0
  1278  00003F                     	ds	2
  1279  000041                     _DS1621_tempC:
  1280                           	opt stack 0
  1281  000041                     	ds	2
  1282  000043                     _DS1621_tempF:
  1283                           	opt stack 0
  1284  000043                     	ds	2
  1285  000045                     _alarm_mode:
  1286                           	opt stack 0
  1287  000045                     	ds	2
  1288  000047                     _nec_ok:
  1289                           	opt stack 0
  1290  000047                     	ds	2
  1291  000049                     _rpm:
  1292                           	opt stack 0
  1293  000049                     	ds	2
  1294  00004B                     _rps:
  1295                           	opt stack 0
  1296  00004B                     	ds	2
  1297  00004D                     _txt:
  1298                           	opt stack 0
  1299  00004D                     	ds	2
  1300  00004F                     _FAN:
  1301                           	opt stack 0
  1302  00004F                     	ds	1
  1303  000050                     _HEATER:
  1304                           	opt stack 0
  1305  000050                     	ds	1
  1306  000051                     _INT0_flag:
  1307                           	opt stack 0
  1308  000051                     	ds	1
  1309  000052                     _INT1_flag:
  1310                           	opt stack 0
  1311  000052                     	ds	1
  1312  000053                     _INT2_flag:
  1313                           	opt stack 0
  1314  000053                     	ds	1
  1315  000054                     _Nec_code1:
  1316                           	opt stack 0
  1317  000054                     	ds	1
  1318  000055                     _Nec_state:
  1319                           	opt stack 0
  1320  000055                     	ds	1
  1321  000056                     __tft_type:
  1322                           	opt stack 0
  1323  000056                     	ds	1
  1324  000057                     _alarm_date:
  1325                           	opt stack 0
  1326  000057                     	ds	1
  1327  000058                     _alarm_hour:
  1328                           	opt stack 0
  1329  000058                     	ds	1
  1330  000059                     _alarm_minute:
  1331                           	opt stack 0
  1332  000059                     	ds	1
  1333  00005A                     _alarm_second:
  1334                           	opt stack 0
  1335  00005A                     	ds	1
  1336  00005B                     _colstart:
  1337                           	opt stack 0
  1338  00005B                     	ds	1
  1339  00005C                     _day:
  1340                           	opt stack 0
  1341  00005C                     	ds	1
  1342  00005D                     _dow:
  1343                           	opt stack 0
  1344  00005D                     	ds	1
  1345  00005E                     _duty_cycle:
  1346                           	opt stack 0
  1347  00005E                     	ds	1
  1348  00005F                     _found:
  1349                           	opt stack 0
  1350  00005F                     	ds	1
  1351  000060                     _hour:
  1352                           	opt stack 0
  1353  000060                     	ds	1
  1354  000061                     _minute:
  1355                           	opt stack 0
  1356  000061                     	ds	1
  1357  000062                     _month:
  1358                           	opt stack 0
  1359  000062                     	ds	1
  1360  000063                     _rowstart:
  1361                           	opt stack 0
  1362  000063                     	ds	1
  1363  000064                     _second:
  1364                           	opt stack 0
  1365  000064                     	ds	1
  1366  000065                     _setup_alarm_hour:
  1367                           	opt stack 0
  1368  000065                     	ds	1
  1369  000066                     _setup_alarm_minute:
  1370                           	opt stack 0
  1371  000066                     	ds	1
  1372  000067                     _setup_alarm_second:
  1373                           	opt stack 0
  1374  000067                     	ds	1
  1375  000068                     _setup_day:
  1376                           	opt stack 0
  1377  000068                     	ds	1
  1378  000069                     _setup_hour:
  1379                           	opt stack 0
  1380  000069                     	ds	1
  1381  00006A                     _setup_minute:
  1382                           	opt stack 0
  1383  00006A                     	ds	1
  1384  00006B                     _setup_month:
  1385                           	opt stack 0
  1386  00006B                     	ds	1
  1387  00006C                     _setup_second:
  1388                           	opt stack 0
  1389  00006C                     	ds	1
  1390  00006D                     _setup_year:
  1391                           	opt stack 0
  1392  00006D                     	ds	1
  1393  00006E                     _year:
  1394                           	opt stack 0
  1395  00006E                     	ds	1
  1396                           tblptru	equ	0xFF8
  1397                           tblptrh	equ	0xFF7
  1398                           tblptrl	equ	0xFF6
  1399                           tablat	equ	0xFF5
  1400                           postinc0	equ	0xFEE
  1401                           wreg	equ	0xFE8
  1402                           postdec1	equ	0xFE5
  1403                           fsr1l	equ	0xFE1
  1404                           
  1405                           	psect	dataCOMRAM
  1406  00006F                     __pdataCOMRAM:
  1407                           	opt stack 0
  1408  00006F                     _heater_set_temp:
  1409                           	opt stack 0
  1410  00006F                     	ds	1
  1411  000070                     _tempSecond:
  1412                           	opt stack 0
  1413  000070                     	ds	1
  1414  000071                     _wrap:
  1415                           	opt stack 0
  1416  000071                     	ds	1
  1417                           tblptru	equ	0xFF8
  1418                           tblptrh	equ	0xFF7
  1419                           tblptrl	equ	0xFF6
  1420                           tablat	equ	0xFF5
  1421                           postinc0	equ	0xFEE
  1422                           wreg	equ	0xFE8
  1423                           postdec1	equ	0xFE5
  1424                           fsr1l	equ	0xFE1
  1425                           
  1426                           	psect	bssBANK0
  1427  0000F5                     __pbssBANK0:
  1428                           	opt stack 0
  1429  0000F5                     _volt:
  1430                           	opt stack 0
  1431  0000F5                     	ds	3
  1432  0000F8                     _MATCHED:
  1433                           	opt stack 0
  1434  0000F8                     	ds	2
  1435  0000FA                     _color:
  1436                           	opt stack 0
  1437  0000FA                     	ds	2
  1438  0000FC                     _nbr:
  1439                           	opt stack 0
  1440  0000FC                     	ds	2
  1441                           tblptru	equ	0xFF8
  1442                           tblptrh	equ	0xFF7
  1443                           tblptrl	equ	0xFF6
  1444                           tablat	equ	0xFF5
  1445                           postinc0	equ	0xFEE
  1446                           wreg	equ	0xFE8
  1447                           postdec1	equ	0xFE5
  1448                           fsr1l	equ	0xFE1
  1449                           
  1450                           	psect	dataBANK0
  1451  000080                     __pdataBANK0:
  1452                           	opt stack 0
  1453  000080                     _array1:
  1454                           	opt stack 0
  1455  000080                     	ds	21
  1456  000095                     _alarm_time:
  1457                           	opt stack 0
  1458  000095                     	ds	9
  1459  00009E                     _setup_alarm_time:
  1460                           	opt stack 0
  1461  00009E                     	ds	9
  1462  0000A7                     _setup_date:
  1463                           	opt stack 0
  1464  0000A7                     	ds	9
  1465  0000B0                     _setup_time:
  1466                           	opt stack 0
  1467  0000B0                     	ds	9
  1468  0000B9                     _D2:
  1469                           	opt stack 0
  1470  0000B9                     	ds	7
  1471  0000C0                     _Volt_Txt:
  1472                           	opt stack 0
  1473  0000C0                     	ds	5
  1474  0000C5                     _Alarm_SW_Txt:
  1475                           	opt stack 0
  1476  0000C5                     	ds	4
  1477  0000C9                     _Heater_Set_Temp_Txt:
  1478                           	opt stack 0
  1479  0000C9                     	ds	3
  1480  0000CC                     _RTC_ALARM_Txt:
  1481                           	opt stack 0
  1482  0000CC                     	ds	2
  1483  0000CE                     _date:
  1484                           	opt stack 0
  1485  0000CE                     	ds	9
  1486  0000D7                     _time:
  1487                           	opt stack 0
  1488  0000D7                     	ds	9
  1489  0000E0                     _RPM_Txt:
  1490                           	opt stack 0
  1491  0000E0                     	ds	5
  1492  0000E5                     _DC_Txt:
  1493                           	opt stack 0
  1494  0000E5                     	ds	4
  1495  0000E9                     _Fan_SW_Txt:
  1496                           	opt stack 0
  1497  0000E9                     	ds	4
  1498  0000ED                     _tempC:
  1499                           	opt stack 0
  1500  0000ED                     	ds	4
  1501  0000F1                     _tempF:
  1502                           	opt stack 0
  1503  0000F1                     	ds	4
  1504                           tblptru	equ	0xFF8
  1505                           tblptrh	equ	0xFF7
  1506                           tblptrl	equ	0xFF6
  1507                           tablat	equ	0xFF5
  1508                           postinc0	equ	0xFEE
  1509                           wreg	equ	0xFE8
  1510                           postdec1	equ	0xFE5
  1511                           fsr1l	equ	0xFE1
  1512                           
  1513                           	psect	dataBANK1
  1514  000100                     __pdataBANK1:
  1515                           	opt stack 0
  1516  000100                     _buffer:
  1517                           	opt stack 0
  1518  000100                     	ds	31
  1519                           tblptru	equ	0xFF8
  1520                           tblptrh	equ	0xFF7
  1521                           tblptrl	equ	0xFF6
  1522                           tablat	equ	0xFF5
  1523                           postinc0	equ	0xFEE
  1524                           wreg	equ	0xFE8
  1525                           postdec1	equ	0xFE5
  1526                           fsr1l	equ	0xFE1
  1527                           
  1528                           	psect	cstackBANK1
  1529  00011F                     __pcstackBANK1:
  1530                           	opt stack 0
  1531  00011F                     ??_do_update_pwm:
  1532  00011F                     drawtext@x:
  1533                           	opt stack 0
  1534                           
  1535                           ; 1 bytes @ 0x0
  1536  00011F                     	ds	1
  1537  000120                     drawtext@textsize:
  1538                           	opt stack 0
  1539                           
  1540                           ; 2 bytes @ 0x1
  1541  000120                     	ds	2
  1542  000122                     drawtext@i:
  1543                           	opt stack 0
  1544  000122                     do_update_pwm@dc_f:
  1545                           	opt stack 0
  1546                           
  1547                           ; 3 bytes @ 0x3
  1548  000122                     	ds	2
  1549  000124                     drawtext@cursor_y:
  1550                           	opt stack 0
  1551                           
  1552                           ; 1 bytes @ 0x5
  1553  000124                     	ds	1
  1554  000125                     drawtext@cursor_x:
  1555                           	opt stack 0
  1556  000125                     do_update_pwm@duty_cycle:
  1557                           	opt stack 0
  1558                           
  1559                           ; 1 bytes @ 0x6
  1560  000125                     	ds	1
  1561  000126                     ??_Update_Screen:
  1562  000126                     do_update_pwm@dc_I:
  1563                           	opt stack 0
  1564                           
  1565                           ; 2 bytes @ 0x7
  1566  000126                     	ds	2
  1567  000128                     Update_Screen@neg_tempF:
  1568                           	opt stack 0
  1569                           
  1570                           ; 2 bytes @ 0x9
  1571  000128                     	ds	2
  1572                           tblptru	equ	0xFF8
  1573                           tblptrh	equ	0xFF7
  1574                           tblptrl	equ	0xFF6
  1575                           tablat	equ	0xFF5
  1576                           postinc0	equ	0xFEE
  1577                           wreg	equ	0xFE8
  1578                           postdec1	equ	0xFE5
  1579                           fsr1l	equ	0xFE1
  1580                           
  1581                           	psect	cstackBANK0
  1582  0000FE                     __pcstackBANK0:
  1583                           	opt stack 0
  1584  0000FE                     ??_drawtext:
  1585                           
  1586                           ; 0 bytes @ 0x0
  1587  0000FE                     	ds	2
  1588                           tblptru	equ	0xFF8
  1589                           tblptrh	equ	0xFF7
  1590                           tblptrl	equ	0xFF6
  1591                           tablat	equ	0xFF5
  1592                           postinc0	equ	0xFEE
  1593                           wreg	equ	0xFE8
  1594                           postdec1	equ	0xFE5
  1595                           fsr1l	equ	0xFE1
  1596                           
  1597                           	psect	cstackCOMRAM
  1598  000001                     __pcstackCOMRAM:
  1599                           	opt stack 0
  1600  000001                     ??_chkisr:
  1601  000001                     
  1602                           ; 2 bytes @ 0x0
  1603  000001                     	ds	14
  1604  00000F                     ??_isdigit:
  1605  00000F                     ?_strlen:
  1606                           	opt stack 0
  1607  00000F                     ?___wmul:
  1608                           	opt stack 0
  1609  00000F                     ?___lwdiv:
  1610                           	opt stack 0
  1611  00000F                     ?___ftpack:
  1612                           	opt stack 0
  1613  00000F                     spiwrite@x:
  1614                           	opt stack 0
  1615  00000F                     I2C_Read@ack:
  1616                           	opt stack 0
  1617  00000F                     I2C_Write@outByte:
  1618                           	opt stack 0
  1619  00000F                     putch@c:
  1620                           	opt stack 0
  1621  00000F                     Wait_One_Second@k:
  1622                           	opt stack 0
  1623  00000F                     Wait_One_Sec@k:
  1624                           	opt stack 0
  1625  00000F                     OpenUSART@spbrg:
  1626                           	opt stack 0
  1627  00000F                     ___wmul@multiplier:
  1628                           	opt stack 0
  1629  00000F                     ___lwdiv@dividend:
  1630                           	opt stack 0
  1631  00000F                     strcpy@to:
  1632                           	opt stack 0
  1633  00000F                     strlen@s:
  1634                           	opt stack 0
  1635  00000F                     ___ftpack@arg:
  1636                           	opt stack 0
  1637  00000F                     I2C_Init@c:
  1638                           	opt stack 0
  1639                           
  1640                           ; 4 bytes @ 0xE
  1641  00000F                     	ds	1
  1642  000010                     spiwrite@spidata:
  1643                           	opt stack 0
  1644  000010                     I2C_Read@n:
  1645                           	opt stack 0
  1646  000010                     I2C_Write@n:
  1647                           	opt stack 0
  1648  000010                     _isdigit$2327:
  1649                           	opt stack 0
  1650                           
  1651                           ; 1 bytes @ 0xF
  1652  000010                     	ds	1
  1653  000011                     ??_strlen:
  1654  000011                     write_command@cmd_:
  1655                           	opt stack 0
  1656  000011                     write_data@data_:
  1657                           	opt stack 0
  1658  000011                     I2C_Read@inByte:
  1659                           	opt stack 0
  1660  000011                     I2C_Write_Cmd_Only@Cmd:
  1661                           	opt stack 0
  1662  000011                     I2C_Write_Cmd_Write_Data@Cmd:
  1663                           	opt stack 0
  1664  000011                     DS3231_Setup_Time@Address:
  1665                           	opt stack 0
  1666  000011                     OpenUSART@config:
  1667                           	opt stack 0
  1668  000011                     isdigit@c:
  1669                           	opt stack 0
  1670  000011                     ___wmul@multiplicand:
  1671                           	opt stack 0
  1672  000011                     ___lwdiv@divisor:
  1673                           	opt stack 0
  1674  000011                     strcpy@from:
  1675                           	opt stack 0
  1676                           
  1677                           ; 2 bytes @ 0x10
  1678  000011                     	ds	1
  1679  000012                     ?_DS1621_Read_Temp:
  1680                           	opt stack 0
  1681  000012                     setAddrWindow@y0:
  1682                           	opt stack 0
  1683  000012                     I2C_Write_Cmd_Only@Device:
  1684                           	opt stack 0
  1685  000012                     I2C_Write_Cmd_Write_Data@Data_Out:
  1686                           	opt stack 0
  1687  000012                     DS3231_Read_Time@Address:
  1688                           	opt stack 0
  1689  000012                     DS3231_Setup_Time@Device:
  1690                           	opt stack 0
  1691  000012                     ___ftpack@exp:
  1692                           	opt stack 0
  1693                           
  1694                           ; 1 bytes @ 0x11
  1695  000012                     	ds	1
  1696  000013                     setAddrWindow@x1:
  1697                           	opt stack 0
  1698  000013                     I2C_Write_Cmd_Write_Data@Device:
  1699                           	opt stack 0
  1700  000013                     DS3231_Read_Time@Device:
  1701                           	opt stack 0
  1702  000013                     ___ftpack@sign:
  1703                           	opt stack 0
  1704  000013                     ___wmul@product:
  1705                           	opt stack 0
  1706  000013                     ___lwdiv@quotient:
  1707                           	opt stack 0
  1708  000013                     strcpy@cp:
  1709                           	opt stack 0
  1710  000013                     strlen@cp:
  1711                           	opt stack 0
  1712                           
  1713                           ; 2 bytes @ 0x12
  1714  000013                     	ds	1
  1715  000014                     ??___ftpack:
  1716  000014                     setAddrWindow@y1:
  1717                           	opt stack 0
  1718  000014                     DS1621_Read_Temp@Cmd:
  1719                           	opt stack 0
  1720  000014                     DS1621_Init@Device:
  1721                           	opt stack 0
  1722                           
  1723                           ; 1 bytes @ 0x13
  1724  000014                     	ds	1
  1725  000015                     ?___awdiv:
  1726                           	opt stack 0
  1727  000015                     setAddrWindow@x0:
  1728                           	opt stack 0
  1729  000015                     DS1621_Read_Temp@Data_Ret:
  1730                           	opt stack 0
  1731  000015                     ___lwdiv@counter:
  1732                           	opt stack 0
  1733  000015                     delay_ms@ms:
  1734                           	opt stack 0
  1735  000015                     ___awdiv@dividend:
  1736                           	opt stack 0
  1737                           
  1738                           ; 2 bytes @ 0x14
  1739  000015                     	ds	1
  1740  000016                     ?___lwmod:
  1741                           	opt stack 0
  1742  000016                     drawPixel@y:
  1743                           	opt stack 0
  1744  000016                     drawFastVLine@y:
  1745                           	opt stack 0
  1746  000016                     fillRectangle@y:
  1747                           	opt stack 0
  1748  000016                     DS1621_Read_Temp@Device:
  1749                           	opt stack 0
  1750  000016                     ___lwmod@dividend:
  1751                           	opt stack 0
  1752                           
  1753                           ; 2 bytes @ 0x15
  1754  000016                     	ds	1
  1755  000017                     ??_delay_ms:
  1756  000017                     ?___lbtoft:
  1757                           	opt stack 0
  1758  000017                     drawFastVLine@h:
  1759                           	opt stack 0
  1760  000017                     fillRectangle@w:
  1761                           	opt stack 0
  1762  000017                     drawPixel@color:
  1763                           	opt stack 0
  1764  000017                     ___awdiv@divisor:
  1765                           	opt stack 0
  1766                           
  1767                           ; 2 bytes @ 0x16
  1768  000017                     	ds	1
  1769  000018                     fillRectangle@h:
  1770                           	opt stack 0
  1771  000018                     drawFastVLine@color:
  1772                           	opt stack 0
  1773  000018                     ___lwmod@divisor:
  1774                           	opt stack 0
  1775                           
  1776                           ; 2 bytes @ 0x17
  1777  000018                     	ds	1
  1778  000019                     drawPixel@x:
  1779                           	opt stack 0
  1780  000019                     ___awdiv@counter:
  1781                           	opt stack 0
  1782  000019                     delay_ms@count:
  1783                           	opt stack 0
  1784  000019                     fillRectangle@color:
  1785                           	opt stack 0
  1786                           
  1787                           ; 2 bytes @ 0x18
  1788  000019                     	ds	1
  1789  00001A                     ??_drawFastVLine:
  1790  00001A                     ___awdiv@sign:
  1791                           	opt stack 0
  1792  00001A                     ___lbtoft@c:
  1793                           	opt stack 0
  1794  00001A                     ___lwmod@counter:
  1795                           	opt stack 0
  1796  00001A                     drawCircle@x0:
  1797                           	opt stack 0
  1798                           
  1799                           ; 2 bytes @ 0x19
  1800  00001A                     	ds	1
  1801  00001B                     ??_fillRectangle:
  1802  00001B                     ?_printf:
  1803                           	opt stack 0
  1804  00001B                     ?___ftmul:
  1805                           	opt stack 0
  1806  00001B                     printf@f:
  1807                           	opt stack 0
  1808  00001B                     ___awdiv@quotient:
  1809                           	opt stack 0
  1810  00001B                     ___ftmul@f1:
  1811                           	opt stack 0
  1812                           
  1813                           ; 3 bytes @ 0x1A
  1814  00001B                     	ds	1
  1815  00001C                     drawCircle@y0:
  1816                           	opt stack 0
  1817                           
  1818                           ; 2 bytes @ 0x1B
  1819  00001C                     	ds	1
  1820  00001D                     ?___awmod:
  1821                           	opt stack 0
  1822  00001D                     Set_DC_RGB@duty_cycle:
  1823                           	opt stack 0
  1824  00001D                     Set_RPM_RGB@rpm:
  1825                           	opt stack 0
  1826  00001D                     ___awmod@dividend:
  1827                           	opt stack 0
  1828                           
  1829                           ; 2 bytes @ 0x1C
  1830  00001D                     	ds	1
  1831  00001E                     drawFastVLine@hi:
  1832                           	opt stack 0
  1833  00001E                     drawCircle@r:
  1834                           	opt stack 0
  1835  00001E                     ___ftmul@f2:
  1836                           	opt stack 0
  1837                           
  1838                           ; 3 bytes @ 0x1D
  1839  00001E                     	ds	1
  1840  00001F                     ??_Set_DC_RGB:
  1841  00001F                     drawFastVLine@lo:
  1842                           	opt stack 0
  1843  00001F                     fillRectangle@hi:
  1844                           	opt stack 0
  1845  00001F                     ___awmod@divisor:
  1846                           	opt stack 0
  1847                           
  1848                           ; 2 bytes @ 0x1E
  1849  00001F                     	ds	1
  1850  000020                     drawFastVLine@x:
  1851                           	opt stack 0
  1852  000020                     fillRectangle@lo:
  1853                           	opt stack 0
  1854  000020                     drawCircle@color:
  1855                           	opt stack 0
  1856                           
  1857                           ; 2 bytes @ 0x1F
  1858  000020                     	ds	1
  1859  000021                     ??___ftmul:
  1860  000021                     fillRect@y:
  1861                           	opt stack 0
  1862  000021                     fillRectangle@x:
  1863                           	opt stack 0
  1864  000021                     ___awmod@counter:
  1865                           	opt stack 0
  1866  000021                     Set_DC_RGB@num:
  1867                           	opt stack 0
  1868                           
  1869                           ; 2 bytes @ 0x20
  1870  000021                     	ds	1
  1871  000022                     ??_drawCircle:
  1872  000022                     fillRect@w:
  1873                           	opt stack 0
  1874  000022                     ___awmod@sign:
  1875                           	opt stack 0
  1876  000022                     fillScreen@color:
  1877                           	opt stack 0
  1878                           
  1879                           ; 2 bytes @ 0x21
  1880  000022                     	ds	1
  1881  000023                     fillRect@h:
  1882                           	opt stack 0
  1883                           
  1884                           ; 1 bytes @ 0x22
  1885  000023                     	ds	1
  1886  000024                     ___ftmul@exp:
  1887                           	opt stack 0
  1888  000024                     fillRect@color:
  1889                           	opt stack 0
  1890  000024                     drawCircle@ddF_x:
  1891                           	opt stack 0
  1892                           
  1893                           ; 2 bytes @ 0x23
  1894  000024                     	ds	1
  1895  000025                     ___ftmul@f3_as_product:
  1896                           	opt stack 0
  1897                           
  1898                           ; 3 bytes @ 0x24
  1899  000025                     	ds	1
  1900  000026                     ??_fillRect:
  1901  000026                     drawCircle@ddF_y:
  1902                           	opt stack 0
  1903                           
  1904                           ; 2 bytes @ 0x25
  1905  000026                     	ds	2
  1906  000028                     ___ftmul@cntr:
  1907                           	opt stack 0
  1908  000028                     drawCircle@f:
  1909                           	opt stack 0
  1910                           
  1911                           ; 2 bytes @ 0x27
  1912  000028                     	ds	1
  1913  000029                     ??_printf:
  1914  000029                     fillRect@x:
  1915                           	opt stack 0
  1916  000029                     ___ftmul@sign:
  1917                           	opt stack 0
  1918                           
  1919                           ; 1 bytes @ 0x28
  1920  000029                     	ds	1
  1921  00002A                     ?___ftdiv:
  1922                           	opt stack 0
  1923  00002A                     ?_get_RPM:
  1924                           	opt stack 0
  1925  00002A                     fillRect@i:
  1926                           	opt stack 0
  1927  00002A                     drawCircle@x:
  1928                           	opt stack 0
  1929  00002A                     ___ftdiv@f1:
  1930                           	opt stack 0
  1931                           
  1932                           ; 3 bytes @ 0x29
  1933  00002A                     	ds	2
  1934  00002C                     drawChar@y:
  1935                           	opt stack 0
  1936  00002C                     drawCircle@y:
  1937                           	opt stack 0
  1938                           
  1939                           ; 2 bytes @ 0x2B
  1940  00002C                     	ds	1
  1941  00002D                     drawChar@c:
  1942                           	opt stack 0
  1943  00002D                     printf@idx:
  1944                           	opt stack 0
  1945  00002D                     get_RPM@RPS:
  1946                           	opt stack 0
  1947  00002D                     ___ftdiv@f2:
  1948                           	opt stack 0
  1949                           
  1950                           ; 3 bytes @ 0x2C
  1951  00002D                     	ds	1
  1952  00002E                     drawChar@color:
  1953                           	opt stack 0
  1954  00002E                     printf@ap:
  1955                           	opt stack 0
  1956                           
  1957                           ; 2 bytes @ 0x2D
  1958  00002E                     	ds	2
  1959  000030                     ??___ftdiv:
  1960  000030                     ?___fttol:
  1961                           	opt stack 0
  1962  000030                     printf@prec:
  1963                           	opt stack 0
  1964  000030                     drawChar@bg:
  1965                           	opt stack 0
  1966  000030                     ___fttol@f1:
  1967                           	opt stack 0
  1968                           
  1969                           ; 3 bytes @ 0x2F
  1970  000030                     	ds	1
  1971  000031                     printf@val:
  1972                           	opt stack 0
  1973                           
  1974                           ; 2 bytes @ 0x30
  1975  000031                     	ds	1
  1976  000032                     drawChar@size:
  1977                           	opt stack 0
  1978                           
  1979                           ; 1 bytes @ 0x31
  1980  000032                     	ds	1
  1981  000033                     drawChar@line:
  1982                           	opt stack 0
  1983  000033                     printf@flag:
  1984                           	opt stack 0
  1985  000033                     ___ftdiv@cntr:
  1986                           	opt stack 0
  1987                           
  1988                           ; 1 bytes @ 0x32
  1989  000033                     	ds	1
  1990  000034                     ??___fttol:
  1991  000034                     drawChar@x:
  1992                           	opt stack 0
  1993  000034                     printf@width:
  1994                           	opt stack 0
  1995  000034                     ___ftdiv@f3:
  1996                           	opt stack 0
  1997                           
  1998                           ; 3 bytes @ 0x33
  1999  000034                     	ds	1
  2000  000035                     drawChar@j:
  2001                           	opt stack 0
  2002                           
  2003                           ; 1 bytes @ 0x34
  2004  000035                     	ds	1
  2005  000036                     drawChar@i:
  2006                           	opt stack 0
  2007  000036                     printf@c:
  2008                           	opt stack 0
  2009                           
  2010                           ; 1 bytes @ 0x35
  2011  000036                     	ds	1
  2012  000037                     drawtext@y:
  2013                           	opt stack 0
  2014  000037                     ___ftdiv@exp:
  2015                           	opt stack 0
  2016                           
  2017                           ; 1 bytes @ 0x36
  2018  000037                     	ds	1
  2019  000038                     ___ftdiv@sign:
  2020                           	opt stack 0
  2021  000038                     drawtext@_text:
  2022                           	opt stack 0
  2023                           
  2024                           ; 2 bytes @ 0x37
  2025  000038                     	ds	1
  2026  000039                     ___fttol@sign1:
  2027                           	opt stack 0
  2028                           
  2029                           ; 1 bytes @ 0x38
  2030  000039                     	ds	1
  2031  00003A                     drawtext@color:
  2032                           	opt stack 0
  2033  00003A                     ___fttol@lval:
  2034                           	opt stack 0
  2035                           
  2036                           ; 4 bytes @ 0x39
  2037  00003A                     	ds	2
  2038  00003C                     drawtext@bg:
  2039                           	opt stack 0
  2040                           
  2041                           ; 2 bytes @ 0x3B
  2042  00003C                     	ds	2
  2043  00003E                     drawtext@size:
  2044                           	opt stack 0
  2045  00003E                     ___fttol@exp1:
  2046                           	opt stack 0
  2047                           
  2048                           ; 1 bytes @ 0x3D
  2049  00003E                     	ds	1
  2050  00003F                     tblptru	equ	0xFF8
  2051                           tblptrh	equ	0xFF7
  2052                           tblptrl	equ	0xFF6
  2053                           tablat	equ	0xFF5
  2054                           postinc0	equ	0xFEE
  2055                           wreg	equ	0xFE8
  2056                           postdec1	equ	0xFE5
  2057                           fsr1l	equ	0xFE1
  2058                           
  2059                           ; 0 bytes @ 0x3E
  2060 ;;
  2061 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2062 ;;
  2063 ;; *************** function _main *****************
  2064 ;; Defined at:
  2065 ;;		line 111 in file "Lab9_11.c"
  2066 ;; Parameters:    Size  Location     Type
  2067 ;;		None
  2068 ;; Auto vars:     Size  Location     Type
  2069 ;;		None
  2070 ;; Return value:  Size  Location     Type
  2071 ;;		None               void
  2072 ;; Registers used:
  2073 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2074 ;; Tracked objects:
  2075 ;;		On entry : 0/0
  2076 ;;		On exit  : 0/0
  2077 ;;		Unchanged: 0/0
  2078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2083 ;;Total ram usage:        0 bytes
  2084 ;; Hardware stack levels required when called:   10
  2085 ;; This function calls:
  2086 ;;		_DS1621_Read_Temp
  2087 ;;		_DS3231_Read_Time
  2088 ;;		_DS3231_Setup_Time
  2089 ;;		_Decrease_Speed
  2090 ;;		_Do_Init
  2091 ;;		_Increase_Speed
  2092 ;;		_Initialize_Screen
  2093 ;;		_Set_DC_RGB
  2094 ;;		_Set_RPM_RGB
  2095 ;;		_Toggle_Fan
  2096 ;;		_Update_Screen
  2097 ;;		___awdiv
  2098 ;;		___fttol
  2099 ;;		___wmul
  2100 ;;		_do_update_pwm
  2101 ;;		_get_RPM
  2102 ;;		_printf
  2103 ;; This function is called by:
  2104 ;;		Startup code after reset
  2105 ;; This function uses a non-reentrant model
  2106 ;;
  2107                           
  2108                           	psect	text0
  2109  000B4E                     __ptext0:
  2110                           	opt stack 0
  2111  000B4E                     _main:
  2112                           	opt stack 21
  2113                           
  2114                           ;Lab9_11.c: 113: Do_Init();
  2115                           
  2116                           ;incstack = 0
  2117  000B4E  ECC2  F00E         	call	_Do_Init	;wreg free
  2118                           
  2119                           ;Lab9_11.c: 114: Initialize_Screen();
  2120  000B52  EC9B  F003         	call	_Initialize_Screen	;wreg free
  2121                           
  2122                           ;Lab9_11.c: 115: DS3231_Setup_Time();
  2123  000B56  EC58  F00D         	call	_DS3231_Setup_Time	;wreg free
  2124                           
  2125                           ;Lab9_11.c: 116: PORTAbits.RA5 = 1;
  2126  000B5A  8A80               	bsf	3968,5,c	;volatile
  2127                           
  2128                           ;Lab9_11.c: 117: FAN=1;
  2129  000B5C  0E01               	movlw	1
  2130  000B5E  6E4F               	movwf	_FAN,c
  2131                           
  2132                           ;Lab9_11.c: 118: PORTCbits.RC2 = 1;
  2133  000B60  8482               	bsf	3970,2,c	;volatile
  2134                           
  2135                           ;Lab9_11.c: 119: duty_cycle = 50;
  2136  000B62  0E32               	movlw	50
  2137  000B64  6E5E               	movwf	_duty_cycle,c
  2138                           
  2139                           ;Lab9_11.c: 120: do_update_pwm(duty_cycle);
  2140  000B66  505E               	movf	_duty_cycle,w,c
  2141  000B68  EC5F  F00A         	call	_do_update_pwm
  2142  000B6C  D000               	goto	l6356
  2143  000B6E                     l6356:
  2144                           
  2145                           ;Lab9_11.c: 123: {
  2146                           ;Lab9_11.c: 124: DS3231_Read_Time();
  2147  000B6E  EC26  F00D         	call	_DS3231_Read_Time	;wreg free
  2148                           
  2149                           ;Lab9_11.c: 126: if(tempSecond != second)
  2150  000B72  5064               	movf	_second,w,c
  2151  000B74  1870               	xorwf	_tempSecond,w,c
  2152  000B76  B4D8               	btfsc	status,2,c
  2153  000B78  D071               	goto	l6380
  2154                           
  2155                           ;Lab9_11.c: 127: {
  2156                           ;Lab9_11.c: 128: tempSecond = second;
  2157  000B7A  C064  F070         	movff	_second,_tempSecond
  2158                           
  2159                           ;Lab9_11.c: 129: DS1621_tempC = DS1621_Read_Temp();
  2160  000B7E  EC41  F00F         	call	_DS1621_Read_Temp	;wreg free
  2161  000B82  C012  F041         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2162  000B86  C013  F042         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2163                           
  2164                           ;Lab9_11.c: 130: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2165  000B8A  C041  F00F         	movff	_DS1621_tempC,___wmul@multiplier
  2166  000B8E  C042  F010         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2167  000B92  0E00               	movlw	0
  2168  000B94  6E12               	movwf	___wmul@multiplicand+1,c
  2169  000B96  0E09               	movlw	9
  2170  000B98  6E11               	movwf	___wmul@multiplicand,c
  2171  000B9A  ECA5  F00F         	call	___wmul	;wreg free
  2172  000B9E  C00F  F015         	movff	?___wmul,___awdiv@dividend
  2173  000BA2  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  2174  000BA6  0E00               	movlw	0
  2175  000BA8  6E18               	movwf	___awdiv@divisor+1,c
  2176  000BAA  0E05               	movlw	5
  2177  000BAC  6E17               	movwf	___awdiv@divisor,c
  2178  000BAE  EC2D  F00B         	call	___awdiv	;wreg free
  2179  000BB2  0E20               	movlw	32
  2180  000BB4  2415               	addwf	?___awdiv,w,c
  2181  000BB6  6E43               	movwf	_DS1621_tempF,c
  2182  000BB8  0E00               	movlw	0
  2183  000BBA  2016               	addwfc	?___awdiv+1,w,c
  2184  000BBC  6E44               	movwf	_DS1621_tempF+1,c
  2185                           
  2186                           ;Lab9_11.c: 131: rpm = get_RPM();
  2187  000BBE  EC54  F00E         	call	_get_RPM	;wreg free
  2188  000BC2  C02A  F030         	movff	?_get_RPM,___fttol@f1
  2189  000BC6  C02B  F031         	movff	?_get_RPM+1,___fttol@f1+1
  2190  000BCA  C02C  F032         	movff	?_get_RPM+2,___fttol@f1+2
  2191  000BCE  EC0D  F009         	call	___fttol	;wreg free
  2192  000BD2  C030  F049         	movff	?___fttol,_rpm
  2193  000BD6  C031  F04A         	movff	?___fttol+1,_rpm+1
  2194                           
  2195                           ;Lab9_11.c: 132: Set_DC_RGB(duty_cycle);
  2196  000BDA  C05E  F01D         	movff	_duty_cycle,Set_DC_RGB@duty_cycle
  2197  000BDE  6A1E               	clrf	Set_DC_RGB@duty_cycle+1,c
  2198  000BE0  ECF3  F00C         	call	_Set_DC_RGB	;wreg free
  2199                           
  2200                           ;Lab9_11.c: 133: Set_RPM_RGB(rpm);
  2201  000BE4  C049  F01D         	movff	_rpm,Set_RPM_RGB@rpm
  2202  000BE8  C04A  F01E         	movff	_rpm+1,Set_RPM_RGB@rpm+1
  2203  000BEC  ECDF  F00D         	call	_Set_RPM_RGB	;wreg free
  2204                           
  2205                           ;Lab9_11.c: 134: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,ye
      +                          ar);
  2206  000BF0  0E56               	movlw	low STR_1
  2207  000BF2  6E1B               	movwf	printf@f,c
  2208  000BF4  0EFF               	movlw	high STR_1
  2209  000BF6  6E1C               	movwf	printf@f+1,c
  2210  000BF8  C060  F01D         	movff	_hour,?_printf+2
  2211  000BFC  6A1E               	clrf	?_printf+3,c
  2212  000BFE  C061  F01F         	movff	_minute,?_printf+4
  2213  000C02  6A20               	clrf	?_printf+5,c
  2214  000C04  C064  F021         	movff	_second,?_printf+6
  2215  000C08  6A22               	clrf	?_printf+7,c
  2216  000C0A  C062  F023         	movff	_month,?_printf+8
  2217  000C0E  6A24               	clrf	?_printf+9,c
  2218  000C10  C05C  F025         	movff	_day,?_printf+10
  2219  000C14  6A26               	clrf	?_printf+11,c
  2220  000C16  C06E  F027         	movff	_year,?_printf+12
  2221  000C1A  6A28               	clrf	?_printf+13,c
  2222  000C1C  ECEE  F001         	call	_printf	;wreg free
  2223                           
  2224                           ;Lab9_11.c: 135: printf (" Temperature = %d degreesC = %d degreesF\r\n", DS1621_tempC, D
      +                          S1621_tempF);
  2225  000C20  0ECE               	movlw	low STR_2
  2226  000C22  6E1B               	movwf	printf@f,c
  2227  000C24  0EFE               	movlw	high STR_2
  2228  000C26  6E1C               	movwf	printf@f+1,c
  2229  000C28  C041  F01D         	movff	_DS1621_tempC,?_printf+2
  2230  000C2C  C042  F01E         	movff	_DS1621_tempC+1,?_printf+3
  2231  000C30  C043  F01F         	movff	_DS1621_tempF,?_printf+4
  2232  000C34  C044  F020         	movff	_DS1621_tempF+1,?_printf+5
  2233  000C38  ECEE  F001         	call	_printf	;wreg free
  2234                           
  2235                           ;Lab9_11.c: 136: printf("RPM=%d DC=%d\r\n",rpm,duty_cycle);
  2236  000C3C  0EC1               	movlw	low STR_3
  2237  000C3E  6E1B               	movwf	printf@f,c
  2238  000C40  0EFF               	movlw	high STR_3
  2239  000C42  6E1C               	movwf	printf@f+1,c
  2240  000C44  C049  F01D         	movff	_rpm,?_printf+2
  2241  000C48  C04A  F01E         	movff	_rpm+1,?_printf+3
  2242  000C4C  C05E  F01F         	movff	_duty_cycle,?_printf+4
  2243  000C50  6A20               	clrf	?_printf+5,c
  2244  000C52  ECEE  F001         	call	_printf	;wreg free
  2245                           
  2246                           ;Lab9_11.c: 137: Update_Screen();
  2247  000C56  EC0E  F000         	call	_Update_Screen	;wreg free
  2248  000C5A  D000               	goto	l6380
  2249  000C5C                     l6380:
  2250                           
  2251                           ;Lab9_11.c: 138: }
  2252                           ;Lab9_11.c: 140: if(INT0_flag == 1){
  2253  000C5C  0451               	decf	_INT0_flag,w,c
  2254  000C5E  A4D8               	btfss	status,2,c
  2255  000C60  D00B               	goto	l6388
  2256                           
  2257                           ;Lab9_11.c: 141: INT0_flag = 0;
  2258  000C62  0E00               	movlw	0
  2259  000C64  6E51               	movwf	_INT0_flag,c
  2260                           
  2261                           ;Lab9_11.c: 142: printf ("INT0 interrupt pin detected \r\n");
  2262  000C66  0EF9               	movlw	low STR_4
  2263  000C68  6E1B               	movwf	printf@f,c
  2264  000C6A  0EFE               	movlw	high STR_4
  2265  000C6C  6E1C               	movwf	printf@f+1,c
  2266  000C6E  ECEE  F001         	call	_printf	;wreg free
  2267                           
  2268                           ;Lab9_11.c: 143: Toggle_Fan();
  2269  000C72  EC87  F010         	call	_Toggle_Fan	;wreg free
  2270  000C76  D000               	goto	l6388
  2271  000C78                     l6388:
  2272                           
  2273                           ;Lab9_11.c: 144: }
  2274                           ;Lab9_11.c: 145: if (INT1_flag == 1){
  2275  000C78  0452               	decf	_INT1_flag,w,c
  2276  000C7A  A4D8               	btfss	status,2,c
  2277  000C7C  D00B               	goto	l6396
  2278                           
  2279                           ;Lab9_11.c: 146: INT1_flag = 0;
  2280  000C7E  0E00               	movlw	0
  2281  000C80  6E52               	movwf	_INT1_flag,c
  2282                           
  2283                           ;Lab9_11.c: 147: printf ("INT1 interrupt pin detected \r\n");
  2284  000C82  0E18               	movlw	low STR_5
  2285  000C84  6E1B               	movwf	printf@f,c
  2286  000C86  0EFF               	movlw	high STR_5
  2287  000C88  6E1C               	movwf	printf@f+1,c
  2288  000C8A  ECEE  F001         	call	_printf	;wreg free
  2289                           
  2290                           ;Lab9_11.c: 148: Increase_Speed();
  2291  000C8E  EC1D  F010         	call	_Increase_Speed	;wreg free
  2292  000C92  D000               	goto	l6396
  2293  000C94                     l6396:
  2294                           
  2295                           ;Lab9_11.c: 149: }
  2296                           ;Lab9_11.c: 150: if (INT2_flag == 1){
  2297  000C94  0453               	decf	_INT2_flag,w,c
  2298  000C96  A4D8               	btfss	status,2,c
  2299  000C98  D76A               	goto	l6356
  2300                           
  2301                           ;Lab9_11.c: 151: INT2_flag = 0;
  2302  000C9A  0E00               	movlw	0
  2303  000C9C  6E53               	movwf	_INT2_flag,c
  2304                           
  2305                           ;Lab9_11.c: 152: printf ("INT2 interrupt pin detected \r\n");
  2306  000C9E  0E37               	movlw	low STR_6
  2307  000CA0  6E1B               	movwf	printf@f,c
  2308  000CA2  0EFF               	movlw	high STR_6
  2309  000CA4  6E1C               	movwf	printf@f+1,c
  2310  000CA6  ECEE  F001         	call	_printf	;wreg free
  2311                           
  2312                           ;Lab9_11.c: 153: Decrease_Speed();
  2313  000CAA  EC3B  F010         	call	_Decrease_Speed	;wreg free
  2314  000CAE  D75F               	goto	l6356
  2315  000CB0  EF0C  F000         	goto	start
  2316  000CB4                     __end_of_main:
  2317                           	opt stack 0
  2318                           tblptru	equ	0xFF8
  2319                           tblptrh	equ	0xFF7
  2320                           tblptrl	equ	0xFF6
  2321                           tablat	equ	0xFF5
  2322                           postinc0	equ	0xFEE
  2323                           wreg	equ	0xFE8
  2324                           postdec1	equ	0xFE5
  2325                           fsr1l	equ	0xFE1
  2326                           status	equ	0xFD8
  2327                           
  2328 ;; *************** function _printf *****************
  2329 ;; Defined at:
  2330 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2331 ;; Parameters:    Size  Location     Type
  2332 ;;  f               2   26[COMRAM] PTR const unsigned char 
  2333 ;;		 -> STR_19(22), STR_18(16), STR_6(31), STR_5(31), 
  2334 ;;		 -> STR_4(31), STR_3(15), STR_2(43), STR_1(30), 
  2335 ;; Auto vars:     Size  Location     Type
  2336 ;;  idx             1   44[COMRAM] unsigned char 
  2337 ;;  tmpval          4    0        struct .
  2338 ;;  cp              3    0        PTR const unsigned char 
  2339 ;;  width           2   51[COMRAM] int 
  2340 ;;  val             2   48[COMRAM] unsigned int 
  2341 ;;  ap              2   45[COMRAM] PTR void [1]
  2342 ;;		 -> ?_printf(2), 
  2343 ;;  len             2    0        unsigned int 
  2344 ;;  c               1   53[COMRAM] char 
  2345 ;;  flag            1   50[COMRAM] unsigned char 
  2346 ;;  prec            1   47[COMRAM] char 
  2347 ;; Return value:  Size  Location     Type
  2348 ;;                  2   26[COMRAM] int 
  2349 ;; Registers used:
  2350 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2351 ;; Tracked objects:
  2352 ;;		On entry : 0/0
  2353 ;;		On exit  : 0/0
  2354 ;;		Unchanged: 0/0
  2355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2356 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2357 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2358 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2359 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2360 ;;Total ram usage:       28 bytes
  2361 ;; Hardware stack levels used:    1
  2362 ;; Hardware stack levels required when called:    3
  2363 ;; This function calls:
  2364 ;;		___lwdiv
  2365 ;;		___lwmod
  2366 ;;		___wmul
  2367 ;;		_isdigit
  2368 ;;		_putch
  2369 ;; This function is called by:
  2370 ;;		_main
  2371 ;;		_check_for_button_input
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375                           	psect	text1
  2376  0003DC                     __ptext1:
  2377                           	opt stack 0
  2378  0003DC                     _printf:
  2379                           	opt stack 27
  2380                           
  2381                           ;doprnt.c: 466: va_list ap;
  2382                           ;doprnt.c: 499: signed char c;
  2383                           ;doprnt.c: 501: int width;
  2384                           ;doprnt.c: 506: signed char prec;
  2385                           ;doprnt.c: 508: unsigned char flag;
  2386                           ;doprnt.c: 523: union {
  2387                           ;doprnt.c: 524: unsigned long vd;
  2388                           ;doprnt.c: 525: double integ;
  2389                           ;doprnt.c: 526: } tmpval;
  2390                           ;doprnt.c: 528: unsigned int val;
  2391                           ;doprnt.c: 529: unsigned len;
  2392                           ;doprnt.c: 530: const char * cp;
  2393                           ;doprnt.c: 533: *ap = __va_start();
  2394                           
  2395                           ;incstack = 0
  2396  0003DC  0E1D               	movlw	low (?_printf+2)
  2397  0003DE  6E2E               	movwf	printf@ap,c
  2398  0003E0  0E00               	movlw	high (?_printf+2)
  2399  0003E2  6E2F               	movwf	printf@ap+1,c
  2400                           
  2401                           ;doprnt.c: 536: while(c = *f++) {
  2402  0003E4  D199               	goto	l6010
  2403  0003E6                     l5884:
  2404                           
  2405                           ;doprnt.c: 538: if(c != '%')
  2406  0003E6  0E25               	movlw	37
  2407  0003E8  1836               	xorwf	printf@c,w,c
  2408  0003EA  B4D8               	btfsc	status,2,c
  2409  0003EC  D004               	goto	l5888
  2410                           
  2411                           ;doprnt.c: 540: {
  2412                           ;doprnt.c: 541: (putch(c) );
  2413  0003EE  5036               	movf	printf@c,w,c
  2414  0003F0  ECEA  F010         	call	_putch
  2415                           
  2416                           ;doprnt.c: 542: continue;
  2417  0003F4  D191               	goto	l6010
  2418  0003F6                     l5888:
  2419                           
  2420                           ;doprnt.c: 543: }
  2421                           ;doprnt.c: 546: width = 0;
  2422  0003F6  0E00               	movlw	0
  2423  0003F8  6E35               	movwf	printf@width+1,c
  2424  0003FA  0E00               	movlw	0
  2425  0003FC  6E34               	movwf	printf@width,c
  2426                           
  2427                           ;doprnt.c: 548: flag = 0;
  2428  0003FE  0E00               	movlw	0
  2429  000400  6E33               	movwf	printf@flag,c
  2430                           
  2431                           ;doprnt.c: 551: switch(*f) {
  2432                           
  2433                           ;doprnt.c: 550: for(;;) {
  2434  000402  D005               	goto	l5894
  2435  000404                     l5890:
  2436                           
  2437                           ;doprnt.c: 580: flag |= 0x04;
  2438  000404  8433               	bsf	printf@flag,2,c
  2439                           
  2440                           ;doprnt.c: 581: f++;
  2441  000406  4A1B               	infsnz	printf@f,f,c
  2442  000408  2A1C               	incf	printf@f+1,f,c
  2443                           
  2444                           ;doprnt.c: 582: continue;
  2445  00040A  D001               	goto	l5894
  2446                           
  2447                           ;doprnt.c: 584: }
  2448  00040C  D00B               	goto	l5896
  2449  00040E                     l5894:
  2450  00040E  C01B  FFF6         	movff	printf@f,tblptrl
  2451  000412  C01C  FFF7         	movff	printf@f+1,tblptrh
  2452  000416                     	if	0	;tblptru may be non-zero
  2453  000416                     	endif
  2454  000416                     	if	0	;tblptru may be non-zero
  2455  000416                     	endif
  2456  000416  0008               	tblrd		*
  2457  000418  50F5               	movf	tablat,w,c
  2458                           
  2459                           ; Switch size 1, requested type "space"
  2460                           ; Number of cases is 1, Range of values is 48 to 48
  2461                           ; switch strategies available:
  2462                           ; Name         Instructions Cycles
  2463                           ; simple_byte            4     3 (average)
  2464                           ;	Chosen strategy is simple_byte
  2465  00041A  0A30               	xorlw	48	; case 48
  2466  00041C  B4D8               	btfsc	status,2,c
  2467  00041E  D7F2               	goto	l5890
  2468                           
  2469                           ;doprnt.c: 585: break;
  2470  000420  D001               	goto	l5896
  2471                           
  2472                           ;doprnt.c: 586: }
  2473  000422  D7F5               	goto	l5894
  2474  000424                     l5896:
  2475                           
  2476                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2477  000424  C01B  FFF6         	movff	printf@f,tblptrl
  2478  000428  C01C  FFF7         	movff	printf@f+1,tblptrh
  2479  00042C                     	if	0	;tblptru may be non-zero
  2480  00042C                     	endif
  2481  00042C                     	if	0	;tblptru may be non-zero
  2482  00042C                     	endif
  2483  00042C  0008               	tblrd		*
  2484  00042E  50F5               	movf	tablat,w,c
  2485  000430  ECCC  F00F         	call	_isdigit
  2486  000434  A0D8               	btfss	status,0,c
  2487  000436  D03B               	goto	l5912
  2488                           
  2489                           ;doprnt.c: 598: width = 0;
  2490  000438  0E00               	movlw	0
  2491  00043A  6E35               	movwf	printf@width+1,c
  2492  00043C  0E00               	movlw	0
  2493  00043E  6E34               	movwf	printf@width,c
  2494  000440  D000               	goto	l5900
  2495  000442                     l5900:
  2496                           
  2497                           ;doprnt.c: 600: width *= 10;
  2498  000442  C034  F00F         	movff	printf@width,___wmul@multiplier
  2499  000446  C035  F010         	movff	printf@width+1,___wmul@multiplier+1
  2500  00044A  0E00               	movlw	0
  2501  00044C  6E12               	movwf	___wmul@multiplicand+1,c
  2502  00044E  0E0A               	movlw	10
  2503  000450  6E11               	movwf	___wmul@multiplicand,c
  2504  000452  ECA5  F00F         	call	___wmul	;wreg free
  2505  000456  C00F  F034         	movff	?___wmul,printf@width
  2506  00045A  C010  F035         	movff	?___wmul+1,printf@width+1
  2507                           
  2508                           ;doprnt.c: 601: width += *f++ - '0';
  2509  00045E  0ED0               	movlw	208
  2510  000460  6E29               	movwf	??_printf& (0+255),c
  2511  000462  0EFF               	movlw	255
  2512  000464  6E2A               	movwf	(??_printf+1)& (0+255),c
  2513  000466  C01B  FFF6         	movff	printf@f,tblptrl
  2514  00046A  C01C  FFF7         	movff	printf@f+1,tblptrh
  2515  00046E                     	if	0	;tblptru may be non-zero
  2516  00046E                     	endif
  2517  00046E                     	if	0	;tblptru may be non-zero
  2518  00046E                     	endif
  2519  00046E  0008               	tblrd		*
  2520  000470  50F5               	movf	tablat,w,c
  2521  000472  6E2B               	movwf	(??_printf+2)& (0+255),c
  2522  000474  6A2C               	clrf	(??_printf+3)& (0+255),c
  2523  000476  5029               	movf	??_printf,w,c
  2524  000478  262B               	addwf	??_printf+2,f,c
  2525  00047A  502A               	movf	??_printf+1,w,c
  2526  00047C  222C               	addwfc	??_printf+3,f,c
  2527  00047E  502B               	movf	??_printf+2,w,c
  2528  000480  2634               	addwf	printf@width,f,c
  2529  000482  502C               	movf	??_printf+3,w,c
  2530  000484  2235               	addwfc	printf@width+1,f,c
  2531  000486  4A1B               	infsnz	printf@f,f,c
  2532  000488  2A1C               	incf	printf@f+1,f,c
  2533                           
  2534                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2535  00048A  C01B  FFF6         	movff	printf@f,tblptrl
  2536  00048E  C01C  FFF7         	movff	printf@f+1,tblptrh
  2537  000492                     	if	0	;tblptru may be non-zero
  2538  000492                     	endif
  2539  000492                     	if	0	;tblptru may be non-zero
  2540  000492                     	endif
  2541  000492  0008               	tblrd		*
  2542  000494  50F5               	movf	tablat,w,c
  2543  000496  ECCC  F00F         	call	_isdigit
  2544  00049A  A0D8               	btfss	status,0,c
  2545  00049C  D008               	goto	l5912
  2546  00049E  D7D1               	goto	l5900
  2547                           
  2548                           ;doprnt.c: 608: }
  2549                           ;doprnt.c: 635: switch(c = *f++) {
  2550  0004A0  D006               	goto	l5912
  2551                           
  2552                           ;doprnt.c: 638: goto alldone;
  2553                           
  2554                           ;doprnt.c: 637: case 0:
  2555  0004A2  D148               	goto	l890
  2556                           
  2557                           ;doprnt.c: 698: case 'i':
  2558                           ;doprnt.c: 699: break;
  2559                           
  2560                           ;doprnt.c: 697: case 'd':
  2561  0004A4  D01B               	goto	l853
  2562  0004A6                     l5908:
  2563                           
  2564                           ;doprnt.c: 721: flag |= 0x80;
  2565  0004A6  8E33               	bsf	printf@flag,7,c
  2566                           
  2567                           ;doprnt.c: 723: break;
  2568  0004A8  D019               	goto	l853
  2569                           
  2570                           ;doprnt.c: 813: continue;
  2571                           
  2572                           ;doprnt.c: 802: default:
  2573  0004AA  D136               	goto	l6010
  2574                           
  2575                           ;doprnt.c: 822: }
  2576  0004AC  D017               	goto	l853
  2577  0004AE                     l5912:
  2578  0004AE  C01B  FFF6         	movff	printf@f,tblptrl
  2579  0004B2  C01C  FFF7         	movff	printf@f+1,tblptrh
  2580  0004B6  4A1B               	infsnz	printf@f,f,c
  2581  0004B8  2A1C               	incf	printf@f+1,f,c
  2582  0004BA                     	if	0	;tblptru may be non-zero
  2583  0004BA                     	endif
  2584  0004BA                     	if	0	;tblptru may be non-zero
  2585  0004BA                     	endif
  2586  0004BA  0008               	tblrd		*
  2587  0004BC  CFF5 F036          	movff	tablat,printf@c
  2588  0004C0  5036               	movf	printf@c,w,c
  2589                           
  2590                           ; Switch size 1, requested type "space"
  2591                           ; Number of cases is 4, Range of values is 0 to 120
  2592                           ; switch strategies available:
  2593                           ; Name         Instructions Cycles
  2594                           ; simple_byte           13     7 (average)
  2595                           ;	Chosen strategy is simple_byte
  2596  0004C2  0A00               	xorlw	0	; case 0
  2597  0004C4  B4D8               	btfsc	status,2,c
  2598  0004C6  D136               	goto	l890
  2599  0004C8  0A64               	xorlw	100	; case 100
  2600  0004CA  B4D8               	btfsc	status,2,c
  2601  0004CC  D007               	goto	l853
  2602  0004CE  0A0D               	xorlw	13	; case 105
  2603  0004D0  B4D8               	btfsc	status,2,c
  2604  0004D2  D004               	goto	l853
  2605  0004D4  0A11               	xorlw	17	; case 120
  2606  0004D6  B4D8               	btfsc	status,2,c
  2607  0004D8  D7E6               	goto	l5908
  2608  0004DA  D11E               	goto	l6010
  2609  0004DC                     l853:
  2610                           
  2611                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2612  0004DC  BE33               	btfsc	printf@flag,7,c
  2613  0004DE  D015               	goto	l5924
  2614                           
  2615                           ;doprnt.c: 1253: {
  2616                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2617  0004E0  C02E  FFD9         	movff	printf@ap,fsr2l
  2618  0004E4  C02F  FFDA         	movff	printf@ap+1,fsr2h
  2619  0004E8  CFDE F031          	movff	postinc2,printf@val
  2620  0004EC  CFDD F032          	movff	postdec2,printf@val+1
  2621  0004F0  0E02               	movlw	2
  2622  0004F2  262E               	addwf	printf@ap,f,c
  2623  0004F4  0E00               	movlw	0
  2624  0004F6  222F               	addwfc	printf@ap+1,f,c
  2625                           
  2626                           ;doprnt.c: 1261: if((int)val < 0) {
  2627  0004F8  AE32               	btfss	printf@val+1,7,c
  2628  0004FA  D04E               	goto	l5958
  2629                           
  2630                           ;doprnt.c: 1262: flag |= 0x03;
  2631  0004FC  0E03               	movlw	3
  2632  0004FE  1233               	iorwf	printf@flag,f,c
  2633                           
  2634                           ;doprnt.c: 1263: val = -val;
  2635  000500  6C31               	negf	printf@val,c
  2636  000502  1E32               	comf	printf@val+1,f,c
  2637  000504  B0D8               	btfsc	status,0,c
  2638  000506  2A32               	incf	printf@val+1,f,c
  2639                           
  2640                           ;doprnt.c: 1264: }
  2641                           ;doprnt.c: 1266: }
  2642  000508  D047               	goto	l5958
  2643  00050A                     l5924:
  2644                           
  2645                           ;doprnt.c: 1268: else
  2646                           ;doprnt.c: 1273: {
  2647                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2648  00050A  C02E  FFD9         	movff	printf@ap,fsr2l
  2649  00050E  C02F  FFDA         	movff	printf@ap+1,fsr2h
  2650  000512  CFDE F031          	movff	postinc2,printf@val
  2651  000516  CFDD F032          	movff	postdec2,printf@val+1
  2652  00051A  0E02               	movlw	2
  2653  00051C  262E               	addwf	printf@ap,f,c
  2654  00051E  0E00               	movlw	0
  2655  000520  222F               	addwfc	printf@ap+1,f,c
  2656                           
  2657                           ;doprnt.c: 1287: }
  2658                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2659  000522  D03A               	goto	l5958
  2660  000524                     l5928:
  2661                           
  2662                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2663  000524  0E01               	movlw	1
  2664  000526  6E36               	movwf	printf@c,c
  2665  000528                     l5930:
  2666  000528  0E05               	movlw	5
  2667  00052A  1836               	xorwf	printf@c,w,c
  2668  00052C  B4D8               	btfsc	status,2,c
  2669  00052E  D03D               	goto	l5960
  2670  000530  D001               	goto	l5934
  2671  000532  D03B               	goto	l5960
  2672  000534                     l5934:
  2673                           
  2674                           ;doprnt.c: 1306: if(val < dpowers[c])
  2675  000534  5036               	movf	printf@c,w,c
  2676  000536  0D02               	mullw	2
  2677  000538  0EBC               	movlw	low _dpowers
  2678  00053A  24F3               	addwf	prodl,w,c
  2679  00053C  6EF6               	movwf	tblptrl,c
  2680  00053E  0EFE               	movlw	high _dpowers
  2681  000540  20F4               	addwfc	prodh,w,c
  2682  000542  6EF7               	movwf	tblptrh,c
  2683  000544                     	if	0	;There are less than 3 active tblptr bytes
  2684  000544                     	endif
  2685  000544  0009               	tblrd		*+
  2686  000546  50F5               	movf	tablat,w,c
  2687  000548  5C31               	subwf	printf@val,w,c
  2688  00054A  0009               	tblrd		*+
  2689  00054C  50F5               	movf	tablat,w,c
  2690  00054E  5832               	subwfb	printf@val+1,w,c
  2691  000550  A0D8               	btfss	status,0,c
  2692  000552  D02B               	goto	l5960
  2693  000554  D001               	goto	l5938
  2694                           
  2695                           ;doprnt.c: 1307: break;
  2696  000556  D029               	goto	l5960
  2697  000558                     l5938:
  2698  000558  2A36               	incf	printf@c,f,c
  2699  00055A  D7E6               	goto	l5930
  2700                           
  2701                           ;doprnt.c: 1309: break;
  2702  00055C  D026               	goto	l5960
  2703  00055E                     l5942:
  2704                           
  2705                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2706  00055E  0E01               	movlw	1
  2707  000560  6E36               	movwf	printf@c,c
  2708  000562                     l5944:
  2709  000562  0E04               	movlw	4
  2710  000564  1836               	xorwf	printf@c,w,c
  2711  000566  B4D8               	btfsc	status,2,c
  2712  000568  D020               	goto	l5960
  2713  00056A  D001               	goto	l5948
  2714  00056C  D01E               	goto	l5960
  2715  00056E                     l5948:
  2716                           
  2717                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2718  00056E  5036               	movf	printf@c,w,c
  2719  000570  0D02               	mullw	2
  2720  000572  0EC6               	movlw	low _hexpowers
  2721  000574  24F3               	addwf	prodl,w,c
  2722  000576  6EF6               	movwf	tblptrl,c
  2723  000578  0EFE               	movlw	high _hexpowers
  2724  00057A  20F4               	addwfc	prodh,w,c
  2725  00057C  6EF7               	movwf	tblptrh,c
  2726  00057E                     	if	0	;There are less than 3 active tblptr bytes
  2727  00057E                     	endif
  2728  00057E  0009               	tblrd		*+
  2729  000580  50F5               	movf	tablat,w,c
  2730  000582  5C31               	subwf	printf@val,w,c
  2731  000584  0009               	tblrd		*+
  2732  000586  50F5               	movf	tablat,w,c
  2733  000588  5832               	subwfb	printf@val+1,w,c
  2734  00058A  A0D8               	btfss	status,0,c
  2735  00058C  D00E               	goto	l5960
  2736  00058E  D001               	goto	l5952
  2737                           
  2738                           ;doprnt.c: 1318: break;
  2739  000590  D00C               	goto	l5960
  2740  000592                     l5952:
  2741  000592  2A36               	incf	printf@c,f,c
  2742  000594  D7E6               	goto	l5944
  2743                           
  2744                           ;doprnt.c: 1336: }
  2745                           
  2746                           ;doprnt.c: 1320: break;
  2747  000596  D009               	goto	l5960
  2748  000598                     l5958:
  2749  000598  5033               	movf	printf@flag,w,c
  2750  00059A  0B80               	andlw	128
  2751                           
  2752                           ; Switch size 1, requested type "space"
  2753                           ; Number of cases is 2, Range of values is 0 to 128
  2754                           ; switch strategies available:
  2755                           ; Name         Instructions Cycles
  2756                           ; simple_byte            7     4 (average)
  2757                           ;	Chosen strategy is simple_byte
  2758  00059C  0A00               	xorlw	0	; case 0
  2759  00059E  B4D8               	btfsc	status,2,c
  2760  0005A0  D7C1               	goto	l5928
  2761  0005A2  0A80               	xorlw	128	; case 128
  2762  0005A4  B4D8               	btfsc	status,2,c
  2763  0005A6  D7DB               	goto	l5942
  2764  0005A8  D000               	goto	l5960
  2765  0005AA                     l5960:
  2766                           
  2767                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2768  0005AA  5034               	movf	printf@width,w,c
  2769  0005AC  1035               	iorwf	printf@width+1,w,c
  2770  0005AE  B4D8               	btfsc	status,2,c
  2771  0005B0  D00A               	goto	l5966
  2772  0005B2  C033  F029         	movff	printf@flag,??_printf
  2773  0005B6  0E03               	movlw	3
  2774  0005B8  1629               	andwf	??_printf,f,c
  2775  0005BA  B4D8               	btfsc	status,2,c
  2776  0005BC  D004               	goto	l5966
  2777                           
  2778                           ;doprnt.c: 1346: width--;
  2779  0005BE  0634               	decf	printf@width,f,c
  2780  0005C0  A0D8               	btfss	status,0,c
  2781  0005C2  0635               	decf	printf@width+1,f,c
  2782  0005C4  D000               	goto	l5966
  2783  0005C6                     l5966:
  2784                           
  2785                           ;doprnt.c: 1381: if(width > c)
  2786  0005C6  0E80               	movlw	128
  2787  0005C8  BE36               	btfsc	printf@c,7,c
  2788  0005CA  0E7F               	movlw	127
  2789  0005CC  6E29               	movwf	??_printf& (0+255),c
  2790  0005CE  5034               	movf	printf@width,w,c
  2791  0005D0  5C36               	subwf	printf@c,w,c
  2792  0005D2  5035               	movf	printf@width+1,w,c
  2793  0005D4  0A80               	xorlw	128
  2794  0005D6  5829               	subwfb	??_printf& (0+255),w,c
  2795  0005D8  B0D8               	btfsc	status,0,c
  2796  0005DA  D007               	goto	l5970
  2797                           
  2798                           ;doprnt.c: 1382: width -= c;
  2799  0005DC  5036               	movf	printf@c,w,c
  2800  0005DE  5E34               	subwf	printf@width,f,c
  2801  0005E0  0E00               	movlw	0
  2802  0005E2  BE36               	btfsc	printf@c,7,c
  2803  0005E4  0EFF               	movlw	255
  2804  0005E6  5A35               	subwfb	printf@width+1,f,c
  2805  0005E8  D005               	goto	l5972
  2806  0005EA                     l5970:
  2807                           
  2808                           ;doprnt.c: 1383: else
  2809                           ;doprnt.c: 1384: width = 0;
  2810  0005EA  0E00               	movlw	0
  2811  0005EC  6E35               	movwf	printf@width+1,c
  2812  0005EE  0E00               	movlw	0
  2813  0005F0  6E34               	movwf	printf@width,c
  2814  0005F2  D000               	goto	l5972
  2815  0005F4                     l5972:
  2816                           
  2817                           ;doprnt.c: 1387: if(flag & 0x04) {
  2818  0005F4  A433               	btfss	printf@flag,2,c
  2819  0005F6  D01A               	goto	l5984
  2820                           
  2821                           ;doprnt.c: 1392: if(flag & 0x03)
  2822  0005F8  C033  F029         	movff	printf@flag,??_printf
  2823  0005FC  0E03               	movlw	3
  2824  0005FE  1629               	andwf	??_printf,f,c
  2825  000600  B4D8               	btfsc	status,2,c
  2826  000602  D004               	goto	l5978
  2827                           
  2828                           ;doprnt.c: 1393: (putch('-') );
  2829  000604  0E2D               	movlw	45
  2830  000606  ECEA  F010         	call	_putch
  2831  00060A  D000               	goto	l5978
  2832  00060C                     l5978:
  2833                           
  2834                           ;doprnt.c: 1415: if(width)
  2835  00060C  5034               	movf	printf@width,w,c
  2836  00060E  1035               	iorwf	printf@width+1,w,c
  2837  000610  B4D8               	btfsc	status,2,c
  2838  000612  D026               	goto	l5994
  2839  000614                     l5980:
  2840                           
  2841                           ;doprnt.c: 1417: (putch('0') );
  2842  000614  0E30               	movlw	48
  2843  000616  ECEA  F010         	call	_putch
  2844                           
  2845                           ;doprnt.c: 1418: while(--width);
  2846  00061A  0634               	decf	printf@width,f,c
  2847  00061C  A0D8               	btfss	status,0,c
  2848  00061E  0635               	decf	printf@width+1,f,c
  2849  000620  5034               	movf	printf@width,w,c
  2850  000622  1035               	iorwf	printf@width+1,w,c
  2851  000624  B4D8               	btfsc	status,2,c
  2852  000626  D01C               	goto	l5994
  2853  000628  D7F5               	goto	l5980
  2854                           
  2855                           ;doprnt.c: 1420: } else
  2856  00062A  D01A               	goto	l5994
  2857  00062C                     l5984:
  2858                           
  2859                           ;doprnt.c: 1422: {
  2860                           ;doprnt.c: 1424: if(width
  2861                           ;doprnt.c: 1428: )
  2862  00062C  5034               	movf	printf@width,w,c
  2863  00062E  1035               	iorwf	printf@width+1,w,c
  2864  000630  B4D8               	btfsc	status,2,c
  2865  000632  D00C               	goto	l5990
  2866  000634                     l5986:
  2867                           
  2868                           ;doprnt.c: 1430: (putch(' ') );
  2869  000634  0E20               	movlw	32
  2870  000636  ECEA  F010         	call	_putch
  2871                           
  2872                           ;doprnt.c: 1431: while(--width);
  2873  00063A  0634               	decf	printf@width,f,c
  2874  00063C  A0D8               	btfss	status,0,c
  2875  00063E  0635               	decf	printf@width+1,f,c
  2876  000640  5034               	movf	printf@width,w,c
  2877  000642  1035               	iorwf	printf@width+1,w,c
  2878  000644  B4D8               	btfsc	status,2,c
  2879  000646  D002               	goto	l5990
  2880  000648  D7F5               	goto	l5986
  2881  00064A  D000               	goto	l5990
  2882  00064C                     l5990:
  2883                           
  2884                           ;doprnt.c: 1438: if(flag & 0x03)
  2885  00064C  C033  F029         	movff	printf@flag,??_printf
  2886  000650  0E03               	movlw	3
  2887  000652  1629               	andwf	??_printf,f,c
  2888  000654  B4D8               	btfsc	status,2,c
  2889  000656  D004               	goto	l5994
  2890                           
  2891                           ;doprnt.c: 1439: (putch('-') );
  2892  000658  0E2D               	movlw	45
  2893  00065A  ECEA  F010         	call	_putch
  2894  00065E  D000               	goto	l5994
  2895  000660                     l5994:
  2896                           
  2897                           ;doprnt.c: 1469: }
  2898                           ;doprnt.c: 1472: prec = c;
  2899  000660  C036  F030         	movff	printf@c,printf@prec
  2900                           
  2901                           ;doprnt.c: 1474: while(prec--) {
  2902  000664  D053               	goto	l6008
  2903                           
  2904                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2905  000666  D045               	goto	l6004
  2906  000668                     l5996:
  2907                           
  2908                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2909  000668  5030               	movf	printf@prec,w,c
  2910  00066A  0D02               	mullw	2
  2911  00066C  0EBC               	movlw	low _dpowers
  2912  00066E  24F3               	addwf	prodl,w,c
  2913  000670  6EF6               	movwf	tblptrl,c
  2914  000672  0EFE               	movlw	high _dpowers
  2915  000674  20F4               	addwfc	prodh,w,c
  2916  000676  6EF7               	movwf	tblptrh,c
  2917  000678                     	if	0	;There are less than 3 active tblptr bytes
  2918  000678                     	endif
  2919  000678  0009               	tblrd		*+
  2920  00067A  CFF5 F011          	movff	tablat,___lwdiv@divisor
  2921  00067E  000A               	tblrd		*-
  2922  000680  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  2923  000684  C031  F00F         	movff	printf@val,___lwdiv@dividend
  2924  000688  C032  F010         	movff	printf@val+1,___lwdiv@dividend+1
  2925  00068C  EC88  F00D         	call	___lwdiv	;wreg free
  2926  000690  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  2927  000694  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  2928  000698  0E00               	movlw	0
  2929  00069A  6E19               	movwf	___lwmod@divisor+1,c
  2930  00069C  0E0A               	movlw	10
  2931  00069E  6E18               	movwf	___lwmod@divisor,c
  2932  0006A0  EC2E  F00E         	call	___lwmod	;wreg free
  2933  0006A4  5016               	movf	?___lwmod,w,c
  2934  0006A6  0F30               	addlw	48
  2935  0006A8  6E36               	movwf	printf@c,c
  2936                           
  2937                           ;doprnt.c: 1491: break;
  2938  0006AA  D02C               	goto	l6006
  2939  0006AC                     l5998:
  2940                           
  2941                           ;doprnt.c: 1499: {
  2942                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2943  0006AC  C031  F00F         	movff	printf@val,___lwdiv@dividend
  2944  0006B0  C032  F010         	movff	printf@val+1,___lwdiv@dividend+1
  2945  0006B4  5030               	movf	printf@prec,w,c
  2946  0006B6  0D02               	mullw	2
  2947  0006B8  0EC6               	movlw	low _hexpowers
  2948  0006BA  24F3               	addwf	prodl,w,c
  2949  0006BC  6EF6               	movwf	tblptrl,c
  2950  0006BE  0EFE               	movlw	high _hexpowers
  2951  0006C0  20F4               	addwfc	prodh,w,c
  2952  0006C2  6EF7               	movwf	tblptrh,c
  2953  0006C4                     	if	0	;There are less than 3 active tblptr bytes
  2954  0006C4                     	endif
  2955  0006C4  0009               	tblrd		*+
  2956  0006C6  CFF5 F011          	movff	tablat,___lwdiv@divisor
  2957  0006CA  000A               	tblrd		*-
  2958  0006CC  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  2959  0006D0  EC88  F00D         	call	___lwdiv	;wreg free
  2960  0006D4  500F               	movf	?___lwdiv,w,c
  2961  0006D6  0B0F               	andlw	15
  2962  0006D8  6E2D               	movwf	printf@idx,c
  2963                           
  2964                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2965  0006DA  502D               	movf	printf@idx,w,c
  2966  0006DC  0D01               	mullw	1
  2967  0006DE  0EA0               	movlw	low STR_20
  2968  0006E0  24F3               	addwf	prodl,w,c
  2969  0006E2  6EF6               	movwf	tblptrl,c
  2970  0006E4  0EFF               	movlw	high STR_20
  2971  0006E6  20F4               	addwfc	prodh,w,c
  2972  0006E8  6EF7               	movwf	tblptrh,c
  2973  0006EA                     	if	0	;There are less than 3 active tblptr bytes
  2974  0006EA                     	endif
  2975  0006EA  0008               	tblrd		*
  2976  0006EC  CFF5 F036          	movff	tablat,printf@c
  2977                           
  2978                           ;doprnt.c: 1523: }
  2979                           
  2980                           ;doprnt.c: 1508: }
  2981                           ;doprnt.c: 1510: break;
  2982  0006F0  D009               	goto	l6006
  2983  0006F2                     l6004:
  2984  0006F2  5033               	movf	printf@flag,w,c
  2985  0006F4  0B80               	andlw	128
  2986                           
  2987                           ; Switch size 1, requested type "space"
  2988                           ; Number of cases is 2, Range of values is 0 to 128
  2989                           ; switch strategies available:
  2990                           ; Name         Instructions Cycles
  2991                           ; simple_byte            7     4 (average)
  2992                           ;	Chosen strategy is simple_byte
  2993  0006F6  0A00               	xorlw	0	; case 0
  2994  0006F8  B4D8               	btfsc	status,2,c
  2995  0006FA  D7B6               	goto	l5996
  2996  0006FC  0A80               	xorlw	128	; case 128
  2997  0006FE  B4D8               	btfsc	status,2,c
  2998  000700  D7D5               	goto	l5998
  2999  000702  D000               	goto	l6006
  3000  000704                     l6006:
  3001                           
  3002                           ;doprnt.c: 1524: (putch(c) );
  3003  000704  5036               	movf	printf@c,w,c
  3004  000706  ECEA  F010         	call	_putch
  3005  00070A  D000               	goto	l6008
  3006  00070C                     l6008:
  3007  00070C  0630               	decf	printf@prec,f,c
  3008  00070E  2830               	incf	printf@prec,w,c
  3009  000710  B4D8               	btfsc	status,2,c
  3010  000712  D002               	goto	l6010
  3011  000714  D7EE               	goto	l6004
  3012  000716  D000               	goto	l6010
  3013  000718                     l6010:
  3014  000718  C01B  FFF6         	movff	printf@f,tblptrl
  3015  00071C  C01C  FFF7         	movff	printf@f+1,tblptrh
  3016  000720  4A1B               	infsnz	printf@f,f,c
  3017  000722  2A1C               	incf	printf@f+1,f,c
  3018  000724                     	if	0	;tblptru may be non-zero
  3019  000724                     	endif
  3020  000724                     	if	0	;tblptru may be non-zero
  3021  000724                     	endif
  3022  000724  0008               	tblrd		*
  3023  000726  CFF5 F036          	movff	tablat,printf@c
  3024  00072A  5036               	movf	printf@c,w,c
  3025  00072C  B4D8               	btfsc	status,2,c
  3026  00072E  D002               	goto	l890
  3027  000730  D65A               	goto	l5884
  3028  000732  D000               	goto	l890
  3029  000734                     l890:
  3030  000734  0012               	return		;funcret
  3031  000736                     __end_of_printf:
  3032                           	opt stack 0
  3033                           tblptru	equ	0xFF8
  3034                           tblptrh	equ	0xFF7
  3035                           tblptrl	equ	0xFF6
  3036                           tablat	equ	0xFF5
  3037                           prodh	equ	0xFF4
  3038                           prodl	equ	0xFF3
  3039                           postinc0	equ	0xFEE
  3040                           wreg	equ	0xFE8
  3041                           postdec1	equ	0xFE5
  3042                           fsr1l	equ	0xFE1
  3043                           postinc2	equ	0xFDE
  3044                           postdec2	equ	0xFDD
  3045                           fsr2h	equ	0xFDA
  3046                           fsr2l	equ	0xFD9
  3047                           status	equ	0xFD8
  3048                           
  3049 ;; *************** function _putch *****************
  3050 ;; Defined at:
  3051 ;;		line 80 in file "Lab9_11.c"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;  c               1    wreg     unsigned char 
  3054 ;; Auto vars:     Size  Location     Type
  3055 ;;  c               1   14[COMRAM] unsigned char 
  3056 ;; Return value:  Size  Location     Type
  3057 ;;		None               void
  3058 ;; Registers used:
  3059 ;;		wreg
  3060 ;; Tracked objects:
  3061 ;;		On entry : 0/0
  3062 ;;		On exit  : 0/0
  3063 ;;		Unchanged: 0/0
  3064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3066 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3068 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3069 ;;Total ram usage:        1 bytes
  3070 ;; Hardware stack levels used:    1
  3071 ;; Hardware stack levels required when called:    2
  3072 ;; This function calls:
  3073 ;;		Nothing
  3074 ;; This function is called by:
  3075 ;;		_printf
  3076 ;; This function uses a non-reentrant model
  3077 ;;
  3078                           
  3079                           	psect	text2
  3080  0021D4                     __ptext2:
  3081                           	opt stack 0
  3082  0021D4                     _putch:
  3083                           	opt stack 27
  3084                           
  3085                           ;incstack = 0
  3086                           ;putch@c stored from wreg
  3087  0021D4  6E0F               	movwf	putch@c,c
  3088                           
  3089                           ;Lab9_11.c: 82: while (!TRMT);
  3090  0021D6  D000               	goto	l627
  3091  0021D8                     l627:
  3092  0021D8  A2AC               	btfss	4012,1,c	;volatile
  3093  0021DA  D7FE               	goto	l627
  3094                           
  3095                           ;Lab9_11.c: 83: TXREG = c;
  3096  0021DC  C00F  FFAD         	movff	putch@c,4013	;volatile
  3097  0021E0  0012               	return		;funcret
  3098  0021E2                     __end_of_putch:
  3099                           	opt stack 0
  3100                           tblptru	equ	0xFF8
  3101                           tblptrh	equ	0xFF7
  3102                           tblptrl	equ	0xFF6
  3103                           tablat	equ	0xFF5
  3104                           prodh	equ	0xFF4
  3105                           prodl	equ	0xFF3
  3106                           postinc0	equ	0xFEE
  3107                           wreg	equ	0xFE8
  3108                           postdec1	equ	0xFE5
  3109                           fsr1l	equ	0xFE1
  3110                           postinc2	equ	0xFDE
  3111                           postdec2	equ	0xFDD
  3112                           fsr2h	equ	0xFDA
  3113                           fsr2l	equ	0xFD9
  3114                           status	equ	0xFD8
  3115                           
  3116 ;; *************** function _isdigit *****************
  3117 ;; Defined at:
  3118 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;  c               1    wreg     unsigned char 
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;  c               1   16[COMRAM] unsigned char 
  3123 ;; Return value:  Size  Location     Type
  3124 ;;		None               void
  3125 ;; Registers used:
  3126 ;;		wreg, status,2, status,0
  3127 ;; Tracked objects:
  3128 ;;		On entry : 0/0
  3129 ;;		On exit  : 0/0
  3130 ;;		Unchanged: 0/0
  3131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3133 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3134 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3135 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3136 ;;Total ram usage:        3 bytes
  3137 ;; Hardware stack levels used:    1
  3138 ;; Hardware stack levels required when called:    2
  3139 ;; This function calls:
  3140 ;;		Nothing
  3141 ;; This function is called by:
  3142 ;;		_printf
  3143 ;; This function uses a non-reentrant model
  3144 ;;
  3145                           
  3146                           	psect	text3
  3147  001F98                     __ptext3:
  3148                           	opt stack 0
  3149  001F98                     _isdigit:
  3150                           	opt stack 27
  3151                           
  3152                           ;incstack = 0
  3153                           ;isdigit@c stored from wreg
  3154  001F98  6E11               	movwf	isdigit@c,c
  3155  001F9A  0E00               	movlw	0
  3156  001F9C  6E10               	movwf	_isdigit$2327,c
  3157  001F9E  0E3A               	movlw	58
  3158  001FA0  6011               	cpfslt	isdigit@c,c
  3159  001FA2  D006               	goto	l4128
  3160  001FA4  0E2F               	movlw	47
  3161  001FA6  6411               	cpfsgt	isdigit@c,c
  3162  001FA8  D003               	goto	l4128
  3163  001FAA  0E01               	movlw	1
  3164  001FAC  6E10               	movwf	_isdigit$2327,c
  3165  001FAE  D000               	goto	l4128
  3166  001FB0                     l4128:
  3167  001FB0  C010  F00F         	movff	_isdigit$2327,??_isdigit
  3168  001FB4  300F               	rrcf	??_isdigit,w,c
  3169  001FB6  D000               	goto	l1357
  3170  001FB8                     l1357:
  3171  001FB8  0012               	return		;funcret
  3172  001FBA                     __end_of_isdigit:
  3173                           	opt stack 0
  3174                           tblptru	equ	0xFF8
  3175                           tblptrh	equ	0xFF7
  3176                           tblptrl	equ	0xFF6
  3177                           tablat	equ	0xFF5
  3178                           prodh	equ	0xFF4
  3179                           prodl	equ	0xFF3
  3180                           postinc0	equ	0xFEE
  3181                           wreg	equ	0xFE8
  3182                           postdec1	equ	0xFE5
  3183                           fsr1l	equ	0xFE1
  3184                           postinc2	equ	0xFDE
  3185                           postdec2	equ	0xFDD
  3186                           fsr2h	equ	0xFDA
  3187                           fsr2l	equ	0xFD9
  3188                           status	equ	0xFD8
  3189                           
  3190 ;; *************** function ___lwmod *****************
  3191 ;; Defined at:
  3192 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  3193 ;; Parameters:    Size  Location     Type
  3194 ;;  dividend        2   21[COMRAM] unsigned int 
  3195 ;;  divisor         2   23[COMRAM] unsigned int 
  3196 ;; Auto vars:     Size  Location     Type
  3197 ;;  counter         1   25[COMRAM] unsigned char 
  3198 ;; Return value:  Size  Location     Type
  3199 ;;                  2   21[COMRAM] unsigned int 
  3200 ;; Registers used:
  3201 ;;		wreg, status,2, status,0
  3202 ;; Tracked objects:
  3203 ;;		On entry : 0/0
  3204 ;;		On exit  : 0/0
  3205 ;;		Unchanged: 0/0
  3206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3207 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3208 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3210 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3211 ;;Total ram usage:        5 bytes
  3212 ;; Hardware stack levels used:    1
  3213 ;; Hardware stack levels required when called:    2
  3214 ;; This function calls:
  3215 ;;		Nothing
  3216 ;; This function is called by:
  3217 ;;		_printf
  3218 ;; This function uses a non-reentrant model
  3219 ;;
  3220                           
  3221                           	psect	text4
  3222  001C5C                     __ptext4:
  3223                           	opt stack 0
  3224  001C5C                     ___lwmod:
  3225                           	opt stack 27
  3226                           
  3227                           ;incstack = 0
  3228  001C5C  5018               	movf	___lwmod@divisor,w,c
  3229  001C5E  1019               	iorwf	___lwmod@divisor+1,w,c
  3230  001C60  B4D8               	btfsc	status,2,c
  3231  001C62  D01D               	goto	l1459
  3232  001C64  0E01               	movlw	1
  3233  001C66  6E1A               	movwf	___lwmod@counter,c
  3234  001C68  D005               	goto	l4240
  3235  001C6A                     l4238:
  3236  001C6A  90D8               	bcf	status,0,c
  3237  001C6C  3618               	rlcf	___lwmod@divisor,f,c
  3238  001C6E  3619               	rlcf	___lwmod@divisor+1,f,c
  3239  001C70  2A1A               	incf	___lwmod@counter,f,c
  3240  001C72  D000               	goto	l4240
  3241  001C74                     l4240:
  3242  001C74  BE19               	btfsc	___lwmod@divisor+1,7,c
  3243  001C76  D002               	goto	l4242
  3244  001C78  D7F8               	goto	l4238
  3245  001C7A  D000               	goto	l4242
  3246  001C7C                     l4242:
  3247  001C7C  5018               	movf	___lwmod@divisor,w,c
  3248  001C7E  5C16               	subwf	___lwmod@dividend,w,c
  3249  001C80  5019               	movf	___lwmod@divisor+1,w,c
  3250  001C82  5817               	subwfb	___lwmod@dividend+1,w,c
  3251  001C84  A0D8               	btfss	status,0,c
  3252  001C86  D005               	goto	l4246
  3253  001C88  5018               	movf	___lwmod@divisor,w,c
  3254  001C8A  5E16               	subwf	___lwmod@dividend,f,c
  3255  001C8C  5019               	movf	___lwmod@divisor+1,w,c
  3256  001C8E  5A17               	subwfb	___lwmod@dividend+1,f,c
  3257  001C90  D000               	goto	l4246
  3258  001C92                     l4246:
  3259  001C92  90D8               	bcf	status,0,c
  3260  001C94  3219               	rrcf	___lwmod@divisor+1,f,c
  3261  001C96  3218               	rrcf	___lwmod@divisor,f,c
  3262  001C98  2E1A               	decfsz	___lwmod@counter,f,c
  3263  001C9A  D7F0               	goto	l4242
  3264  001C9C  D000               	goto	l1459
  3265  001C9E                     l1459:
  3266  001C9E  C016  F016         	movff	___lwmod@dividend,?___lwmod
  3267  001CA2  C017  F017         	movff	___lwmod@dividend+1,?___lwmod+1
  3268  001CA6  0012               	return		;funcret
  3269  001CA8                     __end_of___lwmod:
  3270                           	opt stack 0
  3271                           tblptru	equ	0xFF8
  3272                           tblptrh	equ	0xFF7
  3273                           tblptrl	equ	0xFF6
  3274                           tablat	equ	0xFF5
  3275                           prodh	equ	0xFF4
  3276                           prodl	equ	0xFF3
  3277                           postinc0	equ	0xFEE
  3278                           wreg	equ	0xFE8
  3279                           postdec1	equ	0xFE5
  3280                           fsr1l	equ	0xFE1
  3281                           postinc2	equ	0xFDE
  3282                           postdec2	equ	0xFDD
  3283                           fsr2h	equ	0xFDA
  3284                           fsr2l	equ	0xFD9
  3285                           status	equ	0xFD8
  3286                           
  3287 ;; *************** function ___lwdiv *****************
  3288 ;; Defined at:
  3289 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  3290 ;; Parameters:    Size  Location     Type
  3291 ;;  dividend        2   14[COMRAM] unsigned int 
  3292 ;;  divisor         2   16[COMRAM] unsigned int 
  3293 ;; Auto vars:     Size  Location     Type
  3294 ;;  quotient        2   18[COMRAM] unsigned int 
  3295 ;;  counter         1   20[COMRAM] unsigned char 
  3296 ;; Return value:  Size  Location     Type
  3297 ;;                  2   14[COMRAM] unsigned int 
  3298 ;; Registers used:
  3299 ;;		wreg, status,2, status,0
  3300 ;; Tracked objects:
  3301 ;;		On entry : 0/0
  3302 ;;		On exit  : 0/0
  3303 ;;		Unchanged: 0/0
  3304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3305 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3306 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3308 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3309 ;;Total ram usage:        7 bytes
  3310 ;; Hardware stack levels used:    1
  3311 ;; Hardware stack levels required when called:    2
  3312 ;; This function calls:
  3313 ;;		Nothing
  3314 ;; This function is called by:
  3315 ;;		_printf
  3316 ;; This function uses a non-reentrant model
  3317 ;;
  3318                           
  3319                           	psect	text5
  3320  001B10                     __ptext5:
  3321                           	opt stack 0
  3322  001B10                     ___lwdiv:
  3323                           	opt stack 27
  3324                           
  3325                           ;incstack = 0
  3326  001B10  0E00               	movlw	0
  3327  001B12  6E14               	movwf	___lwdiv@quotient+1,c
  3328  001B14  0E00               	movlw	0
  3329  001B16  6E13               	movwf	___lwdiv@quotient,c
  3330  001B18  5011               	movf	___lwdiv@divisor,w,c
  3331  001B1A  1012               	iorwf	___lwdiv@divisor+1,w,c
  3332  001B1C  B4D8               	btfsc	status,2,c
  3333  001B1E  D021               	goto	l1449
  3334  001B20  0E01               	movlw	1
  3335  001B22  6E15               	movwf	___lwdiv@counter,c
  3336  001B24  D005               	goto	l4220
  3337  001B26                     l4218:
  3338  001B26  90D8               	bcf	status,0,c
  3339  001B28  3611               	rlcf	___lwdiv@divisor,f,c
  3340  001B2A  3612               	rlcf	___lwdiv@divisor+1,f,c
  3341  001B2C  2A15               	incf	___lwdiv@counter,f,c
  3342  001B2E  D000               	goto	l4220
  3343  001B30                     l4220:
  3344  001B30  BE12               	btfsc	___lwdiv@divisor+1,7,c
  3345  001B32  D002               	goto	l4222
  3346  001B34  D7F8               	goto	l4218
  3347  001B36  D000               	goto	l4222
  3348  001B38                     l4222:
  3349  001B38  90D8               	bcf	status,0,c
  3350  001B3A  3613               	rlcf	___lwdiv@quotient,f,c
  3351  001B3C  3614               	rlcf	___lwdiv@quotient+1,f,c
  3352  001B3E  5011               	movf	___lwdiv@divisor,w,c
  3353  001B40  5C0F               	subwf	___lwdiv@dividend,w,c
  3354  001B42  5012               	movf	___lwdiv@divisor+1,w,c
  3355  001B44  5810               	subwfb	___lwdiv@dividend+1,w,c
  3356  001B46  A0D8               	btfss	status,0,c
  3357  001B48  D006               	goto	l4230
  3358  001B4A  5011               	movf	___lwdiv@divisor,w,c
  3359  001B4C  5E0F               	subwf	___lwdiv@dividend,f,c
  3360  001B4E  5012               	movf	___lwdiv@divisor+1,w,c
  3361  001B50  5A10               	subwfb	___lwdiv@dividend+1,f,c
  3362  001B52  8013               	bsf	___lwdiv@quotient,0,c
  3363  001B54  D000               	goto	l4230
  3364  001B56                     l4230:
  3365  001B56  90D8               	bcf	status,0,c
  3366  001B58  3212               	rrcf	___lwdiv@divisor+1,f,c
  3367  001B5A  3211               	rrcf	___lwdiv@divisor,f,c
  3368  001B5C  2E15               	decfsz	___lwdiv@counter,f,c
  3369  001B5E  D7EC               	goto	l4222
  3370  001B60  D000               	goto	l1449
  3371  001B62                     l1449:
  3372  001B62  C013  F00F         	movff	___lwdiv@quotient,?___lwdiv
  3373  001B66  C014  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3374  001B6A  0012               	return		;funcret
  3375  001B6C                     __end_of___lwdiv:
  3376                           	opt stack 0
  3377                           tblptru	equ	0xFF8
  3378                           tblptrh	equ	0xFF7
  3379                           tblptrl	equ	0xFF6
  3380                           tablat	equ	0xFF5
  3381                           prodh	equ	0xFF4
  3382                           prodl	equ	0xFF3
  3383                           postinc0	equ	0xFEE
  3384                           wreg	equ	0xFE8
  3385                           postdec1	equ	0xFE5
  3386                           fsr1l	equ	0xFE1
  3387                           postinc2	equ	0xFDE
  3388                           postdec2	equ	0xFDD
  3389                           fsr2h	equ	0xFDA
  3390                           fsr2l	equ	0xFD9
  3391                           status	equ	0xFD8
  3392                           
  3393 ;; *************** function _get_RPM *****************
  3394 ;; Defined at:
  3395 ;;		line 20 in file "Fan_Support.c"
  3396 ;; Parameters:    Size  Location     Type
  3397 ;;		None
  3398 ;; Auto vars:     Size  Location     Type
  3399 ;;  RPS             3   44[COMRAM] float 
  3400 ;; Return value:  Size  Location     Type
  3401 ;;                  3   41[COMRAM] float 
  3402 ;; Registers used:
  3403 ;;		wreg, status,2, status,0, cstack
  3404 ;; Tracked objects:
  3405 ;;		On entry : 0/0
  3406 ;;		On exit  : 0/0
  3407 ;;		Unchanged: 0/0
  3408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3409 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3410 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3412 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3413 ;;Total ram usage:        6 bytes
  3414 ;; Hardware stack levels used:    1
  3415 ;; Hardware stack levels required when called:    4
  3416 ;; This function calls:
  3417 ;;		_Wait_One_Second
  3418 ;;		___ftmul
  3419 ;;		___lbtoft
  3420 ;; This function is called by:
  3421 ;;		_main
  3422 ;; This function uses a non-reentrant model
  3423 ;;
  3424                           
  3425                           	psect	text6
  3426  001CA8                     __ptext6:
  3427                           	opt stack 0
  3428  001CA8                     _get_RPM:
  3429                           	opt stack 26
  3430                           
  3431                           ;Fan_Support.c: 22: TMR3L = 0;
  3432                           
  3433                           ;incstack = 0
  3434  001CA8  0E00               	movlw	0
  3435  001CAA  6EB2               	movwf	4018,c	;volatile
  3436                           
  3437                           ;Fan_Support.c: 23: T3CONbits.TMR3ON = 1;
  3438  001CAC  80B1               	bsf	4017,0,c	;volatile
  3439                           
  3440                           ;Fan_Support.c: 24: Wait_One_Second();
  3441  001CAE  ECDD  F00F         	call	_Wait_One_Second	;wreg free
  3442                           
  3443                           ;Fan_Support.c: 25: T3CONbits.TMR3ON = 0;
  3444  001CB2  90B1               	bcf	4017,0,c	;volatile
  3445                           
  3446                           ;Fan_Support.c: 26: float RPS = TMR3L;
  3447  001CB4  50B2               	movf	4018,w,c	;volatile
  3448  001CB6  ECB9  F00F         	call	___lbtoft
  3449  001CBA  C017  F02D         	movff	?___lbtoft,get_RPM@RPS
  3450  001CBE  C018  F02E         	movff	?___lbtoft+1,get_RPM@RPS+1
  3451  001CC2  C019  F02F         	movff	?___lbtoft+2,get_RPM@RPS+2
  3452                           
  3453                           ;Fan_Support.c: 27: return (RPS * 60.00);
  3454  001CC6  C02D  F01B         	movff	get_RPM@RPS,___ftmul@f1
  3455  001CCA  C02E  F01C         	movff	get_RPM@RPS+1,___ftmul@f1+1
  3456  001CCE  C02F  F01D         	movff	get_RPM@RPS+2,___ftmul@f1+2
  3457  001CD2  0E00               	movlw	0
  3458  001CD4  6E1E               	movwf	___ftmul@f2,c
  3459  001CD6  0E70               	movlw	112
  3460  001CD8  6E1F               	movwf	___ftmul@f2+1,c
  3461  001CDA  0E42               	movlw	66
  3462  001CDC  6E20               	movwf	___ftmul@f2+2,c
  3463  001CDE  EC18  F008         	call	___ftmul	;wreg free
  3464  001CE2  C01B  F02A         	movff	?___ftmul,?_get_RPM
  3465  001CE6  C01C  F02B         	movff	?___ftmul+1,?_get_RPM+1
  3466  001CEA  C01D  F02C         	movff	?___ftmul+2,?_get_RPM+2
  3467  001CEE  D000               	goto	l246
  3468  001CF0                     l246:
  3469  001CF0  0012               	return		;funcret
  3470  001CF2                     __end_of_get_RPM:
  3471                           	opt stack 0
  3472                           tblptru	equ	0xFF8
  3473                           tblptrh	equ	0xFF7
  3474                           tblptrl	equ	0xFF6
  3475                           tablat	equ	0xFF5
  3476                           prodh	equ	0xFF4
  3477                           prodl	equ	0xFF3
  3478                           postinc0	equ	0xFEE
  3479                           wreg	equ	0xFE8
  3480                           postdec1	equ	0xFE5
  3481                           fsr1l	equ	0xFE1
  3482                           postinc2	equ	0xFDE
  3483                           postdec2	equ	0xFDD
  3484                           fsr2h	equ	0xFDA
  3485                           fsr2l	equ	0xFD9
  3486                           status	equ	0xFD8
  3487                           
  3488 ;; *************** function _Wait_One_Second *****************
  3489 ;; Defined at:
  3490 ;;		line 76 in file "Lab9_11.c"
  3491 ;; Parameters:    Size  Location     Type
  3492 ;;		None
  3493 ;; Auto vars:     Size  Location     Type
  3494 ;;  k               2   14[COMRAM] int 
  3495 ;; Return value:  Size  Location     Type
  3496 ;;                  2  215[None  ] int 
  3497 ;; Registers used:
  3498 ;;		wreg, status,2, status,0
  3499 ;; Tracked objects:
  3500 ;;		On entry : 0/0
  3501 ;;		On exit  : 0/0
  3502 ;;		Unchanged: 0/0
  3503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3505 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3507 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3508 ;;Total ram usage:        2 bytes
  3509 ;; Hardware stack levels used:    1
  3510 ;; Hardware stack levels required when called:    2
  3511 ;; This function calls:
  3512 ;;		Nothing
  3513 ;; This function is called by:
  3514 ;;		_get_RPM
  3515 ;; This function uses a non-reentrant model
  3516 ;;
  3517                           
  3518                           	psect	text7
  3519  001FBA                     __ptext7:
  3520                           	opt stack 0
  3521  001FBA                     _Wait_One_Second:
  3522                           	opt stack 27
  3523                           
  3524                           ;Lab9_11.c: 78: for (int k=0;k<0xffff;k++);
  3525                           
  3526                           ;incstack = 0
  3527  001FBA  0E00               	movlw	0
  3528  001FBC  6E10               	movwf	Wait_One_Second@k+1,c
  3529  001FBE  0E00               	movlw	0
  3530  001FC0  6E0F               	movwf	Wait_One_Second@k,c
  3531  001FC2                     l2272:
  3532  001FC2  280F               	incf	Wait_One_Second@k,w,c
  3533  001FC4  E105               	bnz	l2276
  3534  001FC6  2810               	incf	Wait_One_Second@k+1,w,c
  3535  001FC8  B4D8               	btfsc	status,2,c
  3536  001FCA  D006               	goto	l624
  3537  001FCC  D001               	goto	l2276
  3538  001FCE  D004               	goto	l624
  3539  001FD0                     l2276:
  3540  001FD0  4A0F               	infsnz	Wait_One_Second@k,f,c
  3541  001FD2  2A10               	incf	Wait_One_Second@k+1,f,c
  3542  001FD4  D7F6               	goto	l2272
  3543  001FD6  D7FC               	goto	l2276
  3544  001FD8                     l624:
  3545  001FD8  0012               	return		;funcret
  3546  001FDA                     __end_of_Wait_One_Second:
  3547                           	opt stack 0
  3548                           tblptru	equ	0xFF8
  3549                           tblptrh	equ	0xFF7
  3550                           tblptrl	equ	0xFF6
  3551                           tablat	equ	0xFF5
  3552                           prodh	equ	0xFF4
  3553                           prodl	equ	0xFF3
  3554                           postinc0	equ	0xFEE
  3555                           wreg	equ	0xFE8
  3556                           postdec1	equ	0xFE5
  3557                           fsr1l	equ	0xFE1
  3558                           postinc2	equ	0xFDE
  3559                           postdec2	equ	0xFDD
  3560                           fsr2h	equ	0xFDA
  3561                           fsr2l	equ	0xFD9
  3562                           status	equ	0xFD8
  3563                           
  3564 ;; *************** function _Update_Screen *****************
  3565 ;; Defined at:
  3566 ;;		line 69 in file "Main_Screen.c"
  3567 ;; Parameters:    Size  Location     Type
  3568 ;;		None
  3569 ;; Auto vars:     Size  Location     Type
  3570 ;;  neg_tempF       2    9[BANK1 ] int 
  3571 ;; Return value:  Size  Location     Type
  3572 ;;		None               void
  3573 ;; Registers used:
  3574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3575 ;; Tracked objects:
  3576 ;;		On entry : 0/0
  3577 ;;		On exit  : 0/0
  3578 ;;		Unchanged: 0/0
  3579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3581 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3582 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3583 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3584 ;;Total ram usage:        4 bytes
  3585 ;; Hardware stack levels used:    1
  3586 ;; Hardware stack levels required when called:    9
  3587 ;; This function calls:
  3588 ;;		___awdiv
  3589 ;;		___awmod
  3590 ;;		_drawtext
  3591 ;;		_strcpy
  3592 ;; This function is called by:
  3593 ;;		_main
  3594 ;; This function uses a non-reentrant model
  3595 ;;
  3596                           
  3597                           	psect	text8
  3598  00001C                     __ptext8:
  3599                           	opt stack 0
  3600  00001C                     _Update_Screen:
  3601                           	opt stack 21
  3602                           
  3603                           ;Main_Screen.c: 71: if ((DS1621_tempC & 0x80) == 0x80)
  3604                           
  3605                           ;incstack = 0
  3606  00001C  AE41               	btfss	_DS1621_tempC,7,c
  3607  00001E  D01C               	goto	l6020
  3608                           
  3609                           ;Main_Screen.c: 72: {
  3610                           ;Main_Screen.c: 73: tempC[0] = '-';
  3611  000020  0E2D               	movlw	45
  3612  000022  0100               	movlb	0	; () banked
  3613  000024  6FED               	movwf	_tempC& (0+255),b
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;Main_Screen.c: 74: tempC[1] = (DS1621_tempC & 0x7f)/10 + '0';
  3617  000026  0E7F               	movlw	127
  3618  000028  1441               	andwf	_DS1621_tempC,w,c
  3619  00002A  6E15               	movwf	___awdiv@dividend,c
  3620  00002C  6A16               	clrf	___awdiv@dividend+1,c
  3621  00002E  0E00               	movlw	0
  3622  000030  6E18               	movwf	___awdiv@divisor+1,c
  3623  000032  0E0A               	movlw	10
  3624  000034  6E17               	movwf	___awdiv@divisor,c
  3625  000036  EC2D  F00B         	call	___awdiv	;wreg free
  3626  00003A  5015               	movf	?___awdiv,w,c
  3627  00003C  0F30               	addlw	48
  3628  00003E  0100               	movlb	0	; () banked
  3629  000040  6FEE               	movwf	(_tempC+1)& (0+255),b
  3630                           
  3631                           ; BSR set to: 0
  3632                           ;Main_Screen.c: 75: tempC[2] = (DS1621_tempC & 0x7f)%10 + '0';
  3633  000042  0E7F               	movlw	127
  3634  000044  1441               	andwf	_DS1621_tempC,w,c
  3635  000046  6E1D               	movwf	___awmod@dividend,c
  3636  000048  6A1E               	clrf	___awmod@dividend+1,c
  3637  00004A  0E00               	movlw	0
  3638  00004C  6E20               	movwf	___awmod@divisor+1,c
  3639  00004E  0E0A               	movlw	10
  3640  000050  6E1F               	movwf	___awmod@divisor,c
  3641  000052  ECFF  F00B         	call	___awmod	;wreg free
  3642  000056  D01B               	goto	L1
  3643  000058                     l6020:
  3644                           
  3645                           ;Main_Screen.c: 77: else
  3646                           ;Main_Screen.c: 78: {
  3647                           ;Main_Screen.c: 79: tempC[0] = '+';
  3648  000058  0E2B               	movlw	43
  3649  00005A  0100               	movlb	0	; () banked
  3650  00005C  6FED               	movwf	_tempC& (0+255),b
  3651                           
  3652                           ; BSR set to: 0
  3653                           ;Main_Screen.c: 80: tempC[1] = DS1621_tempC/10 + '0';
  3654  00005E  C041  F015         	movff	_DS1621_tempC,___awdiv@dividend
  3655  000062  C042  F016         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  3656  000066  0E00               	movlw	0
  3657  000068  6E18               	movwf	___awdiv@divisor+1,c
  3658  00006A  0E0A               	movlw	10
  3659  00006C  6E17               	movwf	___awdiv@divisor,c
  3660  00006E  EC2D  F00B         	call	___awdiv	;wreg free
  3661  000072  5015               	movf	?___awdiv,w,c
  3662  000074  0F30               	addlw	48
  3663  000076  0100               	movlb	0	; () banked
  3664  000078  6FEE               	movwf	(_tempC+1)& (0+255),b
  3665                           
  3666                           ; BSR set to: 0
  3667                           ;Main_Screen.c: 81: tempC[2] = DS1621_tempC%10 + '0';
  3668  00007A  C041  F01D         	movff	_DS1621_tempC,___awmod@dividend
  3669  00007E  C042  F01E         	movff	_DS1621_tempC+1,___awmod@dividend+1
  3670  000082  0E00               	movlw	0
  3671  000084  6E20               	movwf	___awmod@divisor+1,c
  3672  000086  0E0A               	movlw	10
  3673  000088  6E1F               	movwf	___awmod@divisor,c
  3674  00008A  ECFF  F00B         	call	___awmod	;wreg free
  3675  00008E                     L1:
  3676  00008E  501D               	movf	?___awmod,w,c
  3677  000090  0F30               	addlw	48
  3678  000092  0100               	movlb	0	; () banked
  3679  000094  6FEF               	movwf	(_tempC+2)& (0+255),b
  3680  000096  D000               	goto	l6026
  3681  000098                     l6026:
  3682                           
  3683                           ; BSR set to: 0
  3684                           ;Main_Screen.c: 82: }
  3685                           ;Main_Screen.c: 84: if (DS1621_tempF < 0)
  3686  000098  AE44               	btfss	_DS1621_tempF+1,7,c
  3687  00009A  D029               	goto	l6036
  3688                           
  3689                           ; BSR set to: 0
  3690                           ;Main_Screen.c: 85: {
  3691                           ;Main_Screen.c: 86: tempF[0] = '-';
  3692  00009C  0E2D               	movlw	45
  3693  00009E  0100               	movlb	0	; () banked
  3694  0000A0  6FF1               	movwf	_tempF& (0+255),b
  3695                           
  3696                           ; BSR set to: 0
  3697                           ;Main_Screen.c: 87: int neg_tempF = -DS1621_tempF;
  3698  0000A2  C043  F126         	movff	_DS1621_tempF,??_Update_Screen
  3699  0000A6  C044  F127         	movff	_DS1621_tempF+1,??_Update_Screen+1
  3700  0000AA  0101               	movlb	1	; () banked
  3701  0000AC  1F26               	comf	??_Update_Screen& (0+255),f,b
  3702  0000AE  1F27               	comf	(??_Update_Screen+1)& (0+255),f,b
  3703  0000B0  4B26               	infsnz	??_Update_Screen& (0+255),f,b
  3704  0000B2  2B27               	incf	(??_Update_Screen+1)& (0+255),f,b
  3705  0000B4  C126  F128         	movff	??_Update_Screen,Update_Screen@neg_tempF
  3706  0000B8  C127  F129         	movff	??_Update_Screen+1,Update_Screen@neg_tempF+1
  3707                           
  3708                           ; BSR set to: 1
  3709                           ;Main_Screen.c: 88: tempF[1] = neg_tempF/10 + '0';
  3710  0000BC  C128  F015         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3711  0000C0  C129  F016         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3712  0000C4  0E00               	movlw	0
  3713  0000C6  6E18               	movwf	___awdiv@divisor+1,c
  3714  0000C8  0E0A               	movlw	10
  3715  0000CA  6E17               	movwf	___awdiv@divisor,c
  3716  0000CC  EC2D  F00B         	call	___awdiv	;wreg free
  3717  0000D0  5015               	movf	?___awdiv,w,c
  3718  0000D2  0F30               	addlw	48
  3719  0000D4  0100               	movlb	0	; () banked
  3720  0000D6  6FF2               	movwf	(_tempF+1)& (0+255),b
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;Main_Screen.c: 89: tempF[2] = neg_tempF%10 + '0';
  3724  0000D8  C128  F01D         	movff	Update_Screen@neg_tempF,___awmod@dividend
  3725  0000DC  C129  F01E         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  3726  0000E0  0E00               	movlw	0
  3727  0000E2  6E20               	movwf	___awmod@divisor+1,c
  3728  0000E4  0E0A               	movlw	10
  3729  0000E6  6E1F               	movwf	___awmod@divisor,c
  3730  0000E8  ECFF  F00B         	call	___awmod	;wreg free
  3731  0000EC  D01B               	goto	L2
  3732  0000EE                     l6036:
  3733                           
  3734                           ; BSR set to: 0
  3735                           ;Main_Screen.c: 91: else
  3736                           ;Main_Screen.c: 92: {
  3737                           ;Main_Screen.c: 93: tempF[0] = '+';
  3738  0000EE  0E2B               	movlw	43
  3739  0000F0  0100               	movlb	0	; () banked
  3740  0000F2  6FF1               	movwf	_tempF& (0+255),b
  3741                           
  3742                           ; BSR set to: 0
  3743                           ;Main_Screen.c: 94: tempF[1] = DS1621_tempF/10 + '0';
  3744  0000F4  C043  F015         	movff	_DS1621_tempF,___awdiv@dividend
  3745  0000F8  C044  F016         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  3746  0000FC  0E00               	movlw	0
  3747  0000FE  6E18               	movwf	___awdiv@divisor+1,c
  3748  000100  0E0A               	movlw	10
  3749  000102  6E17               	movwf	___awdiv@divisor,c
  3750  000104  EC2D  F00B         	call	___awdiv	;wreg free
  3751  000108  5015               	movf	?___awdiv,w,c
  3752  00010A  0F30               	addlw	48
  3753  00010C  0100               	movlb	0	; () banked
  3754  00010E  6FF2               	movwf	(_tempF+1)& (0+255),b
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;Main_Screen.c: 95: tempF[2] = DS1621_tempF%10 + '0';
  3758  000110  C043  F01D         	movff	_DS1621_tempF,___awmod@dividend
  3759  000114  C044  F01E         	movff	_DS1621_tempF+1,___awmod@dividend+1
  3760  000118  0E00               	movlw	0
  3761  00011A  6E20               	movwf	___awmod@divisor+1,c
  3762  00011C  0E0A               	movlw	10
  3763  00011E  6E1F               	movwf	___awmod@divisor,c
  3764  000120  ECFF  F00B         	call	___awmod	;wreg free
  3765  000124                     L2:
  3766  000124  501D               	movf	?___awmod,w,c
  3767  000126  0F30               	addlw	48
  3768  000128  0100               	movlb	0	; () banked
  3769  00012A  6FF3               	movwf	(_tempF+2)& (0+255),b
  3770  00012C  D000               	goto	l6042
  3771  00012E                     l6042:
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;Main_Screen.c: 96: }
  3775                           ;Main_Screen.c: 97: time[0] = (hour>>4) + '0';
  3776  00012E  3860               	swapf	_hour,w,c
  3777  000130  0B0F               	andlw	15
  3778  000132  0F30               	addlw	48
  3779  000134  0100               	movlb	0	; () banked
  3780  000136  6FD7               	movwf	_time& (0+255),b
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;Main_Screen.c: 98: time[1] = (hour & 0x0f)+ '0';
  3784  000138  5060               	movf	_hour,w,c
  3785  00013A  0B0F               	andlw	15
  3786  00013C  0F30               	addlw	48
  3787  00013E  0100               	movlb	0	; () banked
  3788  000140  6FD8               	movwf	(_time+1)& (0+255),b
  3789                           
  3790                           ; BSR set to: 0
  3791                           ;Main_Screen.c: 101: time[3] = (minute>>4) + '0';
  3792  000142  3861               	swapf	_minute,w,c
  3793  000144  0B0F               	andlw	15
  3794  000146  0F30               	addlw	48
  3795  000148  0100               	movlb	0	; () banked
  3796  00014A  6FDA               	movwf	(_time+3)& (0+255),b
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;Main_Screen.c: 102: time[4] = (minute & 0x0f)+ '0';
  3800  00014C  5061               	movf	_minute,w,c
  3801  00014E  0B0F               	andlw	15
  3802  000150  0F30               	addlw	48
  3803  000152  0100               	movlb	0	; () banked
  3804  000154  6FDB               	movwf	(_time+4)& (0+255),b
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;Main_Screen.c: 104: time[6] = (second>>4) + '0';
  3808  000156  3864               	swapf	_second,w,c
  3809  000158  0B0F               	andlw	15
  3810  00015A  0F30               	addlw	48
  3811  00015C  0100               	movlb	0	; () banked
  3812  00015E  6FDD               	movwf	(_time+6)& (0+255),b
  3813                           
  3814                           ; BSR set to: 0
  3815                           ;Main_Screen.c: 105: time[7] = (second & 0x0f)+ '0';
  3816  000160  5064               	movf	_second,w,c
  3817  000162  0B0F               	andlw	15
  3818  000164  0F30               	addlw	48
  3819  000166  0100               	movlb	0	; () banked
  3820  000168  6FDE               	movwf	(_time+7)& (0+255),b
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;Main_Screen.c: 107: date[0] = (month>>4) + '0';
  3824  00016A  3862               	swapf	_month,w,c
  3825  00016C  0B0F               	andlw	15
  3826  00016E  0F30               	addlw	48
  3827  000170  0100               	movlb	0	; () banked
  3828  000172  6FCE               	movwf	_date& (0+255),b
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;Main_Screen.c: 108: date[1] = (month & 0x0f)+ '0';
  3832  000174  5062               	movf	_month,w,c
  3833  000176  0B0F               	andlw	15
  3834  000178  0F30               	addlw	48
  3835  00017A  0100               	movlb	0	; () banked
  3836  00017C  6FCF               	movwf	(_date+1)& (0+255),b
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;Main_Screen.c: 110: date[3] = (day>>4) + '0';
  3840  00017E  385C               	swapf	_day,w,c
  3841  000180  0B0F               	andlw	15
  3842  000182  0F30               	addlw	48
  3843  000184  0100               	movlb	0	; () banked
  3844  000186  6FD1               	movwf	(_date+3)& (0+255),b
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;Main_Screen.c: 111: date[4] = (day & 0x0f)+ '0';
  3848  000188  505C               	movf	_day,w,c
  3849  00018A  0B0F               	andlw	15
  3850  00018C  0F30               	addlw	48
  3851  00018E  0100               	movlb	0	; () banked
  3852  000190  6FD2               	movwf	(_date+4)& (0+255),b
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;Main_Screen.c: 113: date[6] = (year>>4) + '0';
  3856  000192  386E               	swapf	_year,w,c
  3857  000194  0B0F               	andlw	15
  3858  000196  0F30               	addlw	48
  3859  000198  0100               	movlb	0	; () banked
  3860  00019A  6FD4               	movwf	(_date+6)& (0+255),b
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;Main_Screen.c: 114: date[7] = (year & 0x0f)+ '0';
  3864  00019C  506E               	movf	_year,w,c
  3865  00019E  0B0F               	andlw	15
  3866  0001A0  0F30               	addlw	48
  3867  0001A2  0100               	movlb	0	; () banked
  3868  0001A4  6FD5               	movwf	(_date+7)& (0+255),b
  3869                           
  3870                           ; BSR set to: 0
  3871                           ;Main_Screen.c: 117: if (FAN == 1) strcpy(Fan_SW_Txt, "ON ");
  3872  0001A6  044F               	decf	_FAN,w,c
  3873  0001A8  A4D8               	btfss	status,2,c
  3874  0001AA  D00B               	goto	l6070
  3875                           
  3876                           ; BSR set to: 0
  3877  0001AC  0EE9               	movlw	low _Fan_SW_Txt
  3878  0001AE  6E0F               	movwf	strcpy@to,c
  3879  0001B0  0E00               	movlw	high _Fan_SW_Txt
  3880  0001B2  6E10               	movwf	strcpy@to+1,c
  3881  0001B4  0EED               	movlw	low STR_16
  3882  0001B6  6E11               	movwf	strcpy@from,c
  3883  0001B8  0EFF               	movlw	high STR_16
  3884  0001BA  6E12               	movwf	strcpy@from+1,c
  3885  0001BC  EC5F  F00F         	call	_strcpy	;wreg free
  3886  0001C0  D00B               	goto	l6072
  3887  0001C2                     l6070:
  3888                           
  3889                           ;Main_Screen.c: 118: else strcpy(Fan_SW_Txt, "OFF");
  3890  0001C2  0EE9               	movlw	low _Fan_SW_Txt
  3891  0001C4  6E0F               	movwf	strcpy@to,c
  3892  0001C6  0E00               	movlw	high _Fan_SW_Txt
  3893  0001C8  6E10               	movwf	strcpy@to+1,c
  3894  0001CA  0EF1               	movlw	low STR_17
  3895  0001CC  6E11               	movwf	strcpy@from,c
  3896  0001CE  0EFF               	movlw	high STR_17
  3897  0001D0  6E12               	movwf	strcpy@from+1,c
  3898  0001D2  EC5F  F00F         	call	_strcpy	;wreg free
  3899  0001D6  D000               	goto	l6072
  3900  0001D8                     l6072:
  3901                           
  3902                           ;Main_Screen.c: 121: DC_Txt[0] = duty_cycle/100 + '0';
  3903  0001D8  C05E  F015         	movff	_duty_cycle,___awdiv@dividend
  3904  0001DC  6A16               	clrf	___awdiv@dividend+1,c
  3905  0001DE  0E00               	movlw	0
  3906  0001E0  6E18               	movwf	___awdiv@divisor+1,c
  3907  0001E2  0E64               	movlw	100
  3908  0001E4  6E17               	movwf	___awdiv@divisor,c
  3909  0001E6  EC2D  F00B         	call	___awdiv	;wreg free
  3910  0001EA  5015               	movf	?___awdiv,w,c
  3911  0001EC  0F30               	addlw	48
  3912  0001EE  0100               	movlb	0	; () banked
  3913  0001F0  6FE5               	movwf	_DC_Txt& (0+255),b
  3914                           
  3915                           ; BSR set to: 0
  3916                           ;Main_Screen.c: 122: DC_Txt[1] = (duty_cycle/10) % 10 + '0';
  3917  0001F2  0E00               	movlw	0
  3918  0001F4  6E18               	movwf	___awdiv@divisor+1,c
  3919  0001F6  0E0A               	movlw	10
  3920  0001F8  6E17               	movwf	___awdiv@divisor,c
  3921  0001FA  C05E  F015         	movff	_duty_cycle,___awdiv@dividend
  3922  0001FE  6A16               	clrf	___awdiv@dividend+1,c
  3923  000200  EC2D  F00B         	call	___awdiv	;wreg free
  3924  000204  C015  F01D         	movff	?___awdiv,___awmod@dividend
  3925  000208  C016  F01E         	movff	?___awdiv+1,___awmod@dividend+1
  3926  00020C  0E00               	movlw	0
  3927  00020E  6E20               	movwf	___awmod@divisor+1,c
  3928  000210  0E0A               	movlw	10
  3929  000212  6E1F               	movwf	___awmod@divisor,c
  3930  000214  ECFF  F00B         	call	___awmod	;wreg free
  3931  000218  501D               	movf	?___awmod,w,c
  3932  00021A  0F30               	addlw	48
  3933  00021C  0100               	movlb	0	; () banked
  3934  00021E  6FE6               	movwf	(_DC_Txt+1)& (0+255),b
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;Main_Screen.c: 123: DC_Txt[2] = duty_cycle % 10 + '0';
  3938  000220  C05E  F01D         	movff	_duty_cycle,___awmod@dividend
  3939  000224  6A1E               	clrf	___awmod@dividend+1,c
  3940  000226  0E00               	movlw	0
  3941  000228  6E20               	movwf	___awmod@divisor+1,c
  3942  00022A  0E0A               	movlw	10
  3943  00022C  6E1F               	movwf	___awmod@divisor,c
  3944  00022E  ECFF  F00B         	call	___awmod	;wreg free
  3945  000232  501D               	movf	?___awmod,w,c
  3946  000234  0F30               	addlw	48
  3947  000236  0100               	movlb	0	; () banked
  3948  000238  6FE7               	movwf	(_DC_Txt+2)& (0+255),b
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;Main_Screen.c: 126: RPM_Txt[0] = rpm/1000 + '0';
  3952  00023A  C049  F015         	movff	_rpm,___awdiv@dividend
  3953  00023E  C04A  F016         	movff	_rpm+1,___awdiv@dividend+1
  3954  000242  0E03               	movlw	3
  3955  000244  6E18               	movwf	___awdiv@divisor+1,c
  3956  000246  0EE8               	movlw	232
  3957  000248  6E17               	movwf	___awdiv@divisor,c
  3958  00024A  EC2D  F00B         	call	___awdiv	;wreg free
  3959  00024E  5015               	movf	?___awdiv,w,c
  3960  000250  0F30               	addlw	48
  3961  000252  0100               	movlb	0	; () banked
  3962  000254  6FE0               	movwf	_RPM_Txt& (0+255),b
  3963                           
  3964                           ; BSR set to: 0
  3965                           ;Main_Screen.c: 127: RPM_Txt[1] = (rpm/100) % 10 + '0';
  3966  000256  0E00               	movlw	0
  3967  000258  6E18               	movwf	___awdiv@divisor+1,c
  3968  00025A  0E64               	movlw	100
  3969  00025C  6E17               	movwf	___awdiv@divisor,c
  3970  00025E  C049  F015         	movff	_rpm,___awdiv@dividend
  3971  000262  C04A  F016         	movff	_rpm+1,___awdiv@dividend+1
  3972  000266  EC2D  F00B         	call	___awdiv	;wreg free
  3973  00026A  C015  F01D         	movff	?___awdiv,___awmod@dividend
  3974  00026E  C016  F01E         	movff	?___awdiv+1,___awmod@dividend+1
  3975  000272  0E00               	movlw	0
  3976  000274  6E20               	movwf	___awmod@divisor+1,c
  3977  000276  0E0A               	movlw	10
  3978  000278  6E1F               	movwf	___awmod@divisor,c
  3979  00027A  ECFF  F00B         	call	___awmod	;wreg free
  3980  00027E  501D               	movf	?___awmod,w,c
  3981  000280  0F30               	addlw	48
  3982  000282  0100               	movlb	0	; () banked
  3983  000284  6FE1               	movwf	(_RPM_Txt+1)& (0+255),b
  3984                           
  3985                           ; BSR set to: 0
  3986                           ;Main_Screen.c: 128: RPM_Txt[2] = (rpm/10) % 10 + '0';
  3987  000286  0E00               	movlw	0
  3988  000288  6E18               	movwf	___awdiv@divisor+1,c
  3989  00028A  0E0A               	movlw	10
  3990  00028C  6E17               	movwf	___awdiv@divisor,c
  3991  00028E  C049  F015         	movff	_rpm,___awdiv@dividend
  3992  000292  C04A  F016         	movff	_rpm+1,___awdiv@dividend+1
  3993  000296  EC2D  F00B         	call	___awdiv	;wreg free
  3994  00029A  C015  F01D         	movff	?___awdiv,___awmod@dividend
  3995  00029E  C016  F01E         	movff	?___awdiv+1,___awmod@dividend+1
  3996  0002A2  0E00               	movlw	0
  3997  0002A4  6E20               	movwf	___awmod@divisor+1,c
  3998  0002A6  0E0A               	movlw	10
  3999  0002A8  6E1F               	movwf	___awmod@divisor,c
  4000  0002AA  ECFF  F00B         	call	___awmod	;wreg free
  4001  0002AE  501D               	movf	?___awmod,w,c
  4002  0002B0  0F30               	addlw	48
  4003  0002B2  0100               	movlb	0	; () banked
  4004  0002B4  6FE2               	movwf	(_RPM_Txt+2)& (0+255),b
  4005                           
  4006                           ; BSR set to: 0
  4007                           ;Main_Screen.c: 129: RPM_Txt[3] = rpm % 10 + '0';
  4008  0002B6  C049  F01D         	movff	_rpm,___awmod@dividend
  4009  0002BA  C04A  F01E         	movff	_rpm+1,___awmod@dividend+1
  4010  0002BE  0E00               	movlw	0
  4011  0002C0  6E20               	movwf	___awmod@divisor+1,c
  4012  0002C2  0E0A               	movlw	10
  4013  0002C4  6E1F               	movwf	___awmod@divisor,c
  4014  0002C6  ECFF  F00B         	call	___awmod	;wreg free
  4015  0002CA  501D               	movf	?___awmod,w,c
  4016  0002CC  0F30               	addlw	48
  4017  0002CE  0100               	movlb	0	; () banked
  4018  0002D0  6FE3               	movwf	(_RPM_Txt+3)& (0+255),b
  4019                           
  4020                           ; BSR set to: 0
  4021                           ;Main_Screen.c: 131: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  4022  0002D2  0E17               	movlw	23
  4023  0002D4  6E37               	movwf	drawtext@y,c
  4024  0002D6  0EED               	movlw	low _tempC
  4025  0002D8  6E38               	movwf	drawtext@_text,c
  4026  0002DA  0E00               	movlw	high _tempC
  4027  0002DC  6E39               	movwf	drawtext@_text+1,c
  4028  0002DE  0EFF               	movlw	255
  4029  0002E0  6E3B               	movwf	drawtext@color+1,c
  4030  0002E2  0EE0               	movlw	224
  4031  0002E4  6E3A               	movwf	drawtext@color,c
  4032  0002E6  0E00               	movlw	0
  4033  0002E8  6E3D               	movwf	drawtext@bg+1,c
  4034  0002EA  0E00               	movlw	0
  4035  0002EC  6E3C               	movwf	drawtext@bg,c
  4036  0002EE  0E02               	movlw	2
  4037  0002F0  6E3E               	movwf	drawtext@size,c
  4038  0002F2  0E01               	movlw	1
  4039  0002F4  EC05  F007         	call	_drawtext
  4040                           
  4041                           ;Main_Screen.c: 132: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  4042  0002F8  0E17               	movlw	23
  4043  0002FA  6E37               	movwf	drawtext@y,c
  4044  0002FC  0EF1               	movlw	low _tempF
  4045  0002FE  6E38               	movwf	drawtext@_text,c
  4046  000300  0E00               	movlw	high _tempF
  4047  000302  6E39               	movwf	drawtext@_text+1,c
  4048  000304  0EFF               	movlw	255
  4049  000306  6E3B               	movwf	drawtext@color+1,c
  4050  000308  0EE0               	movlw	224
  4051  00030A  6E3A               	movwf	drawtext@color,c
  4052  00030C  0E00               	movlw	0
  4053  00030E  6E3D               	movwf	drawtext@bg+1,c
  4054  000310  0E00               	movlw	0
  4055  000312  6E3C               	movwf	drawtext@bg,c
  4056  000314  0E02               	movlw	2
  4057  000316  6E3E               	movwf	drawtext@size,c
  4058  000318  0E46               	movlw	70
  4059  00031A  EC05  F007         	call	_drawtext
  4060                           
  4061                           ;Main_Screen.c: 133: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  4062  00031E  0E34               	movlw	52
  4063  000320  6E37               	movwf	drawtext@y,c
  4064  000322  0ED7               	movlw	low _time
  4065  000324  6E38               	movwf	drawtext@_text,c
  4066  000326  0E00               	movlw	high _time
  4067  000328  6E39               	movwf	drawtext@_text+1,c
  4068  00032A  0E07               	movlw	7
  4069  00032C  6E3B               	movwf	drawtext@color+1,c
  4070  00032E  683A               	setf	drawtext@color,c
  4071  000330  0E00               	movlw	0
  4072  000332  6E3D               	movwf	drawtext@bg+1,c
  4073  000334  0E00               	movlw	0
  4074  000336  6E3C               	movwf	drawtext@bg,c
  4075  000338  0E02               	movlw	2
  4076  00033A  6E3E               	movwf	drawtext@size,c
  4077  00033C  0E0F               	movlw	15
  4078  00033E  EC05  F007         	call	_drawtext
  4079                           
  4080                           ;Main_Screen.c: 134: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  4081  000342  0E52               	movlw	82
  4082  000344  6E37               	movwf	drawtext@y,c
  4083  000346  0ECE               	movlw	low _date
  4084  000348  6E38               	movwf	drawtext@_text,c
  4085  00034A  0E00               	movlw	high _date
  4086  00034C  6E39               	movwf	drawtext@_text+1,c
  4087  00034E  0E07               	movlw	7
  4088  000350  6E3B               	movwf	drawtext@color+1,c
  4089  000352  0EE0               	movlw	224
  4090  000354  6E3A               	movwf	drawtext@color,c
  4091  000356  0E00               	movlw	0
  4092  000358  6E3D               	movwf	drawtext@bg+1,c
  4093  00035A  0E00               	movlw	0
  4094  00035C  6E3C               	movwf	drawtext@bg,c
  4095  00035E  0E02               	movlw	2
  4096  000360  6E3E               	movwf	drawtext@size,c
  4097  000362  0E0F               	movlw	15
  4098  000364  EC05  F007         	call	_drawtext
  4099                           
  4100                           ;Main_Screen.c: 136: drawtext(95, 130, Fan_SW_Txt, 0xF800 , 0x0000 , 1);
  4101  000368  0E82               	movlw	130
  4102  00036A  6E37               	movwf	drawtext@y,c
  4103  00036C  0EE9               	movlw	low _Fan_SW_Txt
  4104  00036E  6E38               	movwf	drawtext@_text,c
  4105  000370  0E00               	movlw	high _Fan_SW_Txt
  4106  000372  6E39               	movwf	drawtext@_text+1,c
  4107  000374  0EF8               	movlw	248
  4108  000376  6E3B               	movwf	drawtext@color+1,c
  4109  000378  0E00               	movlw	0
  4110  00037A  6E3A               	movwf	drawtext@color,c
  4111  00037C  0E00               	movlw	0
  4112  00037E  6E3D               	movwf	drawtext@bg+1,c
  4113  000380  0E00               	movlw	0
  4114  000382  6E3C               	movwf	drawtext@bg,c
  4115  000384  0E01               	movlw	1
  4116  000386  6E3E               	movwf	drawtext@size,c
  4117  000388  0E5F               	movlw	95
  4118  00038A  EC05  F007         	call	_drawtext
  4119                           
  4120                           ;Main_Screen.c: 137: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  4121  00038E  0E96               	movlw	150
  4122  000390  6E37               	movwf	drawtext@y,c
  4123  000392  0EE5               	movlw	low _DC_Txt
  4124  000394  6E38               	movwf	drawtext@_text,c
  4125  000396  0E00               	movlw	high _DC_Txt
  4126  000398  6E39               	movwf	drawtext@_text+1,c
  4127  00039A  0E07               	movlw	7
  4128  00039C  6E3B               	movwf	drawtext@color+1,c
  4129  00039E  0EE0               	movlw	224
  4130  0003A0  6E3A               	movwf	drawtext@color,c
  4131  0003A2  0E00               	movlw	0
  4132  0003A4  6E3D               	movwf	drawtext@bg+1,c
  4133  0003A6  0E00               	movlw	0
  4134  0003A8  6E3C               	movwf	drawtext@bg,c
  4135  0003AA  0E01               	movlw	1
  4136  0003AC  6E3E               	movwf	drawtext@size,c
  4137  0003AE  0E0A               	movlw	10
  4138  0003B0  EC05  F007         	call	_drawtext
  4139                           
  4140                           ;Main_Screen.c: 138: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  4141  0003B4  0E96               	movlw	150
  4142  0003B6  6E37               	movwf	drawtext@y,c
  4143  0003B8  0EE0               	movlw	low _RPM_Txt
  4144  0003BA  6E38               	movwf	drawtext@_text,c
  4145  0003BC  0E00               	movlw	high _RPM_Txt
  4146  0003BE  6E39               	movwf	drawtext@_text+1,c
  4147  0003C0  0E07               	movlw	7
  4148  0003C2  6E3B               	movwf	drawtext@color+1,c
  4149  0003C4  0EE0               	movlw	224
  4150  0003C6  6E3A               	movwf	drawtext@color,c
  4151  0003C8  0E00               	movlw	0
  4152  0003CA  6E3D               	movwf	drawtext@bg+1,c
  4153  0003CC  0E00               	movlw	0
  4154  0003CE  6E3C               	movwf	drawtext@bg,c
  4155  0003D0  0E01               	movlw	1
  4156  0003D2  6E3E               	movwf	drawtext@size,c
  4157  0003D4  0E5D               	movlw	93
  4158  0003D6  EC05  F007         	call	_drawtext
  4159  0003DA  0012               	return		;funcret
  4160  0003DC                     __end_of_Update_Screen:
  4161                           	opt stack 0
  4162                           tblptru	equ	0xFF8
  4163                           tblptrh	equ	0xFF7
  4164                           tblptrl	equ	0xFF6
  4165                           tablat	equ	0xFF5
  4166                           prodh	equ	0xFF4
  4167                           prodl	equ	0xFF3
  4168                           postinc0	equ	0xFEE
  4169                           wreg	equ	0xFE8
  4170                           postdec1	equ	0xFE5
  4171                           fsr1l	equ	0xFE1
  4172                           postinc2	equ	0xFDE
  4173                           postdec2	equ	0xFDD
  4174                           fsr2h	equ	0xFDA
  4175                           fsr2l	equ	0xFD9
  4176                           status	equ	0xFD8
  4177                           
  4178 ;; *************** function ___awmod *****************
  4179 ;; Defined at:
  4180 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  4181 ;; Parameters:    Size  Location     Type
  4182 ;;  dividend        2   28[COMRAM] int 
  4183 ;;  divisor         2   30[COMRAM] int 
  4184 ;; Auto vars:     Size  Location     Type
  4185 ;;  sign            1   33[COMRAM] unsigned char 
  4186 ;;  counter         1   32[COMRAM] unsigned char 
  4187 ;; Return value:  Size  Location     Type
  4188 ;;                  2   28[COMRAM] int 
  4189 ;; Registers used:
  4190 ;;		wreg, status,2, status,0
  4191 ;; Tracked objects:
  4192 ;;		On entry : 0/0
  4193 ;;		On exit  : 0/0
  4194 ;;		Unchanged: 0/0
  4195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4196 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4197 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4199 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4200 ;;Total ram usage:        6 bytes
  4201 ;; Hardware stack levels used:    1
  4202 ;; Hardware stack levels required when called:    2
  4203 ;; This function calls:
  4204 ;;		Nothing
  4205 ;; This function is called by:
  4206 ;;		_Update_Screen
  4207 ;;		_dec_2_bcd
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211                           	psect	text9
  4212  0017FE                     __ptext9:
  4213                           	opt stack 0
  4214  0017FE                     ___awmod:
  4215                           	opt stack 27
  4216                           
  4217                           ;incstack = 0
  4218  0017FE  0E00               	movlw	0
  4219  001800  6E22               	movwf	___awmod@sign,c
  4220  001802  AE1E               	btfss	___awmod@dividend+1,7,c
  4221  001804  D007               	goto	l5694
  4222  001806  6C1D               	negf	___awmod@dividend,c
  4223  001808  1E1E               	comf	___awmod@dividend+1,f,c
  4224  00180A  B0D8               	btfsc	status,0,c
  4225  00180C  2A1E               	incf	___awmod@dividend+1,f,c
  4226  00180E  0E01               	movlw	1
  4227  001810  6E22               	movwf	___awmod@sign,c
  4228  001812  D000               	goto	l5694
  4229  001814                     l5694:
  4230  001814  AE20               	btfss	___awmod@divisor+1,7,c
  4231  001816  D005               	goto	l5698
  4232  001818  6C1F               	negf	___awmod@divisor,c
  4233  00181A  1E20               	comf	___awmod@divisor+1,f,c
  4234  00181C  B0D8               	btfsc	status,0,c
  4235  00181E  2A20               	incf	___awmod@divisor+1,f,c
  4236  001820  D000               	goto	l5698
  4237  001822                     l5698:
  4238  001822  501F               	movf	___awmod@divisor,w,c
  4239  001824  1020               	iorwf	___awmod@divisor+1,w,c
  4240  001826  B4D8               	btfsc	status,2,c
  4241  001828  D01D               	goto	l5714
  4242  00182A  0E01               	movlw	1
  4243  00182C  6E21               	movwf	___awmod@counter,c
  4244  00182E  D005               	goto	l5704
  4245  001830                     l5702:
  4246  001830  90D8               	bcf	status,0,c
  4247  001832  361F               	rlcf	___awmod@divisor,f,c
  4248  001834  3620               	rlcf	___awmod@divisor+1,f,c
  4249  001836  2A21               	incf	___awmod@counter,f,c
  4250  001838  D000               	goto	l5704
  4251  00183A                     l5704:
  4252  00183A  BE20               	btfsc	___awmod@divisor+1,7,c
  4253  00183C  D002               	goto	l5706
  4254  00183E  D7F8               	goto	l5702
  4255  001840  D000               	goto	l5706
  4256  001842                     l5706:
  4257  001842  501F               	movf	___awmod@divisor,w,c
  4258  001844  5C1D               	subwf	___awmod@dividend,w,c
  4259  001846  5020               	movf	___awmod@divisor+1,w,c
  4260  001848  581E               	subwfb	___awmod@dividend+1,w,c
  4261  00184A  A0D8               	btfss	status,0,c
  4262  00184C  D005               	goto	l5710
  4263  00184E  501F               	movf	___awmod@divisor,w,c
  4264  001850  5E1D               	subwf	___awmod@dividend,f,c
  4265  001852  5020               	movf	___awmod@divisor+1,w,c
  4266  001854  5A1E               	subwfb	___awmod@dividend+1,f,c
  4267  001856  D000               	goto	l5710
  4268  001858                     l5710:
  4269  001858  90D8               	bcf	status,0,c
  4270  00185A  3220               	rrcf	___awmod@divisor+1,f,c
  4271  00185C  321F               	rrcf	___awmod@divisor,f,c
  4272  00185E  2E21               	decfsz	___awmod@counter,f,c
  4273  001860  D7F0               	goto	l5706
  4274  001862  D000               	goto	l5714
  4275  001864                     l5714:
  4276  001864  5022               	movf	___awmod@sign,w,c
  4277  001866  B4D8               	btfsc	status,2,c
  4278  001868  D005               	goto	l5718
  4279  00186A  6C1D               	negf	___awmod@dividend,c
  4280  00186C  1E1E               	comf	___awmod@dividend+1,f,c
  4281  00186E  B0D8               	btfsc	status,0,c
  4282  001870  2A1E               	incf	___awmod@dividend+1,f,c
  4283  001872  D000               	goto	l5718
  4284  001874                     l5718:
  4285  001874  C01D  F01D         	movff	___awmod@dividend,?___awmod
  4286  001878  C01E  F01E         	movff	___awmod@dividend+1,?___awmod+1
  4287  00187C  D000               	goto	l1132
  4288  00187E                     l1132:
  4289  00187E  0012               	return		;funcret
  4290  001880                     __end_of___awmod:
  4291                           	opt stack 0
  4292                           tblptru	equ	0xFF8
  4293                           tblptrh	equ	0xFF7
  4294                           tblptrl	equ	0xFF6
  4295                           tablat	equ	0xFF5
  4296                           prodh	equ	0xFF4
  4297                           prodl	equ	0xFF3
  4298                           postinc0	equ	0xFEE
  4299                           wreg	equ	0xFE8
  4300                           postdec1	equ	0xFE5
  4301                           fsr1l	equ	0xFE1
  4302                           postinc2	equ	0xFDE
  4303                           postdec2	equ	0xFDD
  4304                           fsr2h	equ	0xFDA
  4305                           fsr2l	equ	0xFD9
  4306                           status	equ	0xFD8
  4307                           
  4308 ;; *************** function _Toggle_Fan *****************
  4309 ;; Defined at:
  4310 ;;		line 30 in file "Fan_Support.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;		None
  4313 ;; Auto vars:     Size  Location     Type
  4314 ;;		None
  4315 ;; Return value:  Size  Location     Type
  4316 ;;		None               void
  4317 ;; Registers used:
  4318 ;;		wreg, status,2, status,0, cstack
  4319 ;; Tracked objects:
  4320 ;;		On entry : 0/0
  4321 ;;		On exit  : 0/0
  4322 ;;		Unchanged: 0/0
  4323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4328 ;;Total ram usage:        0 bytes
  4329 ;; Hardware stack levels used:    1
  4330 ;; Hardware stack levels required when called:    6
  4331 ;; This function calls:
  4332 ;;		_Turn_Off_Fan
  4333 ;;		_Turn_On_Fan
  4334 ;; This function is called by:
  4335 ;;		_main
  4336 ;; This function uses a non-reentrant model
  4337 ;;
  4338                           
  4339                           	psect	text10
  4340  00210E                     __ptext10:
  4341                           	opt stack 0
  4342  00210E                     _Toggle_Fan:
  4343                           	opt stack 24
  4344                           
  4345                           ;Fan_Support.c: 32: if (FAN) Turn_Off_Fan();
  4346                           
  4347                           ;incstack = 0
  4348  00210E  504F               	movf	_FAN,w,c
  4349  002110  B4D8               	btfsc	status,2,c
  4350  002112  D003               	goto	l5796
  4351  002114  ECF7  F010         	call	_Turn_Off_Fan	;wreg free
  4352  002118  D003               	goto	l251
  4353  00211A                     l5796:
  4354                           
  4355                           ;Fan_Support.c: 33: else Turn_On_Fan();
  4356  00211A  ECD2  F010         	call	_Turn_On_Fan	;wreg free
  4357  00211E  D000               	goto	l251
  4358  002120                     l251:
  4359  002120  0012               	return		;funcret
  4360  002122                     __end_of_Toggle_Fan:
  4361                           	opt stack 0
  4362                           tblptru	equ	0xFF8
  4363                           tblptrh	equ	0xFF7
  4364                           tblptrl	equ	0xFF6
  4365                           tablat	equ	0xFF5
  4366                           prodh	equ	0xFF4
  4367                           prodl	equ	0xFF3
  4368                           postinc0	equ	0xFEE
  4369                           wreg	equ	0xFE8
  4370                           postdec1	equ	0xFE5
  4371                           fsr1l	equ	0xFE1
  4372                           postinc2	equ	0xFDE
  4373                           postdec2	equ	0xFDD
  4374                           fsr2h	equ	0xFDA
  4375                           fsr2l	equ	0xFD9
  4376                           status	equ	0xFD8
  4377                           
  4378 ;; *************** function _Turn_On_Fan *****************
  4379 ;; Defined at:
  4380 ;;		line 43 in file "Fan_Support.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;		None
  4383 ;; Auto vars:     Size  Location     Type
  4384 ;;		None
  4385 ;; Return value:  Size  Location     Type
  4386 ;;		None               void
  4387 ;; Registers used:
  4388 ;;		wreg, status,2, status,0, cstack
  4389 ;; Tracked objects:
  4390 ;;		On entry : 0/0
  4391 ;;		On exit  : 0/0
  4392 ;;		Unchanged: 0/0
  4393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4398 ;;Total ram usage:        0 bytes
  4399 ;; Hardware stack levels used:    1
  4400 ;; Hardware stack levels required when called:    5
  4401 ;; This function calls:
  4402 ;;		_do_update_pwm
  4403 ;; This function is called by:
  4404 ;;		_Toggle_Fan
  4405 ;; This function uses a non-reentrant model
  4406 ;;
  4407                           
  4408                           	psect	text11
  4409  0021A4                     __ptext11:
  4410                           	opt stack 0
  4411  0021A4                     _Turn_On_Fan:
  4412                           	opt stack 24
  4413                           
  4414                           ;Fan_Support.c: 45: FAN = 1;
  4415                           
  4416                           ;incstack = 0
  4417  0021A4  0E01               	movlw	1
  4418  0021A6  6E4F               	movwf	_FAN,c
  4419                           
  4420                           ;Fan_Support.c: 46: do_update_pwm(duty_cycle);
  4421  0021A8  505E               	movf	_duty_cycle,w,c
  4422  0021AA  EC5F  F00A         	call	_do_update_pwm
  4423                           
  4424                           ;Fan_Support.c: 47: PORTAbits.RA5 = 1;
  4425  0021AE  8A80               	bsf	3968,5,c	;volatile
  4426                           
  4427                           ;Fan_Support.c: 48: PORTAbits.RA4 = 1;
  4428  0021B0  8880               	bsf	3968,4,c	;volatile
  4429  0021B2  0012               	return		;funcret
  4430  0021B4                     __end_of_Turn_On_Fan:
  4431                           	opt stack 0
  4432                           tblptru	equ	0xFF8
  4433                           tblptrh	equ	0xFF7
  4434                           tblptrl	equ	0xFF6
  4435                           tablat	equ	0xFF5
  4436                           prodh	equ	0xFF4
  4437                           prodl	equ	0xFF3
  4438                           postinc0	equ	0xFEE
  4439                           wreg	equ	0xFE8
  4440                           postdec1	equ	0xFE5
  4441                           fsr1l	equ	0xFE1
  4442                           postinc2	equ	0xFDE
  4443                           postdec2	equ	0xFDD
  4444                           fsr2h	equ	0xFDA
  4445                           fsr2l	equ	0xFD9
  4446                           status	equ	0xFD8
  4447                           
  4448 ;; *************** function _Turn_Off_Fan *****************
  4449 ;; Defined at:
  4450 ;;		line 36 in file "Fan_Support.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;		None
  4453 ;; Auto vars:     Size  Location     Type
  4454 ;;		None
  4455 ;; Return value:  Size  Location     Type
  4456 ;;		None               void
  4457 ;; Registers used:
  4458 ;;		wreg, status,2
  4459 ;; Tracked objects:
  4460 ;;		On entry : 0/0
  4461 ;;		On exit  : 0/0
  4462 ;;		Unchanged: 0/0
  4463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4468 ;;Total ram usage:        0 bytes
  4469 ;; Hardware stack levels used:    1
  4470 ;; Hardware stack levels required when called:    2
  4471 ;; This function calls:
  4472 ;;		Nothing
  4473 ;; This function is called by:
  4474 ;;		_Toggle_Fan
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           	psect	text12
  4479  0021EE                     __ptext12:
  4480                           	opt stack 0
  4481  0021EE                     _Turn_Off_Fan:
  4482                           	opt stack 27
  4483                           
  4484                           ;Fan_Support.c: 38: FAN = 0;
  4485                           
  4486                           ;incstack = 0
  4487  0021EE  0E00               	movlw	0
  4488  0021F0  6E4F               	movwf	_FAN,c
  4489                           
  4490                           ;Fan_Support.c: 39: PORTAbits.RA5 = 0;
  4491  0021F2  9A80               	bcf	3968,5,c	;volatile
  4492                           
  4493                           ;Fan_Support.c: 40: PORTAbits.RA4 = 0;
  4494  0021F4  9880               	bcf	3968,4,c	;volatile
  4495  0021F6  0012               	return		;funcret
  4496  0021F8                     __end_of_Turn_Off_Fan:
  4497                           	opt stack 0
  4498                           tblptru	equ	0xFF8
  4499                           tblptrh	equ	0xFF7
  4500                           tblptrl	equ	0xFF6
  4501                           tablat	equ	0xFF5
  4502                           prodh	equ	0xFF4
  4503                           prodl	equ	0xFF3
  4504                           postinc0	equ	0xFEE
  4505                           wreg	equ	0xFE8
  4506                           postdec1	equ	0xFE5
  4507                           fsr1l	equ	0xFE1
  4508                           postinc2	equ	0xFDE
  4509                           postdec2	equ	0xFDD
  4510                           fsr2h	equ	0xFDA
  4511                           fsr2l	equ	0xFD9
  4512                           status	equ	0xFD8
  4513                           
  4514 ;; *************** function _Set_RPM_RGB *****************
  4515 ;; Defined at:
  4516 ;;		line 125 in file "Fan_Support.c"
  4517 ;; Parameters:    Size  Location     Type
  4518 ;;  rpm             2   28[COMRAM] int 
  4519 ;; Auto vars:     Size  Location     Type
  4520 ;;		None
  4521 ;; Return value:  Size  Location     Type
  4522 ;;		None               void
  4523 ;; Registers used:
  4524 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4525 ;; Tracked objects:
  4526 ;;		On entry : 0/0
  4527 ;;		On exit  : 0/0
  4528 ;;		Unchanged: 0/0
  4529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4530 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4533 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4534 ;;Total ram usage:        2 bytes
  4535 ;; Hardware stack levels used:    1
  4536 ;; Hardware stack levels required when called:    3
  4537 ;; This function calls:
  4538 ;;		___awdiv
  4539 ;; This function is called by:
  4540 ;;		_main
  4541 ;; This function uses a non-reentrant model
  4542 ;;
  4543                           
  4544                           	psect	text13
  4545  001BBE                     __ptext13:
  4546                           	opt stack 0
  4547  001BBE                     _Set_RPM_RGB:
  4548                           	opt stack 27
  4549                           
  4550                           ;Fan_Support.c: 127: if (rpm < 1)
  4551                           
  4552                           ;incstack = 0
  4553  001BBE  BE1E               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4554  001BC0  D005               	goto	l5828
  4555  001BC2  501E               	movf	Set_RPM_RGB@rpm+1,w,c
  4556  001BC4  E105               	bnz	l5830
  4557  001BC6  041D               	decf	Set_RPM_RGB@rpm,w,c
  4558  001BC8  B0D8               	btfsc	status,0,c
  4559  001BCA  D002               	goto	l5830
  4560  001BCC                     l5828:
  4561                           
  4562                           ;Fan_Support.c: 128: PORTE = 0x00;
  4563  001BCC  0E00               	movlw	0
  4564  001BCE  D01C               	goto	L3
  4565  001BD0                     l5830:
  4566                           
  4567                           ;Fan_Support.c: 129: else if (rpm >= 3000)
  4568  001BD0  BE1E               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4569  001BD2  D009               	goto	l5834
  4570  001BD4  0EB8               	movlw	184
  4571  001BD6  5C1D               	subwf	Set_RPM_RGB@rpm,w,c
  4572  001BD8  0E0B               	movlw	11
  4573  001BDA  581E               	subwfb	Set_RPM_RGB@rpm+1,w,c
  4574  001BDC  A0D8               	btfss	status,0,c
  4575  001BDE  D003               	goto	l5834
  4576                           
  4577                           ;Fan_Support.c: 130: PORTE = D2[6];
  4578  001BE0  C0BF  FF84         	movff	_D2+6,3972	;volatile
  4579  001BE4  D013               	goto	l282
  4580  001BE6                     l5834:
  4581                           
  4582                           ;Fan_Support.c: 131: else
  4583                           ;Fan_Support.c: 132: PORTE = D2[rpm / 500];
  4584  001BE6  C01D  F015         	movff	Set_RPM_RGB@rpm,___awdiv@dividend
  4585  001BEA  C01E  F016         	movff	Set_RPM_RGB@rpm+1,___awdiv@dividend+1
  4586  001BEE  0E01               	movlw	1
  4587  001BF0  6E18               	movwf	___awdiv@divisor+1,c
  4588  001BF2  0EF4               	movlw	244
  4589  001BF4  6E17               	movwf	___awdiv@divisor,c
  4590  001BF6  EC2D  F00B         	call	___awdiv	;wreg free
  4591  001BFA  0EB9               	movlw	low _D2
  4592  001BFC  2415               	addwf	?___awdiv,w,c
  4593  001BFE  6ED9               	movwf	fsr2l,c
  4594  001C00  0E00               	movlw	high _D2
  4595  001C02  2016               	addwfc	?___awdiv+1,w,c
  4596  001C04  6EDA               	movwf	fsr2h,c
  4597  001C06  50DF               	movf	indf2,w,c
  4598  001C08                     L3:
  4599  001C08  6E84               	movwf	3972,c	;volatile
  4600  001C0A  D000               	goto	l282
  4601  001C0C                     l282:
  4602  001C0C  0012               	return		;funcret
  4603  001C0E                     __end_of_Set_RPM_RGB:
  4604                           	opt stack 0
  4605                           tblptru	equ	0xFF8
  4606                           tblptrh	equ	0xFF7
  4607                           tblptrl	equ	0xFF6
  4608                           tablat	equ	0xFF5
  4609                           prodh	equ	0xFF4
  4610                           prodl	equ	0xFF3
  4611                           postinc0	equ	0xFEE
  4612                           wreg	equ	0xFE8
  4613                           postdec1	equ	0xFE5
  4614                           fsr1l	equ	0xFE1
  4615                           indf2	equ	0xFDF
  4616                           postinc2	equ	0xFDE
  4617                           postdec2	equ	0xFDD
  4618                           fsr2h	equ	0xFDA
  4619                           fsr2l	equ	0xFD9
  4620                           status	equ	0xFD8
  4621                           
  4622 ;; *************** function _Set_DC_RGB *****************
  4623 ;; Defined at:
  4624 ;;		line 93 in file "Fan_Support.c"
  4625 ;; Parameters:    Size  Location     Type
  4626 ;;  duty_cycle      2   28[COMRAM] int 
  4627 ;; Auto vars:     Size  Location     Type
  4628 ;;  num             2   32[COMRAM] int 
  4629 ;; Return value:  Size  Location     Type
  4630 ;;		None               void
  4631 ;; Registers used:
  4632 ;;		wreg, status,2, status,0, cstack
  4633 ;; Tracked objects:
  4634 ;;		On entry : 0/0
  4635 ;;		On exit  : 0/0
  4636 ;;		Unchanged: 0/0
  4637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4638 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4639 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4640 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4641 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4642 ;;Total ram usage:        6 bytes
  4643 ;; Hardware stack levels used:    1
  4644 ;; Hardware stack levels required when called:    3
  4645 ;; This function calls:
  4646 ;;		___awdiv
  4647 ;; This function is called by:
  4648 ;;		_main
  4649 ;; This function uses a non-reentrant model
  4650 ;;
  4651                           
  4652                           	psect	text14
  4653  0019E6                     __ptext14:
  4654                           	opt stack 0
  4655  0019E6                     _Set_DC_RGB:
  4656                           	opt stack 27
  4657                           
  4658                           ;Fan_Support.c: 95: int num = duty_cycle / 10;
  4659                           
  4660                           ;incstack = 0
  4661  0019E6  C01D  F015         	movff	Set_DC_RGB@duty_cycle,___awdiv@dividend
  4662  0019EA  C01E  F016         	movff	Set_DC_RGB@duty_cycle+1,___awdiv@dividend+1
  4663  0019EE  0E00               	movlw	0
  4664  0019F0  6E18               	movwf	___awdiv@divisor+1,c
  4665  0019F2  0E0A               	movlw	10
  4666  0019F4  6E17               	movwf	___awdiv@divisor,c
  4667  0019F6  EC2D  F00B         	call	___awdiv	;wreg free
  4668  0019FA  C015  F021         	movff	?___awdiv,Set_DC_RGB@num
  4669  0019FE  C016  F022         	movff	?___awdiv+1,Set_DC_RGB@num+1
  4670                           
  4671                           ;Fan_Support.c: 96: if (num > 7) num = 7;
  4672  001A02  BE22               	btfsc	Set_DC_RGB@num+1,7,c
  4673  001A04  D00B               	goto	l5820
  4674  001A06  5022               	movf	Set_DC_RGB@num+1,w,c
  4675  001A08  E104               	bnz	u4350
  4676  001A0A  0E08               	movlw	8
  4677  001A0C  5C21               	subwf	Set_DC_RGB@num,w,c
  4678  001A0E  A0D8               	btfss	status,0,c
  4679  001A10  D005               	goto	l5820
  4680  001A12                     u4350:
  4681  001A12  0E00               	movlw	0
  4682  001A14  6E22               	movwf	Set_DC_RGB@num+1,c
  4683  001A16  0E07               	movlw	7
  4684  001A18  6E21               	movwf	Set_DC_RGB@num,c
  4685  001A1A  D000               	goto	l5820
  4686  001A1C                     l5820:
  4687                           
  4688                           ;Fan_Support.c: 97: num = num << 3;
  4689  001A1C  C021  F01F         	movff	Set_DC_RGB@num,??_Set_DC_RGB
  4690  001A20  C022  F020         	movff	Set_DC_RGB@num+1,??_Set_DC_RGB+1
  4691  001A24  90D8               	bcf	status,0,c
  4692  001A26  361F               	rlcf	??_Set_DC_RGB,f,c
  4693  001A28  3620               	rlcf	??_Set_DC_RGB+1,f,c
  4694  001A2A  90D8               	bcf	status,0,c
  4695  001A2C  361F               	rlcf	??_Set_DC_RGB,f,c
  4696  001A2E  3620               	rlcf	??_Set_DC_RGB+1,f,c
  4697  001A30  90D8               	bcf	status,0,c
  4698  001A32  361F               	rlcf	??_Set_DC_RGB,f,c
  4699  001A34  3620               	rlcf	??_Set_DC_RGB+1,f,c
  4700  001A36  C01F  F021         	movff	??_Set_DC_RGB,Set_DC_RGB@num
  4701  001A3A  C020  F022         	movff	??_Set_DC_RGB+1,Set_DC_RGB@num+1
  4702                           
  4703                           ;Fan_Support.c: 98: PORTB = PORTB & 0x07;
  4704  001A3E  5081               	movf	3969,w,c	;volatile
  4705  001A40  0B07               	andlw	7
  4706  001A42  6E81               	movwf	3969,c	;volatile
  4707                           
  4708                           ;Fan_Support.c: 99: PORTB = PORTB | num;
  4709  001A44  5081               	movf	3969,w,c	;volatile
  4710  001A46  1021               	iorwf	Set_DC_RGB@num,w,c
  4711  001A48  6E81               	movwf	3969,c	;volatile
  4712  001A4A  0012               	return		;funcret
  4713  001A4C                     __end_of_Set_DC_RGB:
  4714                           	opt stack 0
  4715                           tblptru	equ	0xFF8
  4716                           tblptrh	equ	0xFF7
  4717                           tblptrl	equ	0xFF6
  4718                           tablat	equ	0xFF5
  4719                           prodh	equ	0xFF4
  4720                           prodl	equ	0xFF3
  4721                           postinc0	equ	0xFEE
  4722                           wreg	equ	0xFE8
  4723                           postdec1	equ	0xFE5
  4724                           fsr1l	equ	0xFE1
  4725                           indf2	equ	0xFDF
  4726                           postinc2	equ	0xFDE
  4727                           postdec2	equ	0xFDD
  4728                           fsr2h	equ	0xFDA
  4729                           fsr2l	equ	0xFD9
  4730                           status	equ	0xFD8
  4731                           
  4732 ;; *************** function ___awdiv *****************
  4733 ;; Defined at:
  4734 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  4735 ;; Parameters:    Size  Location     Type
  4736 ;;  dividend        2   20[COMRAM] int 
  4737 ;;  divisor         2   22[COMRAM] int 
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;  quotient        2   26[COMRAM] int 
  4740 ;;  sign            1   25[COMRAM] unsigned char 
  4741 ;;  counter         1   24[COMRAM] unsigned char 
  4742 ;; Return value:  Size  Location     Type
  4743 ;;                  2   20[COMRAM] int 
  4744 ;; Registers used:
  4745 ;;		wreg, status,2, status,0
  4746 ;; Tracked objects:
  4747 ;;		On entry : 0/0
  4748 ;;		On exit  : 0/0
  4749 ;;		Unchanged: 0/0
  4750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4751 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4752 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4754 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4755 ;;Total ram usage:        8 bytes
  4756 ;; Hardware stack levels used:    1
  4757 ;; Hardware stack levels required when called:    2
  4758 ;; This function calls:
  4759 ;;		Nothing
  4760 ;; This function is called by:
  4761 ;;		_Set_DC_RGB
  4762 ;;		_Set_RPM_RGB
  4763 ;;		_main
  4764 ;;		_Update_Screen
  4765 ;;		_dec_2_bcd
  4766 ;; This function uses a non-reentrant model
  4767 ;;
  4768                           
  4769                           	psect	text15
  4770  00165A                     __ptext15:
  4771                           	opt stack 0
  4772  00165A                     ___awdiv:
  4773                           	opt stack 28
  4774                           
  4775                           ;incstack = 0
  4776  00165A  0E00               	movlw	0
  4777  00165C  6E1A               	movwf	___awdiv@sign,c
  4778  00165E  AE18               	btfss	___awdiv@divisor+1,7,c
  4779  001660  D007               	goto	l5650
  4780  001662  6C17               	negf	___awdiv@divisor,c
  4781  001664  1E18               	comf	___awdiv@divisor+1,f,c
  4782  001666  B0D8               	btfsc	status,0,c
  4783  001668  2A18               	incf	___awdiv@divisor+1,f,c
  4784  00166A  0E01               	movlw	1
  4785  00166C  6E1A               	movwf	___awdiv@sign,c
  4786  00166E  D000               	goto	l5650
  4787  001670                     l5650:
  4788  001670  AE16               	btfss	___awdiv@dividend+1,7,c
  4789  001672  D007               	goto	l5656
  4790  001674  6C15               	negf	___awdiv@dividend,c
  4791  001676  1E16               	comf	___awdiv@dividend+1,f,c
  4792  001678  B0D8               	btfsc	status,0,c
  4793  00167A  2A16               	incf	___awdiv@dividend+1,f,c
  4794  00167C  0E01               	movlw	1
  4795  00167E  1A1A               	xorwf	___awdiv@sign,f,c
  4796  001680  D000               	goto	l5656
  4797  001682                     l5656:
  4798  001682  0E00               	movlw	0
  4799  001684  6E1C               	movwf	___awdiv@quotient+1,c
  4800  001686  0E00               	movlw	0
  4801  001688  6E1B               	movwf	___awdiv@quotient,c
  4802  00168A  5017               	movf	___awdiv@divisor,w,c
  4803  00168C  1018               	iorwf	___awdiv@divisor+1,w,c
  4804  00168E  B4D8               	btfsc	status,2,c
  4805  001690  D021               	goto	l5678
  4806  001692  0E01               	movlw	1
  4807  001694  6E19               	movwf	___awdiv@counter,c
  4808  001696  D005               	goto	l5664
  4809  001698                     l5662:
  4810  001698  90D8               	bcf	status,0,c
  4811  00169A  3617               	rlcf	___awdiv@divisor,f,c
  4812  00169C  3618               	rlcf	___awdiv@divisor+1,f,c
  4813  00169E  2A19               	incf	___awdiv@counter,f,c
  4814  0016A0  D000               	goto	l5664
  4815  0016A2                     l5664:
  4816  0016A2  BE18               	btfsc	___awdiv@divisor+1,7,c
  4817  0016A4  D002               	goto	l5666
  4818  0016A6  D7F8               	goto	l5662
  4819  0016A8  D000               	goto	l5666
  4820  0016AA                     l5666:
  4821  0016AA  90D8               	bcf	status,0,c
  4822  0016AC  361B               	rlcf	___awdiv@quotient,f,c
  4823  0016AE  361C               	rlcf	___awdiv@quotient+1,f,c
  4824  0016B0  5017               	movf	___awdiv@divisor,w,c
  4825  0016B2  5C15               	subwf	___awdiv@dividend,w,c
  4826  0016B4  5018               	movf	___awdiv@divisor+1,w,c
  4827  0016B6  5816               	subwfb	___awdiv@dividend+1,w,c
  4828  0016B8  A0D8               	btfss	status,0,c
  4829  0016BA  D006               	goto	l5674
  4830  0016BC  5017               	movf	___awdiv@divisor,w,c
  4831  0016BE  5E15               	subwf	___awdiv@dividend,f,c
  4832  0016C0  5018               	movf	___awdiv@divisor+1,w,c
  4833  0016C2  5A16               	subwfb	___awdiv@dividend+1,f,c
  4834  0016C4  801B               	bsf	___awdiv@quotient,0,c
  4835  0016C6  D000               	goto	l5674
  4836  0016C8                     l5674:
  4837  0016C8  90D8               	bcf	status,0,c
  4838  0016CA  3218               	rrcf	___awdiv@divisor+1,f,c
  4839  0016CC  3217               	rrcf	___awdiv@divisor,f,c
  4840  0016CE  2E19               	decfsz	___awdiv@counter,f,c
  4841  0016D0  D7EC               	goto	l5666
  4842  0016D2  D000               	goto	l5678
  4843  0016D4                     l5678:
  4844  0016D4  501A               	movf	___awdiv@sign,w,c
  4845  0016D6  B4D8               	btfsc	status,2,c
  4846  0016D8  D005               	goto	l5682
  4847  0016DA  6C1B               	negf	___awdiv@quotient,c
  4848  0016DC  1E1C               	comf	___awdiv@quotient+1,f,c
  4849  0016DE  B0D8               	btfsc	status,0,c
  4850  0016E0  2A1C               	incf	___awdiv@quotient+1,f,c
  4851  0016E2  D000               	goto	l5682
  4852  0016E4                     l5682:
  4853  0016E4  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  4854  0016E8  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  4855  0016EC  D000               	goto	l1119
  4856  0016EE                     l1119:
  4857  0016EE  0012               	return		;funcret
  4858  0016F0                     __end_of___awdiv:
  4859                           	opt stack 0
  4860                           tblptru	equ	0xFF8
  4861                           tblptrh	equ	0xFF7
  4862                           tblptrl	equ	0xFF6
  4863                           tablat	equ	0xFF5
  4864                           prodh	equ	0xFF4
  4865                           prodl	equ	0xFF3
  4866                           postinc0	equ	0xFEE
  4867                           wreg	equ	0xFE8
  4868                           postdec1	equ	0xFE5
  4869                           fsr1l	equ	0xFE1
  4870                           indf2	equ	0xFDF
  4871                           postinc2	equ	0xFDE
  4872                           postdec2	equ	0xFDD
  4873                           fsr2h	equ	0xFDA
  4874                           fsr2l	equ	0xFD9
  4875                           status	equ	0xFD8
  4876                           
  4877 ;; *************** function _Initialize_Screen *****************
  4878 ;; Defined at:
  4879 ;;		line 34 in file "Main_Screen.c"
  4880 ;; Parameters:    Size  Location     Type
  4881 ;;		None
  4882 ;; Auto vars:     Size  Location     Type
  4883 ;;		None
  4884 ;; Return value:  Size  Location     Type
  4885 ;;		None               void
  4886 ;; Registers used:
  4887 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4888 ;; Tracked objects:
  4889 ;;		On entry : 0/0
  4890 ;;		On exit  : 0/0
  4891 ;;		Unchanged: 0/0
  4892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4896 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4897 ;;Total ram usage:        0 bytes
  4898 ;; Hardware stack levels used:    1
  4899 ;; Hardware stack levels required when called:    9
  4900 ;; This function calls:
  4901 ;;		_LCD_Reset
  4902 ;;		_TFT_GreenTab_Initialize
  4903 ;;		_drawCircle
  4904 ;;		_drawtext
  4905 ;;		_fillScreen
  4906 ;;		_strcpy
  4907 ;; This function is called by:
  4908 ;;		_main
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           	psect	text16
  4913  000736                     __ptext16:
  4914                           	opt stack 0
  4915  000736                     _Initialize_Screen:
  4916                           	opt stack 21
  4917                           
  4918                           ;Main_Screen.c: 36: LCD_Reset();
  4919                           
  4920                           ;incstack = 0
  4921  000736  ECA5  F010         	call	_LCD_Reset	;wreg free
  4922                           
  4923                           ;Main_Screen.c: 37: TFT_GreenTab_Initialize();
  4924  00073A  EC90  F00F         	call	_TFT_GreenTab_Initialize	;wreg free
  4925                           
  4926                           ;Main_Screen.c: 38: fillScreen(0x0000);
  4927  00073E  0E00               	movlw	0
  4928  000740  6E23               	movwf	fillScreen@color+1,c
  4929  000742  0E00               	movlw	0
  4930  000744  6E22               	movwf	fillScreen@color,c
  4931  000746  EC4A  F010         	call	_fillScreen	;wreg free
  4932                           
  4933                           ;Main_Screen.c: 39: txt = buffer;
  4934  00074A  0E00               	movlw	low _buffer
  4935  00074C  6E4D               	movwf	_txt,c
  4936  00074E  0E01               	movlw	high _buffer
  4937  000750  6E4E               	movwf	_txt+1,c
  4938                           
  4939                           ;Main_Screen.c: 40: strcpy(txt, "ECE3301L Spring 22-S?");
  4940  000752  C04D  F00F         	movff	_txt,strcpy@to
  4941  000756  C04E  F010         	movff	_txt+1,strcpy@to+1
  4942  00075A  0E8A               	movlw	low STR_7
  4943  00075C  6E11               	movwf	strcpy@from,c
  4944  00075E  0EFF               	movlw	high STR_7
  4945  000760  6E12               	movwf	strcpy@from+1,c
  4946  000762  EC5F  F00F         	call	_strcpy	;wreg free
  4947                           
  4948                           ;Main_Screen.c: 42: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  4949  000766  0E01               	movlw	1
  4950  000768  6E37               	movwf	drawtext@y,c
  4951  00076A  C04D  F038         	movff	_txt,drawtext@_text
  4952  00076E  C04E  F039         	movff	_txt+1,drawtext@_text+1
  4953  000772  0EFF               	movlw	255
  4954  000774  6E3B               	movwf	drawtext@color+1,c
  4955  000776  683A               	setf	drawtext@color,c
  4956  000778  0E00               	movlw	0
  4957  00077A  6E3D               	movwf	drawtext@bg+1,c
  4958  00077C  0E00               	movlw	0
  4959  00077E  6E3C               	movwf	drawtext@bg,c
  4960  000780  0E01               	movlw	1
  4961  000782  6E3E               	movwf	drawtext@size,c
  4962  000784  0E01               	movlw	1
  4963  000786  EC05  F007         	call	_drawtext
  4964                           
  4965                           ;Main_Screen.c: 44: strcpy(txt, "Temperature:");
  4966  00078A  C04D  F00F         	movff	_txt,strcpy@to
  4967  00078E  C04E  F010         	movff	_txt+1,strcpy@to+1
  4968  000792  0ED0               	movlw	low STR_8
  4969  000794  6E11               	movwf	strcpy@from,c
  4970  000796  0EFF               	movlw	high STR_8
  4971  000798  6E12               	movwf	strcpy@from+1,c
  4972  00079A  EC5F  F00F         	call	_strcpy	;wreg free
  4973                           
  4974                           ;Main_Screen.c: 45: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
  4975  00079E  0E0B               	movlw	11
  4976  0007A0  6E37               	movwf	drawtext@y,c
  4977  0007A2  C04D  F038         	movff	_txt,drawtext@_text
  4978  0007A6  C04E  F039         	movff	_txt+1,drawtext@_text+1
  4979  0007AA  0EF8               	movlw	248
  4980  0007AC  6E3B               	movwf	drawtext@color+1,c
  4981  0007AE  0E1F               	movlw	31
  4982  0007B0  6E3A               	movwf	drawtext@color,c
  4983  0007B2  0E00               	movlw	0
  4984  0007B4  6E3D               	movwf	drawtext@bg+1,c
  4985  0007B6  0E00               	movlw	0
  4986  0007B8  6E3C               	movwf	drawtext@bg,c
  4987  0007BA  0E01               	movlw	1
  4988  0007BC  6E3E               	movwf	drawtext@size,c
  4989  0007BE  0E18               	movlw	24
  4990  0007C0  EC05  F007         	call	_drawtext
  4991                           
  4992                           ;Main_Screen.c: 46: drawCircle(40, 23 , 2 , 0xFFE0);
  4993  0007C4  0E00               	movlw	0
  4994  0007C6  6E1B               	movwf	drawCircle@x0+1,c
  4995  0007C8  0E28               	movlw	40
  4996  0007CA  6E1A               	movwf	drawCircle@x0,c
  4997  0007CC  0E00               	movlw	0
  4998  0007CE  6E1D               	movwf	drawCircle@y0+1,c
  4999  0007D0  0E17               	movlw	23
  5000  0007D2  6E1C               	movwf	drawCircle@y0,c
  5001  0007D4  0E00               	movlw	0
  5002  0007D6  6E1F               	movwf	drawCircle@r+1,c
  5003  0007D8  0E02               	movlw	2
  5004  0007DA  6E1E               	movwf	drawCircle@r,c
  5005  0007DC  0EFF               	movlw	255
  5006  0007DE  6E21               	movwf	drawCircle@color+1,c
  5007  0007E0  0EE0               	movlw	224
  5008  0007E2  6E20               	movwf	drawCircle@color,c
  5009  0007E4  ECD0  F004         	call	_drawCircle	;wreg free
  5010                           
  5011                           ;Main_Screen.c: 47: strcpy(txt, "C/");
  5012  0007E8  C04D  F00F         	movff	_txt,strcpy@to
  5013  0007EC  C04E  F010         	movff	_txt+1,strcpy@to+1
  5014  0007F0  0EF9               	movlw	low STR_9
  5015  0007F2  6E11               	movwf	strcpy@from,c
  5016  0007F4  0EFF               	movlw	high STR_9
  5017  0007F6  6E12               	movwf	strcpy@from+1,c
  5018  0007F8  EC5F  F00F         	call	_strcpy	;wreg free
  5019                           
  5020                           ;Main_Screen.c: 48: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
  5021  0007FC  0E17               	movlw	23
  5022  0007FE  6E37               	movwf	drawtext@y,c
  5023  000800  C04D  F038         	movff	_txt,drawtext@_text
  5024  000804  C04E  F039         	movff	_txt+1,drawtext@_text+1
  5025  000808  0EFF               	movlw	255
  5026  00080A  6E3B               	movwf	drawtext@color+1,c
  5027  00080C  0EE0               	movlw	224
  5028  00080E  6E3A               	movwf	drawtext@color,c
  5029  000810  0E00               	movlw	0
  5030  000812  6E3D               	movwf	drawtext@bg+1,c
  5031  000814  0E00               	movlw	0
  5032  000816  6E3C               	movwf	drawtext@bg,c
  5033  000818  0E02               	movlw	2
  5034  00081A  6E3E               	movwf	drawtext@size,c
  5035  00081C  0E2D               	movlw	45
  5036  00081E  EC05  F007         	call	_drawtext
  5037                           
  5038                           ;Main_Screen.c: 49: strcpy(txt, "F");
  5039  000822  C04D  F00F         	movff	_txt,strcpy@to
  5040  000826  C04E  F010         	movff	_txt+1,strcpy@to+1
  5041  00082A  0EF3               	movlw	low (STR_17+2)
  5042  00082C  6E11               	movwf	strcpy@from,c
  5043  00082E  0EFF               	movlw	high (STR_17+2)
  5044  000830  6E12               	movwf	strcpy@from+1,c
  5045  000832  EC5F  F00F         	call	_strcpy	;wreg free
  5046                           
  5047                           ;Main_Screen.c: 50: drawCircle(110, 23 , 2 , 0xFFE0);
  5048  000836  0E00               	movlw	0
  5049  000838  6E1B               	movwf	drawCircle@x0+1,c
  5050  00083A  0E6E               	movlw	110
  5051  00083C  6E1A               	movwf	drawCircle@x0,c
  5052  00083E  0E00               	movlw	0
  5053  000840  6E1D               	movwf	drawCircle@y0+1,c
  5054  000842  0E17               	movlw	23
  5055  000844  6E1C               	movwf	drawCircle@y0,c
  5056  000846  0E00               	movlw	0
  5057  000848  6E1F               	movwf	drawCircle@r+1,c
  5058  00084A  0E02               	movlw	2
  5059  00084C  6E1E               	movwf	drawCircle@r,c
  5060  00084E  0EFF               	movlw	255
  5061  000850  6E21               	movwf	drawCircle@color+1,c
  5062  000852  0EE0               	movlw	224
  5063  000854  6E20               	movwf	drawCircle@color,c
  5064  000856  ECD0  F004         	call	_drawCircle	;wreg free
  5065                           
  5066                           ;Main_Screen.c: 51: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
  5067  00085A  0E17               	movlw	23
  5068  00085C  6E37               	movwf	drawtext@y,c
  5069  00085E  C04D  F038         	movff	_txt,drawtext@_text
  5070  000862  C04E  F039         	movff	_txt+1,drawtext@_text+1
  5071  000866  0EFF               	movlw	255
  5072  000868  6E3B               	movwf	drawtext@color+1,c
  5073  00086A  0EE0               	movlw	224
  5074  00086C  6E3A               	movwf	drawtext@color,c
  5075  00086E  0E00               	movlw	0
  5076  000870  6E3D               	movwf	drawtext@bg+1,c
  5077  000872  0E00               	movlw	0
  5078  000874  6E3C               	movwf	drawtext@bg,c
  5079  000876  0E02               	movlw	2
  5080  000878  6E3E               	movwf	drawtext@size,c
  5081  00087A  0E73               	movlw	115
  5082  00087C  EC05  F007         	call	_drawtext
  5083                           
  5084                           ;Main_Screen.c: 52: strcpy(txt, "Time");
  5085  000880  C04D  F00F         	movff	_txt,strcpy@to
  5086  000884  C04E  F010         	movff	_txt+1,strcpy@to+1
  5087  000888  0EE3               	movlw	low STR_11
  5088  00088A  6E11               	movwf	strcpy@from,c
  5089  00088C  0EFF               	movlw	high STR_11
  5090  00088E  6E12               	movwf	strcpy@from+1,c
  5091  000890  EC5F  F00F         	call	_strcpy	;wreg free
  5092                           
  5093                           ;Main_Screen.c: 53: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  5094  000894  0E28               	movlw	40
  5095  000896  6E37               	movwf	drawtext@y,c
  5096  000898  C04D  F038         	movff	_txt,drawtext@_text
  5097  00089C  C04E  F039         	movff	_txt+1,drawtext@_text+1
  5098  0008A0  0E00               	movlw	0
  5099  0008A2  6E3B               	movwf	drawtext@color+1,c
  5100  0008A4  0E1F               	movlw	31
  5101  0008A6  6E3A               	movwf	drawtext@color,c
  5102  0008A8  0E00               	movlw	0
  5103  0008AA  6E3D               	movwf	drawtext@bg+1,c
  5104  0008AC  0E00               	movlw	0
  5105  0008AE  6E3C               	movwf	drawtext@bg,c
  5106  0008B0  0E01               	movlw	1
  5107  0008B2  6E3E               	movwf	drawtext@size,c
  5108  0008B4  0E32               	movlw	50
  5109  0008B6  EC05  F007         	call	_drawtext
  5110                           
  5111                           ;Main_Screen.c: 54: strcpy(txt, "Date");
  5112  0008BA  C04D  F00F         	movff	_txt,strcpy@to
  5113  0008BE  C04E  F010         	movff	_txt+1,strcpy@to+1
  5114  0008C2  0EE8               	movlw	low STR_12
  5115  0008C4  6E11               	movwf	strcpy@from,c
  5116  0008C6  0EFF               	movlw	high STR_12
  5117  0008C8  6E12               	movwf	strcpy@from+1,c
  5118  0008CA  EC5F  F00F         	call	_strcpy	;wreg free
  5119                           
  5120                           ;Main_Screen.c: 55: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  5121  0008CE  0E47               	movlw	71
  5122  0008D0  6E37               	movwf	drawtext@y,c
  5123  0008D2  C04D  F038         	movff	_txt,drawtext@_text
  5124  0008D6  C04E  F039         	movff	_txt+1,drawtext@_text+1
  5125  0008DA  0EF8               	movlw	248
  5126  0008DC  6E3B               	movwf	drawtext@color+1,c
  5127  0008DE  0E00               	movlw	0
  5128  0008E0  6E3A               	movwf	drawtext@color,c
  5129  0008E2  0E00               	movlw	0
  5130  0008E4  6E3D               	movwf	drawtext@bg+1,c
  5131  0008E6  0E00               	movlw	0
  5132  0008E8  6E3C               	movwf	drawtext@bg,c
  5133  0008EA  0E01               	movlw	1
  5134  0008EC  6E3E               	movwf	drawtext@size,c
  5135  0008EE  0E32               	movlw	50
  5136  0008F0  EC05  F007         	call	_drawtext
  5137                           
  5138                           ;Main_Screen.c: 58: strcpy(txt, "  FAN");
  5139  0008F4  C04D  F00F         	movff	_txt,strcpy@to
  5140  0008F8  C04E  F010         	movff	_txt+1,strcpy@to+1
  5141  0008FC  0EDD               	movlw	low STR_13
  5142  0008FE  6E11               	movwf	strcpy@from,c
  5143  000900  0EFF               	movlw	high STR_13
  5144  000902  6E12               	movwf	strcpy@from+1,c
  5145  000904  EC5F  F00F         	call	_strcpy	;wreg free
  5146                           
  5147                           ;Main_Screen.c: 59: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
  5148  000908  0E78               	movlw	120
  5149  00090A  6E37               	movwf	drawtext@y,c
  5150  00090C  C04D  F038         	movff	_txt,drawtext@_text
  5151  000910  C04E  F039         	movff	_txt+1,drawtext@_text+1
  5152  000914  0E00               	movlw	0
  5153  000916  6E3B               	movwf	drawtext@color+1,c
  5154  000918  0E1F               	movlw	31
  5155  00091A  6E3A               	movwf	drawtext@color,c
  5156  00091C  0E00               	movlw	0
  5157  00091E  6E3D               	movwf	drawtext@bg+1,c
  5158  000920  0E00               	movlw	0
  5159  000922  6E3C               	movwf	drawtext@bg,c
  5160  000924  0E01               	movlw	1
  5161  000926  6E3E               	movwf	drawtext@size,c
  5162  000928  0E55               	movlw	85
  5163  00092A  EC05  F007         	call	_drawtext
  5164                           
  5165                           ;Main_Screen.c: 61: strcpy(txt, "DC");
  5166  00092E  C04D  F00F         	movff	_txt,strcpy@to
  5167  000932  C04E  F010         	movff	_txt+1,strcpy@to+1
  5168  000936  0EFC               	movlw	low STR_14
  5169  000938  6E11               	movwf	strcpy@from,c
  5170  00093A  0EFF               	movlw	high STR_14
  5171  00093C  6E12               	movwf	strcpy@from+1,c
  5172  00093E  EC5F  F00F         	call	_strcpy	;wreg free
  5173                           
  5174                           ;Main_Screen.c: 62: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
  5175  000942  0E8C               	movlw	140
  5176  000944  6E37               	movwf	drawtext@y,c
  5177  000946  C04D  F038         	movff	_txt,drawtext@_text
  5178  00094A  C04E  F039         	movff	_txt+1,drawtext@_text+1
  5179  00094E  0EFF               	movlw	255
  5180  000950  6E3B               	movwf	drawtext@color+1,c
  5181  000952  683A               	setf	drawtext@color,c
  5182  000954  0E00               	movlw	0
  5183  000956  6E3D               	movwf	drawtext@bg+1,c
  5184  000958  0E00               	movlw	0
  5185  00095A  6E3C               	movwf	drawtext@bg,c
  5186  00095C  0E01               	movlw	1
  5187  00095E  6E3E               	movwf	drawtext@size,c
  5188  000960  0E0C               	movlw	12
  5189  000962  EC05  F007         	call	_drawtext
  5190                           
  5191                           ;Main_Screen.c: 64: strcpy(txt, "RPM");
  5192  000966  C04D  F00F         	movff	_txt,strcpy@to
  5193  00096A  C04E  F010         	movff	_txt+1,strcpy@to+1
  5194  00096E  0EF5               	movlw	low STR_15
  5195  000970  6E11               	movwf	strcpy@from,c
  5196  000972  0EFF               	movlw	high STR_15
  5197  000974  6E12               	movwf	strcpy@from+1,c
  5198  000976  EC5F  F00F         	call	_strcpy	;wreg free
  5199                           
  5200                           ;Main_Screen.c: 65: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
  5201  00097A  0E8C               	movlw	140
  5202  00097C  6E37               	movwf	drawtext@y,c
  5203  00097E  C04D  F038         	movff	_txt,drawtext@_text
  5204  000982  C04E  F039         	movff	_txt+1,drawtext@_text+1
  5205  000986  0EFF               	movlw	255
  5206  000988  6E3B               	movwf	drawtext@color+1,c
  5207  00098A  683A               	setf	drawtext@color,c
  5208  00098C  0E00               	movlw	0
  5209  00098E  6E3D               	movwf	drawtext@bg+1,c
  5210  000990  0E00               	movlw	0
  5211  000992  6E3C               	movwf	drawtext@bg,c
  5212  000994  0E01               	movlw	1
  5213  000996  6E3E               	movwf	drawtext@size,c
  5214  000998  0E5F               	movlw	95
  5215  00099A  EC05  F007         	call	_drawtext
  5216  00099E  0012               	return		;funcret
  5217  0009A0                     __end_of_Initialize_Screen:
  5218                           	opt stack 0
  5219                           tblptru	equ	0xFF8
  5220                           tblptrh	equ	0xFF7
  5221                           tblptrl	equ	0xFF6
  5222                           tablat	equ	0xFF5
  5223                           prodh	equ	0xFF4
  5224                           prodl	equ	0xFF3
  5225                           postinc0	equ	0xFEE
  5226                           wreg	equ	0xFE8
  5227                           postdec1	equ	0xFE5
  5228                           fsr1l	equ	0xFE1
  5229                           indf2	equ	0xFDF
  5230                           postinc2	equ	0xFDE
  5231                           postdec2	equ	0xFDD
  5232                           fsr2h	equ	0xFDA
  5233                           fsr2l	equ	0xFD9
  5234                           status	equ	0xFD8
  5235                           
  5236 ;; *************** function _strcpy *****************
  5237 ;; Defined at:
  5238 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  5239 ;; Parameters:    Size  Location     Type
  5240 ;;  to              2   14[COMRAM] PTR unsigned char 
  5241 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(31), 
  5242 ;;  from            2   16[COMRAM] PTR const unsigned char 
  5243 ;;		 -> STR_17(4), STR_16(4), STR_15(4), STR_14(3), 
  5244 ;;		 -> STR_13(6), STR_12(5), STR_11(5), STR_10(2), 
  5245 ;;		 -> STR_9(3), STR_8(13), STR_7(22), 
  5246 ;; Auto vars:     Size  Location     Type
  5247 ;;  cp              2   18[COMRAM] PTR unsigned char 
  5248 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(31), 
  5249 ;; Return value:  Size  Location     Type
  5250 ;;                  2   14[COMRAM] PTR unsigned char 
  5251 ;; Registers used:
  5252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5253 ;; Tracked objects:
  5254 ;;		On entry : 0/0
  5255 ;;		On exit  : 0/0
  5256 ;;		Unchanged: 0/0
  5257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5258 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5261 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5262 ;;Total ram usage:        6 bytes
  5263 ;; Hardware stack levels used:    1
  5264 ;; Hardware stack levels required when called:    2
  5265 ;; This function calls:
  5266 ;;		Nothing
  5267 ;; This function is called by:
  5268 ;;		_Initialize_Screen
  5269 ;;		_Update_Screen
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           	psect	text17
  5274  001EBE                     __ptext17:
  5275                           	opt stack 0
  5276  001EBE                     _strcpy:
  5277                           	opt stack 27
  5278                           
  5279                           ;incstack = 0
  5280  001EBE  C00F  F013         	movff	strcpy@to,strcpy@cp
  5281  001EC2  C010  F014         	movff	strcpy@to+1,strcpy@cp+1
  5282  001EC6  D005               	goto	l5640
  5283  001EC8                     l5638:
  5284  001EC8  4A13               	infsnz	strcpy@cp,f,c
  5285  001ECA  2A14               	incf	strcpy@cp+1,f,c
  5286  001ECC  4A11               	infsnz	strcpy@from,f,c
  5287  001ECE  2A12               	incf	strcpy@from+1,f,c
  5288  001ED0  D000               	goto	l5640
  5289  001ED2                     l5640:
  5290  001ED2  C011  FFF6         	movff	strcpy@from,tblptrl
  5291  001ED6  C012  FFF7         	movff	strcpy@from+1,tblptrh
  5292  001EDA                     	if	0	;tblptru may be non-zero
  5293  001EDA                     	endif
  5294  001EDA                     	if	0	;tblptru may be non-zero
  5295  001EDA                     	endif
  5296  001EDA  C013  FFD9         	movff	strcpy@cp,fsr2l
  5297  001EDE  C014  FFDA         	movff	strcpy@cp+1,fsr2h
  5298  001EE2  0008               	tblrd		*
  5299  001EE4  CFF5 FFDF          	movff	tablat,indf2
  5300  001EE8  50DF               	movf	indf2,w,c
  5301  001EEA  A4D8               	btfss	status,2,c
  5302  001EEC  D7ED               	goto	l5638
  5303                           
  5304                           ;	Return value of _strcpy is never used
  5305  001EEE  0012               	return		;funcret
  5306  001EF0                     __end_of_strcpy:
  5307                           	opt stack 0
  5308                           tblptru	equ	0xFF8
  5309                           tblptrh	equ	0xFF7
  5310                           tblptrl	equ	0xFF6
  5311                           tablat	equ	0xFF5
  5312                           prodh	equ	0xFF4
  5313                           prodl	equ	0xFF3
  5314                           postinc0	equ	0xFEE
  5315                           wreg	equ	0xFE8
  5316                           postdec1	equ	0xFE5
  5317                           fsr1l	equ	0xFE1
  5318                           indf2	equ	0xFDF
  5319                           postinc2	equ	0xFDE
  5320                           postdec2	equ	0xFDD
  5321                           fsr2h	equ	0xFDA
  5322                           fsr2l	equ	0xFD9
  5323                           status	equ	0xFD8
  5324                           
  5325 ;; *************** function _fillScreen *****************
  5326 ;; Defined at:
  5327 ;;		line 619 in file "ST7735_TFT.c"
  5328 ;; Parameters:    Size  Location     Type
  5329 ;;  color           2   33[COMRAM] unsigned int 
  5330 ;; Auto vars:     Size  Location     Type
  5331 ;;		None
  5332 ;; Return value:  Size  Location     Type
  5333 ;;		None               void
  5334 ;; Registers used:
  5335 ;;		wreg, status,2, status,0, cstack
  5336 ;; Tracked objects:
  5337 ;;		On entry : 0/0
  5338 ;;		On exit  : 0/0
  5339 ;;		Unchanged: 0/0
  5340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5341 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5344 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5345 ;;Total ram usage:        2 bytes
  5346 ;; Hardware stack levels used:    1
  5347 ;; Hardware stack levels required when called:    6
  5348 ;; This function calls:
  5349 ;;		_fillRectangle
  5350 ;; This function is called by:
  5351 ;;		_Initialize_Screen
  5352 ;; This function uses a non-reentrant model
  5353 ;;
  5354                           
  5355                           	psect	text18
  5356  002094                     __ptext18:
  5357                           	opt stack 0
  5358  002094                     _fillScreen:
  5359                           	opt stack 23
  5360                           
  5361                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
  5362                           
  5363                           ;incstack = 0
  5364  002094  0E00               	movlw	0
  5365  002096  6E16               	movwf	fillRectangle@y,c
  5366  002098  0E80               	movlw	128
  5367  00209A  6E17               	movwf	fillRectangle@w,c
  5368  00209C  0EA0               	movlw	160
  5369  00209E  6E18               	movwf	fillRectangle@h,c
  5370  0020A0  C022  F019         	movff	fillScreen@color,fillRectangle@color
  5371  0020A4  C023  F01A         	movff	fillScreen@color+1,fillRectangle@color+1
  5372  0020A8  0E00               	movlw	0
  5373  0020AA  ECF1  F009         	call	_fillRectangle
  5374  0020AE  0012               	return		;funcret
  5375  0020B0                     __end_of_fillScreen:
  5376                           	opt stack 0
  5377                           tblptru	equ	0xFF8
  5378                           tblptrh	equ	0xFF7
  5379                           tblptrl	equ	0xFF6
  5380                           tablat	equ	0xFF5
  5381                           prodh	equ	0xFF4
  5382                           prodl	equ	0xFF3
  5383                           postinc0	equ	0xFEE
  5384                           wreg	equ	0xFE8
  5385                           postdec1	equ	0xFE5
  5386                           fsr1l	equ	0xFE1
  5387                           indf2	equ	0xFDF
  5388                           postinc2	equ	0xFDE
  5389                           postdec2	equ	0xFDD
  5390                           fsr2h	equ	0xFDA
  5391                           fsr2l	equ	0xFD9
  5392                           status	equ	0xFD8
  5393                           
  5394 ;; *************** function _fillRectangle *****************
  5395 ;; Defined at:
  5396 ;;		line 503 in file "ST7735_TFT.c"
  5397 ;; Parameters:    Size  Location     Type
  5398 ;;  x               1    wreg     unsigned char 
  5399 ;;  y               1   21[COMRAM] unsigned char 
  5400 ;;  w               1   22[COMRAM] unsigned char 
  5401 ;;  h               1   23[COMRAM] unsigned char 
  5402 ;;  color           2   24[COMRAM] unsigned int 
  5403 ;; Auto vars:     Size  Location     Type
  5404 ;;  x               1   32[COMRAM] unsigned char 
  5405 ;;  lo              1   31[COMRAM] unsigned char 
  5406 ;;  hi              1   30[COMRAM] unsigned char 
  5407 ;; Return value:  Size  Location     Type
  5408 ;;		None               void
  5409 ;; Registers used:
  5410 ;;		wreg, status,2, status,0, cstack
  5411 ;; Tracked objects:
  5412 ;;		On entry : 0/0
  5413 ;;		On exit  : 0/0
  5414 ;;		Unchanged: 0/0
  5415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5416 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5417 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5418 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5419 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5420 ;;Total ram usage:       12 bytes
  5421 ;; Hardware stack levels used:    1
  5422 ;; Hardware stack levels required when called:    5
  5423 ;; This function calls:
  5424 ;;		_setAddrWindow
  5425 ;;		_spiwrite
  5426 ;; This function is called by:
  5427 ;;		_fillScreen
  5428 ;; This function uses a non-reentrant model
  5429 ;;
  5430                           
  5431                           	psect	text19
  5432  0013E2                     __ptext19:
  5433                           	opt stack 0
  5434  0013E2                     _fillRectangle:
  5435                           	opt stack 23
  5436                           
  5437                           ;incstack = 0
  5438                           ;fillRectangle@x stored from wreg
  5439  0013E2  6E21               	movwf	fillRectangle@x,c
  5440                           
  5441                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
  5442                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
  5443  0013E4  0E80               	movlw	128
  5444  0013E6  6021               	cpfslt	fillRectangle@x,c
  5445  0013E8  D069               	goto	l148
  5446  0013EA  0E9F               	movlw	159
  5447  0013EC  6416               	cpfsgt	fillRectangle@y,c
  5448  0013EE  D001               	goto	l5464
  5449                           
  5450                           ;ST7735_TFT.c: 507: return;
  5451  0013F0  D065               	goto	l148
  5452  0013F2                     l5464:
  5453                           
  5454                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
  5455  0013F2  0EFF               	movlw	255
  5456  0013F4  6E1B               	movwf	??_fillRectangle& (0+255),c
  5457  0013F6  0EFF               	movlw	255
  5458  0013F8  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  5459  0013FA  5017               	movf	fillRectangle@w,w,c
  5460  0013FC  C021  F01D         	movff	fillRectangle@x,??_fillRectangle+2
  5461  001400  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  5462  001402  261D               	addwf	??_fillRectangle+2,f,c
  5463  001404  0E00               	movlw	0
  5464  001406  221E               	addwfc	??_fillRectangle+3,f,c
  5465  001408  501B               	movf	??_fillRectangle,w,c
  5466  00140A  261D               	addwf	??_fillRectangle+2,f,c
  5467  00140C  501C               	movf	??_fillRectangle+1,w,c
  5468  00140E  221E               	addwfc	??_fillRectangle+3,f,c
  5469  001410  BE1E               	btfsc	??_fillRectangle+3,7,c
  5470  001412  D00A               	goto	l149
  5471  001414  501E               	movf	??_fillRectangle+3,w,c
  5472  001416  E104               	bnz	u3960
  5473  001418  0E80               	movlw	128
  5474  00141A  5C1D               	subwf	??_fillRectangle+2,w,c
  5475  00141C  A0D8               	btfss	status,0,c
  5476  00141E  D004               	goto	l149
  5477  001420                     u3960:
  5478                           
  5479                           ;ST7735_TFT.c: 509: w = 128 - x;
  5480  001420  5021               	movf	fillRectangle@x,w,c
  5481  001422  0800               	sublw	0
  5482  001424  0F80               	addlw	128
  5483  001426  6E17               	movwf	fillRectangle@w,c
  5484  001428                     l149:
  5485                           
  5486                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
  5487  001428  0EFF               	movlw	255
  5488  00142A  6E1B               	movwf	??_fillRectangle& (0+255),c
  5489  00142C  0EFF               	movlw	255
  5490  00142E  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  5491  001430  5018               	movf	fillRectangle@h,w,c
  5492  001432  C016  F01D         	movff	fillRectangle@y,??_fillRectangle+2
  5493  001436  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  5494  001438  261D               	addwf	??_fillRectangle+2,f,c
  5495  00143A  0E00               	movlw	0
  5496  00143C  221E               	addwfc	??_fillRectangle+3,f,c
  5497  00143E  501B               	movf	??_fillRectangle,w,c
  5498  001440  261D               	addwf	??_fillRectangle+2,f,c
  5499  001442  501C               	movf	??_fillRectangle+1,w,c
  5500  001444  221E               	addwfc	??_fillRectangle+3,f,c
  5501  001446  BE1E               	btfsc	??_fillRectangle+3,7,c
  5502  001448  D00B               	goto	l5470
  5503  00144A  501E               	movf	??_fillRectangle+3,w,c
  5504  00144C  E104               	bnz	u3970
  5505  00144E  0EA0               	movlw	160
  5506  001450  5C1D               	subwf	??_fillRectangle+2,w,c
  5507  001452  A0D8               	btfss	status,0,c
  5508  001454  D005               	goto	l5470
  5509  001456                     u3970:
  5510                           
  5511                           ;ST7735_TFT.c: 511: h = 160 - y;
  5512  001456  5016               	movf	fillRectangle@y,w,c
  5513  001458  0800               	sublw	0
  5514  00145A  0FA0               	addlw	160
  5515  00145C  6E18               	movwf	fillRectangle@h,c
  5516  00145E  D000               	goto	l5470
  5517  001460                     l5470:
  5518                           
  5519                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
  5520  001460  C016  F012         	movff	fillRectangle@y,setAddrWindow@y0
  5521  001464  5021               	movf	fillRectangle@x,w,c
  5522  001466  2417               	addwf	fillRectangle@w,w,c
  5523  001468  6E1B               	movwf	??_fillRectangle& (0+255),c
  5524  00146A  041B               	decf	??_fillRectangle,w,c
  5525  00146C  6E13               	movwf	setAddrWindow@x1,c
  5526  00146E  5016               	movf	fillRectangle@y,w,c
  5527  001470  2418               	addwf	fillRectangle@h,w,c
  5528  001472  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  5529  001474  041C               	decf	??_fillRectangle+1,w,c
  5530  001476  6E14               	movwf	setAddrWindow@y1,c
  5531  001478  5021               	movf	fillRectangle@x,w,c
  5532  00147A  EC07  F00E         	call	_setAddrWindow
  5533                           
  5534                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
  5535  00147E  501A               	movf	fillRectangle@color+1,w,c
  5536  001480  6E1F               	movwf	fillRectangle@hi,c
  5537  001482  C019  F020         	movff	fillRectangle@color,fillRectangle@lo
  5538                           
  5539                           ;ST7735_TFT.c: 514: PORTDbits.RD0 = 1;
  5540  001486  8083               	bsf	3971,0,c	;volatile
  5541                           
  5542                           ;ST7735_TFT.c: 515: PORTDbits.RD1 = 0;
  5543  001488  9283               	bcf	3971,1,c	;volatile
  5544                           
  5545                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
  5546  00148A  C018  F016         	movff	fillRectangle@h,fillRectangle@y
  5547  00148E                     l5482:
  5548  00148E  5016               	movf	fillRectangle@y,w,c
  5549  001490  B4D8               	btfsc	status,2,c
  5550  001492  D013               	goto	l152
  5551  001494  D001               	goto	l151
  5552  001496  D011               	goto	l152
  5553  001498                     l151:
  5554                           
  5555                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
  5556  001498  C017  F021         	movff	fillRectangle@w,fillRectangle@x
  5557  00149C                     l5486:
  5558  00149C  5021               	movf	fillRectangle@x,w,c
  5559  00149E  B4D8               	btfsc	status,2,c
  5560  0014A0  D00A               	goto	l5496
  5561  0014A2  D001               	goto	l5490
  5562  0014A4  D008               	goto	l5496
  5563  0014A6                     l5490:
  5564                           
  5565                           ;ST7735_TFT.c: 519: spiwrite(hi);
  5566  0014A6  501F               	movf	fillRectangle@hi,w,c
  5567  0014A8  EC91  F010         	call	_spiwrite
  5568                           
  5569                           ;ST7735_TFT.c: 520: spiwrite(lo);
  5570  0014AC  5020               	movf	fillRectangle@lo,w,c
  5571  0014AE  EC91  F010         	call	_spiwrite
  5572  0014B2  0621               	decf	fillRectangle@x,f,c
  5573  0014B4  D7F3               	goto	l5486
  5574  0014B6                     l5496:
  5575  0014B6  0616               	decf	fillRectangle@y,f,c
  5576  0014B8  D7EA               	goto	l5482
  5577  0014BA                     l152:
  5578                           
  5579                           ;ST7735_TFT.c: 521: }
  5580                           ;ST7735_TFT.c: 522: }
  5581                           ;ST7735_TFT.c: 523: PORTDbits.RD1 = 1;
  5582  0014BA  8283               	bsf	3971,1,c	;volatile
  5583  0014BC                     l148:
  5584  0014BC  0012               	return		;funcret
  5585  0014BE                     __end_of_fillRectangle:
  5586                           	opt stack 0
  5587                           tblptru	equ	0xFF8
  5588                           tblptrh	equ	0xFF7
  5589                           tblptrl	equ	0xFF6
  5590                           tablat	equ	0xFF5
  5591                           prodh	equ	0xFF4
  5592                           prodl	equ	0xFF3
  5593                           postinc0	equ	0xFEE
  5594                           wreg	equ	0xFE8
  5595                           postdec1	equ	0xFE5
  5596                           fsr1l	equ	0xFE1
  5597                           indf2	equ	0xFDF
  5598                           postinc2	equ	0xFDE
  5599                           postdec2	equ	0xFDD
  5600                           fsr2h	equ	0xFDA
  5601                           fsr2l	equ	0xFD9
  5602                           status	equ	0xFD8
  5603                           
  5604 ;; *************** function _drawtext *****************
  5605 ;; Defined at:
  5606 ;;		line 474 in file "ST7735_TFT.c"
  5607 ;; Parameters:    Size  Location     Type
  5608 ;;  x               1    wreg     unsigned char 
  5609 ;;  y               1   54[COMRAM] unsigned char 
  5610 ;;  _text           2   55[COMRAM] PTR unsigned char 
  5611 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5612 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5613 ;;		 -> buffer(31), 
  5614 ;;  color           2   57[COMRAM] unsigned int 
  5615 ;;  bg              2   59[COMRAM] unsigned int 
  5616 ;;  size            1   61[COMRAM] unsigned char 
  5617 ;; Auto vars:     Size  Location     Type
  5618 ;;  x               1    0[BANK1 ] unsigned char 
  5619 ;;  i               2    3[BANK1 ] unsigned int 
  5620 ;;  textsize        2    1[BANK1 ] unsigned int 
  5621 ;;  cursor_x        1    6[BANK1 ] unsigned char 
  5622 ;;  cursor_y        1    5[BANK1 ] unsigned char 
  5623 ;; Return value:  Size  Location     Type
  5624 ;;		None               void
  5625 ;; Registers used:
  5626 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5627 ;; Tracked objects:
  5628 ;;		On entry : 0/0
  5629 ;;		On exit  : 0/0
  5630 ;;		Unchanged: 0/0
  5631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5632 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5633 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5634 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5635 ;;      Totals:         8       2       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5636 ;;Total ram usage:       17 bytes
  5637 ;; Hardware stack levels used:    1
  5638 ;; Hardware stack levels required when called:    8
  5639 ;; This function calls:
  5640 ;;		_drawChar
  5641 ;;		_strlen
  5642 ;; This function is called by:
  5643 ;;		_Initialize_Screen
  5644 ;;		_Update_Screen
  5645 ;; This function uses a non-reentrant model
  5646 ;;
  5647                           
  5648                           	psect	text20
  5649  000E0A                     __ptext20:
  5650                           	opt stack 0
  5651  000E0A                     _drawtext:
  5652                           	opt stack 21
  5653                           
  5654                           ;incstack = 0
  5655                           ;drawtext@x stored from wreg
  5656  000E0A  0101               	movlb	1	; () banked
  5657  000E0C  6F1F               	movwf	drawtext@x& (0+255),b
  5658                           
  5659                           ; BSR set to: 1
  5660                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
  5661                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
  5662                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
  5663  000E0E  C11F  F125         	movff	drawtext@x,drawtext@cursor_x
  5664                           
  5665                           ; BSR set to: 1
  5666  000E12  C037  F124         	movff	drawtext@y,drawtext@cursor_y
  5667                           
  5668                           ; BSR set to: 1
  5669                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
  5670  000E16  C038  F00F         	movff	drawtext@_text,strlen@s
  5671  000E1A  C039  F010         	movff	drawtext@_text+1,strlen@s+1
  5672  000E1E  ECE4  F00E         	call	_strlen	;wreg free
  5673  000E22  C00F  F120         	movff	?_strlen,drawtext@textsize
  5674  000E26  C010  F121         	movff	?_strlen+1,drawtext@textsize+1
  5675                           
  5676                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
  5677  000E2A  0E00               	movlw	0
  5678  000E2C  0101               	movlb	1	; () banked
  5679  000E2E  6F23               	movwf	(drawtext@i+1)& (0+255),b
  5680  000E30  0E00               	movlw	0
  5681  000E32  6F22               	movwf	drawtext@i& (0+255),b
  5682  000E34  D06A               	goto	l5554
  5683  000E36                     l5528:
  5684                           
  5685                           ; BSR set to: 1
  5686                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
  5687  000E36  5071               	movf	_wrap,w,c
  5688  000E38  B4D8               	btfsc	status,2,c
  5689  000E3A  D03A               	goto	l5544
  5690                           
  5691                           ; BSR set to: 1
  5692  000E3C  503E               	movf	drawtext@size,w,c
  5693  000E3E  0D05               	mullw	5
  5694  000E40  0101               	movlb	1	; () banked
  5695  000E42  5125               	movf	drawtext@cursor_x& (0+255),w,b
  5696  000E44  0100               	movlb	0	; () banked
  5697  000E46  6FFE               	movwf	??_drawtext& (0+255),b
  5698  000E48  6BFF               	clrf	(??_drawtext+1)& (0+255),b
  5699  000E4A  50F3               	movf	prodl,w,c
  5700  000E4C  0100               	movlb	0	; () banked
  5701  000E4E  27FE               	addwf	??_drawtext& (0+255),f,b
  5702  000E50  50F4               	movf	prodh,w,c
  5703  000E52  0100               	movlb	0	; () banked
  5704  000E54  23FF               	addwfc	(??_drawtext+1)& (0+255),f,b
  5705  000E56  0100               	movlb	0	; () banked
  5706  000E58  BFFF               	btfsc	(??_drawtext+1)& (0+255),7,b
  5707  000E5A  D02A               	goto	l5544
  5708  000E5C  0100               	movlb	0	; () banked
  5709  000E5E  51FF               	movf	(??_drawtext+1)& (0+255),w,b
  5710  000E60  E105               	bnz	u4040
  5711  000E62  0E81               	movlw	129
  5712  000E64  0100               	movlb	0	; () banked
  5713  000E66  5DFE               	subwf	??_drawtext& (0+255),w,b
  5714  000E68  A0D8               	btfss	status,0,c
  5715  000E6A  D022               	goto	l5544
  5716  000E6C                     u4040:
  5717                           
  5718                           ; BSR set to: 0
  5719                           ;ST7735_TFT.c: 482: cursor_x = 0;
  5720  000E6C  0E00               	movlw	0
  5721  000E6E  0101               	movlb	1	; () banked
  5722  000E70  6F25               	movwf	drawtext@cursor_x& (0+255),b
  5723                           
  5724                           ; BSR set to: 1
  5725                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
  5726  000E72  503E               	movf	drawtext@size,w,c
  5727  000E74  0D07               	mullw	7
  5728  000E76  50F3               	movf	prodl,w,c
  5729  000E78  0101               	movlb	1	; () banked
  5730  000E7A  2524               	addwf	drawtext@cursor_y& (0+255),w,b
  5731  000E7C  0F03               	addlw	3
  5732  000E7E  0101               	movlb	1	; () banked
  5733  000E80  6F24               	movwf	drawtext@cursor_y& (0+255),b
  5734                           
  5735                           ; BSR set to: 1
  5736                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
  5737  000E82  0EA0               	movlw	160
  5738  000E84  0101               	movlb	1	; () banked
  5739  000E86  6524               	cpfsgt	drawtext@cursor_y& (0+255),b
  5740  000E88  D004               	goto	l5540
  5741                           
  5742                           ; BSR set to: 1
  5743  000E8A  0EA0               	movlw	160
  5744  000E8C  0101               	movlb	1	; () banked
  5745  000E8E  6F24               	movwf	drawtext@cursor_y& (0+255),b
  5746  000E90  D000               	goto	l5540
  5747  000E92                     l5540:
  5748                           
  5749                           ; BSR set to: 1
  5750                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
  5751  000E92  0101               	movlb	1	; () banked
  5752  000E94  5122               	movf	drawtext@i& (0+255),w,b
  5753  000E96  2438               	addwf	drawtext@_text,w,c
  5754  000E98  6ED9               	movwf	fsr2l,c
  5755  000E9A  0101               	movlb	1	; () banked
  5756  000E9C  5123               	movf	(drawtext@i+1)& (0+255),w,b
  5757  000E9E  2039               	addwfc	drawtext@_text+1,w,c
  5758  000EA0  6EDA               	movwf	fsr2h,c
  5759  000EA2  0E20               	movlw	32
  5760  000EA4  18DE               	xorwf	postinc2,w,c
  5761  000EA6  B4D8               	btfsc	status,2,c
  5762  000EA8  D02C               	goto	l5552
  5763  000EAA  D002               	goto	l5544
  5764                           
  5765                           ; BSR set to: 1
  5766  000EAC  D02A               	goto	l5552
  5767                           
  5768                           ; BSR set to: 1
  5769  000EAE  D000               	goto	l5544
  5770  000EB0                     l5544:
  5771                           
  5772                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  5773  000EB0  C124  F02C         	movff	drawtext@cursor_y,drawChar@y
  5774  000EB4  0101               	movlb	1	; () banked
  5775  000EB6  5122               	movf	drawtext@i& (0+255),w,b
  5776  000EB8  2438               	addwf	drawtext@_text,w,c
  5777  000EBA  6ED9               	movwf	fsr2l,c
  5778  000EBC  0101               	movlb	1	; () banked
  5779  000EBE  5123               	movf	(drawtext@i+1)& (0+255),w,b
  5780  000EC0  2039               	addwfc	drawtext@_text+1,w,c
  5781  000EC2  6EDA               	movwf	fsr2h,c
  5782  000EC4  50DF               	movf	indf2,w,c
  5783  000EC6  6E2D               	movwf	drawChar@c,c
  5784  000EC8  C03A  F02E         	movff	drawtext@color,drawChar@color
  5785  000ECC  C03B  F02F         	movff	drawtext@color+1,drawChar@color+1
  5786  000ED0  C03C  F030         	movff	drawtext@bg,drawChar@bg
  5787  000ED4  C03D  F031         	movff	drawtext@bg+1,drawChar@bg+1
  5788  000ED8  C03E  F032         	movff	drawtext@size,drawChar@size
  5789  000EDC  0101               	movlb	1	; () banked
  5790  000EDE  5125               	movf	drawtext@cursor_x& (0+255),w,b
  5791  000EE0  EC5A  F006         	call	_drawChar
  5792                           
  5793                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
  5794  000EE4  503E               	movf	drawtext@size,w,c
  5795  000EE6  0D06               	mullw	6
  5796  000EE8  50F3               	movf	prodl,w,c
  5797  000EEA  0101               	movlb	1	; () banked
  5798  000EEC  2525               	addwf	drawtext@cursor_x& (0+255),w,b
  5799  000EEE  0101               	movlb	1	; () banked
  5800  000EF0  6F25               	movwf	drawtext@cursor_x& (0+255),b
  5801                           
  5802                           ; BSR set to: 1
  5803                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
  5804  000EF2  0E80               	movlw	128
  5805  000EF4  0101               	movlb	1	; () banked
  5806  000EF6  6525               	cpfsgt	drawtext@cursor_x& (0+255),b
  5807  000EF8  D004               	goto	l5552
  5808                           
  5809                           ; BSR set to: 1
  5810  000EFA  0E80               	movlw	128
  5811  000EFC  0101               	movlb	1	; () banked
  5812  000EFE  6F25               	movwf	drawtext@cursor_x& (0+255),b
  5813                           
  5814                           ; BSR set to: 1
  5815  000F00  D000               	goto	l5552
  5816  000F02                     l5552:
  5817                           
  5818                           ; BSR set to: 1
  5819  000F02  0101               	movlb	1	; () banked
  5820  000F04  4B22               	infsnz	drawtext@i& (0+255),f,b
  5821  000F06  2B23               	incf	(drawtext@i+1)& (0+255),f,b
  5822  000F08  D000               	goto	l5554
  5823  000F0A                     l5554:
  5824                           
  5825                           ; BSR set to: 1
  5826  000F0A  0101               	movlb	1	; () banked
  5827  000F0C  5120               	movf	drawtext@textsize& (0+255),w,b
  5828  000F0E  0101               	movlb	1	; () banked
  5829  000F10  5D22               	subwf	drawtext@i& (0+255),w,b
  5830  000F12  0101               	movlb	1	; () banked
  5831  000F14  5121               	movf	(drawtext@textsize+1)& (0+255),w,b
  5832  000F16  0101               	movlb	1	; () banked
  5833  000F18  5923               	subwfb	(drawtext@i+1)& (0+255),w,b
  5834  000F1A  A0D8               	btfss	status,0,c
  5835  000F1C  D78C               	goto	l5528
  5836                           
  5837                           ; BSR set to: 1
  5838                           
  5839                           ; BSR set to: 1
  5840  000F1E  0012               	return		;funcret
  5841  000F20                     __end_of_drawtext:
  5842                           	opt stack 0
  5843                           tblptru	equ	0xFF8
  5844                           tblptrh	equ	0xFF7
  5845                           tblptrl	equ	0xFF6
  5846                           tablat	equ	0xFF5
  5847                           prodh	equ	0xFF4
  5848                           prodl	equ	0xFF3
  5849                           postinc0	equ	0xFEE
  5850                           wreg	equ	0xFE8
  5851                           postdec1	equ	0xFE5
  5852                           fsr1l	equ	0xFE1
  5853                           indf2	equ	0xFDF
  5854                           postinc2	equ	0xFDE
  5855                           postdec2	equ	0xFDD
  5856                           fsr2h	equ	0xFDA
  5857                           fsr2l	equ	0xFD9
  5858                           status	equ	0xFD8
  5859                           
  5860 ;; *************** function _strlen *****************
  5861 ;; Defined at:
  5862 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  5863 ;; Parameters:    Size  Location     Type
  5864 ;;  s               2   14[COMRAM] PTR const unsigned char 
  5865 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5866 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5867 ;;		 -> buffer(31), 
  5868 ;; Auto vars:     Size  Location     Type
  5869 ;;  cp              2   18[COMRAM] PTR const unsigned char 
  5870 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5871 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5872 ;;		 -> buffer(31), 
  5873 ;; Return value:  Size  Location     Type
  5874 ;;                  2   14[COMRAM] unsigned int 
  5875 ;; Registers used:
  5876 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5877 ;; Tracked objects:
  5878 ;;		On entry : 0/0
  5879 ;;		On exit  : 0/0
  5880 ;;		Unchanged: 0/0
  5881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5882 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5883 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5884 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5885 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5886 ;;Total ram usage:        6 bytes
  5887 ;; Hardware stack levels used:    1
  5888 ;; Hardware stack levels required when called:    2
  5889 ;; This function calls:
  5890 ;;		Nothing
  5891 ;; This function is called by:
  5892 ;;		_drawtext
  5893 ;; This function uses a non-reentrant model
  5894 ;;
  5895                           
  5896                           	psect	text21
  5897  001DC8                     __ptext21:
  5898                           	opt stack 0
  5899  001DC8                     _strlen:
  5900                           	opt stack 26
  5901                           
  5902                           ; BSR set to: 1
  5903                           ;incstack = 0
  5904  001DC8  C00F  F013         	movff	strlen@s,strlen@cp
  5905  001DCC  C010  F014         	movff	strlen@s+1,strlen@cp+1
  5906  001DD0  D003               	goto	l5454
  5907  001DD2                     l5452:
  5908  001DD2  4A13               	infsnz	strlen@cp,f,c
  5909  001DD4  2A14               	incf	strlen@cp+1,f,c
  5910  001DD6  D000               	goto	l5454
  5911  001DD8                     l5454:
  5912  001DD8  C013  FFD9         	movff	strlen@cp,fsr2l
  5913  001DDC  C014  FFDA         	movff	strlen@cp+1,fsr2h
  5914  001DE0  50DF               	movf	indf2,w,c
  5915  001DE2  A4D8               	btfss	status,2,c
  5916  001DE4  D7F6               	goto	l5452
  5917  001DE6  C00F  F011         	movff	strlen@s,??_strlen
  5918  001DEA  C010  F012         	movff	strlen@s+1,??_strlen+1
  5919  001DEE  1E11               	comf	??_strlen,f,c
  5920  001DF0  1E12               	comf	??_strlen+1,f,c
  5921  001DF2  4A11               	infsnz	??_strlen,f,c
  5922  001DF4  2A12               	incf	??_strlen+1,f,c
  5923  001DF6  5013               	movf	strlen@cp,w,c
  5924  001DF8  2411               	addwf	??_strlen,w,c
  5925  001DFA  6E0F               	movwf	?_strlen,c
  5926  001DFC  5014               	movf	strlen@cp+1,w,c
  5927  001DFE  2012               	addwfc	??_strlen+1,w,c
  5928  001E00  6E10               	movwf	?_strlen+1,c
  5929  001E02  D000               	goto	l1488
  5930  001E04                     l1488:
  5931  001E04  0012               	return		;funcret
  5932  001E06                     __end_of_strlen:
  5933                           	opt stack 0
  5934                           tblptru	equ	0xFF8
  5935                           tblptrh	equ	0xFF7
  5936                           tblptrl	equ	0xFF6
  5937                           tablat	equ	0xFF5
  5938                           prodh	equ	0xFF4
  5939                           prodl	equ	0xFF3
  5940                           postinc0	equ	0xFEE
  5941                           wreg	equ	0xFE8
  5942                           postdec1	equ	0xFE5
  5943                           fsr1l	equ	0xFE1
  5944                           indf2	equ	0xFDF
  5945                           postinc2	equ	0xFDE
  5946                           postdec2	equ	0xFDD
  5947                           fsr2h	equ	0xFDA
  5948                           fsr2l	equ	0xFD9
  5949                           status	equ	0xFD8
  5950                           
  5951 ;; *************** function _drawChar *****************
  5952 ;; Defined at:
  5953 ;;		line 447 in file "ST7735_TFT.c"
  5954 ;; Parameters:    Size  Location     Type
  5955 ;;  x               1    wreg     unsigned char 
  5956 ;;  y               1   43[COMRAM] unsigned char 
  5957 ;;  c               1   44[COMRAM] unsigned char 
  5958 ;;  color           2   45[COMRAM] unsigned int 
  5959 ;;  bg              2   47[COMRAM] unsigned int 
  5960 ;;  size            1   49[COMRAM] unsigned char 
  5961 ;; Auto vars:     Size  Location     Type
  5962 ;;  x               1   51[COMRAM] unsigned char 
  5963 ;;  line            1   50[COMRAM] unsigned char 
  5964 ;;  i               1   53[COMRAM] unsigned char 
  5965 ;;  j               1   52[COMRAM] unsigned char 
  5966 ;; Return value:  Size  Location     Type
  5967 ;;		None               void
  5968 ;; Registers used:
  5969 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5970 ;; Tracked objects:
  5971 ;;		On entry : 0/0
  5972 ;;		On exit  : 0/0
  5973 ;;		Unchanged: 0/0
  5974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5975 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5976 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5978 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5979 ;;Total ram usage:       11 bytes
  5980 ;; Hardware stack levels used:    1
  5981 ;; Hardware stack levels required when called:    7
  5982 ;; This function calls:
  5983 ;;		___wmul
  5984 ;;		_drawPixel
  5985 ;;		_fillRect
  5986 ;; This function is called by:
  5987 ;;		_drawtext
  5988 ;; This function uses a non-reentrant model
  5989 ;;
  5990                           
  5991                           	psect	text22
  5992  000CB4                     __ptext22:
  5993                           	opt stack 0
  5994  000CB4                     _drawChar:
  5995                           	opt stack 21
  5996                           
  5997                           ;incstack = 0
  5998                           ;drawChar@x stored from wreg
  5999  000CB4  6E34               	movwf	drawChar@x,c
  6000                           
  6001                           ;ST7735_TFT.c: 449: char i, j;
  6002                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
  6003  000CB6  0E80               	movlw	128
  6004  000CB8  6034               	cpfslt	drawChar@x,c
  6005  000CBA  D0A6               	goto	l111
  6006  000CBC  0E9F               	movlw	159
  6007  000CBE  642C               	cpfsgt	drawChar@y,c
  6008  000CC0  D001               	goto	l5400
  6009                           
  6010                           ;ST7735_TFT.c: 451: return;
  6011  000CC2  D0A2               	goto	l111
  6012  000CC4                     l5400:
  6013                           
  6014                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
  6015  000CC4  5032               	movf	drawChar@size,w,c
  6016  000CC6  A4D8               	btfss	status,2,c
  6017  000CC8  D003               	goto	l5404
  6018  000CCA  0E01               	movlw	1
  6019  000CCC  6E32               	movwf	drawChar@size,c
  6020  000CCE  D000               	goto	l5404
  6021  000CD0                     l5404:
  6022                           
  6023                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
  6024  000CD0  0E1F               	movlw	31
  6025  000CD2  642D               	cpfsgt	drawChar@c,c
  6026  000CD4  D004               	goto	l5408
  6027  000CD6  0E7E               	movlw	126
  6028  000CD8  642D               	cpfsgt	drawChar@c,c
  6029  000CDA  D003               	goto	l113
  6030  000CDC  D000               	goto	l5408
  6031  000CDE                     l5408:
  6032                           
  6033                           ;ST7735_TFT.c: 454: c = '?';
  6034  000CDE  0E3F               	movlw	63
  6035  000CE0  6E2D               	movwf	drawChar@c,c
  6036  000CE2                     l113:
  6037                           
  6038                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
  6039  000CE2  0E00               	movlw	0
  6040  000CE4  6E36               	movwf	drawChar@i,c
  6041  000CE6                     l5410:
  6042  000CE6  0E04               	movlw	4
  6043  000CE8  6436               	cpfsgt	drawChar@i,c
  6044  000CEA  D001               	goto	l5414
  6045  000CEC  D08D               	goto	l111
  6046  000CEE                     l5414:
  6047                           
  6048                           ;ST7735_TFT.c: 456: unsigned char line;
  6049                           ;ST7735_TFT.c: 457: if(c < 'S')
  6050  000CEE  0E53               	movlw	83
  6051  000CF0  602D               	cpfslt	drawChar@c,c
  6052  000CF2  D015               	goto	l5418
  6053                           
  6054                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
  6055  000CF4  0EE0               	movlw	224
  6056  000CF6  242D               	addwf	drawChar@c,w,c
  6057  000CF8  6E0F               	movwf	___wmul@multiplier,c
  6058  000CFA  6A10               	clrf	___wmul@multiplier+1,c
  6059  000CFC  0EFF               	movlw	255
  6060  000CFE  2210               	addwfc	___wmul@multiplier+1,f,c
  6061  000D00  0E00               	movlw	0
  6062  000D02  6E12               	movwf	___wmul@multiplicand+1,c
  6063  000D04  0E05               	movlw	5
  6064  000D06  6E11               	movwf	___wmul@multiplicand,c
  6065  000D08  ECA5  F00F         	call	___wmul	;wreg free
  6066  000D0C  5036               	movf	drawChar@i,w,c
  6067  000D0E  260F               	addwf	?___wmul,f,c
  6068  000D10  0E00               	movlw	0
  6069  000D12  2210               	addwfc	?___wmul+1,f,c
  6070  000D14  0EE1               	movlw	low _font
  6071  000D16  240F               	addwf	?___wmul,w,c
  6072  000D18  6EF6               	movwf	tblptrl,c
  6073  000D1A  0EFC               	movlw	high _font
  6074  000D1C  D014               	goto	L4
  6075  000D1E                     l5418:
  6076                           
  6077                           ;ST7735_TFT.c: 459: else
  6078                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
  6079  000D1E  0EAD               	movlw	173
  6080  000D20  242D               	addwf	drawChar@c,w,c
  6081  000D22  6E0F               	movwf	___wmul@multiplier,c
  6082  000D24  6A10               	clrf	___wmul@multiplier+1,c
  6083  000D26  0EFF               	movlw	255
  6084  000D28  2210               	addwfc	___wmul@multiplier+1,f,c
  6085  000D2A  0E00               	movlw	0
  6086  000D2C  6E12               	movwf	___wmul@multiplicand+1,c
  6087  000D2E  0E05               	movlw	5
  6088  000D30  6E11               	movwf	___wmul@multiplicand,c
  6089  000D32  ECA5  F00F         	call	___wmul	;wreg free
  6090  000D36  5036               	movf	drawChar@i,w,c
  6091  000D38  260F               	addwf	?___wmul,f,c
  6092  000D3A  0E00               	movlw	0
  6093  000D3C  2210               	addwfc	?___wmul+1,f,c
  6094  000D3E  0EE0               	movlw	low _font2
  6095  000D40  240F               	addwf	?___wmul,w,c
  6096  000D42  6EF6               	movwf	tblptrl,c
  6097  000D44  0EFD               	movlw	high _font2
  6098  000D46                     L4:
  6099  000D46  2010               	addwfc	?___wmul+1,w,c
  6100  000D48  6EF7               	movwf	tblptrh,c
  6101  000D4A                     	if	0	;There are less than 3 active tblptr bytes
  6102  000D4A                     	endif
  6103  000D4A  0008               	tblrd		*
  6104  000D4C  CFF5 F033          	movff	tablat,drawChar@line
  6105  000D50  D000               	goto	l5420
  6106  000D52                     l5420:
  6107                           
  6108                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
  6109  000D52  0E00               	movlw	0
  6110  000D54  6E35               	movwf	drawChar@j,c
  6111  000D56                     l5422:
  6112  000D56  0E06               	movlw	6
  6113  000D58  6435               	cpfsgt	drawChar@j,c
  6114  000D5A  D001               	goto	l120
  6115  000D5C  D053               	goto	l5446
  6116  000D5E                     l120:
  6117                           
  6118                           ;ST7735_TFT.c: 462: if(line & 0x01) {
  6119  000D5E  A033               	btfss	drawChar@line,0,c
  6120  000D60  D023               	goto	l5432
  6121                           
  6122                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
  6123  000D62  0432               	decf	drawChar@size,w,c
  6124  000D64  A4D8               	btfss	status,2,c
  6125  000D66  D00C               	goto	l5430
  6126  000D68  502C               	movf	drawChar@y,w,c
  6127  000D6A  2435               	addwf	drawChar@j,w,c
  6128  000D6C  6E16               	movwf	drawPixel@y,c
  6129  000D6E  C02E  F017         	movff	drawChar@color,drawPixel@color
  6130  000D72  C02F  F018         	movff	drawChar@color+1,drawPixel@color+1
  6131  000D76  5034               	movf	drawChar@x,w,c
  6132  000D78  2436               	addwf	drawChar@i,w,c
  6133  000D7A  EC78  F00F         	call	_drawPixel
  6134  000D7E  D03E               	goto	l5440
  6135  000D80                     l5430:
  6136                           
  6137                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
  6138  000D80  5035               	movf	drawChar@j,w,c
  6139  000D82  0232               	mulwf	drawChar@size,c
  6140  000D84  50F3               	movf	prodl,w,c
  6141  000D86  242C               	addwf	drawChar@y,w,c
  6142  000D88  6E21               	movwf	fillRect@y,c
  6143  000D8A  C032  F022         	movff	drawChar@size,fillRect@w
  6144  000D8E  C032  F023         	movff	drawChar@size,fillRect@h
  6145  000D92  C02E  F024         	movff	drawChar@color,fillRect@color
  6146  000D96  C02F  F025         	movff	drawChar@color+1,fillRect@color+1
  6147  000D9A  5036               	movf	drawChar@i,w,c
  6148  000D9C  0232               	mulwf	drawChar@size,c
  6149  000D9E  50F3               	movf	prodl,w,c
  6150  000DA0  2434               	addwf	drawChar@x,w,c
  6151  000DA2  EC79  F00E         	call	_fillRect
  6152                           
  6153                           ;ST7735_TFT.c: 465: }
  6154  000DA6  D02A               	goto	l5440
  6155  000DA8                     l5432:
  6156                           
  6157                           ;ST7735_TFT.c: 466: else if(bg != color) {
  6158  000DA8  502E               	movf	drawChar@color,w,c
  6159  000DAA  1830               	xorwf	drawChar@bg,w,c
  6160  000DAC  E104               	bnz	u3890
  6161  000DAE  502F               	movf	drawChar@color+1,w,c
  6162  000DB0  1831               	xorwf	drawChar@bg+1,w,c
  6163  000DB2  B4D8               	btfsc	status,2,c
  6164  000DB4  D023               	goto	l5440
  6165  000DB6                     u3890:
  6166                           
  6167                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
  6168  000DB6  0432               	decf	drawChar@size,w,c
  6169  000DB8  A4D8               	btfss	status,2,c
  6170  000DBA  D00C               	goto	l5438
  6171  000DBC  502C               	movf	drawChar@y,w,c
  6172  000DBE  2435               	addwf	drawChar@j,w,c
  6173  000DC0  6E16               	movwf	drawPixel@y,c
  6174  000DC2  C030  F017         	movff	drawChar@bg,drawPixel@color
  6175  000DC6  C031  F018         	movff	drawChar@bg+1,drawPixel@color+1
  6176  000DCA  5034               	movf	drawChar@x,w,c
  6177  000DCC  2436               	addwf	drawChar@i,w,c
  6178  000DCE  EC78  F00F         	call	_drawPixel
  6179  000DD2  D014               	goto	l5440
  6180  000DD4                     l5438:
  6181                           
  6182                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
  6183  000DD4  5035               	movf	drawChar@j,w,c
  6184  000DD6  0232               	mulwf	drawChar@size,c
  6185  000DD8  50F3               	movf	prodl,w,c
  6186  000DDA  242C               	addwf	drawChar@y,w,c
  6187  000DDC  6E21               	movwf	fillRect@y,c
  6188  000DDE  C032  F022         	movff	drawChar@size,fillRect@w
  6189  000DE2  C032  F023         	movff	drawChar@size,fillRect@h
  6190  000DE6  C030  F024         	movff	drawChar@bg,fillRect@color
  6191  000DEA  C031  F025         	movff	drawChar@bg+1,fillRect@color+1
  6192  000DEE  5036               	movf	drawChar@i,w,c
  6193  000DF0  0232               	mulwf	drawChar@size,c
  6194  000DF2  50F3               	movf	prodl,w,c
  6195  000DF4  2434               	addwf	drawChar@x,w,c
  6196  000DF6  EC79  F00E         	call	_fillRect
  6197  000DFA  D000               	goto	l5440
  6198  000DFC                     l5440:
  6199  000DFC  2A35               	incf	drawChar@j,f,c
  6200  000DFE  90D8               	bcf	status,0,c
  6201  000E00  3233               	rrcf	drawChar@line,f,c
  6202  000E02  D7A9               	goto	l5422
  6203  000E04                     l5446:
  6204  000E04  2A36               	incf	drawChar@i,f,c
  6205  000E06  D76F               	goto	l5410
  6206  000E08                     l111:
  6207  000E08  0012               	return		;funcret
  6208  000E0A                     __end_of_drawChar:
  6209                           	opt stack 0
  6210                           tblptru	equ	0xFF8
  6211                           tblptrh	equ	0xFF7
  6212                           tblptrl	equ	0xFF6
  6213                           tablat	equ	0xFF5
  6214                           prodh	equ	0xFF4
  6215                           prodl	equ	0xFF3
  6216                           postinc0	equ	0xFEE
  6217                           wreg	equ	0xFE8
  6218                           postdec1	equ	0xFE5
  6219                           fsr1l	equ	0xFE1
  6220                           indf2	equ	0xFDF
  6221                           postinc2	equ	0xFDE
  6222                           postdec2	equ	0xFDD
  6223                           fsr2h	equ	0xFDA
  6224                           fsr2l	equ	0xFD9
  6225                           status	equ	0xFD8
  6226                           
  6227 ;; *************** function _fillRect *****************
  6228 ;; Defined at:
  6229 ;;		line 437 in file "ST7735_TFT.c"
  6230 ;; Parameters:    Size  Location     Type
  6231 ;;  x               1    wreg     unsigned char 
  6232 ;;  y               1   32[COMRAM] unsigned char 
  6233 ;;  w               1   33[COMRAM] unsigned char 
  6234 ;;  h               1   34[COMRAM] unsigned char 
  6235 ;;  color           2   35[COMRAM] unsigned int 
  6236 ;; Auto vars:     Size  Location     Type
  6237 ;;  x               1   40[COMRAM] unsigned char 
  6238 ;;  i               2   41[COMRAM] int 
  6239 ;; Return value:  Size  Location     Type
  6240 ;;		None               void
  6241 ;; Registers used:
  6242 ;;		wreg, status,2, status,0, cstack
  6243 ;; Tracked objects:
  6244 ;;		On entry : 0/0
  6245 ;;		On exit  : 0/0
  6246 ;;		Unchanged: 0/0
  6247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6248 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6249 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6250 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6251 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6252 ;;Total ram usage:       11 bytes
  6253 ;; Hardware stack levels used:    1
  6254 ;; Hardware stack levels required when called:    6
  6255 ;; This function calls:
  6256 ;;		_drawFastVLine
  6257 ;; This function is called by:
  6258 ;;		_drawChar
  6259 ;; This function uses a non-reentrant model
  6260 ;;
  6261                           
  6262                           	psect	text23
  6263  001CF2                     __ptext23:
  6264                           	opt stack 0
  6265  001CF2                     _fillRect:
  6266                           	opt stack 21
  6267                           
  6268                           ;incstack = 0
  6269                           ;fillRect@x stored from wreg
  6270  001CF2  6E29               	movwf	fillRect@x,c
  6271                           
  6272                           ;ST7735_TFT.c: 439: signed int i;
  6273                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
  6274  001CF4  C029  F02A         	movff	fillRect@x,fillRect@i
  6275  001CF8  6A2B               	clrf	fillRect@i+1,c
  6276  001CFA  D00E               	goto	l5158
  6277  001CFC                     l5154:
  6278                           
  6279                           ;ST7735_TFT.c: 442: {
  6280                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
  6281  001CFC  C021  F016         	movff	fillRect@y,drawFastVLine@y
  6282  001D00  C023  F017         	movff	fillRect@h,drawFastVLine@h
  6283  001D04  C024  F018         	movff	fillRect@color,drawFastVLine@color
  6284  001D08  C025  F019         	movff	fillRect@color+1,drawFastVLine@color+1
  6285  001D0C  502A               	movf	fillRect@i,w,c
  6286  001D0E  EC78  F00B         	call	_drawFastVLine
  6287  001D12  4A2A               	infsnz	fillRect@i,f,c
  6288  001D14  2A2B               	incf	fillRect@i+1,f,c
  6289  001D16  D000               	goto	l5158
  6290  001D18                     l5158:
  6291  001D18  5022               	movf	fillRect@w,w,c
  6292  001D1A  C029  F026         	movff	fillRect@x,??_fillRect
  6293  001D1E  6A27               	clrf	(??_fillRect+1)& (0+255),c
  6294  001D20  2626               	addwf	??_fillRect,f,c
  6295  001D22  0E00               	movlw	0
  6296  001D24  2227               	addwfc	??_fillRect+1,f,c
  6297  001D26  5026               	movf	??_fillRect,w,c
  6298  001D28  5C2A               	subwf	fillRect@i,w,c
  6299  001D2A  502B               	movf	fillRect@i+1,w,c
  6300  001D2C  0A80               	xorlw	128
  6301  001D2E  6E28               	movwf	(??_fillRect+2)& (0+255),c
  6302  001D30  5027               	movf	??_fillRect+1,w,c
  6303  001D32  0A80               	xorlw	128
  6304  001D34  5828               	subwfb	(??_fillRect+2)& (0+255),w,c
  6305  001D36  A0D8               	btfss	status,0,c
  6306  001D38  D7E1               	goto	l5154
  6307  001D3A  0012               	return		;funcret
  6308  001D3C                     __end_of_fillRect:
  6309                           	opt stack 0
  6310                           tblptru	equ	0xFF8
  6311                           tblptrh	equ	0xFF7
  6312                           tblptrl	equ	0xFF6
  6313                           tablat	equ	0xFF5
  6314                           prodh	equ	0xFF4
  6315                           prodl	equ	0xFF3
  6316                           postinc0	equ	0xFEE
  6317                           wreg	equ	0xFE8
  6318                           postdec1	equ	0xFE5
  6319                           fsr1l	equ	0xFE1
  6320                           indf2	equ	0xFDF
  6321                           postinc2	equ	0xFDE
  6322                           postdec2	equ	0xFDD
  6323                           fsr2h	equ	0xFDA
  6324                           fsr2l	equ	0xFD9
  6325                           status	equ	0xFD8
  6326                           
  6327 ;; *************** function _drawFastVLine *****************
  6328 ;; Defined at:
  6329 ;;		line 416 in file "ST7735_TFT.c"
  6330 ;; Parameters:    Size  Location     Type
  6331 ;;  x               1    wreg     unsigned char 
  6332 ;;  y               1   21[COMRAM] unsigned char 
  6333 ;;  h               1   22[COMRAM] unsigned char 
  6334 ;;  color           2   23[COMRAM] unsigned int 
  6335 ;; Auto vars:     Size  Location     Type
  6336 ;;  x               1   31[COMRAM] unsigned char 
  6337 ;;  lo              1   30[COMRAM] unsigned char 
  6338 ;;  hi              1   29[COMRAM] unsigned char 
  6339 ;; Return value:  Size  Location     Type
  6340 ;;		None               void
  6341 ;; Registers used:
  6342 ;;		wreg, status,2, status,0, cstack
  6343 ;; Tracked objects:
  6344 ;;		On entry : 0/0
  6345 ;;		On exit  : 0/0
  6346 ;;		Unchanged: 0/0
  6347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6348 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6349 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6350 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6351 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6352 ;;Total ram usage:       11 bytes
  6353 ;; Hardware stack levels used:    1
  6354 ;; Hardware stack levels required when called:    5
  6355 ;; This function calls:
  6356 ;;		_setAddrWindow
  6357 ;;		_spiwrite
  6358 ;; This function is called by:
  6359 ;;		_fillRect
  6360 ;;		_fillCircleHelper
  6361 ;;		_fillCircle
  6362 ;;		_drawRect
  6363 ;; This function uses a non-reentrant model
  6364 ;;
  6365                           
  6366                           	psect	text24
  6367  0016F0                     __ptext24:
  6368                           	opt stack 0
  6369  0016F0                     _drawFastVLine:
  6370                           	opt stack 21
  6371                           
  6372                           ;incstack = 0
  6373                           ;drawFastVLine@x stored from wreg
  6374  0016F0  6E20               	movwf	drawFastVLine@x,c
  6375                           
  6376                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
  6377                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
  6378  0016F2  0E80               	movlw	128
  6379  0016F4  6020               	cpfslt	drawFastVLine@x,c
  6380  0016F6  D03F               	goto	l95
  6381  0016F8  0E9F               	movlw	159
  6382  0016FA  6416               	cpfsgt	drawFastVLine@y,c
  6383  0016FC  D001               	goto	l5068
  6384                           
  6385                           ;ST7735_TFT.c: 420: return;
  6386  0016FE  D03B               	goto	l95
  6387  001700                     l5068:
  6388                           
  6389                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
  6390  001700  0EFF               	movlw	255
  6391  001702  6E1A               	movwf	??_drawFastVLine& (0+255),c
  6392  001704  0EFF               	movlw	255
  6393  001706  6E1B               	movwf	(??_drawFastVLine+1)& (0+255),c
  6394  001708  5017               	movf	drawFastVLine@h,w,c
  6395  00170A  C016  F01C         	movff	drawFastVLine@y,??_drawFastVLine+2
  6396  00170E  6A1D               	clrf	(??_drawFastVLine+3)& (0+255),c
  6397  001710  261C               	addwf	??_drawFastVLine+2,f,c
  6398  001712  0E00               	movlw	0
  6399  001714  221D               	addwfc	??_drawFastVLine+3,f,c
  6400  001716  501A               	movf	??_drawFastVLine,w,c
  6401  001718  261C               	addwf	??_drawFastVLine+2,f,c
  6402  00171A  501B               	movf	??_drawFastVLine+1,w,c
  6403  00171C  221D               	addwfc	??_drawFastVLine+3,f,c
  6404  00171E  BE1D               	btfsc	??_drawFastVLine+3,7,c
  6405  001720  D00B               	goto	l5072
  6406  001722  501D               	movf	??_drawFastVLine+3,w,c
  6407  001724  E104               	bnz	u3460
  6408  001726  0EA0               	movlw	160
  6409  001728  5C1C               	subwf	??_drawFastVLine+2,w,c
  6410  00172A  A0D8               	btfss	status,0,c
  6411  00172C  D005               	goto	l5072
  6412  00172E                     u3460:
  6413                           
  6414                           ;ST7735_TFT.c: 422: h = 160 - y;
  6415  00172E  5016               	movf	drawFastVLine@y,w,c
  6416  001730  0800               	sublw	0
  6417  001732  0FA0               	addlw	160
  6418  001734  6E17               	movwf	drawFastVLine@h,c
  6419  001736  D000               	goto	l5072
  6420  001738                     l5072:
  6421                           
  6422                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
  6423  001738  5019               	movf	drawFastVLine@color+1,w,c
  6424  00173A  6E1E               	movwf	drawFastVLine@hi,c
  6425  00173C  C018  F01F         	movff	drawFastVLine@color,drawFastVLine@lo
  6426                           
  6427                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
  6428  001740  C016  F012         	movff	drawFastVLine@y,setAddrWindow@y0
  6429  001744  C020  F013         	movff	drawFastVLine@x,setAddrWindow@x1
  6430  001748  5016               	movf	drawFastVLine@y,w,c
  6431  00174A  2417               	addwf	drawFastVLine@h,w,c
  6432  00174C  6E1A               	movwf	??_drawFastVLine& (0+255),c
  6433  00174E  041A               	decf	??_drawFastVLine,w,c
  6434  001750  6E14               	movwf	setAddrWindow@y1,c
  6435  001752  5020               	movf	drawFastVLine@x,w,c
  6436  001754  EC07  F00E         	call	_setAddrWindow
  6437                           
  6438                           ;ST7735_TFT.c: 425: PORTDbits.RD0 = 1;
  6439  001758  8083               	bsf	3971,0,c	;volatile
  6440                           
  6441                           ;ST7735_TFT.c: 426: PORTDbits.RD1 = 0;
  6442  00175A  9283               	bcf	3971,1,c	;volatile
  6443                           
  6444                           ;ST7735_TFT.c: 428: while (h--) {
  6445  00175C  D007               	goto	l5084
  6446  00175E                     l5082:
  6447                           
  6448                           ;ST7735_TFT.c: 429: spiwrite(hi);
  6449  00175E  501E               	movf	drawFastVLine@hi,w,c
  6450  001760  EC91  F010         	call	_spiwrite
  6451                           
  6452                           ;ST7735_TFT.c: 430: spiwrite(lo);
  6453  001764  501F               	movf	drawFastVLine@lo,w,c
  6454  001766  EC91  F010         	call	_spiwrite
  6455  00176A  D000               	goto	l5084
  6456  00176C                     l5084:
  6457  00176C  0617               	decf	drawFastVLine@h,f,c
  6458  00176E  2817               	incf	drawFastVLine@h,w,c
  6459  001770  A4D8               	btfss	status,2,c
  6460  001772  D7F5               	goto	l5082
  6461                           
  6462                           ;ST7735_TFT.c: 431: }
  6463                           ;ST7735_TFT.c: 432: PORTDbits.RD1 = 1;
  6464  001774  8283               	bsf	3971,1,c	;volatile
  6465  001776                     l95:
  6466  001776  0012               	return		;funcret
  6467  001778                     __end_of_drawFastVLine:
  6468                           	opt stack 0
  6469                           tblptru	equ	0xFF8
  6470                           tblptrh	equ	0xFF7
  6471                           tblptrl	equ	0xFF6
  6472                           tablat	equ	0xFF5
  6473                           prodh	equ	0xFF4
  6474                           prodl	equ	0xFF3
  6475                           postinc0	equ	0xFEE
  6476                           wreg	equ	0xFE8
  6477                           postdec1	equ	0xFE5
  6478                           fsr1l	equ	0xFE1
  6479                           indf2	equ	0xFDF
  6480                           postinc2	equ	0xFDE
  6481                           postdec2	equ	0xFDD
  6482                           fsr2h	equ	0xFDA
  6483                           fsr2l	equ	0xFD9
  6484                           status	equ	0xFD8
  6485                           
  6486 ;; *************** function _drawCircle *****************
  6487 ;; Defined at:
  6488 ;;		line 528 in file "ST7735_TFT.c"
  6489 ;; Parameters:    Size  Location     Type
  6490 ;;  x0              2   25[COMRAM] int 
  6491 ;;  y0              2   27[COMRAM] int 
  6492 ;;  r               2   29[COMRAM] int 
  6493 ;;  color           2   31[COMRAM] unsigned int 
  6494 ;; Auto vars:     Size  Location     Type
  6495 ;;  y               2   43[COMRAM] int 
  6496 ;;  x               2   41[COMRAM] int 
  6497 ;;  f               2   39[COMRAM] int 
  6498 ;;  ddF_y           2   37[COMRAM] int 
  6499 ;;  ddF_x           2   35[COMRAM] int 
  6500 ;; Return value:  Size  Location     Type
  6501 ;;		None               void
  6502 ;; Registers used:
  6503 ;;		wreg, status,2, status,0, cstack
  6504 ;; Tracked objects:
  6505 ;;		On entry : 0/0
  6506 ;;		On exit  : 0/0
  6507 ;;		Unchanged: 0/0
  6508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6509 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6510 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6511 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6512 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6513 ;;Total ram usage:       20 bytes
  6514 ;; Hardware stack levels used:    1
  6515 ;; Hardware stack levels required when called:    6
  6516 ;; This function calls:
  6517 ;;		_drawPixel
  6518 ;; This function is called by:
  6519 ;;		_Initialize_Screen
  6520 ;; This function uses a non-reentrant model
  6521 ;;
  6522                           
  6523                           	psect	text25
  6524  0009A0                     __ptext25:
  6525                           	opt stack 0
  6526  0009A0                     _drawCircle:
  6527                           	opt stack 23
  6528                           
  6529                           ;ST7735_TFT.c: 530: signed int f, ddF_x, ddF_y, x, y;
  6530                           ;ST7735_TFT.c: 531: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6531                           
  6532                           ;incstack = 0
  6533  0009A0  C01E  F022         	movff	drawCircle@r,??_drawCircle
  6534  0009A4  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  6535  0009A8  1E22               	comf	??_drawCircle,f,c
  6536  0009AA  1E23               	comf	??_drawCircle+1,f,c
  6537  0009AC  4A22               	infsnz	??_drawCircle,f,c
  6538  0009AE  2A23               	incf	??_drawCircle+1,f,c
  6539  0009B0  0E01               	movlw	1
  6540  0009B2  2422               	addwf	??_drawCircle,w,c
  6541  0009B4  6E28               	movwf	drawCircle@f,c
  6542  0009B6  0E00               	movlw	0
  6543  0009B8  2023               	addwfc	??_drawCircle+1,w,c
  6544  0009BA  6E29               	movwf	drawCircle@f+1,c
  6545  0009BC  0E00               	movlw	0
  6546  0009BE  6E25               	movwf	drawCircle@ddF_x+1,c
  6547  0009C0  0E01               	movlw	1
  6548  0009C2  6E24               	movwf	drawCircle@ddF_x,c
  6549  0009C4  C01E  F022         	movff	drawCircle@r,??_drawCircle
  6550  0009C8  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  6551  0009CC  90D8               	bcf	status,0,c
  6552  0009CE  3622               	rlcf	??_drawCircle,f,c
  6553  0009D0  3623               	rlcf	??_drawCircle+1,f,c
  6554  0009D2  1E22               	comf	??_drawCircle,f,c
  6555  0009D4  1E23               	comf	??_drawCircle+1,f,c
  6556  0009D6  4A22               	infsnz	??_drawCircle,f,c
  6557  0009D8  2A23               	incf	??_drawCircle+1,f,c
  6558  0009DA  C022  F026         	movff	??_drawCircle,drawCircle@ddF_y
  6559  0009DE  C023  F027         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  6560  0009E2  0E00               	movlw	0
  6561  0009E4  6E2B               	movwf	drawCircle@x+1,c
  6562  0009E6  0E00               	movlw	0
  6563  0009E8  6E2A               	movwf	drawCircle@x,c
  6564  0009EA  C01E  F02C         	movff	drawCircle@r,drawCircle@y
  6565  0009EE  C01F  F02D         	movff	drawCircle@r+1,drawCircle@y+1
  6566                           
  6567                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 + r, color);
  6568  0009F2  501C               	movf	drawCircle@y0,w,c
  6569  0009F4  241E               	addwf	drawCircle@r,w,c
  6570  0009F6  6E16               	movwf	drawPixel@y,c
  6571  0009F8  C020  F017         	movff	drawCircle@color,drawPixel@color
  6572  0009FC  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6573  000A00  501A               	movf	drawCircle@x0,w,c
  6574  000A02  EC78  F00F         	call	_drawPixel
  6575                           
  6576                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 - r, color);
  6577  000A06  501E               	movf	drawCircle@r,w,c
  6578  000A08  0800               	sublw	0
  6579  000A0A  241C               	addwf	drawCircle@y0,w,c
  6580  000A0C  6E16               	movwf	drawPixel@y,c
  6581  000A0E  C020  F017         	movff	drawCircle@color,drawPixel@color
  6582  000A12  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6583  000A16  501A               	movf	drawCircle@x0,w,c
  6584  000A18  EC78  F00F         	call	_drawPixel
  6585                           
  6586                           ;ST7735_TFT.c: 534: drawPixel(x0+r, y0 , color);
  6587  000A1C  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  6588  000A20  C020  F017         	movff	drawCircle@color,drawPixel@color
  6589  000A24  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6590  000A28  501A               	movf	drawCircle@x0,w,c
  6591  000A2A  241E               	addwf	drawCircle@r,w,c
  6592  000A2C  EC78  F00F         	call	_drawPixel
  6593                           
  6594                           ;ST7735_TFT.c: 535: drawPixel(x0-r, y0 , color);
  6595  000A30  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  6596  000A34  C020  F017         	movff	drawCircle@color,drawPixel@color
  6597  000A38  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6598  000A3C  501E               	movf	drawCircle@r,w,c
  6599  000A3E  0800               	sublw	0
  6600  000A40  241A               	addwf	drawCircle@x0,w,c
  6601  000A42  EC78  F00F         	call	_drawPixel
  6602                           
  6603                           ;ST7735_TFT.c: 536: while (x < y) {
  6604  000A46  D078               	goto	l5602
  6605  000A48                     l5574:
  6606                           
  6607                           ;ST7735_TFT.c: 537: if (f >= 0) {
  6608  000A48  BE29               	btfsc	drawCircle@f+1,7,c
  6609  000A4A  D00B               	goto	l159
  6610                           
  6611                           ;ST7735_TFT.c: 538: y--;
  6612  000A4C  062C               	decf	drawCircle@y,f,c
  6613  000A4E  A0D8               	btfss	status,0,c
  6614  000A50  062D               	decf	drawCircle@y+1,f,c
  6615                           
  6616                           ;ST7735_TFT.c: 539: ddF_y += 2;
  6617  000A52  0E02               	movlw	2
  6618  000A54  2626               	addwf	drawCircle@ddF_y,f,c
  6619  000A56  0E00               	movlw	0
  6620  000A58  2227               	addwfc	drawCircle@ddF_y+1,f,c
  6621                           
  6622                           ;ST7735_TFT.c: 540: f += ddF_y;
  6623  000A5A  5026               	movf	drawCircle@ddF_y,w,c
  6624  000A5C  2628               	addwf	drawCircle@f,f,c
  6625  000A5E  5027               	movf	drawCircle@ddF_y+1,w,c
  6626  000A60  2229               	addwfc	drawCircle@f+1,f,c
  6627  000A62                     l159:
  6628                           
  6629                           ;ST7735_TFT.c: 541: }
  6630                           ;ST7735_TFT.c: 542: x++;
  6631  000A62  4A2A               	infsnz	drawCircle@x,f,c
  6632  000A64  2A2B               	incf	drawCircle@x+1,f,c
  6633                           
  6634                           ;ST7735_TFT.c: 543: ddF_x += 2;
  6635  000A66  0E02               	movlw	2
  6636  000A68  2624               	addwf	drawCircle@ddF_x,f,c
  6637  000A6A  0E00               	movlw	0
  6638  000A6C  2225               	addwfc	drawCircle@ddF_x+1,f,c
  6639                           
  6640                           ;ST7735_TFT.c: 544: f += ddF_x;
  6641  000A6E  5024               	movf	drawCircle@ddF_x,w,c
  6642  000A70  2628               	addwf	drawCircle@f,f,c
  6643  000A72  5025               	movf	drawCircle@ddF_x+1,w,c
  6644  000A74  2229               	addwfc	drawCircle@f+1,f,c
  6645                           
  6646                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 + y, color);
  6647  000A76  501C               	movf	drawCircle@y0,w,c
  6648  000A78  242C               	addwf	drawCircle@y,w,c
  6649  000A7A  6E16               	movwf	drawPixel@y,c
  6650  000A7C  C020  F017         	movff	drawCircle@color,drawPixel@color
  6651  000A80  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6652  000A84  501A               	movf	drawCircle@x0,w,c
  6653  000A86  242A               	addwf	drawCircle@x,w,c
  6654  000A88  EC78  F00F         	call	_drawPixel
  6655                           
  6656                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 + y, color);
  6657  000A8C  501C               	movf	drawCircle@y0,w,c
  6658  000A8E  242C               	addwf	drawCircle@y,w,c
  6659  000A90  6E16               	movwf	drawPixel@y,c
  6660  000A92  C020  F017         	movff	drawCircle@color,drawPixel@color
  6661  000A96  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6662  000A9A  502A               	movf	drawCircle@x,w,c
  6663  000A9C  0800               	sublw	0
  6664  000A9E  241A               	addwf	drawCircle@x0,w,c
  6665  000AA0  EC78  F00F         	call	_drawPixel
  6666                           
  6667                           ;ST7735_TFT.c: 547: drawPixel(x0 + x, y0 - y, color);
  6668  000AA4  502C               	movf	drawCircle@y,w,c
  6669  000AA6  0800               	sublw	0
  6670  000AA8  241C               	addwf	drawCircle@y0,w,c
  6671  000AAA  6E16               	movwf	drawPixel@y,c
  6672  000AAC  C020  F017         	movff	drawCircle@color,drawPixel@color
  6673  000AB0  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6674  000AB4  501A               	movf	drawCircle@x0,w,c
  6675  000AB6  242A               	addwf	drawCircle@x,w,c
  6676  000AB8  EC78  F00F         	call	_drawPixel
  6677                           
  6678                           ;ST7735_TFT.c: 548: drawPixel(x0 - x, y0 - y, color);
  6679  000ABC  502C               	movf	drawCircle@y,w,c
  6680  000ABE  0800               	sublw	0
  6681  000AC0  241C               	addwf	drawCircle@y0,w,c
  6682  000AC2  6E16               	movwf	drawPixel@y,c
  6683  000AC4  C020  F017         	movff	drawCircle@color,drawPixel@color
  6684  000AC8  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6685  000ACC  502A               	movf	drawCircle@x,w,c
  6686  000ACE  0800               	sublw	0
  6687  000AD0  241A               	addwf	drawCircle@x0,w,c
  6688  000AD2  EC78  F00F         	call	_drawPixel
  6689                           
  6690                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 + x, color);
  6691  000AD6  501C               	movf	drawCircle@y0,w,c
  6692  000AD8  242A               	addwf	drawCircle@x,w,c
  6693  000ADA  6E16               	movwf	drawPixel@y,c
  6694  000ADC  C020  F017         	movff	drawCircle@color,drawPixel@color
  6695  000AE0  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6696  000AE4  501A               	movf	drawCircle@x0,w,c
  6697  000AE6  242C               	addwf	drawCircle@y,w,c
  6698  000AE8  EC78  F00F         	call	_drawPixel
  6699                           
  6700                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 + x, color);
  6701  000AEC  501C               	movf	drawCircle@y0,w,c
  6702  000AEE  242A               	addwf	drawCircle@x,w,c
  6703  000AF0  6E16               	movwf	drawPixel@y,c
  6704  000AF2  C020  F017         	movff	drawCircle@color,drawPixel@color
  6705  000AF6  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6706  000AFA  502C               	movf	drawCircle@y,w,c
  6707  000AFC  0800               	sublw	0
  6708  000AFE  241A               	addwf	drawCircle@x0,w,c
  6709  000B00  EC78  F00F         	call	_drawPixel
  6710                           
  6711                           ;ST7735_TFT.c: 551: drawPixel(x0 + y, y0 - x, color);
  6712  000B04  502A               	movf	drawCircle@x,w,c
  6713  000B06  0800               	sublw	0
  6714  000B08  241C               	addwf	drawCircle@y0,w,c
  6715  000B0A  6E16               	movwf	drawPixel@y,c
  6716  000B0C  C020  F017         	movff	drawCircle@color,drawPixel@color
  6717  000B10  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6718  000B14  501A               	movf	drawCircle@x0,w,c
  6719  000B16  242C               	addwf	drawCircle@y,w,c
  6720  000B18  EC78  F00F         	call	_drawPixel
  6721                           
  6722                           ;ST7735_TFT.c: 552: drawPixel(x0 - y, y0 - x, color);
  6723  000B1C  502A               	movf	drawCircle@x,w,c
  6724  000B1E  0800               	sublw	0
  6725  000B20  241C               	addwf	drawCircle@y0,w,c
  6726  000B22  6E16               	movwf	drawPixel@y,c
  6727  000B24  C020  F017         	movff	drawCircle@color,drawPixel@color
  6728  000B28  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6729  000B2C  502C               	movf	drawCircle@y,w,c
  6730  000B2E  0800               	sublw	0
  6731  000B30  241A               	addwf	drawCircle@x0,w,c
  6732  000B32  EC78  F00F         	call	_drawPixel
  6733  000B36  D000               	goto	l5602
  6734  000B38                     l5602:
  6735  000B38  502C               	movf	drawCircle@y,w,c
  6736  000B3A  5C2A               	subwf	drawCircle@x,w,c
  6737  000B3C  502B               	movf	drawCircle@x+1,w,c
  6738  000B3E  0A80               	xorlw	128
  6739  000B40  6E22               	movwf	??_drawCircle& (0+255),c
  6740  000B42  502D               	movf	drawCircle@y+1,w,c
  6741  000B44  0A80               	xorlw	128
  6742  000B46  5822               	subwfb	??_drawCircle& (0+255),w,c
  6743  000B48  A0D8               	btfss	status,0,c
  6744  000B4A  D77E               	goto	l5574
  6745  000B4C  0012               	return		;funcret
  6746  000B4E                     __end_of_drawCircle:
  6747                           	opt stack 0
  6748                           tblptru	equ	0xFF8
  6749                           tblptrh	equ	0xFF7
  6750                           tblptrl	equ	0xFF6
  6751                           tablat	equ	0xFF5
  6752                           prodh	equ	0xFF4
  6753                           prodl	equ	0xFF3
  6754                           postinc0	equ	0xFEE
  6755                           wreg	equ	0xFE8
  6756                           postdec1	equ	0xFE5
  6757                           fsr1l	equ	0xFE1
  6758                           indf2	equ	0xFDF
  6759                           postinc2	equ	0xFDE
  6760                           postdec2	equ	0xFDD
  6761                           fsr2h	equ	0xFDA
  6762                           fsr2l	equ	0xFD9
  6763                           status	equ	0xFD8
  6764                           
  6765 ;; *************** function _drawPixel *****************
  6766 ;; Defined at:
  6767 ;;		line 407 in file "ST7735_TFT.c"
  6768 ;; Parameters:    Size  Location     Type
  6769 ;;  x               1    wreg     unsigned char 
  6770 ;;  y               1   21[COMRAM] unsigned char 
  6771 ;;  color           2   22[COMRAM] unsigned int 
  6772 ;; Auto vars:     Size  Location     Type
  6773 ;;  x               1   24[COMRAM] unsigned char 
  6774 ;; Return value:  Size  Location     Type
  6775 ;;		None               void
  6776 ;; Registers used:
  6777 ;;		wreg, status,2, status,0, cstack
  6778 ;; Tracked objects:
  6779 ;;		On entry : 0/0
  6780 ;;		On exit  : 0/0
  6781 ;;		Unchanged: 0/0
  6782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6783 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6784 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6786 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6787 ;;Total ram usage:        4 bytes
  6788 ;; Hardware stack levels used:    1
  6789 ;; Hardware stack levels required when called:    5
  6790 ;; This function calls:
  6791 ;;		_setAddrWindow
  6792 ;;		_write_data
  6793 ;; This function is called by:
  6794 ;;		_drawChar
  6795 ;;		_drawCircle
  6796 ;;		_drawCircleHelper
  6797 ;; This function uses a non-reentrant model
  6798 ;;
  6799                           
  6800                           	psect	text26
  6801  001EF0                     __ptext26:
  6802                           	opt stack 0
  6803  001EF0                     _drawPixel:
  6804                           	opt stack 22
  6805                           
  6806                           ;incstack = 0
  6807                           ;drawPixel@x stored from wreg
  6808  001EF0  6E19               	movwf	drawPixel@x,c
  6809                           
  6810                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
  6811  001EF2  0E80               	movlw	128
  6812  001EF4  6019               	cpfslt	drawPixel@x,c
  6813  001EF6  D013               	goto	l89
  6814  001EF8  0E9F               	movlw	159
  6815  001EFA  6416               	cpfsgt	drawPixel@y,c
  6816  001EFC  D001               	goto	l5146
  6817                           
  6818                           ;ST7735_TFT.c: 410: return;
  6819  001EFE  D00F               	goto	l89
  6820  001F00                     l5146:
  6821                           
  6822                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
  6823  001F00  C016  F012         	movff	drawPixel@y,setAddrWindow@y0
  6824  001F04  2819               	incf	drawPixel@x,w,c
  6825  001F06  6E13               	movwf	setAddrWindow@x1,c
  6826  001F08  2816               	incf	drawPixel@y,w,c
  6827  001F0A  6E14               	movwf	setAddrWindow@y1,c
  6828  001F0C  5019               	movf	drawPixel@x,w,c
  6829  001F0E  EC07  F00E         	call	_setAddrWindow
  6830                           
  6831                           ;ST7735_TFT.c: 412: write_data(color >> 8);
  6832  001F12  5018               	movf	drawPixel@color+1,w,c
  6833  001F14  ECDA  F010         	call	_write_data
  6834                           
  6835                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
  6836  001F18  5017               	movf	drawPixel@color,w,c
  6837  001F1A  ECDA  F010         	call	_write_data
  6838  001F1E                     l89:
  6839  001F1E  0012               	return		;funcret
  6840  001F20                     __end_of_drawPixel:
  6841                           	opt stack 0
  6842                           tblptru	equ	0xFF8
  6843                           tblptrh	equ	0xFF7
  6844                           tblptrl	equ	0xFF6
  6845                           tablat	equ	0xFF5
  6846                           prodh	equ	0xFF4
  6847                           prodl	equ	0xFF3
  6848                           postinc0	equ	0xFEE
  6849                           wreg	equ	0xFE8
  6850                           postdec1	equ	0xFE5
  6851                           fsr1l	equ	0xFE1
  6852                           indf2	equ	0xFDF
  6853                           postinc2	equ	0xFDE
  6854                           postdec2	equ	0xFDD
  6855                           fsr2h	equ	0xFDA
  6856                           fsr2l	equ	0xFD9
  6857                           status	equ	0xFD8
  6858                           
  6859 ;; *************** function _setAddrWindow *****************
  6860 ;; Defined at:
  6861 ;;		line 392 in file "ST7735_TFT.c"
  6862 ;; Parameters:    Size  Location     Type
  6863 ;;  x0              1    wreg     unsigned char 
  6864 ;;  y0              1   17[COMRAM] unsigned char 
  6865 ;;  x1              1   18[COMRAM] unsigned char 
  6866 ;;  y1              1   19[COMRAM] unsigned char 
  6867 ;; Auto vars:     Size  Location     Type
  6868 ;;  x0              1   20[COMRAM] unsigned char 
  6869 ;; Return value:  Size  Location     Type
  6870 ;;		None               void
  6871 ;; Registers used:
  6872 ;;		wreg, status,2, status,0, cstack
  6873 ;; Tracked objects:
  6874 ;;		On entry : 0/0
  6875 ;;		On exit  : 0/0
  6876 ;;		Unchanged: 0/0
  6877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6878 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6879 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6881 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6882 ;;Total ram usage:        4 bytes
  6883 ;; Hardware stack levels used:    1
  6884 ;; Hardware stack levels required when called:    4
  6885 ;; This function calls:
  6886 ;;		_write_command
  6887 ;;		_write_data
  6888 ;; This function is called by:
  6889 ;;		_drawPixel
  6890 ;;		_drawFastVLine
  6891 ;;		_fillRectangle
  6892 ;;		_drawFastHLine
  6893 ;; This function uses a non-reentrant model
  6894 ;;
  6895                           
  6896                           	psect	text27
  6897  001C0E                     __ptext27:
  6898                           	opt stack 0
  6899  001C0E                     _setAddrWindow:
  6900                           	opt stack 21
  6901                           
  6902                           ;incstack = 0
  6903                           ;setAddrWindow@x0 stored from wreg
  6904  001C0E  6E15               	movwf	setAddrWindow@x0,c
  6905                           
  6906                           ;ST7735_TFT.c: 394: write_command(0x2A);
  6907  001C10  0E2A               	movlw	42
  6908  001C12  ECE2  F010         	call	_write_command
  6909                           
  6910                           ;ST7735_TFT.c: 395: write_data(0);
  6911  001C16  0E00               	movlw	0
  6912  001C18  ECDA  F010         	call	_write_data
  6913                           
  6914                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
  6915  001C1C  5015               	movf	setAddrWindow@x0,w,c
  6916  001C1E  245B               	addwf	_colstart,w,c
  6917  001C20  ECDA  F010         	call	_write_data
  6918                           
  6919                           ;ST7735_TFT.c: 397: write_data(0);
  6920  001C24  0E00               	movlw	0
  6921  001C26  ECDA  F010         	call	_write_data
  6922                           
  6923                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
  6924  001C2A  5013               	movf	setAddrWindow@x1,w,c
  6925  001C2C  245B               	addwf	_colstart,w,c
  6926  001C2E  ECDA  F010         	call	_write_data
  6927                           
  6928                           ;ST7735_TFT.c: 399: write_command(0x2B);
  6929  001C32  0E2B               	movlw	43
  6930  001C34  ECE2  F010         	call	_write_command
  6931                           
  6932                           ;ST7735_TFT.c: 400: write_data(0);
  6933  001C38  0E00               	movlw	0
  6934  001C3A  ECDA  F010         	call	_write_data
  6935                           
  6936                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
  6937  001C3E  5012               	movf	setAddrWindow@y0,w,c
  6938  001C40  2463               	addwf	_rowstart,w,c
  6939  001C42  ECDA  F010         	call	_write_data
  6940                           
  6941                           ;ST7735_TFT.c: 402: write_data(0);
  6942  001C46  0E00               	movlw	0
  6943  001C48  ECDA  F010         	call	_write_data
  6944                           
  6945                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
  6946  001C4C  5014               	movf	setAddrWindow@y1,w,c
  6947  001C4E  2463               	addwf	_rowstart,w,c
  6948  001C50  ECDA  F010         	call	_write_data
  6949                           
  6950                           ;ST7735_TFT.c: 404: write_command(0x2C);
  6951  001C54  0E2C               	movlw	44
  6952  001C56  ECE2  F010         	call	_write_command
  6953  001C5A  0012               	return		;funcret
  6954  001C5C                     __end_of_setAddrWindow:
  6955                           	opt stack 0
  6956                           tblptru	equ	0xFF8
  6957                           tblptrh	equ	0xFF7
  6958                           tblptrl	equ	0xFF6
  6959                           tablat	equ	0xFF5
  6960                           prodh	equ	0xFF4
  6961                           prodl	equ	0xFF3
  6962                           postinc0	equ	0xFEE
  6963                           wreg	equ	0xFE8
  6964                           postdec1	equ	0xFE5
  6965                           fsr1l	equ	0xFE1
  6966                           indf2	equ	0xFDF
  6967                           postinc2	equ	0xFDE
  6968                           postdec2	equ	0xFDD
  6969                           fsr2h	equ	0xFDA
  6970                           fsr2l	equ	0xFD9
  6971                           status	equ	0xFD8
  6972                           
  6973 ;; *************** function _TFT_GreenTab_Initialize *****************
  6974 ;; Defined at:
  6975 ;;		line 644 in file "ST7735_TFT.c"
  6976 ;; Parameters:    Size  Location     Type
  6977 ;;		None
  6978 ;; Auto vars:     Size  Location     Type
  6979 ;;		None
  6980 ;; Return value:  Size  Location     Type
  6981 ;;		None               void
  6982 ;; Registers used:
  6983 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6984 ;; Tracked objects:
  6985 ;;		On entry : 0/0
  6986 ;;		On exit  : 0/0
  6987 ;;		Unchanged: 0/0
  6988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6993 ;;Total ram usage:        0 bytes
  6994 ;; Hardware stack levels used:    1
  6995 ;; Hardware stack levels required when called:    5
  6996 ;; This function calls:
  6997 ;;		_Rcmd1
  6998 ;;		_Rcmd2red
  6999 ;;		_Rcmd3
  7000 ;;		_write_command
  7001 ;;		_write_data
  7002 ;; This function is called by:
  7003 ;;		_Initialize_Screen
  7004 ;; This function uses a non-reentrant model
  7005 ;;
  7006                           
  7007                           	psect	text28
  7008  001F20                     __ptext28:
  7009                           	opt stack 0
  7010  001F20                     _TFT_GreenTab_Initialize:
  7011                           	opt stack 24
  7012                           
  7013                           ;ST7735_TFT.c: 646: PORTDbits.RD1 = 1;
  7014                           
  7015                           ;incstack = 0
  7016  001F20  8283               	bsf	3971,1,c	;volatile
  7017                           
  7018                           ;ST7735_TFT.c: 647: PORTDbits.RD0 = 0;
  7019  001F22  9083               	bcf	3971,0,c	;volatile
  7020                           
  7021                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
  7022  001F24  0E80               	movlw	128
  7023  001F26  6EC7               	movwf	4039,c	;volatile
  7024                           
  7025                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
  7026  001F28  0E30               	movlw	48
  7027  001F2A  6EC6               	movwf	4038,c	;volatile
  7028                           
  7029                           ;ST7735_TFT.c: 653: Rcmd1();
  7030  001F2C  EC90  F007         	call	_Rcmd1	;wreg free
  7031                           
  7032                           ;ST7735_TFT.c: 654: Rcmd2red();
  7033  001F30  EC03  F00F         	call	_Rcmd2red	;wreg free
  7034                           
  7035                           ;ST7735_TFT.c: 655: Rcmd3();
  7036  001F34  EC94  F008         	call	_Rcmd3	;wreg free
  7037                           
  7038                           ;ST7735_TFT.c: 656: write_command(0x36);
  7039  001F38  0E36               	movlw	54
  7040  001F3A  ECE2  F010         	call	_write_command
  7041                           
  7042                           ;ST7735_TFT.c: 657: write_data(0xC0);
  7043  001F3E  0EC0               	movlw	192
  7044  001F40  ECDA  F010         	call	_write_data
  7045                           
  7046                           ;ST7735_TFT.c: 658: _tft_type = 1;
  7047  001F44  0E01               	movlw	1
  7048  001F46  6E56               	movwf	__tft_type,c
  7049  001F48  0012               	return		;funcret
  7050  001F4A                     __end_of_TFT_GreenTab_Initialize:
  7051                           	opt stack 0
  7052                           tblptru	equ	0xFF8
  7053                           tblptrh	equ	0xFF7
  7054                           tblptrl	equ	0xFF6
  7055                           tablat	equ	0xFF5
  7056                           prodh	equ	0xFF4
  7057                           prodl	equ	0xFF3
  7058                           postinc0	equ	0xFEE
  7059                           wreg	equ	0xFE8
  7060                           postdec1	equ	0xFE5
  7061                           fsr1l	equ	0xFE1
  7062                           indf2	equ	0xFDF
  7063                           postinc2	equ	0xFDE
  7064                           postdec2	equ	0xFDD
  7065                           fsr2h	equ	0xFDA
  7066                           fsr2l	equ	0xFD9
  7067                           status	equ	0xFD8
  7068                           
  7069 ;; *************** function _Rcmd3 *****************
  7070 ;; Defined at:
  7071 ;;		line 338 in file "ST7735_TFT.c"
  7072 ;; Parameters:    Size  Location     Type
  7073 ;;		None
  7074 ;; Auto vars:     Size  Location     Type
  7075 ;;		None
  7076 ;; Return value:  Size  Location     Type
  7077 ;;		None               void
  7078 ;; Registers used:
  7079 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7080 ;; Tracked objects:
  7081 ;;		On entry : 0/0
  7082 ;;		On exit  : 0/0
  7083 ;;		Unchanged: 0/0
  7084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7089 ;;Total ram usage:        0 bytes
  7090 ;; Hardware stack levels used:    1
  7091 ;; Hardware stack levels required when called:    4
  7092 ;; This function calls:
  7093 ;;		_delay_ms
  7094 ;;		_write_command
  7095 ;;		_write_data
  7096 ;; This function is called by:
  7097 ;;		_TFT_GreenTab_Initialize
  7098 ;;		_TFT_BlackTab_Initialize
  7099 ;; This function uses a non-reentrant model
  7100 ;;
  7101                           
  7102                           	psect	text29
  7103  001128                     __ptext29:
  7104                           	opt stack 0
  7105  001128                     _Rcmd3:
  7106                           	opt stack 24
  7107                           
  7108                           ;ST7735_TFT.c: 340: write_command(0xE0);
  7109                           
  7110                           ;incstack = 0
  7111  001128  0EE0               	movlw	224
  7112  00112A  ECE2  F010         	call	_write_command
  7113                           
  7114                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  7115  00112E  0E02               	movlw	2
  7116  001130  ECDA  F010         	call	_write_data
  7117  001134  0E1C               	movlw	28
  7118  001136  ECDA  F010         	call	_write_data
  7119  00113A  0E07               	movlw	7
  7120  00113C  ECDA  F010         	call	_write_data
  7121  001140  0E12               	movlw	18
  7122  001142  ECDA  F010         	call	_write_data
  7123                           
  7124                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  7125  001146  0E37               	movlw	55
  7126  001148  ECDA  F010         	call	_write_data
  7127  00114C  0E32               	movlw	50
  7128  00114E  ECDA  F010         	call	_write_data
  7129  001152  0E29               	movlw	41
  7130  001154  ECDA  F010         	call	_write_data
  7131  001158  0E2D               	movlw	45
  7132  00115A  ECDA  F010         	call	_write_data
  7133                           
  7134                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  7135  00115E  0E29               	movlw	41
  7136  001160  ECDA  F010         	call	_write_data
  7137  001164  0E25               	movlw	37
  7138  001166  ECDA  F010         	call	_write_data
  7139  00116A  0E2B               	movlw	43
  7140  00116C  ECDA  F010         	call	_write_data
  7141  001170  0E39               	movlw	57
  7142  001172  ECDA  F010         	call	_write_data
  7143                           
  7144                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  7145  001176  0E00               	movlw	0
  7146  001178  ECDA  F010         	call	_write_data
  7147  00117C  0E01               	movlw	1
  7148  00117E  ECDA  F010         	call	_write_data
  7149  001182  0E03               	movlw	3
  7150  001184  ECDA  F010         	call	_write_data
  7151  001188  0E10               	movlw	16
  7152  00118A  ECDA  F010         	call	_write_data
  7153                           
  7154                           ;ST7735_TFT.c: 345: write_command(0xE1);
  7155  00118E  0EE1               	movlw	225
  7156  001190  ECE2  F010         	call	_write_command
  7157                           
  7158                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  7159  001194  0E03               	movlw	3
  7160  001196  ECDA  F010         	call	_write_data
  7161  00119A  0E1D               	movlw	29
  7162  00119C  ECDA  F010         	call	_write_data
  7163  0011A0  0E07               	movlw	7
  7164  0011A2  ECDA  F010         	call	_write_data
  7165  0011A6  0E06               	movlw	6
  7166  0011A8  ECDA  F010         	call	_write_data
  7167                           
  7168                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  7169  0011AC  0E2E               	movlw	46
  7170  0011AE  ECDA  F010         	call	_write_data
  7171  0011B2  0E2C               	movlw	44
  7172  0011B4  ECDA  F010         	call	_write_data
  7173  0011B8  0E29               	movlw	41
  7174  0011BA  ECDA  F010         	call	_write_data
  7175  0011BE  0E2D               	movlw	45
  7176  0011C0  ECDA  F010         	call	_write_data
  7177                           
  7178                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  7179  0011C4  0E2E               	movlw	46
  7180  0011C6  ECDA  F010         	call	_write_data
  7181  0011CA  0E2E               	movlw	46
  7182  0011CC  ECDA  F010         	call	_write_data
  7183  0011D0  0E37               	movlw	55
  7184  0011D2  ECDA  F010         	call	_write_data
  7185  0011D6  0E3F               	movlw	63
  7186  0011D8  ECDA  F010         	call	_write_data
  7187                           
  7188                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  7189  0011DC  0E00               	movlw	0
  7190  0011DE  ECDA  F010         	call	_write_data
  7191  0011E2  0E00               	movlw	0
  7192  0011E4  ECDA  F010         	call	_write_data
  7193  0011E8  0E02               	movlw	2
  7194  0011EA  ECDA  F010         	call	_write_data
  7195  0011EE  0E10               	movlw	16
  7196  0011F0  ECDA  F010         	call	_write_data
  7197                           
  7198                           ;ST7735_TFT.c: 350: write_command(0x13);
  7199  0011F4  0E13               	movlw	19
  7200  0011F6  ECE2  F010         	call	_write_command
  7201                           
  7202                           ;ST7735_TFT.c: 351: delay_ms(10);
  7203  0011FA  0E00               	movlw	0
  7204  0011FC  6E16               	movwf	delay_ms@ms+1,c
  7205  0011FE  0E0A               	movlw	10
  7206  001200  6E15               	movwf	delay_ms@ms,c
  7207  001202  ECB6  F00D         	call	_delay_ms	;wreg free
  7208                           
  7209                           ;ST7735_TFT.c: 352: write_command(0x29);
  7210  001206  0E29               	movlw	41
  7211  001208  ECE2  F010         	call	_write_command
  7212                           
  7213                           ;ST7735_TFT.c: 353: delay_ms(100);
  7214  00120C  0E00               	movlw	0
  7215  00120E  6E16               	movwf	delay_ms@ms+1,c
  7216  001210  0E64               	movlw	100
  7217  001212  6E15               	movwf	delay_ms@ms,c
  7218  001214  ECB6  F00D         	call	_delay_ms	;wreg free
  7219  001218  0012               	return		;funcret
  7220  00121A                     __end_of_Rcmd3:
  7221                           	opt stack 0
  7222                           tblptru	equ	0xFF8
  7223                           tblptrh	equ	0xFF7
  7224                           tblptrl	equ	0xFF6
  7225                           tablat	equ	0xFF5
  7226                           prodh	equ	0xFF4
  7227                           prodl	equ	0xFF3
  7228                           postinc0	equ	0xFEE
  7229                           wreg	equ	0xFE8
  7230                           postdec1	equ	0xFE5
  7231                           fsr1l	equ	0xFE1
  7232                           indf2	equ	0xFDF
  7233                           postinc2	equ	0xFDE
  7234                           postdec2	equ	0xFDD
  7235                           fsr2h	equ	0xFDA
  7236                           fsr2l	equ	0xFD9
  7237                           status	equ	0xFD8
  7238                           
  7239 ;; *************** function _Rcmd2red *****************
  7240 ;; Defined at:
  7241 ;;		line 328 in file "ST7735_TFT.c"
  7242 ;; Parameters:    Size  Location     Type
  7243 ;;		None
  7244 ;; Auto vars:     Size  Location     Type
  7245 ;;		None
  7246 ;; Return value:  Size  Location     Type
  7247 ;;		None               void
  7248 ;; Registers used:
  7249 ;;		wreg, status,2, cstack
  7250 ;; Tracked objects:
  7251 ;;		On entry : 0/0
  7252 ;;		On exit  : 0/0
  7253 ;;		Unchanged: 0/0
  7254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7259 ;;Total ram usage:        0 bytes
  7260 ;; Hardware stack levels used:    1
  7261 ;; Hardware stack levels required when called:    4
  7262 ;; This function calls:
  7263 ;;		_write_command
  7264 ;;		_write_data
  7265 ;; This function is called by:
  7266 ;;		_TFT_GreenTab_Initialize
  7267 ;; This function uses a non-reentrant model
  7268 ;;
  7269                           
  7270                           	psect	text30
  7271  001E06                     __ptext30:
  7272                           	opt stack 0
  7273  001E06                     _Rcmd2red:
  7274                           	opt stack 24
  7275                           
  7276                           ;ST7735_TFT.c: 330: write_command(0x2A);
  7277                           
  7278                           ;incstack = 0
  7279  001E06  0E2A               	movlw	42
  7280  001E08  ECE2  F010         	call	_write_command
  7281                           
  7282                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
  7283  001E0C  0E00               	movlw	0
  7284  001E0E  ECDA  F010         	call	_write_data
  7285  001E12  0E00               	movlw	0
  7286  001E14  ECDA  F010         	call	_write_data
  7287                           
  7288                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
  7289  001E18  0E00               	movlw	0
  7290  001E1A  ECDA  F010         	call	_write_data
  7291  001E1E  0E7F               	movlw	127
  7292  001E20  ECDA  F010         	call	_write_data
  7293                           
  7294                           ;ST7735_TFT.c: 333: write_command(0x2B);
  7295  001E24  0E2B               	movlw	43
  7296  001E26  ECE2  F010         	call	_write_command
  7297                           
  7298                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
  7299  001E2A  0E00               	movlw	0
  7300  001E2C  ECDA  F010         	call	_write_data
  7301  001E30  0E00               	movlw	0
  7302  001E32  ECDA  F010         	call	_write_data
  7303                           
  7304                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
  7305  001E36  0E00               	movlw	0
  7306  001E38  ECDA  F010         	call	_write_data
  7307  001E3C  0E9F               	movlw	159
  7308  001E3E  ECDA  F010         	call	_write_data
  7309  001E42  0012               	return		;funcret
  7310  001E44                     __end_of_Rcmd2red:
  7311                           	opt stack 0
  7312                           tblptru	equ	0xFF8
  7313                           tblptrh	equ	0xFF7
  7314                           tblptrl	equ	0xFF6
  7315                           tablat	equ	0xFF5
  7316                           prodh	equ	0xFF4
  7317                           prodl	equ	0xFF3
  7318                           postinc0	equ	0xFEE
  7319                           wreg	equ	0xFE8
  7320                           postdec1	equ	0xFE5
  7321                           fsr1l	equ	0xFE1
  7322                           indf2	equ	0xFDF
  7323                           postinc2	equ	0xFDE
  7324                           postdec2	equ	0xFDD
  7325                           fsr2h	equ	0xFDA
  7326                           fsr2l	equ	0xFD9
  7327                           status	equ	0xFD8
  7328                           
  7329 ;; *************** function _Rcmd1 *****************
  7330 ;; Defined at:
  7331 ;;		line 281 in file "ST7735_TFT.c"
  7332 ;; Parameters:    Size  Location     Type
  7333 ;;		None
  7334 ;; Auto vars:     Size  Location     Type
  7335 ;;		None
  7336 ;; Return value:  Size  Location     Type
  7337 ;;		None               void
  7338 ;; Registers used:
  7339 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7340 ;; Tracked objects:
  7341 ;;		On entry : 0/0
  7342 ;;		On exit  : 0/0
  7343 ;;		Unchanged: 0/0
  7344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7349 ;;Total ram usage:        0 bytes
  7350 ;; Hardware stack levels used:    1
  7351 ;; Hardware stack levels required when called:    4
  7352 ;; This function calls:
  7353 ;;		_delay_ms
  7354 ;;		_write_command
  7355 ;;		_write_data
  7356 ;; This function is called by:
  7357 ;;		_TFT_GreenTab_Initialize
  7358 ;;		_TFT_BlackTab_Initialize
  7359 ;; This function uses a non-reentrant model
  7360 ;;
  7361                           
  7362                           	psect	text31
  7363  000F20                     __ptext31:
  7364                           	opt stack 0
  7365  000F20                     _Rcmd1:
  7366                           	opt stack 24
  7367                           
  7368                           ;ST7735_TFT.c: 283: write_command(0x01);
  7369                           
  7370                           ;incstack = 0
  7371  000F20  0E01               	movlw	1
  7372  000F22  ECE2  F010         	call	_write_command
  7373                           
  7374                           ;ST7735_TFT.c: 284: delay_ms(150);
  7375  000F26  0E00               	movlw	0
  7376  000F28  6E16               	movwf	delay_ms@ms+1,c
  7377  000F2A  0E96               	movlw	150
  7378  000F2C  6E15               	movwf	delay_ms@ms,c
  7379  000F2E  ECB6  F00D         	call	_delay_ms	;wreg free
  7380                           
  7381                           ;ST7735_TFT.c: 285: write_command(0x11);
  7382  000F32  0E11               	movlw	17
  7383  000F34  ECE2  F010         	call	_write_command
  7384                           
  7385                           ;ST7735_TFT.c: 286: delay_ms(500);
  7386  000F38  0E01               	movlw	1
  7387  000F3A  6E16               	movwf	delay_ms@ms+1,c
  7388  000F3C  0EF4               	movlw	244
  7389  000F3E  6E15               	movwf	delay_ms@ms,c
  7390  000F40  ECB6  F00D         	call	_delay_ms	;wreg free
  7391                           
  7392                           ;ST7735_TFT.c: 287: write_command(0xB1);
  7393  000F44  0EB1               	movlw	177
  7394  000F46  ECE2  F010         	call	_write_command
  7395                           
  7396                           ;ST7735_TFT.c: 288: write_data(0x01);
  7397  000F4A  0E01               	movlw	1
  7398  000F4C  ECDA  F010         	call	_write_data
  7399                           
  7400                           ;ST7735_TFT.c: 289: write_data(0x2C);
  7401  000F50  0E2C               	movlw	44
  7402  000F52  ECDA  F010         	call	_write_data
  7403                           
  7404                           ;ST7735_TFT.c: 290: write_data(0x2D);
  7405  000F56  0E2D               	movlw	45
  7406  000F58  ECDA  F010         	call	_write_data
  7407                           
  7408                           ;ST7735_TFT.c: 291: write_command(0xB2);
  7409  000F5C  0EB2               	movlw	178
  7410  000F5E  ECE2  F010         	call	_write_command
  7411                           
  7412                           ;ST7735_TFT.c: 292: write_data(0x01);
  7413  000F62  0E01               	movlw	1
  7414  000F64  ECDA  F010         	call	_write_data
  7415                           
  7416                           ;ST7735_TFT.c: 293: write_data(0x2C);
  7417  000F68  0E2C               	movlw	44
  7418  000F6A  ECDA  F010         	call	_write_data
  7419                           
  7420                           ;ST7735_TFT.c: 294: write_data(0x2D);
  7421  000F6E  0E2D               	movlw	45
  7422  000F70  ECDA  F010         	call	_write_data
  7423                           
  7424                           ;ST7735_TFT.c: 295: write_command(0xB3);
  7425  000F74  0EB3               	movlw	179
  7426  000F76  ECE2  F010         	call	_write_command
  7427                           
  7428                           ;ST7735_TFT.c: 296: write_data(0x01);
  7429  000F7A  0E01               	movlw	1
  7430  000F7C  ECDA  F010         	call	_write_data
  7431                           
  7432                           ;ST7735_TFT.c: 297: write_data(0x2C);
  7433  000F80  0E2C               	movlw	44
  7434  000F82  ECDA  F010         	call	_write_data
  7435                           
  7436                           ;ST7735_TFT.c: 298: write_data(0x2D);
  7437  000F86  0E2D               	movlw	45
  7438  000F88  ECDA  F010         	call	_write_data
  7439                           
  7440                           ;ST7735_TFT.c: 299: write_data(0x01);
  7441  000F8C  0E01               	movlw	1
  7442  000F8E  ECDA  F010         	call	_write_data
  7443                           
  7444                           ;ST7735_TFT.c: 300: write_data(0x2C);
  7445  000F92  0E2C               	movlw	44
  7446  000F94  ECDA  F010         	call	_write_data
  7447                           
  7448                           ;ST7735_TFT.c: 301: write_data(0x2D);
  7449  000F98  0E2D               	movlw	45
  7450  000F9A  ECDA  F010         	call	_write_data
  7451                           
  7452                           ;ST7735_TFT.c: 302: write_command(0xB4);
  7453  000F9E  0EB4               	movlw	180
  7454  000FA0  ECE2  F010         	call	_write_command
  7455                           
  7456                           ;ST7735_TFT.c: 303: write_data(0x07);
  7457  000FA4  0E07               	movlw	7
  7458  000FA6  ECDA  F010         	call	_write_data
  7459                           
  7460                           ;ST7735_TFT.c: 304: write_command(0xC0);
  7461  000FAA  0EC0               	movlw	192
  7462  000FAC  ECE2  F010         	call	_write_command
  7463                           
  7464                           ;ST7735_TFT.c: 305: write_data(0xA2);
  7465  000FB0  0EA2               	movlw	162
  7466  000FB2  ECDA  F010         	call	_write_data
  7467                           
  7468                           ;ST7735_TFT.c: 306: write_data(0x02);
  7469  000FB6  0E02               	movlw	2
  7470  000FB8  ECDA  F010         	call	_write_data
  7471                           
  7472                           ;ST7735_TFT.c: 307: write_data(0x84);
  7473  000FBC  0E84               	movlw	132
  7474  000FBE  ECDA  F010         	call	_write_data
  7475                           
  7476                           ;ST7735_TFT.c: 308: write_command(0xC1);
  7477  000FC2  0EC1               	movlw	193
  7478  000FC4  ECE2  F010         	call	_write_command
  7479                           
  7480                           ;ST7735_TFT.c: 309: write_data(0xC5);
  7481  000FC8  0EC5               	movlw	197
  7482  000FCA  ECDA  F010         	call	_write_data
  7483                           
  7484                           ;ST7735_TFT.c: 310: write_command(0xC2);
  7485  000FCE  0EC2               	movlw	194
  7486  000FD0  ECE2  F010         	call	_write_command
  7487                           
  7488                           ;ST7735_TFT.c: 311: write_data(0x0A);
  7489  000FD4  0E0A               	movlw	10
  7490  000FD6  ECDA  F010         	call	_write_data
  7491                           
  7492                           ;ST7735_TFT.c: 312: write_data(0x00);
  7493  000FDA  0E00               	movlw	0
  7494  000FDC  ECDA  F010         	call	_write_data
  7495                           
  7496                           ;ST7735_TFT.c: 313: write_command(0xC3);
  7497  000FE0  0EC3               	movlw	195
  7498  000FE2  ECE2  F010         	call	_write_command
  7499                           
  7500                           ;ST7735_TFT.c: 314: write_data(0x8A);
  7501  000FE6  0E8A               	movlw	138
  7502  000FE8  ECDA  F010         	call	_write_data
  7503                           
  7504                           ;ST7735_TFT.c: 315: write_data(0x2A);
  7505  000FEC  0E2A               	movlw	42
  7506  000FEE  ECDA  F010         	call	_write_data
  7507                           
  7508                           ;ST7735_TFT.c: 316: write_command(0xC4);
  7509  000FF2  0EC4               	movlw	196
  7510  000FF4  ECE2  F010         	call	_write_command
  7511                           
  7512                           ;ST7735_TFT.c: 317: write_data(0x8A);
  7513  000FF8  0E8A               	movlw	138
  7514  000FFA  ECDA  F010         	call	_write_data
  7515                           
  7516                           ;ST7735_TFT.c: 318: write_data(0xEE);
  7517  000FFE  0EEE               	movlw	238
  7518  001000  ECDA  F010         	call	_write_data
  7519                           
  7520                           ;ST7735_TFT.c: 319: write_command(0xC5);
  7521  001004  0EC5               	movlw	197
  7522  001006  ECE2  F010         	call	_write_command
  7523                           
  7524                           ;ST7735_TFT.c: 320: write_data(0x0E);
  7525  00100A  0E0E               	movlw	14
  7526  00100C  ECDA  F010         	call	_write_data
  7527                           
  7528                           ;ST7735_TFT.c: 321: write_command(0x20);
  7529  001010  0E20               	movlw	32
  7530  001012  ECE2  F010         	call	_write_command
  7531                           
  7532                           ;ST7735_TFT.c: 322: write_command(0x36);
  7533  001016  0E36               	movlw	54
  7534  001018  ECE2  F010         	call	_write_command
  7535                           
  7536                           ;ST7735_TFT.c: 323: write_data(0xC8);
  7537  00101C  0EC8               	movlw	200
  7538  00101E  ECDA  F010         	call	_write_data
  7539                           
  7540                           ;ST7735_TFT.c: 324: write_command(0x3A);
  7541  001022  0E3A               	movlw	58
  7542  001024  ECE2  F010         	call	_write_command
  7543                           
  7544                           ;ST7735_TFT.c: 325: write_data(0x05);
  7545  001028  0E05               	movlw	5
  7546  00102A  ECDA  F010         	call	_write_data
  7547  00102E  0012               	return		;funcret
  7548  001030                     __end_of_Rcmd1:
  7549                           	opt stack 0
  7550                           tblptru	equ	0xFF8
  7551                           tblptrh	equ	0xFF7
  7552                           tblptrl	equ	0xFF6
  7553                           tablat	equ	0xFF5
  7554                           prodh	equ	0xFF4
  7555                           prodl	equ	0xFF3
  7556                           postinc0	equ	0xFEE
  7557                           wreg	equ	0xFE8
  7558                           postdec1	equ	0xFE5
  7559                           fsr1l	equ	0xFE1
  7560                           indf2	equ	0xFDF
  7561                           postinc2	equ	0xFDE
  7562                           postdec2	equ	0xFDD
  7563                           fsr2h	equ	0xFDA
  7564                           fsr2l	equ	0xFD9
  7565                           status	equ	0xFD8
  7566                           
  7567 ;; *************** function _write_data *****************
  7568 ;; Defined at:
  7569 ;;		line 209 in file "ST7735_TFT.c"
  7570 ;; Parameters:    Size  Location     Type
  7571 ;;  data_           1    wreg     unsigned char 
  7572 ;; Auto vars:     Size  Location     Type
  7573 ;;  data_           1   16[COMRAM] unsigned char 
  7574 ;; Return value:  Size  Location     Type
  7575 ;;		None               void
  7576 ;; Registers used:
  7577 ;;		wreg, status,2, cstack
  7578 ;; Tracked objects:
  7579 ;;		On entry : 0/0
  7580 ;;		On exit  : 0/0
  7581 ;;		Unchanged: 0/0
  7582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7584 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7586 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7587 ;;Total ram usage:        1 bytes
  7588 ;; Hardware stack levels used:    1
  7589 ;; Hardware stack levels required when called:    3
  7590 ;; This function calls:
  7591 ;;		_spiwrite
  7592 ;; This function is called by:
  7593 ;;		_Rcmd1
  7594 ;;		_Rcmd2red
  7595 ;;		_Rcmd3
  7596 ;;		_setAddrWindow
  7597 ;;		_drawPixel
  7598 ;;		_TFT_GreenTab_Initialize
  7599 ;;		_Bcmd
  7600 ;;		_setScrollDefinition
  7601 ;;		_Rcmd2green
  7602 ;;		_VerticalScroll
  7603 ;; This function uses a non-reentrant model
  7604 ;;
  7605                           
  7606                           	psect	text32
  7607  0021B4                     __ptext32:
  7608                           	opt stack 0
  7609  0021B4                     _write_data:
  7610                           	opt stack 21
  7611                           
  7612                           ;incstack = 0
  7613                           ;write_data@data_ stored from wreg
  7614  0021B4  6E11               	movwf	write_data@data_,c
  7615                           
  7616                           ;ST7735_TFT.c: 211: PORTDbits.RD1 = 0;
  7617  0021B6  9283               	bcf	3971,1,c	;volatile
  7618                           
  7619                           ;ST7735_TFT.c: 212: PORTDbits.RD0 = 1;
  7620  0021B8  8083               	bsf	3971,0,c	;volatile
  7621                           
  7622                           ;ST7735_TFT.c: 213: spiwrite(data_);
  7623  0021BA  5011               	movf	write_data@data_,w,c
  7624  0021BC  EC91  F010         	call	_spiwrite
  7625                           
  7626                           ;ST7735_TFT.c: 214: PORTDbits.RD1 = 1;
  7627  0021C0  8283               	bsf	3971,1,c	;volatile
  7628  0021C2  0012               	return		;funcret
  7629  0021C4                     __end_of_write_data:
  7630                           	opt stack 0
  7631                           tblptru	equ	0xFF8
  7632                           tblptrh	equ	0xFF7
  7633                           tblptrl	equ	0xFF6
  7634                           tablat	equ	0xFF5
  7635                           prodh	equ	0xFF4
  7636                           prodl	equ	0xFF3
  7637                           postinc0	equ	0xFEE
  7638                           wreg	equ	0xFE8
  7639                           postdec1	equ	0xFE5
  7640                           fsr1l	equ	0xFE1
  7641                           indf2	equ	0xFDF
  7642                           postinc2	equ	0xFDE
  7643                           postdec2	equ	0xFDD
  7644                           fsr2h	equ	0xFDA
  7645                           fsr2l	equ	0xFD9
  7646                           status	equ	0xFD8
  7647                           
  7648 ;; *************** function _write_command *****************
  7649 ;; Defined at:
  7650 ;;		line 198 in file "ST7735_TFT.c"
  7651 ;; Parameters:    Size  Location     Type
  7652 ;;  cmd_            1    wreg     unsigned char 
  7653 ;; Auto vars:     Size  Location     Type
  7654 ;;  cmd_            1   16[COMRAM] unsigned char 
  7655 ;; Return value:  Size  Location     Type
  7656 ;;		None               void
  7657 ;; Registers used:
  7658 ;;		wreg, status,2, cstack
  7659 ;; Tracked objects:
  7660 ;;		On entry : 0/0
  7661 ;;		On exit  : 0/0
  7662 ;;		Unchanged: 0/0
  7663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7665 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7667 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7668 ;;Total ram usage:        1 bytes
  7669 ;; Hardware stack levels used:    1
  7670 ;; Hardware stack levels required when called:    3
  7671 ;; This function calls:
  7672 ;;		_spiwrite
  7673 ;; This function is called by:
  7674 ;;		_Rcmd1
  7675 ;;		_Rcmd2red
  7676 ;;		_Rcmd3
  7677 ;;		_setAddrWindow
  7678 ;;		_TFT_GreenTab_Initialize
  7679 ;;		_Bcmd
  7680 ;;		_setScrollDefinition
  7681 ;;		_Rcmd2green
  7682 ;;		_VerticalScroll
  7683 ;; This function uses a non-reentrant model
  7684 ;;
  7685                           
  7686                           	psect	text33
  7687  0021C4                     __ptext33:
  7688                           	opt stack 0
  7689  0021C4                     _write_command:
  7690                           	opt stack 21
  7691                           
  7692                           ;incstack = 0
  7693                           ;write_command@cmd_ stored from wreg
  7694  0021C4  6E11               	movwf	write_command@cmd_,c
  7695                           
  7696                           ;ST7735_TFT.c: 200: PORTDbits.RD1 = 0;
  7697  0021C6  9283               	bcf	3971,1,c	;volatile
  7698                           
  7699                           ;ST7735_TFT.c: 202: PORTDbits.RD0 = 0;
  7700  0021C8  9083               	bcf	3971,0,c	;volatile
  7701                           
  7702                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
  7703  0021CA  5011               	movf	write_command@cmd_,w,c
  7704  0021CC  EC91  F010         	call	_spiwrite
  7705                           
  7706                           ;ST7735_TFT.c: 205: PORTDbits.RD1 = 1;
  7707  0021D0  8283               	bsf	3971,1,c	;volatile
  7708  0021D2  0012               	return		;funcret
  7709  0021D4                     __end_of_write_command:
  7710                           	opt stack 0
  7711                           tblptru	equ	0xFF8
  7712                           tblptrh	equ	0xFF7
  7713                           tblptrl	equ	0xFF6
  7714                           tablat	equ	0xFF5
  7715                           prodh	equ	0xFF4
  7716                           prodl	equ	0xFF3
  7717                           postinc0	equ	0xFEE
  7718                           wreg	equ	0xFE8
  7719                           postdec1	equ	0xFE5
  7720                           fsr1l	equ	0xFE1
  7721                           indf2	equ	0xFDF
  7722                           postinc2	equ	0xFDE
  7723                           postdec2	equ	0xFDD
  7724                           fsr2h	equ	0xFDA
  7725                           fsr2l	equ	0xFD9
  7726                           status	equ	0xFD8
  7727                           
  7728 ;; *************** function _spiwrite *****************
  7729 ;; Defined at:
  7730 ;;		line 189 in file "ST7735_TFT.c"
  7731 ;; Parameters:    Size  Location     Type
  7732 ;;  spidata         1    wreg     unsigned char 
  7733 ;; Auto vars:     Size  Location     Type
  7734 ;;  spidata         1   15[COMRAM] unsigned char 
  7735 ;;  x               1   14[COMRAM] unsigned char 
  7736 ;; Return value:  Size  Location     Type
  7737 ;;		None               void
  7738 ;; Registers used:
  7739 ;;		wreg
  7740 ;; Tracked objects:
  7741 ;;		On entry : 0/0
  7742 ;;		On exit  : 0/0
  7743 ;;		Unchanged: 0/0
  7744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7746 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7748 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7749 ;;Total ram usage:        2 bytes
  7750 ;; Hardware stack levels used:    1
  7751 ;; Hardware stack levels required when called:    2
  7752 ;; This function calls:
  7753 ;;		Nothing
  7754 ;; This function is called by:
  7755 ;;		_write_command
  7756 ;;		_write_data
  7757 ;;		_drawFastVLine
  7758 ;;		_fillRectangle
  7759 ;;		_drawFastHLine
  7760 ;; This function uses a non-reentrant model
  7761 ;;
  7762                           
  7763                           	psect	text34
  7764  002122                     __ptext34:
  7765                           	opt stack 0
  7766  002122                     _spiwrite:
  7767                           	opt stack 23
  7768                           
  7769                           ;incstack = 0
  7770                           ;spiwrite@spidata stored from wreg
  7771  002122  6E10               	movwf	spiwrite@spidata,c
  7772                           
  7773                           ;ST7735_TFT.c: 191: char x;
  7774                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
  7775  002124  969E               	bcf	3998,3,c	;volatile
  7776                           
  7777                           ;ST7735_TFT.c: 193: x = SSPBUF;
  7778  002126  CFC9 F00F          	movff	4041,spiwrite@x	;volatile
  7779                           
  7780                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
  7781  00212A  C010  FFC9         	movff	spiwrite@spidata,4041	;volatile
  7782                           
  7783                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
  7784  00212E  D000               	goto	l45
  7785  002130                     l45:
  7786  002130  A0C7               	btfss	4039,0,c	;volatile
  7787  002132  D7FE               	goto	l45
  7788  002134  0012               	return		;funcret
  7789  002136                     __end_of_spiwrite:
  7790                           	opt stack 0
  7791                           tblptru	equ	0xFF8
  7792                           tblptrh	equ	0xFF7
  7793                           tblptrl	equ	0xFF6
  7794                           tablat	equ	0xFF5
  7795                           prodh	equ	0xFF4
  7796                           prodl	equ	0xFF3
  7797                           postinc0	equ	0xFEE
  7798                           wreg	equ	0xFE8
  7799                           postdec1	equ	0xFE5
  7800                           fsr1l	equ	0xFE1
  7801                           indf2	equ	0xFDF
  7802                           postinc2	equ	0xFDE
  7803                           postdec2	equ	0xFDD
  7804                           fsr2h	equ	0xFDA
  7805                           fsr2l	equ	0xFD9
  7806                           status	equ	0xFD8
  7807                           
  7808 ;; *************** function _LCD_Reset *****************
  7809 ;; Defined at:
  7810 ;;		line 217 in file "ST7735_TFT.c"
  7811 ;; Parameters:    Size  Location     Type
  7812 ;;		None
  7813 ;; Auto vars:     Size  Location     Type
  7814 ;;		None
  7815 ;; Return value:  Size  Location     Type
  7816 ;;		None               void
  7817 ;; Registers used:
  7818 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7819 ;; Tracked objects:
  7820 ;;		On entry : 0/0
  7821 ;;		On exit  : 0/0
  7822 ;;		Unchanged: 0/0
  7823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7828 ;;Total ram usage:        0 bytes
  7829 ;; Hardware stack levels used:    1
  7830 ;; Hardware stack levels required when called:    4
  7831 ;; This function calls:
  7832 ;;		_delay_ms
  7833 ;; This function is called by:
  7834 ;;		_Initialize_Screen
  7835 ;; This function uses a non-reentrant model
  7836 ;;
  7837                           
  7838                           	psect	text35
  7839  00214A                     __ptext35:
  7840                           	opt stack 0
  7841  00214A                     _LCD_Reset:
  7842                           	opt stack 25
  7843                           
  7844                           ;ST7735_TFT.c: 219: PORTDbits.RD2 = 0;
  7845                           
  7846                           ;incstack = 0
  7847  00214A  9483               	bcf	3971,2,c	;volatile
  7848                           
  7849                           ;ST7735_TFT.c: 220: delay_ms(100);
  7850  00214C  0E00               	movlw	0
  7851  00214E  6E16               	movwf	delay_ms@ms+1,c
  7852  002150  0E64               	movlw	100
  7853  002152  6E15               	movwf	delay_ms@ms,c
  7854  002154  ECB6  F00D         	call	_delay_ms	;wreg free
  7855                           
  7856                           ;ST7735_TFT.c: 221: PORTDbits.RD2 = 1;
  7857  002158  8483               	bsf	3971,2,c	;volatile
  7858  00215A  0012               	return		;funcret
  7859  00215C                     __end_of_LCD_Reset:
  7860                           	opt stack 0
  7861                           tblptru	equ	0xFF8
  7862                           tblptrh	equ	0xFF7
  7863                           tblptrl	equ	0xFF6
  7864                           tablat	equ	0xFF5
  7865                           prodh	equ	0xFF4
  7866                           prodl	equ	0xFF3
  7867                           postinc0	equ	0xFEE
  7868                           wreg	equ	0xFE8
  7869                           postdec1	equ	0xFE5
  7870                           fsr1l	equ	0xFE1
  7871                           indf2	equ	0xFDF
  7872                           postinc2	equ	0xFDE
  7873                           postdec2	equ	0xFDD
  7874                           fsr2h	equ	0xFDA
  7875                           fsr2l	equ	0xFD9
  7876                           status	equ	0xFD8
  7877                           
  7878 ;; *************** function _delay_ms *****************
  7879 ;; Defined at:
  7880 ;;		line 64 in file "ST7735_TFT.c"
  7881 ;; Parameters:    Size  Location     Type
  7882 ;;  ms              2   20[COMRAM] int 
  7883 ;; Auto vars:     Size  Location     Type
  7884 ;;  count           2   24[COMRAM] int 
  7885 ;; Return value:  Size  Location     Type
  7886 ;;		None               void
  7887 ;; Registers used:
  7888 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7889 ;; Tracked objects:
  7890 ;;		On entry : 0/0
  7891 ;;		On exit  : 0/0
  7892 ;;		Unchanged: 0/0
  7893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7894 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7895 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7896 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7897 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7898 ;;Total ram usage:        6 bytes
  7899 ;; Hardware stack levels used:    1
  7900 ;; Hardware stack levels required when called:    3
  7901 ;; This function calls:
  7902 ;;		___wmul
  7903 ;; This function is called by:
  7904 ;;		_LCD_Reset
  7905 ;;		_Rcmd1
  7906 ;;		_Rcmd3
  7907 ;;		_Bcmd
  7908 ;; This function uses a non-reentrant model
  7909 ;;
  7910                           
  7911                           	psect	text36
  7912  001B6C                     __ptext36:
  7913                           	opt stack 0
  7914  001B6C                     _delay_ms:
  7915                           	opt stack 24
  7916                           
  7917                           ;ST7735_TFT.c: 70: int count;
  7918                           ;ST7735_TFT.c: 71: count = 8000000/4000/16 * ms;
  7919                           
  7920                           ;incstack = 0
  7921  001B6C  C015  F00F         	movff	delay_ms@ms,___wmul@multiplier
  7922  001B70  C016  F010         	movff	delay_ms@ms+1,___wmul@multiplier+1
  7923  001B74  0E00               	movlw	0
  7924  001B76  6E12               	movwf	___wmul@multiplicand+1,c
  7925  001B78  0E7D               	movlw	125
  7926  001B7A  6E11               	movwf	___wmul@multiplicand,c
  7927  001B7C  ECA5  F00F         	call	___wmul	;wreg free
  7928  001B80  C00F  F019         	movff	?___wmul,delay_ms@count
  7929  001B84  C010  F01A         	movff	?___wmul+1,delay_ms@count+1
  7930                           
  7931                           ;ST7735_TFT.c: 72: count = (0xffff - count);
  7932  001B88  C019  F017         	movff	delay_ms@count,??_delay_ms
  7933  001B8C  C01A  F018         	movff	delay_ms@count+1,??_delay_ms+1
  7934  001B90  1E17               	comf	??_delay_ms,f,c
  7935  001B92  1E18               	comf	??_delay_ms+1,f,c
  7936  001B94  4A17               	infsnz	??_delay_ms,f,c
  7937  001B96  2A18               	incf	??_delay_ms+1,f,c
  7938  001B98  0EFF               	movlw	255
  7939  001B9A  2417               	addwf	??_delay_ms,w,c
  7940  001B9C  6E19               	movwf	delay_ms@count,c
  7941  001B9E  0EFF               	movlw	255
  7942  001BA0  2018               	addwfc	??_delay_ms+1,w,c
  7943  001BA2  6E1A               	movwf	delay_ms@count+1,c
  7944                           
  7945                           ;ST7735_TFT.c: 74: T0CON = 0x03;
  7946  001BA4  0E03               	movlw	3
  7947  001BA6  6ED5               	movwf	4053,c	;volatile
  7948                           
  7949                           ;ST7735_TFT.c: 76: TMR0L = count & 0x00ff;
  7950  001BA8  C019  FFD6         	movff	delay_ms@count,4054	;volatile
  7951                           
  7952                           ;ST7735_TFT.c: 77: TMR0H = count >> 8;
  7953  001BAC  501A               	movf	delay_ms@count+1,w,c
  7954  001BAE  6ED7               	movwf	4055,c	;volatile
  7955                           
  7956                           ;ST7735_TFT.c: 79: INTCONbits.TMR0IF = 0;
  7957  001BB0  94F2               	bcf	intcon,2,c	;volatile
  7958                           
  7959                           ;ST7735_TFT.c: 80: T0CONbits.TMR0ON = 1;
  7960  001BB2  8ED5               	bsf	4053,7,c	;volatile
  7961                           
  7962                           ;ST7735_TFT.c: 82: while (INTCONbits.TMR0IF == 0);
  7963  001BB4  D000               	goto	l35
  7964  001BB6                     l35:
  7965  001BB6  A4F2               	btfss	intcon,2,c	;volatile
  7966  001BB8  D7FE               	goto	l35
  7967                           
  7968                           ;ST7735_TFT.c: 83: T0CONbits.TMR0ON = 0;
  7969  001BBA  9ED5               	bcf	4053,7,c	;volatile
  7970  001BBC  0012               	return		;funcret
  7971  001BBE                     __end_of_delay_ms:
  7972                           	opt stack 0
  7973                           tblptru	equ	0xFF8
  7974                           tblptrh	equ	0xFF7
  7975                           tblptrl	equ	0xFF6
  7976                           tablat	equ	0xFF5
  7977                           prodh	equ	0xFF4
  7978                           prodl	equ	0xFF3
  7979                           intcon	equ	0xFF2
  7980                           postinc0	equ	0xFEE
  7981                           wreg	equ	0xFE8
  7982                           postdec1	equ	0xFE5
  7983                           fsr1l	equ	0xFE1
  7984                           indf2	equ	0xFDF
  7985                           postinc2	equ	0xFDE
  7986                           postdec2	equ	0xFDD
  7987                           fsr2h	equ	0xFDA
  7988                           fsr2l	equ	0xFD9
  7989                           status	equ	0xFD8
  7990                           
  7991 ;; *************** function ___wmul *****************
  7992 ;; Defined at:
  7993 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  7994 ;; Parameters:    Size  Location     Type
  7995 ;;  multiplier      2   14[COMRAM] unsigned int 
  7996 ;;  multiplicand    2   16[COMRAM] unsigned int 
  7997 ;; Auto vars:     Size  Location     Type
  7998 ;;  product         2   18[COMRAM] unsigned int 
  7999 ;; Return value:  Size  Location     Type
  8000 ;;                  2   14[COMRAM] unsigned int 
  8001 ;; Registers used:
  8002 ;;		wreg, status,2, status,0, prodl, prodh
  8003 ;; Tracked objects:
  8004 ;;		On entry : 0/0
  8005 ;;		On exit  : 0/0
  8006 ;;		Unchanged: 0/0
  8007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8008 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8009 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8011 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8012 ;;Total ram usage:        6 bytes
  8013 ;; Hardware stack levels used:    1
  8014 ;; Hardware stack levels required when called:    2
  8015 ;; This function calls:
  8016 ;;		Nothing
  8017 ;; This function is called by:
  8018 ;;		_delay_ms
  8019 ;;		_drawChar
  8020 ;;		_main
  8021 ;;		_printf
  8022 ;;		_read_volt
  8023 ;; This function uses a non-reentrant model
  8024 ;;
  8025                           
  8026                           	psect	text37
  8027  001F4A                     __ptext37:
  8028                           	opt stack 0
  8029  001F4A                     ___wmul:
  8030                           	opt stack 27
  8031                           
  8032                           ;incstack = 0
  8033  001F4A  500F               	movf	___wmul@multiplier,w,c
  8034  001F4C  0211               	mulwf	___wmul@multiplicand,c
  8035  001F4E  CFF3 F013          	movff	prodl,___wmul@product
  8036  001F52  CFF4 F014          	movff	prodh,___wmul@product+1
  8037  001F56  500F               	movf	___wmul@multiplier,w,c
  8038  001F58  0212               	mulwf	___wmul@multiplicand+1,c
  8039  001F5A  50F3               	movf	prodl,w,c
  8040  001F5C  2614               	addwf	___wmul@product+1,f,c
  8041  001F5E  5010               	movf	___wmul@multiplier+1,w,c
  8042  001F60  0211               	mulwf	___wmul@multiplicand,c
  8043  001F62  50F3               	movf	prodl,w,c
  8044  001F64  2614               	addwf	___wmul@product+1,f,c
  8045  001F66  C013  F00F         	movff	___wmul@product,?___wmul
  8046  001F6A  C014  F010         	movff	___wmul@product+1,?___wmul+1
  8047  001F6E  D000               	goto	l926
  8048  001F70                     l926:
  8049  001F70  0012               	return		;funcret
  8050  001F72                     __end_of___wmul:
  8051                           	opt stack 0
  8052                           tblptru	equ	0xFF8
  8053                           tblptrh	equ	0xFF7
  8054                           tblptrl	equ	0xFF6
  8055                           tablat	equ	0xFF5
  8056                           prodh	equ	0xFF4
  8057                           prodl	equ	0xFF3
  8058                           intcon	equ	0xFF2
  8059                           postinc0	equ	0xFEE
  8060                           wreg	equ	0xFE8
  8061                           postdec1	equ	0xFE5
  8062                           fsr1l	equ	0xFE1
  8063                           indf2	equ	0xFDF
  8064                           postinc2	equ	0xFDE
  8065                           postdec2	equ	0xFDD
  8066                           fsr2h	equ	0xFDA
  8067                           fsr2l	equ	0xFD9
  8068                           status	equ	0xFD8
  8069                           
  8070 ;; *************** function _Increase_Speed *****************
  8071 ;; Defined at:
  8072 ;;		line 51 in file "Fan_Support.c"
  8073 ;; Parameters:    Size  Location     Type
  8074 ;;		None
  8075 ;; Auto vars:     Size  Location     Type
  8076 ;;		None
  8077 ;; Return value:  Size  Location     Type
  8078 ;;		None               void
  8079 ;; Registers used:
  8080 ;;		wreg, status,2, status,0, cstack
  8081 ;; Tracked objects:
  8082 ;;		On entry : 0/0
  8083 ;;		On exit  : 0/0
  8084 ;;		Unchanged: 0/0
  8085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8090 ;;Total ram usage:        0 bytes
  8091 ;; Hardware stack levels used:    1
  8092 ;; Hardware stack levels required when called:    6
  8093 ;; This function calls:
  8094 ;;		_Do_Beep
  8095 ;;		_do_update_pwm
  8096 ;; This function is called by:
  8097 ;;		_main
  8098 ;; This function uses a non-reentrant model
  8099 ;;
  8100                           
  8101                           	psect	text38
  8102  00203A                     __ptext38:
  8103                           	opt stack 0
  8104  00203A                     _Increase_Speed:
  8105                           	opt stack 24
  8106                           
  8107                           ;Fan_Support.c: 53: if (duty_cycle >= 100)
  8108                           
  8109                           ;incstack = 0
  8110  00203A  0E63               	movlw	99
  8111  00203C  645E               	cpfsgt	_duty_cycle,c
  8112  00203E  D005               	goto	l5802
  8113                           
  8114                           ;Fan_Support.c: 54: {
  8115                           ;Fan_Support.c: 55: Do_Beep();
  8116  002040  EC65  F010         	call	_Do_Beep	;wreg free
  8117                           
  8118                           ;Fan_Support.c: 56: Do_Beep();
  8119  002044  EC65  F010         	call	_Do_Beep	;wreg free
  8120                           
  8121                           ;Fan_Support.c: 57: }
  8122  002048  D003               	goto	l5804
  8123  00204A                     l5802:
  8124                           
  8125                           ;Fan_Support.c: 58: else
  8126                           ;Fan_Support.c: 59: {
  8127                           ;Fan_Support.c: 60: duty_cycle += 5;
  8128  00204A  0E05               	movlw	5
  8129  00204C  265E               	addwf	_duty_cycle,f,c
  8130  00204E  D000               	goto	l5804
  8131  002050                     l5804:
  8132                           
  8133                           ;Fan_Support.c: 61: }
  8134                           ;Fan_Support.c: 62: do_update_pwm(duty_cycle);
  8135  002050  505E               	movf	_duty_cycle,w,c
  8136  002052  EC5F  F00A         	call	_do_update_pwm
  8137  002056  0012               	return		;funcret
  8138  002058                     __end_of_Increase_Speed:
  8139                           	opt stack 0
  8140                           tblptru	equ	0xFF8
  8141                           tblptrh	equ	0xFF7
  8142                           tblptrl	equ	0xFF6
  8143                           tablat	equ	0xFF5
  8144                           prodh	equ	0xFF4
  8145                           prodl	equ	0xFF3
  8146                           intcon	equ	0xFF2
  8147                           postinc0	equ	0xFEE
  8148                           wreg	equ	0xFE8
  8149                           postdec1	equ	0xFE5
  8150                           fsr1l	equ	0xFE1
  8151                           indf2	equ	0xFDF
  8152                           postinc2	equ	0xFDE
  8153                           postdec2	equ	0xFDD
  8154                           fsr2h	equ	0xFDA
  8155                           fsr2l	equ	0xFD9
  8156                           status	equ	0xFD8
  8157                           
  8158 ;; *************** function _Do_Init *****************
  8159 ;; Defined at:
  8160 ;;		line 92 in file "Lab9_11.c"
  8161 ;; Parameters:    Size  Location     Type
  8162 ;;		None
  8163 ;; Auto vars:     Size  Location     Type
  8164 ;;		None
  8165 ;; Return value:  Size  Location     Type
  8166 ;;		None               void
  8167 ;; Registers used:
  8168 ;;		wreg, status,2, status,0, cstack
  8169 ;; Tracked objects:
  8170 ;;		On entry : 0/0
  8171 ;;		On exit  : 0/0
  8172 ;;		Unchanged: 0/0
  8173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8178 ;;Total ram usage:        0 bytes
  8179 ;; Hardware stack levels used:    1
  8180 ;; Hardware stack levels required when called:    6
  8181 ;; This function calls:
  8182 ;;		_DS1621_Init
  8183 ;;		_I2C_Init
  8184 ;;		_init_INTERRUPT
  8185 ;;		_init_UART
  8186 ;; This function is called by:
  8187 ;;		_main
  8188 ;; This function uses a non-reentrant model
  8189 ;;
  8190                           
  8191                           	psect	text39
  8192  001D84                     __ptext39:
  8193                           	opt stack 0
  8194  001D84                     _Do_Init:
  8195                           	opt stack 24
  8196                           
  8197                           ;Lab9_11.c: 94: init_UART();
  8198                           
  8199                           ;incstack = 0
  8200  001D84  EC9B  F010         	call	_init_UART	;wreg free
  8201                           
  8202                           ;Lab9_11.c: 95: OSCCON=0x70;
  8203  001D88  0E70               	movlw	112
  8204  001D8A  6ED3               	movwf	4051,c	;volatile
  8205                           
  8206                           ;Lab9_11.c: 96: ADCON1=0x0F;
  8207  001D8C  0E0F               	movlw	15
  8208  001D8E  6EC1               	movwf	4033,c	;volatile
  8209                           
  8210                           ;Lab9_11.c: 97: TRISA = 0x00;
  8211  001D90  0E00               	movlw	0
  8212  001D92  6E92               	movwf	3986,c	;volatile
  8213                           
  8214                           ;Lab9_11.c: 98: TRISB = 0x07;
  8215  001D94  0E07               	movlw	7
  8216  001D96  6E93               	movwf	3987,c	;volatile
  8217                           
  8218                           ;Lab9_11.c: 99: TRISC = 0x01;
  8219  001D98  0E01               	movlw	1
  8220  001D9A  6E94               	movwf	3988,c	;volatile
  8221                           
  8222                           ;Lab9_11.c: 100: TRISD = 0x00;
  8223  001D9C  0E00               	movlw	0
  8224  001D9E  6E95               	movwf	3989,c	;volatile
  8225                           
  8226                           ;Lab9_11.c: 101: TRISE = 0x00;
  8227  001DA0  0E00               	movlw	0
  8228  001DA2  6E96               	movwf	3990,c	;volatile
  8229                           
  8230                           ;Lab9_11.c: 103: RBPU=0;
  8231  001DA4  9EF1               	bcf	intcon2,7,c	;volatile
  8232                           
  8233                           ;Lab9_11.c: 105: init_INTERRUPT();
  8234  001DA6  EC71  F010         	call	_init_INTERRUPT	;wreg free
  8235                           
  8236                           ;Lab9_11.c: 106: I2C_Init(100000);
  8237  001DAA  0EA0               	movlw	160
  8238  001DAC  6E0F               	movwf	I2C_Init@c,c
  8239  001DAE  0E86               	movlw	134
  8240  001DB0  6E10               	movwf	I2C_Init@c+1,c
  8241  001DB2  0E01               	movlw	1
  8242  001DB4  6E11               	movwf	I2C_Init@c+2,c
  8243  001DB6  0E00               	movlw	0
  8244  001DB8  6E12               	movwf	I2C_Init@c+3,c
  8245  001DBA  ECFC  F010         	call	_I2C_Init	;wreg free
  8246                           
  8247                           ;Lab9_11.c: 107: DS1621_Init();
  8248  001DBE  EC2C  F010         	call	_DS1621_Init	;wreg free
  8249                           
  8250                           ;Lab9_11.c: 108: T3CON = 0b00000010;
  8251  001DC2  0E02               	movlw	2
  8252  001DC4  6EB1               	movwf	4017,c	;volatile
  8253  001DC6  0012               	return		;funcret
  8254  001DC8                     __end_of_Do_Init:
  8255                           	opt stack 0
  8256                           tblptru	equ	0xFF8
  8257                           tblptrh	equ	0xFF7
  8258                           tblptrl	equ	0xFF6
  8259                           tablat	equ	0xFF5
  8260                           prodh	equ	0xFF4
  8261                           prodl	equ	0xFF3
  8262                           intcon	equ	0xFF2
  8263                           intcon2	equ	0xFF1
  8264                           postinc0	equ	0xFEE
  8265                           wreg	equ	0xFE8
  8266                           postdec1	equ	0xFE5
  8267                           fsr1l	equ	0xFE1
  8268                           indf2	equ	0xFDF
  8269                           postinc2	equ	0xFDE
  8270                           postdec2	equ	0xFDD
  8271                           fsr2h	equ	0xFDA
  8272                           fsr2l	equ	0xFD9
  8273                           status	equ	0xFD8
  8274                           
  8275 ;; *************** function _init_UART *****************
  8276 ;; Defined at:
  8277 ;;		line 86 in file "Lab9_11.c"
  8278 ;; Parameters:    Size  Location     Type
  8279 ;;		None
  8280 ;; Auto vars:     Size  Location     Type
  8281 ;;		None
  8282 ;; Return value:  Size  Location     Type
  8283 ;;		None               void
  8284 ;; Registers used:
  8285 ;;		wreg, status,2, cstack
  8286 ;; Tracked objects:
  8287 ;;		On entry : 0/0
  8288 ;;		On exit  : 0/0
  8289 ;;		Unchanged: 0/0
  8290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8295 ;;Total ram usage:        0 bytes
  8296 ;; Hardware stack levels used:    1
  8297 ;; Hardware stack levels required when called:    3
  8298 ;; This function calls:
  8299 ;;		_OpenUSART
  8300 ;; This function is called by:
  8301 ;;		_Do_Init
  8302 ;; This function uses a non-reentrant model
  8303 ;;
  8304                           
  8305                           	psect	text40
  8306  002136                     __ptext40:
  8307                           	opt stack 0
  8308  002136                     _init_UART:
  8309                           	opt stack 26
  8310                           
  8311                           ;Lab9_11.c: 88: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b1111111
      +                          1 & 0b11111111, 25);
  8312                           
  8313                           ;incstack = 0
  8314  002136  0E00               	movlw	0
  8315  002138  6E10               	movwf	OpenUSART@spbrg+1,c
  8316  00213A  0E19               	movlw	25
  8317  00213C  6E0F               	movwf	OpenUSART@spbrg,c
  8318  00213E  0E3C               	movlw	60
  8319  002140  ECBB  F00C         	call	_OpenUSART
  8320                           
  8321                           ;Lab9_11.c: 89: OSCCON = 0x70;
  8322  002144  0E70               	movlw	112
  8323  002146  6ED3               	movwf	4051,c	;volatile
  8324  002148  0012               	return		;funcret
  8325  00214A                     __end_of_init_UART:
  8326                           	opt stack 0
  8327                           tblptru	equ	0xFF8
  8328                           tblptrh	equ	0xFF7
  8329                           tblptrl	equ	0xFF6
  8330                           tablat	equ	0xFF5
  8331                           prodh	equ	0xFF4
  8332                           prodl	equ	0xFF3
  8333                           intcon	equ	0xFF2
  8334                           intcon2	equ	0xFF1
  8335                           postinc0	equ	0xFEE
  8336                           wreg	equ	0xFE8
  8337                           postdec1	equ	0xFE5
  8338                           fsr1l	equ	0xFE1
  8339                           indf2	equ	0xFDF
  8340                           postinc2	equ	0xFDE
  8341                           postdec2	equ	0xFDD
  8342                           fsr2h	equ	0xFDA
  8343                           fsr2l	equ	0xFD9
  8344                           status	equ	0xFD8
  8345                           
  8346 ;; *************** function _OpenUSART *****************
  8347 ;; Defined at:
  8348 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  8349 ;; Parameters:    Size  Location     Type
  8350 ;;  config          1    wreg     unsigned char 
  8351 ;;  spbrg           2   14[COMRAM] unsigned int 
  8352 ;; Auto vars:     Size  Location     Type
  8353 ;;  config          1   16[COMRAM] unsigned char 
  8354 ;; Return value:  Size  Location     Type
  8355 ;;		None               void
  8356 ;; Registers used:
  8357 ;;		wreg, status,2
  8358 ;; Tracked objects:
  8359 ;;		On entry : 0/0
  8360 ;;		On exit  : 0/0
  8361 ;;		Unchanged: 0/0
  8362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8363 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8364 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8366 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8367 ;;Total ram usage:        3 bytes
  8368 ;; Hardware stack levels used:    1
  8369 ;; Hardware stack levels required when called:    2
  8370 ;; This function calls:
  8371 ;;		Nothing
  8372 ;; This function is called by:
  8373 ;;		_init_UART
  8374 ;; This function uses a non-reentrant model
  8375 ;;
  8376                           
  8377                           	psect	text41
  8378  001976                     __ptext41:
  8379                           	opt stack 0
  8380  001976                     _OpenUSART:
  8381                           	opt stack 26
  8382                           
  8383                           ;incstack = 0
  8384                           ;OpenUSART@config stored from wreg
  8385  001976  6E11               	movwf	OpenUSART@config,c
  8386  001978  0E00               	movlw	0
  8387  00197A  6EAC               	movwf	4012,c	;volatile
  8388  00197C  0E00               	movlw	0
  8389  00197E  6EAB               	movwf	4011,c	;volatile
  8390  001980  A011               	btfss	OpenUSART@config,0,c
  8391  001982  D002               	goto	l3930
  8392  001984  88AC               	bsf	4012,4,c	;volatile
  8393  001986  D000               	goto	l3930
  8394  001988                     l3930:
  8395  001988  A211               	btfss	OpenUSART@config,1,c
  8396  00198A  D003               	goto	l3934
  8397  00198C  8CAC               	bsf	4012,6,c	;volatile
  8398  00198E  8CAB               	bsf	4011,6,c	;volatile
  8399  001990  D000               	goto	l3934
  8400  001992                     l3934:
  8401  001992  A411               	btfss	OpenUSART@config,2,c
  8402  001994  D002               	goto	l3938
  8403  001996  8EAC               	bsf	4012,7,c	;volatile
  8404  001998  D000               	goto	l3938
  8405  00199A                     l3938:
  8406  00199A  A611               	btfss	OpenUSART@config,3,c
  8407  00199C  D002               	goto	l914
  8408  00199E  88AB               	bsf	4011,4,c	;volatile
  8409  0019A0  D002               	goto	l3942
  8410  0019A2                     l914:
  8411  0019A2  8AAB               	bsf	4011,5,c	;volatile
  8412  0019A4  D000               	goto	l3942
  8413  0019A6                     l3942:
  8414  0019A6  B811               	btfsc	OpenUSART@config,4,c
  8415  0019A8  84AC               	bsf	4012,2,c	;volatile
  8416  0019AA  989E               	bcf	3998,4,c	;volatile
  8417  0019AC  AA11               	btfss	OpenUSART@config,5,c
  8418  0019AE  D002               	goto	l3950
  8419  0019B0  86AB               	bsf	4011,3,c	;volatile
  8420  0019B2  D000               	goto	l3950
  8421  0019B4                     l3950:
  8422  0019B4  AC11               	btfss	OpenUSART@config,6,c
  8423  0019B6  D002               	goto	l918
  8424  0019B8  8A9D               	bsf	3997,5,c	;volatile
  8425  0019BA  D001               	goto	l919
  8426  0019BC                     l918:
  8427  0019BC  9A9D               	bcf	3997,5,c	;volatile
  8428  0019BE                     l919:
  8429  0019BE  9A9E               	bcf	3998,5,c	;volatile
  8430  0019C0  AE11               	btfss	OpenUSART@config,7,c
  8431  0019C2  D002               	goto	l920
  8432  0019C4  889D               	bsf	3997,4,c	;volatile
  8433  0019C6  D001               	goto	l921
  8434  0019C8                     l920:
  8435  0019C8  989D               	bcf	3997,4,c	;volatile
  8436  0019CA                     l921:
  8437  0019CA  C00F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  8438  0019CE  5010               	movf	OpenUSART@spbrg+1,w,c
  8439  0019D0  6EB0               	movwf	4016,c	;volatile
  8440  0019D2  8AAC               	bsf	4012,5,c	;volatile
  8441  0019D4  8EAB               	bsf	4011,7,c	;volatile
  8442  0019D6  9C94               	bcf	3988,6,c	;volatile
  8443  0019D8  8E94               	bsf	3988,7,c	;volatile
  8444  0019DA  B8AC               	btfsc	4012,4,c	;volatile
  8445  0019DC  BEAC               	btfsc	4012,7,c	;volatile
  8446  0019DE  D002               	goto	l923
  8447  0019E0  8C94               	bsf	3988,6,c	;volatile
  8448  0019E2  D000               	goto	l923
  8449  0019E4                     l923:
  8450  0019E4  0012               	return		;funcret
  8451  0019E6                     __end_of_OpenUSART:
  8452                           	opt stack 0
  8453                           tblptru	equ	0xFF8
  8454                           tblptrh	equ	0xFF7
  8455                           tblptrl	equ	0xFF6
  8456                           tablat	equ	0xFF5
  8457                           prodh	equ	0xFF4
  8458                           prodl	equ	0xFF3
  8459                           intcon	equ	0xFF2
  8460                           intcon2	equ	0xFF1
  8461                           postinc0	equ	0xFEE
  8462                           wreg	equ	0xFE8
  8463                           postdec1	equ	0xFE5
  8464                           fsr1l	equ	0xFE1
  8465                           indf2	equ	0xFDF
  8466                           postinc2	equ	0xFDE
  8467                           postdec2	equ	0xFDD
  8468                           fsr2h	equ	0xFDA
  8469                           fsr2l	equ	0xFD9
  8470                           status	equ	0xFD8
  8471                           
  8472 ;; *************** function _init_INTERRUPT *****************
  8473 ;; Defined at:
  8474 ;;		line 10 in file "Interrupt.c"
  8475 ;; Parameters:    Size  Location     Type
  8476 ;;		None
  8477 ;; Auto vars:     Size  Location     Type
  8478 ;;		None
  8479 ;; Return value:  Size  Location     Type
  8480 ;;		None               void
  8481 ;; Registers used:
  8482 ;;		None
  8483 ;; Tracked objects:
  8484 ;;		On entry : 0/0
  8485 ;;		On exit  : 0/0
  8486 ;;		Unchanged: 0/0
  8487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8492 ;;Total ram usage:        0 bytes
  8493 ;; Hardware stack levels used:    1
  8494 ;; Hardware stack levels required when called:    2
  8495 ;; This function calls:
  8496 ;;		Nothing
  8497 ;; This function is called by:
  8498 ;;		_Do_Init
  8499 ;; This function uses a non-reentrant model
  8500 ;;
  8501                           
  8502                           	psect	text42
  8503  0020E2                     __ptext42:
  8504                           	opt stack 0
  8505  0020E2                     _init_INTERRUPT:
  8506                           	opt stack 27
  8507                           
  8508                           ;Interrupt.c: 11: INTCONbits.INT0IF = 0 ;
  8509                           
  8510                           ;incstack = 0
  8511  0020E2  92F2               	bcf	intcon,1,c	;volatile
  8512                           
  8513                           ;Interrupt.c: 12: INTCON3bits.INT1IF = 0;
  8514  0020E4  90F0               	bcf	intcon3,0,c	;volatile
  8515                           
  8516                           ;Interrupt.c: 13: INTCON3bits.INT2IF =0;
  8517  0020E6  92F0               	bcf	intcon3,1,c	;volatile
  8518                           
  8519                           ;Interrupt.c: 14: INTCON2bits.INTEDG0=0 ;
  8520  0020E8  9CF1               	bcf	intcon2,6,c	;volatile
  8521                           
  8522                           ;Interrupt.c: 15: INTCON2bits.INTEDG1=0;
  8523  0020EA  9AF1               	bcf	intcon2,5,c	;volatile
  8524                           
  8525                           ;Interrupt.c: 16: INTCON2bits.INTEDG2=0;
  8526  0020EC  98F1               	bcf	intcon2,4,c	;volatile
  8527                           
  8528                           ;Interrupt.c: 17: INTCONbits.INT0IE =1;
  8529  0020EE  88F2               	bsf	intcon,4,c	;volatile
  8530                           
  8531                           ;Interrupt.c: 18: INTCON3bits.INT1IE=1;
  8532  0020F0  86F0               	bsf	intcon3,3,c	;volatile
  8533                           
  8534                           ;Interrupt.c: 19: INTCON3bits.INT2IE=1;
  8535  0020F2  88F0               	bsf	intcon3,4,c	;volatile
  8536                           
  8537                           ;Interrupt.c: 20: INTCONbits.GIE=1;
  8538  0020F4  8EF2               	bsf	intcon,7,c	;volatile
  8539  0020F6  0012               	return		;funcret
  8540  0020F8                     __end_of_init_INTERRUPT:
  8541                           	opt stack 0
  8542                           tblptru	equ	0xFF8
  8543                           tblptrh	equ	0xFF7
  8544                           tblptrl	equ	0xFF6
  8545                           tablat	equ	0xFF5
  8546                           prodh	equ	0xFF4
  8547                           prodl	equ	0xFF3
  8548                           intcon	equ	0xFF2
  8549                           intcon2	equ	0xFF1
  8550                           intcon3	equ	0xFF0
  8551                           postinc0	equ	0xFEE
  8552                           wreg	equ	0xFE8
  8553                           postdec1	equ	0xFE5
  8554                           fsr1l	equ	0xFE1
  8555                           indf2	equ	0xFDF
  8556                           postinc2	equ	0xFDE
  8557                           postdec2	equ	0xFDD
  8558                           fsr2h	equ	0xFDA
  8559                           fsr2l	equ	0xFD9
  8560                           status	equ	0xFD8
  8561                           
  8562 ;; *************** function _I2C_Init *****************
  8563 ;; Defined at:
  8564 ;;		line 10 in file "I2C_Soft.c"
  8565 ;; Parameters:    Size  Location     Type
  8566 ;;  c               4   14[COMRAM] unsigned long 
  8567 ;; Auto vars:     Size  Location     Type
  8568 ;;		None
  8569 ;; Return value:  Size  Location     Type
  8570 ;;		None               void
  8571 ;; Registers used:
  8572 ;;		wreg, cstack
  8573 ;; Tracked objects:
  8574 ;;		On entry : 0/0
  8575 ;;		On exit  : 0/0
  8576 ;;		Unchanged: 0/0
  8577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8578 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8581 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8582 ;;Total ram usage:        4 bytes
  8583 ;; Hardware stack levels used:    1
  8584 ;; Hardware stack levels required when called:    3
  8585 ;; This function calls:
  8586 ;;		_i2cHighScl
  8587 ;;		_i2cHighSda
  8588 ;; This function is called by:
  8589 ;;		_Do_Init
  8590 ;; This function uses a non-reentrant model
  8591 ;;
  8592                           
  8593                           	psect	text43
  8594  0021F8                     __ptext43:
  8595                           	opt stack 0
  8596  0021F8                     _I2C_Init:
  8597                           	opt stack 26
  8598                           
  8599                           ;I2C_Soft.c: 12: i2cHighScl();
  8600                           
  8601                           ;incstack = 0
  8602  0021F8  ECF1  F010         	call	_i2cHighScl	;wreg free
  8603                           
  8604                           ;I2C_Soft.c: 13: i2cHighSda();
  8605  0021FC  EC13  F011         	call	_i2cHighSda	;wreg free
  8606  002200  0012               	return		;funcret
  8607  002202                     __end_of_I2C_Init:
  8608                           	opt stack 0
  8609                           tblptru	equ	0xFF8
  8610                           tblptrh	equ	0xFF7
  8611                           tblptrl	equ	0xFF6
  8612                           tablat	equ	0xFF5
  8613                           prodh	equ	0xFF4
  8614                           prodl	equ	0xFF3
  8615                           intcon	equ	0xFF2
  8616                           intcon2	equ	0xFF1
  8617                           intcon3	equ	0xFF0
  8618                           postinc0	equ	0xFEE
  8619                           wreg	equ	0xFE8
  8620                           postdec1	equ	0xFE5
  8621                           fsr1l	equ	0xFE1
  8622                           indf2	equ	0xFDF
  8623                           postinc2	equ	0xFDE
  8624                           postdec2	equ	0xFDD
  8625                           fsr2h	equ	0xFDA
  8626                           fsr2l	equ	0xFD9
  8627                           status	equ	0xFD8
  8628                           
  8629 ;; *************** function _DS1621_Init *****************
  8630 ;; Defined at:
  8631 ;;		line 36 in file "I2C_Support.c"
  8632 ;; Parameters:    Size  Location     Type
  8633 ;;		None
  8634 ;; Auto vars:     Size  Location     Type
  8635 ;;  Device          1   19[COMRAM] unsigned char 
  8636 ;; Return value:  Size  Location     Type
  8637 ;;		None               void
  8638 ;; Registers used:
  8639 ;;		wreg, status,2, status,0, cstack
  8640 ;; Tracked objects:
  8641 ;;		On entry : 0/0
  8642 ;;		On exit  : 0/0
  8643 ;;		Unchanged: 0/0
  8644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8646 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8648 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8649 ;;Total ram usage:        1 bytes
  8650 ;; Hardware stack levels used:    1
  8651 ;; Hardware stack levels required when called:    5
  8652 ;; This function calls:
  8653 ;;		_I2C_Write_Cmd_Only
  8654 ;;		_I2C_Write_Cmd_Write_Data
  8655 ;; This function is called by:
  8656 ;;		_Do_Init
  8657 ;; This function uses a non-reentrant model
  8658 ;;
  8659                           
  8660                           	psect	text44
  8661  002058                     __ptext44:
  8662                           	opt stack 0
  8663  002058                     _DS1621_Init:
  8664                           	opt stack 24
  8665                           
  8666                           ;I2C_Support.c: 38: char Device = 0x48;
  8667                           
  8668                           ;incstack = 0
  8669  002058  0E48               	movlw	72
  8670  00205A  6E14               	movwf	DS1621_Init@Device,c
  8671                           
  8672                           ;I2C_Support.c: 39: I2C_Write_Cmd_Write_Data(Device, 0xAC, 0x02);
  8673  00205C  0EAC               	movlw	172
  8674  00205E  6E11               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  8675  002060  0E02               	movlw	2
  8676  002062  6E12               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  8677  002064  5014               	movf	DS1621_Init@Device,w,c
  8678  002066  ECED  F00F         	call	_I2C_Write_Cmd_Write_Data
  8679                           
  8680                           ;I2C_Support.c: 40: I2C_Write_Cmd_Only(Device, 0xEE);
  8681  00206A  0EEE               	movlw	238
  8682  00206C  6E11               	movwf	I2C_Write_Cmd_Only@Cmd,c
  8683  00206E  5014               	movf	DS1621_Init@Device,w,c
  8684  002070  EC58  F010         	call	_I2C_Write_Cmd_Only
  8685  002074  0012               	return		;funcret
  8686  002076                     __end_of_DS1621_Init:
  8687                           	opt stack 0
  8688                           tblptru	equ	0xFF8
  8689                           tblptrh	equ	0xFF7
  8690                           tblptrl	equ	0xFF6
  8691                           tablat	equ	0xFF5
  8692                           prodh	equ	0xFF4
  8693                           prodl	equ	0xFF3
  8694                           intcon	equ	0xFF2
  8695                           intcon2	equ	0xFF1
  8696                           intcon3	equ	0xFF0
  8697                           postinc0	equ	0xFEE
  8698                           wreg	equ	0xFE8
  8699                           postdec1	equ	0xFE5
  8700                           fsr1l	equ	0xFE1
  8701                           indf2	equ	0xFDF
  8702                           postinc2	equ	0xFDE
  8703                           postdec2	equ	0xFDD
  8704                           fsr2h	equ	0xFDA
  8705                           fsr2l	equ	0xFD9
  8706                           status	equ	0xFD8
  8707                           
  8708 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  8709 ;; Defined at:
  8710 ;;		line 148 in file "I2C_Soft.c"
  8711 ;; Parameters:    Size  Location     Type
  8712 ;;  Device          1    wreg     unsigned char 
  8713 ;;  Cmd             1   16[COMRAM] unsigned char 
  8714 ;;  Data_Out        1   17[COMRAM] unsigned char 
  8715 ;; Auto vars:     Size  Location     Type
  8716 ;;  Device          1   18[COMRAM] unsigned char 
  8717 ;; Return value:  Size  Location     Type
  8718 ;;		None               void
  8719 ;; Registers used:
  8720 ;;		wreg, status,2, status,0, cstack
  8721 ;; Tracked objects:
  8722 ;;		On entry : 0/0
  8723 ;;		On exit  : 0/0
  8724 ;;		Unchanged: 0/0
  8725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8726 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8727 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8729 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8730 ;;Total ram usage:        3 bytes
  8731 ;; Hardware stack levels used:    1
  8732 ;; Hardware stack levels required when called:    4
  8733 ;; This function calls:
  8734 ;;		_I2C_Start
  8735 ;;		_I2C_Stop
  8736 ;;		_I2C_Write
  8737 ;; This function is called by:
  8738 ;;		_DS1621_Init
  8739 ;; This function uses a non-reentrant model
  8740 ;;
  8741                           
  8742                           	psect	text45
  8743  001FDA                     __ptext45:
  8744                           	opt stack 0
  8745  001FDA                     _I2C_Write_Cmd_Write_Data:
  8746                           	opt stack 24
  8747                           
  8748                           ;incstack = 0
  8749                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  8750  001FDA  6E13               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  8751                           
  8752                           ;I2C_Soft.c: 150: I2C_Start();
  8753  001FDC  ECC0  F010         	call	_I2C_Start	;wreg free
  8754                           
  8755                           ;I2C_Soft.c: 151: I2C_Write((Device << 1) | 0);
  8756  001FE0  5013               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  8757  001FE2  2413               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  8758  001FE4  EC22  F00F         	call	_I2C_Write
  8759                           
  8760                           ;I2C_Soft.c: 152: I2C_Write(Cmd);
  8761  001FE8  5011               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  8762  001FEA  EC22  F00F         	call	_I2C_Write
  8763                           
  8764                           ;I2C_Soft.c: 153: I2C_Write(Data_Out);
  8765  001FEE  5012               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  8766  001FF0  EC22  F00F         	call	_I2C_Write
  8767                           
  8768                           ;I2C_Soft.c: 154: I2C_Stop();
  8769  001FF4  ECB7  F010         	call	_I2C_Stop	;wreg free
  8770  001FF8  0012               	return		;funcret
  8771  001FFA                     __end_of_I2C_Write_Cmd_Write_Data:
  8772                           	opt stack 0
  8773                           tblptru	equ	0xFF8
  8774                           tblptrh	equ	0xFF7
  8775                           tblptrl	equ	0xFF6
  8776                           tablat	equ	0xFF5
  8777                           prodh	equ	0xFF4
  8778                           prodl	equ	0xFF3
  8779                           intcon	equ	0xFF2
  8780                           intcon2	equ	0xFF1
  8781                           intcon3	equ	0xFF0
  8782                           postinc0	equ	0xFEE
  8783                           wreg	equ	0xFE8
  8784                           postdec1	equ	0xFE5
  8785                           fsr1l	equ	0xFE1
  8786                           indf2	equ	0xFDF
  8787                           postinc2	equ	0xFDE
  8788                           postdec2	equ	0xFDD
  8789                           fsr2h	equ	0xFDA
  8790                           fsr2l	equ	0xFD9
  8791                           status	equ	0xFD8
  8792                           
  8793 ;; *************** function _I2C_Write_Cmd_Only *****************
  8794 ;; Defined at:
  8795 ;;		line 140 in file "I2C_Soft.c"
  8796 ;; Parameters:    Size  Location     Type
  8797 ;;  Device          1    wreg     unsigned char 
  8798 ;;  Cmd             1   16[COMRAM] unsigned char 
  8799 ;; Auto vars:     Size  Location     Type
  8800 ;;  Device          1   17[COMRAM] unsigned char 
  8801 ;; Return value:  Size  Location     Type
  8802 ;;		None               void
  8803 ;; Registers used:
  8804 ;;		wreg, status,2, status,0, cstack
  8805 ;; Tracked objects:
  8806 ;;		On entry : 0/0
  8807 ;;		On exit  : 0/0
  8808 ;;		Unchanged: 0/0
  8809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8810 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8811 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8813 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8814 ;;Total ram usage:        2 bytes
  8815 ;; Hardware stack levels used:    1
  8816 ;; Hardware stack levels required when called:    4
  8817 ;; This function calls:
  8818 ;;		_I2C_Start
  8819 ;;		_I2C_Stop
  8820 ;;		_I2C_Write
  8821 ;; This function is called by:
  8822 ;;		_DS1621_Init
  8823 ;; This function uses a non-reentrant model
  8824 ;;
  8825                           
  8826                           	psect	text46
  8827  0020B0                     __ptext46:
  8828                           	opt stack 0
  8829  0020B0                     _I2C_Write_Cmd_Only:
  8830                           	opt stack 24
  8831                           
  8832                           ;incstack = 0
  8833                           ;I2C_Write_Cmd_Only@Device stored from wreg
  8834  0020B0  6E12               	movwf	I2C_Write_Cmd_Only@Device,c
  8835                           
  8836                           ;I2C_Soft.c: 142: I2C_Start();
  8837  0020B2  ECC0  F010         	call	_I2C_Start	;wreg free
  8838                           
  8839                           ;I2C_Soft.c: 143: I2C_Write((Device << 1) | 0);
  8840  0020B6  5012               	movf	I2C_Write_Cmd_Only@Device,w,c
  8841  0020B8  2412               	addwf	I2C_Write_Cmd_Only@Device,w,c
  8842  0020BA  EC22  F00F         	call	_I2C_Write
  8843                           
  8844                           ;I2C_Soft.c: 144: I2C_Write(Cmd);
  8845  0020BE  5011               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  8846  0020C0  EC22  F00F         	call	_I2C_Write
  8847                           
  8848                           ;I2C_Soft.c: 145: I2C_Stop();
  8849  0020C4  ECB7  F010         	call	_I2C_Stop	;wreg free
  8850  0020C8  0012               	return		;funcret
  8851  0020CA                     __end_of_I2C_Write_Cmd_Only:
  8852                           	opt stack 0
  8853                           tblptru	equ	0xFF8
  8854                           tblptrh	equ	0xFF7
  8855                           tblptrl	equ	0xFF6
  8856                           tablat	equ	0xFF5
  8857                           prodh	equ	0xFF4
  8858                           prodl	equ	0xFF3
  8859                           intcon	equ	0xFF2
  8860                           intcon2	equ	0xFF1
  8861                           intcon3	equ	0xFF0
  8862                           postinc0	equ	0xFEE
  8863                           wreg	equ	0xFE8
  8864                           postdec1	equ	0xFE5
  8865                           fsr1l	equ	0xFE1
  8866                           indf2	equ	0xFDF
  8867                           postinc2	equ	0xFDE
  8868                           postdec2	equ	0xFDD
  8869                           fsr2h	equ	0xFDA
  8870                           fsr2l	equ	0xFD9
  8871                           status	equ	0xFD8
  8872                           
  8873 ;; *************** function _Decrease_Speed *****************
  8874 ;; Defined at:
  8875 ;;		line 65 in file "Fan_Support.c"
  8876 ;; Parameters:    Size  Location     Type
  8877 ;;		None
  8878 ;; Auto vars:     Size  Location     Type
  8879 ;;		None
  8880 ;; Return value:  Size  Location     Type
  8881 ;;		None               void
  8882 ;; Registers used:
  8883 ;;		wreg, status,2, status,0, cstack
  8884 ;; Tracked objects:
  8885 ;;		On entry : 0/0
  8886 ;;		On exit  : 0/0
  8887 ;;		Unchanged: 0/0
  8888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8893 ;;Total ram usage:        0 bytes
  8894 ;; Hardware stack levels used:    1
  8895 ;; Hardware stack levels required when called:    6
  8896 ;; This function calls:
  8897 ;;		_Do_Beep
  8898 ;;		_do_update_pwm
  8899 ;; This function is called by:
  8900 ;;		_main
  8901 ;; This function uses a non-reentrant model
  8902 ;;
  8903                           
  8904                           	psect	text47
  8905  002076                     __ptext47:
  8906                           	opt stack 0
  8907  002076                     _Decrease_Speed:
  8908                           	opt stack 24
  8909                           
  8910                           ;Fan_Support.c: 67: if (duty_cycle <= 0)
  8911                           
  8912                           ;incstack = 0
  8913  002076  505E               	movf	_duty_cycle,w,c
  8914  002078  A4D8               	btfss	status,2,c
  8915  00207A  D005               	goto	l5810
  8916                           
  8917                           ;Fan_Support.c: 68: {
  8918                           ;Fan_Support.c: 69: Do_Beep();
  8919  00207C  EC65  F010         	call	_Do_Beep	;wreg free
  8920                           
  8921                           ;Fan_Support.c: 70: Do_Beep();
  8922  002080  EC65  F010         	call	_Do_Beep	;wreg free
  8923                           
  8924                           ;Fan_Support.c: 71: }
  8925  002084  D003               	goto	l5812
  8926  002086                     l5810:
  8927                           
  8928                           ;Fan_Support.c: 72: else
  8929                           ;Fan_Support.c: 73: {
  8930                           ;Fan_Support.c: 74: duty_cycle -= 5;
  8931  002086  0E05               	movlw	5
  8932  002088  5E5E               	subwf	_duty_cycle,f,c
  8933  00208A  D000               	goto	l5812
  8934  00208C                     l5812:
  8935                           
  8936                           ;Fan_Support.c: 75: }
  8937                           ;Fan_Support.c: 76: do_update_pwm(duty_cycle);
  8938  00208C  505E               	movf	_duty_cycle,w,c
  8939  00208E  EC5F  F00A         	call	_do_update_pwm
  8940  002092  0012               	return		;funcret
  8941  002094                     __end_of_Decrease_Speed:
  8942                           	opt stack 0
  8943                           tblptru	equ	0xFF8
  8944                           tblptrh	equ	0xFF7
  8945                           tblptrl	equ	0xFF6
  8946                           tablat	equ	0xFF5
  8947                           prodh	equ	0xFF4
  8948                           prodl	equ	0xFF3
  8949                           intcon	equ	0xFF2
  8950                           intcon2	equ	0xFF1
  8951                           intcon3	equ	0xFF0
  8952                           postinc0	equ	0xFEE
  8953                           wreg	equ	0xFE8
  8954                           postdec1	equ	0xFE5
  8955                           fsr1l	equ	0xFE1
  8956                           indf2	equ	0xFDF
  8957                           postinc2	equ	0xFDE
  8958                           postdec2	equ	0xFDD
  8959                           fsr2h	equ	0xFDA
  8960                           fsr2l	equ	0xFD9
  8961                           status	equ	0xFD8
  8962                           
  8963 ;; *************** function _Do_Beep *****************
  8964 ;; Defined at:
  8965 ;;		line 61 in file "utils.c"
  8966 ;; Parameters:    Size  Location     Type
  8967 ;;		None
  8968 ;; Auto vars:     Size  Location     Type
  8969 ;;		None
  8970 ;; Return value:  Size  Location     Type
  8971 ;;                  2  229[None  ] int 
  8972 ;; Registers used:
  8973 ;;		wreg, status,2, status,0, cstack
  8974 ;; Tracked objects:
  8975 ;;		On entry : 0/0
  8976 ;;		On exit  : 0/0
  8977 ;;		Unchanged: 0/0
  8978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8983 ;;Total ram usage:        0 bytes
  8984 ;; Hardware stack levels used:    1
  8985 ;; Hardware stack levels required when called:    5
  8986 ;; This function calls:
  8987 ;;		_Activate_Buzzer
  8988 ;;		_Deactivate_Buzzer
  8989 ;;		_Wait_One_Sec
  8990 ;;		_do_update_pwm
  8991 ;; This function is called by:
  8992 ;;		_Increase_Speed
  8993 ;;		_Decrease_Speed
  8994 ;; This function uses a non-reentrant model
  8995 ;;
  8996                           
  8997                           	psect	text48
  8998  0020CA                     __ptext48:
  8999                           	opt stack 0
  9000  0020CA                     _Do_Beep:
  9001                           	opt stack 24
  9002                           
  9003                           ;utils.c: 63: Activate_Buzzer();
  9004                           
  9005                           ;incstack = 0
  9006  0020CA  ECAE  F010         	call	_Activate_Buzzer	;wreg free
  9007                           
  9008                           ;utils.c: 64: Wait_One_Sec();
  9009  0020CE  ECFD  F00F         	call	_Wait_One_Sec	;wreg free
  9010                           
  9011                           ;utils.c: 65: Deactivate_Buzzer();
  9012  0020D2  EC0B  F011         	call	_Deactivate_Buzzer	;wreg free
  9013                           
  9014                           ;utils.c: 66: Wait_One_Sec();
  9015  0020D6  ECFD  F00F         	call	_Wait_One_Sec	;wreg free
  9016                           
  9017                           ;utils.c: 67: do_update_pwm(duty_cycle);
  9018  0020DA  505E               	movf	_duty_cycle,w,c
  9019  0020DC  EC5F  F00A         	call	_do_update_pwm
  9020  0020E0  0012               	return		;funcret
  9021  0020E2                     __end_of_Do_Beep:
  9022                           	opt stack 0
  9023                           tblptru	equ	0xFF8
  9024                           tblptrh	equ	0xFF7
  9025                           tblptrl	equ	0xFF6
  9026                           tablat	equ	0xFF5
  9027                           prodh	equ	0xFF4
  9028                           prodl	equ	0xFF3
  9029                           intcon	equ	0xFF2
  9030                           intcon2	equ	0xFF1
  9031                           intcon3	equ	0xFF0
  9032                           postinc0	equ	0xFEE
  9033                           wreg	equ	0xFE8
  9034                           postdec1	equ	0xFE5
  9035                           fsr1l	equ	0xFE1
  9036                           indf2	equ	0xFDF
  9037                           postinc2	equ	0xFDE
  9038                           postdec2	equ	0xFDD
  9039                           fsr2h	equ	0xFDA
  9040                           fsr2l	equ	0xFD9
  9041                           status	equ	0xFD8
  9042                           
  9043 ;; *************** function _do_update_pwm *****************
  9044 ;; Defined at:
  9045 ;;		line 80 in file "Fan_Support.c"
  9046 ;; Parameters:    Size  Location     Type
  9047 ;;  duty_cycle      1    wreg     unsigned char 
  9048 ;; Auto vars:     Size  Location     Type
  9049 ;;  duty_cycle      1    6[BANK1 ] unsigned char 
  9050 ;;  dc_f            3    3[BANK1 ] float 
  9051 ;;  dc_I            2    7[BANK1 ] int 
  9052 ;; Return value:  Size  Location     Type
  9053 ;;		None               void
  9054 ;; Registers used:
  9055 ;;		wreg, status,2, status,0, cstack
  9056 ;; Tracked objects:
  9057 ;;		On entry : 0/0
  9058 ;;		On exit  : 0/0
  9059 ;;		Unchanged: 0/0
  9060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9062 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9063 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9064 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9065 ;;Total ram usage:        9 bytes
  9066 ;; Hardware stack levels used:    1
  9067 ;; Hardware stack levels required when called:    4
  9068 ;; This function calls:
  9069 ;;		___ftdiv
  9070 ;;		___ftmul
  9071 ;;		___fttol
  9072 ;;		___lbtoft
  9073 ;; This function is called by:
  9074 ;;		_Turn_On_Fan
  9075 ;;		_Increase_Speed
  9076 ;;		_Decrease_Speed
  9077 ;;		_main
  9078 ;;		_Do_Beep
  9079 ;;		_Do_Beep_Good
  9080 ;;		_Do_Beep_Bad
  9081 ;; This function uses a non-reentrant model
  9082 ;;
  9083                           
  9084                           	psect	text49
  9085  0014BE                     __ptext49:
  9086                           	opt stack 0
  9087  0014BE                     _do_update_pwm:
  9088                           	opt stack 26
  9089                           
  9090                           ;incstack = 0
  9091                           ;do_update_pwm@duty_cycle stored from wreg
  9092  0014BE  0101               	movlb	1	; () banked
  9093  0014C0  6F25               	movwf	do_update_pwm@duty_cycle& (0+255),b
  9094                           
  9095                           ; BSR set to: 1
  9096                           ;Fan_Support.c: 82: float dc_f;
  9097                           ;Fan_Support.c: 83: int dc_I;
  9098                           ;Fan_Support.c: 84: PR2 = 0b00000100;
  9099  0014C2  0E04               	movlw	4
  9100  0014C4  6ECB               	movwf	4043,c	;volatile
  9101                           
  9102                           ;Fan_Support.c: 85: T2CON = 0b00000111;
  9103  0014C6  0E07               	movlw	7
  9104  0014C8  6ECA               	movwf	4042,c	;volatile
  9105                           
  9106                           ; BSR set to: 1
  9107                           ;Fan_Support.c: 86: dc_f = ( 4.0 * duty_cycle / 20.0);
  9108  0014CA  0E00               	movlw	0
  9109  0014CC  6E1E               	movwf	___ftmul@f2,c
  9110  0014CE  0E80               	movlw	128
  9111  0014D0  6E1F               	movwf	___ftmul@f2+1,c
  9112  0014D2  0E40               	movlw	64
  9113  0014D4  6E20               	movwf	___ftmul@f2+2,c
  9114  0014D6  0101               	movlb	1	; () banked
  9115  0014D8  5125               	movf	do_update_pwm@duty_cycle& (0+255),w,b
  9116  0014DA  ECB9  F00F         	call	___lbtoft
  9117  0014DE  C017  F01B         	movff	?___lbtoft,___ftmul@f1
  9118  0014E2  C018  F01C         	movff	?___lbtoft+1,___ftmul@f1+1
  9119  0014E6  C019  F01D         	movff	?___lbtoft+2,___ftmul@f1+2
  9120  0014EA  EC18  F008         	call	___ftmul	;wreg free
  9121  0014EE  C01B  F02A         	movff	?___ftmul,___ftdiv@f1
  9122  0014F2  C01C  F02B         	movff	?___ftmul+1,___ftdiv@f1+1
  9123  0014F6  C01D  F02C         	movff	?___ftmul+2,___ftdiv@f1+2
  9124  0014FA  0E00               	movlw	0
  9125  0014FC  6E2D               	movwf	___ftdiv@f2,c
  9126  0014FE  0EA0               	movlw	160
  9127  001500  6E2E               	movwf	___ftdiv@f2+1,c
  9128  001502  0E41               	movlw	65
  9129  001504  6E2F               	movwf	___ftdiv@f2+2,c
  9130  001506  EC80  F009         	call	___ftdiv	;wreg free
  9131  00150A  C02A  F122         	movff	?___ftdiv,do_update_pwm@dc_f
  9132  00150E  C02B  F123         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
  9133  001512  C02C  F124         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
  9134                           
  9135                           ;Fan_Support.c: 87: dc_I = (int) dc_f;
  9136  001516  C122  F030         	movff	do_update_pwm@dc_f,___fttol@f1
  9137  00151A  C123  F031         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
  9138  00151E  C124  F032         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
  9139  001522  EC0D  F009         	call	___fttol	;wreg free
  9140  001526  C030  F126         	movff	?___fttol,do_update_pwm@dc_I
  9141  00152A  C031  F127         	movff	?___fttol+1,do_update_pwm@dc_I+1
  9142                           
  9143                           ;Fan_Support.c: 88: if (dc_I > duty_cycle) dc_I++;
  9144  00152E  0101               	movlb	1	; () banked
  9145  001530  5125               	movf	do_update_pwm@duty_cycle& (0+255),w,b
  9146  001532  0101               	movlb	1	; () banked
  9147  001534  6F1F               	movwf	??_do_update_pwm& (0+255),b
  9148  001536  6B20               	clrf	(??_do_update_pwm+1)& (0+255),b
  9149  001538  0101               	movlb	1	; () banked
  9150  00153A  5126               	movf	do_update_pwm@dc_I& (0+255),w,b
  9151  00153C  0101               	movlb	1	; () banked
  9152  00153E  5D1F               	subwf	??_do_update_pwm& (0+255),w,b
  9153  001540  0101               	movlb	1	; () banked
  9154  001542  5120               	movf	(??_do_update_pwm+1)& (0+255),w,b
  9155  001544  0A80               	xorlw	128
  9156  001546  0101               	movlb	1	; () banked
  9157  001548  6F21               	movwf	(??_do_update_pwm+2)& (0+255),b
  9158  00154A  0101               	movlb	1	; () banked
  9159  00154C  5127               	movf	(do_update_pwm@dc_I+1)& (0+255),w,b
  9160  00154E  0A80               	xorlw	128
  9161  001550  0101               	movlb	1	; () banked
  9162  001552  5921               	subwfb	(??_do_update_pwm+2)& (0+255),w,b
  9163  001554  B0D8               	btfsc	status,0,c
  9164  001556  D004               	goto	l5510
  9165                           
  9166                           ; BSR set to: 1
  9167  001558  0101               	movlb	1	; () banked
  9168  00155A  4B26               	infsnz	do_update_pwm@dc_I& (0+255),f,b
  9169  00155C  2B27               	incf	(do_update_pwm@dc_I+1)& (0+255),f,b
  9170  00155E  D000               	goto	l5510
  9171  001560                     l5510:
  9172                           
  9173                           ; BSR set to: 1
  9174                           ;Fan_Support.c: 89: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
  9175  001560  C126  F11F         	movff	do_update_pwm@dc_I,??_do_update_pwm
  9176  001564  0E03               	movlw	3
  9177  001566  0101               	movlb	1	; () banked
  9178  001568  171F               	andwf	??_do_update_pwm& (0+255),f,b
  9179  00156A  0101               	movlb	1	; () banked
  9180  00156C  391F               	swapf	??_do_update_pwm& (0+255),w,b
  9181  00156E  0BF0               	andlw	240
  9182  001570  090C               	iorlw	12
  9183  001572  6EBD               	movwf	4029,c	;volatile
  9184                           
  9185                           ; BSR set to: 1
  9186                           ;Fan_Support.c: 90: CCPR1L = (dc_I) >> 2;
  9187  001574  C126  F11F         	movff	do_update_pwm@dc_I,??_do_update_pwm
  9188  001578  C127  F120         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
  9189  00157C  0101               	movlb	1	; () banked
  9190  00157E  3520               	rlcf	(??_do_update_pwm+1)& (0+255),w,b
  9191  001580  3320               	rrcf	(??_do_update_pwm+1)& (0+255),f,b
  9192  001582  331F               	rrcf	??_do_update_pwm& (0+255),f,b
  9193  001584  0101               	movlb	1	; () banked
  9194  001586  3520               	rlcf	(??_do_update_pwm+1)& (0+255),w,b
  9195  001588  3320               	rrcf	(??_do_update_pwm+1)& (0+255),f,b
  9196  00158A  331F               	rrcf	??_do_update_pwm& (0+255),f,b
  9197  00158C  0101               	movlb	1	; () banked
  9198  00158E  511F               	movf	??_do_update_pwm& (0+255),w,b
  9199  001590  6EBE               	movwf	4030,c	;volatile
  9200                           
  9201                           ; BSR set to: 1
  9202  001592  0012               	return		;funcret
  9203  001594                     __end_of_do_update_pwm:
  9204                           	opt stack 0
  9205                           tblptru	equ	0xFF8
  9206                           tblptrh	equ	0xFF7
  9207                           tblptrl	equ	0xFF6
  9208                           tablat	equ	0xFF5
  9209                           prodh	equ	0xFF4
  9210                           prodl	equ	0xFF3
  9211                           intcon	equ	0xFF2
  9212                           intcon2	equ	0xFF1
  9213                           intcon3	equ	0xFF0
  9214                           postinc0	equ	0xFEE
  9215                           wreg	equ	0xFE8
  9216                           postdec1	equ	0xFE5
  9217                           fsr1l	equ	0xFE1
  9218                           indf2	equ	0xFDF
  9219                           postinc2	equ	0xFDE
  9220                           postdec2	equ	0xFDD
  9221                           fsr2h	equ	0xFDA
  9222                           fsr2l	equ	0xFD9
  9223                           status	equ	0xFD8
  9224                           
  9225 ;; *************** function ___lbtoft *****************
  9226 ;; Defined at:
  9227 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  9228 ;; Parameters:    Size  Location     Type
  9229 ;;  c               1    wreg     unsigned char 
  9230 ;; Auto vars:     Size  Location     Type
  9231 ;;  c               1   25[COMRAM] unsigned char 
  9232 ;; Return value:  Size  Location     Type
  9233 ;;                  3   22[COMRAM] float 
  9234 ;; Registers used:
  9235 ;;		wreg, status,2, status,0, cstack
  9236 ;; Tracked objects:
  9237 ;;		On entry : 0/0
  9238 ;;		On exit  : 0/0
  9239 ;;		Unchanged: 0/0
  9240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9241 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9242 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9244 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9245 ;;Total ram usage:        4 bytes
  9246 ;; Hardware stack levels used:    1
  9247 ;; Hardware stack levels required when called:    3
  9248 ;; This function calls:
  9249 ;;		___ftpack
  9250 ;; This function is called by:
  9251 ;;		_get_RPM
  9252 ;;		_do_update_pwm
  9253 ;; This function uses a non-reentrant model
  9254 ;;
  9255                           
  9256                           	psect	text50
  9257  001F72                     __ptext50:
  9258                           	opt stack 0
  9259  001F72                     ___lbtoft:
  9260                           	opt stack 26
  9261                           
  9262                           ; BSR set to: 1
  9263                           ;incstack = 0
  9264                           ;___lbtoft@c stored from wreg
  9265  001F72  6E1A               	movwf	___lbtoft@c,c
  9266  001F74  501A               	movf	___lbtoft@c,w,c
  9267  001F76  6E0F               	movwf	___ftpack@arg,c
  9268  001F78  6A10               	clrf	___ftpack@arg+1,c
  9269  001F7A  6A11               	clrf	___ftpack@arg+2,c
  9270  001F7C  0E8E               	movlw	142
  9271  001F7E  6E12               	movwf	___ftpack@exp,c
  9272  001F80  0E00               	movlw	0
  9273  001F82  6E13               	movwf	___ftpack@sign,c
  9274  001F84  ECCA  F00A         	call	___ftpack	;wreg free
  9275  001F88  C00F  F017         	movff	?___ftpack,?___lbtoft
  9276  001F8C  C010  F018         	movff	?___ftpack+1,?___lbtoft+1
  9277  001F90  C011  F019         	movff	?___ftpack+2,?___lbtoft+2
  9278  001F94  D000               	goto	l1383
  9279  001F96                     l1383:
  9280  001F96  0012               	return		;funcret
  9281  001F98                     __end_of___lbtoft:
  9282                           	opt stack 0
  9283                           tblptru	equ	0xFF8
  9284                           tblptrh	equ	0xFF7
  9285                           tblptrl	equ	0xFF6
  9286                           tablat	equ	0xFF5
  9287                           prodh	equ	0xFF4
  9288                           prodl	equ	0xFF3
  9289                           intcon	equ	0xFF2
  9290                           intcon2	equ	0xFF1
  9291                           intcon3	equ	0xFF0
  9292                           postinc0	equ	0xFEE
  9293                           wreg	equ	0xFE8
  9294                           postdec1	equ	0xFE5
  9295                           fsr1l	equ	0xFE1
  9296                           indf2	equ	0xFDF
  9297                           postinc2	equ	0xFDE
  9298                           postdec2	equ	0xFDD
  9299                           fsr2h	equ	0xFDA
  9300                           fsr2l	equ	0xFD9
  9301                           status	equ	0xFD8
  9302                           
  9303 ;; *************** function ___fttol *****************
  9304 ;; Defined at:
  9305 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  9306 ;; Parameters:    Size  Location     Type
  9307 ;;  f1              3   47[COMRAM] float 
  9308 ;; Auto vars:     Size  Location     Type
  9309 ;;  lval            4   57[COMRAM] unsigned long 
  9310 ;;  exp1            1   61[COMRAM] unsigned char 
  9311 ;;  sign1           1   56[COMRAM] unsigned char 
  9312 ;; Return value:  Size  Location     Type
  9313 ;;                  4   47[COMRAM] long 
  9314 ;; Registers used:
  9315 ;;		wreg, status,2, status,0
  9316 ;; Tracked objects:
  9317 ;;		On entry : 0/0
  9318 ;;		On exit  : 0/0
  9319 ;;		Unchanged: 0/0
  9320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9321 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9322 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9323 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9324 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9325 ;;Total ram usage:       15 bytes
  9326 ;; Hardware stack levels used:    1
  9327 ;; Hardware stack levels required when called:    2
  9328 ;; This function calls:
  9329 ;;		Nothing
  9330 ;; This function is called by:
  9331 ;;		_do_update_pwm
  9332 ;;		_main
  9333 ;; This function uses a non-reentrant model
  9334 ;;
  9335                           
  9336                           	psect	text51
  9337  00121A                     __ptext51:
  9338                           	opt stack 0
  9339  00121A                     ___fttol:
  9340                           	opt stack 27
  9341                           
  9342                           ;incstack = 0
  9343  00121A  C032  F034         	movff	___fttol@f1+2,??___fttol
  9344  00121E  6A35               	clrf	(??___fttol+1)& (0+255),c
  9345  001220  6A36               	clrf	(??___fttol+2)& (0+255),c
  9346  001222  3431               	rlcf	___fttol@f1+1,w,c
  9347  001224  3634               	rlcf	??___fttol& (0+255),f,c
  9348  001226  E301               	bnc	u3711
  9349  001228  8035               	bsf	(??___fttol+1)& (0+255),0,c
  9350  00122A                     u3711:
  9351  00122A  5034               	movf	??___fttol,w,c
  9352  00122C  6E3E               	movwf	___fttol@exp1,c
  9353  00122E  503E               	movf	___fttol@exp1,w,c
  9354  001230  A4D8               	btfss	status,2,c
  9355  001232  D002               	goto	l5260
  9356  001234  D039               	goto	l5284
  9357  001236  D063               	goto	l1342
  9358  001238                     l5260:
  9359  001238  0E17               	movlw	23
  9360  00123A  6E34               	movwf	??___fttol& (0+255),c
  9361  00123C  C030  F035         	movff	___fttol@f1,??___fttol+1
  9362  001240  C031  F036         	movff	___fttol@f1+1,??___fttol+2
  9363  001244  C032  F037         	movff	___fttol@f1+2,??___fttol+3
  9364  001248  2834               	incf	??___fttol,w,c
  9365  00124A  6E38               	movwf	(??___fttol+4)& (0+255),c
  9366  00124C  D004               	goto	u3730
  9367  00124E                     u3735:
  9368  00124E  90D8               	bcf	status,0,c
  9369  001250  3237               	rrcf	??___fttol+3,f,c
  9370  001252  3236               	rrcf	??___fttol+2,f,c
  9371  001254  3235               	rrcf	??___fttol+1,f,c
  9372  001256                     u3730:
  9373  001256  2E38               	decfsz	(??___fttol+4)& (0+255),f,c
  9374  001258  D7FA               	goto	u3735
  9375  00125A  5035               	movf	??___fttol+1,w,c
  9376  00125C  6E39               	movwf	___fttol@sign1,c
  9377  00125E  8E31               	bsf	___fttol@f1+1,7,c
  9378  001260  0EFF               	movlw	255
  9379  001262  1630               	andwf	___fttol@f1,f,c
  9380  001264  0EFF               	movlw	255
  9381  001266  1631               	andwf	___fttol@f1+1,f,c
  9382  001268  0E00               	movlw	0
  9383  00126A  1632               	andwf	___fttol@f1+2,f,c
  9384  00126C  5030               	movf	___fttol@f1,w,c
  9385  00126E  6E3A               	movwf	___fttol@lval,c
  9386  001270  5031               	movf	___fttol@f1+1,w,c
  9387  001272  6E3B               	movwf	___fttol@lval+1,c
  9388  001274  5032               	movf	___fttol@f1+2,w,c
  9389  001276  6E3C               	movwf	___fttol@lval+2,c
  9390  001278  6A3D               	clrf	___fttol@lval+3,c
  9391  00127A  0E8E               	movlw	142
  9392  00127C  5E3E               	subwf	___fttol@exp1,f,c
  9393  00127E  AE3E               	btfss	___fttol@exp1,7,c
  9394  001280  D010               	goto	l5282
  9395  001282  503E               	movf	___fttol@exp1,w,c
  9396  001284  0A80               	xorlw	128
  9397  001286  0F8F               	addlw	143
  9398  001288  B0D8               	btfsc	status,0,c
  9399  00128A  D003               	goto	l5278
  9400  00128C  D00D               	goto	l5284
  9401  00128E  D037               	goto	l1342
  9402  001290  D000               	goto	l5278
  9403  001292                     l5278:
  9404  001292  90D8               	bcf	status,0,c
  9405  001294  323D               	rrcf	___fttol@lval+3,f,c
  9406  001296  323C               	rrcf	___fttol@lval+2,f,c
  9407  001298  323B               	rrcf	___fttol@lval+1,f,c
  9408  00129A  323A               	rrcf	___fttol@lval,f,c
  9409  00129C  3E3E               	incfsz	___fttol@exp1,f,c
  9410  00129E  D7F9               	goto	l5278
  9411  0012A0  D019               	goto	l5292
  9412  0012A2                     l5282:
  9413  0012A2  0E17               	movlw	23
  9414  0012A4  643E               	cpfsgt	___fttol@exp1,c
  9415  0012A6  D011               	goto	l5290
  9416  0012A8                     l5284:
  9417  0012A8  0E00               	movlw	0
  9418  0012AA  6E30               	movwf	?___fttol,c
  9419  0012AC  0E00               	movlw	0
  9420  0012AE  6E31               	movwf	?___fttol+1,c
  9421  0012B0  0E00               	movlw	0
  9422  0012B2  6E32               	movwf	?___fttol+2,c
  9423  0012B4  0E00               	movlw	0
  9424  0012B6  6E33               	movwf	?___fttol+3,c
  9425  0012B8  D022               	goto	l1342
  9426  0012BA  D007               	goto	l5290
  9427  0012BC                     l5288:
  9428  0012BC  90D8               	bcf	status,0,c
  9429  0012BE  363A               	rlcf	___fttol@lval,f,c
  9430  0012C0  363B               	rlcf	___fttol@lval+1,f,c
  9431  0012C2  363C               	rlcf	___fttol@lval+2,f,c
  9432  0012C4  363D               	rlcf	___fttol@lval+3,f,c
  9433  0012C6  063E               	decf	___fttol@exp1,f,c
  9434  0012C8  D000               	goto	l5290
  9435  0012CA                     l5290:
  9436  0012CA  503E               	movf	___fttol@exp1,w,c
  9437  0012CC  B4D8               	btfsc	status,2,c
  9438  0012CE  D002               	goto	l5292
  9439  0012D0  D7F5               	goto	l5288
  9440  0012D2  D000               	goto	l5292
  9441  0012D4                     l5292:
  9442  0012D4  5039               	movf	___fttol@sign1,w,c
  9443  0012D6  B4D8               	btfsc	status,2,c
  9444  0012D8  D009               	goto	l5296
  9445  0012DA  1E3D               	comf	___fttol@lval+3,f,c
  9446  0012DC  1E3C               	comf	___fttol@lval+2,f,c
  9447  0012DE  1E3B               	comf	___fttol@lval+1,f,c
  9448  0012E0  6C3A               	negf	___fttol@lval,c
  9449  0012E2  0E00               	movlw	0
  9450  0012E4  223B               	addwfc	___fttol@lval+1,f,c
  9451  0012E6  223C               	addwfc	___fttol@lval+2,f,c
  9452  0012E8  223D               	addwfc	___fttol@lval+3,f,c
  9453  0012EA  D000               	goto	l5296
  9454  0012EC                     l5296:
  9455  0012EC  C03A  F030         	movff	___fttol@lval,?___fttol
  9456  0012F0  C03B  F031         	movff	___fttol@lval+1,?___fttol+1
  9457  0012F4  C03C  F032         	movff	___fttol@lval+2,?___fttol+2
  9458  0012F8  C03D  F033         	movff	___fttol@lval+3,?___fttol+3
  9459  0012FC  D000               	goto	l1342
  9460  0012FE                     l1342:
  9461  0012FE  0012               	return		;funcret
  9462  001300                     __end_of___fttol:
  9463                           	opt stack 0
  9464                           tblptru	equ	0xFF8
  9465                           tblptrh	equ	0xFF7
  9466                           tblptrl	equ	0xFF6
  9467                           tablat	equ	0xFF5
  9468                           prodh	equ	0xFF4
  9469                           prodl	equ	0xFF3
  9470                           intcon	equ	0xFF2
  9471                           intcon2	equ	0xFF1
  9472                           intcon3	equ	0xFF0
  9473                           postinc0	equ	0xFEE
  9474                           wreg	equ	0xFE8
  9475                           postdec1	equ	0xFE5
  9476                           fsr1l	equ	0xFE1
  9477                           indf2	equ	0xFDF
  9478                           postinc2	equ	0xFDE
  9479                           postdec2	equ	0xFDD
  9480                           fsr2h	equ	0xFDA
  9481                           fsr2l	equ	0xFD9
  9482                           status	equ	0xFD8
  9483                           
  9484 ;; *************** function ___ftmul *****************
  9485 ;; Defined at:
  9486 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  9487 ;; Parameters:    Size  Location     Type
  9488 ;;  f1              3   26[COMRAM] float 
  9489 ;;  f2              3   29[COMRAM] float 
  9490 ;; Auto vars:     Size  Location     Type
  9491 ;;  f3_as_produc    3   36[COMRAM] unsigned um
  9492 ;;  sign            1   40[COMRAM] unsigned char 
  9493 ;;  cntr            1   39[COMRAM] unsigned char 
  9494 ;;  exp             1   35[COMRAM] unsigned char 
  9495 ;; Return value:  Size  Location     Type
  9496 ;;                  3   26[COMRAM] float 
  9497 ;; Registers used:
  9498 ;;		wreg, status,2, status,0, cstack
  9499 ;; Tracked objects:
  9500 ;;		On entry : 0/0
  9501 ;;		On exit  : 0/0
  9502 ;;		Unchanged: 0/0
  9503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9504 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9505 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9506 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9507 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9508 ;;Total ram usage:       15 bytes
  9509 ;; Hardware stack levels used:    1
  9510 ;; Hardware stack levels required when called:    3
  9511 ;; This function calls:
  9512 ;;		___ftpack
  9513 ;; This function is called by:
  9514 ;;		_get_RPM
  9515 ;;		_do_update_pwm
  9516 ;; This function uses a non-reentrant model
  9517 ;;
  9518                           
  9519                           	psect	text52
  9520  001030                     __ptext52:
  9521                           	opt stack 0
  9522  001030                     ___ftmul:
  9523                           	opt stack 26
  9524                           
  9525                           ;incstack = 0
  9526  001030  C01D  F021         	movff	___ftmul@f1+2,??___ftmul
  9527  001034  6A22               	clrf	(??___ftmul+1)& (0+255),c
  9528  001036  6A23               	clrf	(??___ftmul+2)& (0+255),c
  9529  001038  341C               	rlcf	___ftmul@f1+1,w,c
  9530  00103A  3621               	rlcf	??___ftmul& (0+255),f,c
  9531  00103C  E301               	bnc	u3651
  9532  00103E  8022               	bsf	(??___ftmul+1)& (0+255),0,c
  9533  001040                     u3651:
  9534  001040  5021               	movf	??___ftmul,w,c
  9535  001042  6E24               	movwf	___ftmul@exp,c
  9536  001044  5024               	movf	___ftmul@exp,w,c
  9537  001046  A4D8               	btfss	status,2,c
  9538  001048  D002               	goto	l5212
  9539  00104A  D00E               	goto	l5214
  9540  00104C  D06C               	goto	l1321
  9541  00104E                     l5212:
  9542  00104E  C020  F021         	movff	___ftmul@f2+2,??___ftmul
  9543  001052  6A22               	clrf	(??___ftmul+1)& (0+255),c
  9544  001054  6A23               	clrf	(??___ftmul+2)& (0+255),c
  9545  001056  341F               	rlcf	___ftmul@f2+1,w,c
  9546  001058  3621               	rlcf	??___ftmul& (0+255),f,c
  9547  00105A  E301               	bnc	u3671
  9548  00105C  8022               	bsf	(??___ftmul+1)& (0+255),0,c
  9549  00105E                     u3671:
  9550  00105E  5021               	movf	??___ftmul,w,c
  9551  001060  6E29               	movwf	___ftmul@sign,c
  9552  001062  5029               	movf	___ftmul@sign,w,c
  9553  001064  A4D8               	btfss	status,2,c
  9554  001066  D007               	goto	l5218
  9555  001068                     l5214:
  9556  001068  0E00               	movlw	0
  9557  00106A  6E1B               	movwf	?___ftmul,c
  9558  00106C  0E00               	movlw	0
  9559  00106E  6E1C               	movwf	?___ftmul+1,c
  9560  001070  0E00               	movlw	0
  9561  001072  6E1D               	movwf	?___ftmul+2,c
  9562  001074  D058               	goto	l1321
  9563  001076                     l5218:
  9564  001076  5029               	movf	___ftmul@sign,w,c
  9565  001078  0F7B               	addlw	123
  9566  00107A  2624               	addwf	___ftmul@exp,f,c
  9567  00107C  C01D  F029         	movff	___ftmul@f1+2,___ftmul@sign
  9568  001080  5020               	movf	___ftmul@f2+2,w,c
  9569  001082  1A29               	xorwf	___ftmul@sign,f,c
  9570  001084  0E80               	movlw	128
  9571  001086  1629               	andwf	___ftmul@sign,f,c
  9572  001088  8E1C               	bsf	___ftmul@f1+1,7,c
  9573  00108A  8E1F               	bsf	___ftmul@f2+1,7,c
  9574  00108C  0EFF               	movlw	255
  9575  00108E  161E               	andwf	___ftmul@f2,f,c
  9576  001090  0EFF               	movlw	255
  9577  001092  161F               	andwf	___ftmul@f2+1,f,c
  9578  001094  0E00               	movlw	0
  9579  001096  1620               	andwf	___ftmul@f2+2,f,c
  9580  001098  0E00               	movlw	0
  9581  00109A  6E25               	movwf	___ftmul@f3_as_product,c
  9582  00109C  0E00               	movlw	0
  9583  00109E  6E26               	movwf	___ftmul@f3_as_product+1,c
  9584  0010A0  0E00               	movlw	0
  9585  0010A2  6E27               	movwf	___ftmul@f3_as_product+2,c
  9586  0010A4  0E07               	movlw	7
  9587  0010A6  6E28               	movwf	___ftmul@cntr,c
  9588  0010A8  D000               	goto	l5232
  9589  0010AA                     l5232:
  9590  0010AA  A01B               	btfss	___ftmul@f1,0,c
  9591  0010AC  D007               	goto	l5236
  9592  0010AE  501E               	movf	___ftmul@f2,w,c
  9593  0010B0  2625               	addwf	___ftmul@f3_as_product,f,c
  9594  0010B2  501F               	movf	___ftmul@f2+1,w,c
  9595  0010B4  2226               	addwfc	___ftmul@f3_as_product+1,f,c
  9596  0010B6  5020               	movf	___ftmul@f2+2,w,c
  9597  0010B8  2227               	addwfc	___ftmul@f3_as_product+2,f,c
  9598  0010BA  D000               	goto	l5236
  9599  0010BC                     l5236:
  9600  0010BC  90D8               	bcf	status,0,c
  9601  0010BE  321D               	rrcf	___ftmul@f1+2,f,c
  9602  0010C0  321C               	rrcf	___ftmul@f1+1,f,c
  9603  0010C2  321B               	rrcf	___ftmul@f1,f,c
  9604  0010C4  90D8               	bcf	status,0,c
  9605  0010C6  361E               	rlcf	___ftmul@f2,f,c
  9606  0010C8  361F               	rlcf	___ftmul@f2+1,f,c
  9607  0010CA  3620               	rlcf	___ftmul@f2+2,f,c
  9608  0010CC  2E28               	decfsz	___ftmul@cntr,f,c
  9609  0010CE  D7ED               	goto	l5232
  9610  0010D0  D000               	goto	l5240
  9611  0010D2                     l5240:
  9612  0010D2  0E09               	movlw	9
  9613  0010D4  6E28               	movwf	___ftmul@cntr,c
  9614  0010D6  D000               	goto	l5242
  9615  0010D8                     l5242:
  9616  0010D8  A01B               	btfss	___ftmul@f1,0,c
  9617  0010DA  D007               	goto	l5246
  9618  0010DC  501E               	movf	___ftmul@f2,w,c
  9619  0010DE  2625               	addwf	___ftmul@f3_as_product,f,c
  9620  0010E0  501F               	movf	___ftmul@f2+1,w,c
  9621  0010E2  2226               	addwfc	___ftmul@f3_as_product+1,f,c
  9622  0010E4  5020               	movf	___ftmul@f2+2,w,c
  9623  0010E6  2227               	addwfc	___ftmul@f3_as_product+2,f,c
  9624  0010E8  D000               	goto	l5246
  9625  0010EA                     l5246:
  9626  0010EA  90D8               	bcf	status,0,c
  9627  0010EC  321D               	rrcf	___ftmul@f1+2,f,c
  9628  0010EE  321C               	rrcf	___ftmul@f1+1,f,c
  9629  0010F0  321B               	rrcf	___ftmul@f1,f,c
  9630  0010F2  90D8               	bcf	status,0,c
  9631  0010F4  3227               	rrcf	___ftmul@f3_as_product+2,f,c
  9632  0010F6  3226               	rrcf	___ftmul@f3_as_product+1,f,c
  9633  0010F8  3225               	rrcf	___ftmul@f3_as_product,f,c
  9634  0010FA  2E28               	decfsz	___ftmul@cntr,f,c
  9635  0010FC  D7ED               	goto	l5242
  9636  0010FE  D000               	goto	l5250
  9637  001100                     l5250:
  9638  001100  C025  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
  9639  001104  C026  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9640  001108  C027  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9641  00110C  C024  F012         	movff	___ftmul@exp,___ftpack@exp
  9642  001110  C029  F013         	movff	___ftmul@sign,___ftpack@sign
  9643  001114  ECCA  F00A         	call	___ftpack	;wreg free
  9644  001118  C00F  F01B         	movff	?___ftpack,?___ftmul
  9645  00111C  C010  F01C         	movff	?___ftpack+1,?___ftmul+1
  9646  001120  C011  F01D         	movff	?___ftpack+2,?___ftmul+2
  9647  001124  D000               	goto	l1321
  9648  001126                     l1321:
  9649  001126  0012               	return		;funcret
  9650  001128                     __end_of___ftmul:
  9651                           	opt stack 0
  9652                           tblptru	equ	0xFF8
  9653                           tblptrh	equ	0xFF7
  9654                           tblptrl	equ	0xFF6
  9655                           tablat	equ	0xFF5
  9656                           prodh	equ	0xFF4
  9657                           prodl	equ	0xFF3
  9658                           intcon	equ	0xFF2
  9659                           intcon2	equ	0xFF1
  9660                           intcon3	equ	0xFF0
  9661                           postinc0	equ	0xFEE
  9662                           wreg	equ	0xFE8
  9663                           postdec1	equ	0xFE5
  9664                           fsr1l	equ	0xFE1
  9665                           indf2	equ	0xFDF
  9666                           postinc2	equ	0xFDE
  9667                           postdec2	equ	0xFDD
  9668                           fsr2h	equ	0xFDA
  9669                           fsr2l	equ	0xFD9
  9670                           status	equ	0xFD8
  9671                           
  9672 ;; *************** function ___ftdiv *****************
  9673 ;; Defined at:
  9674 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  9675 ;; Parameters:    Size  Location     Type
  9676 ;;  f1              3   41[COMRAM] float 
  9677 ;;  f2              3   44[COMRAM] float 
  9678 ;; Auto vars:     Size  Location     Type
  9679 ;;  f3              3   51[COMRAM] float 
  9680 ;;  sign            1   55[COMRAM] unsigned char 
  9681 ;;  exp             1   54[COMRAM] unsigned char 
  9682 ;;  cntr            1   50[COMRAM] unsigned char 
  9683 ;; Return value:  Size  Location     Type
  9684 ;;                  3   41[COMRAM] float 
  9685 ;; Registers used:
  9686 ;;		wreg, status,2, status,0, cstack
  9687 ;; Tracked objects:
  9688 ;;		On entry : 0/0
  9689 ;;		On exit  : 0/0
  9690 ;;		Unchanged: 0/0
  9691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9692 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9693 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9694 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9695 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9696 ;;Total ram usage:       15 bytes
  9697 ;; Hardware stack levels used:    1
  9698 ;; Hardware stack levels required when called:    3
  9699 ;; This function calls:
  9700 ;;		___ftpack
  9701 ;; This function is called by:
  9702 ;;		_do_update_pwm
  9703 ;;		_read_volt
  9704 ;; This function uses a non-reentrant model
  9705 ;;
  9706                           
  9707                           	psect	text53
  9708  001300                     __ptext53:
  9709                           	opt stack 0
  9710  001300                     ___ftdiv:
  9711                           	opt stack 26
  9712                           
  9713                           ;incstack = 0
  9714  001300  C02C  F030         	movff	___ftdiv@f1+2,??___ftdiv
  9715  001304  6A31               	clrf	(??___ftdiv+1)& (0+255),c
  9716  001306  6A32               	clrf	(??___ftdiv+2)& (0+255),c
  9717  001308  342B               	rlcf	___ftdiv@f1+1,w,c
  9718  00130A  3630               	rlcf	??___ftdiv& (0+255),f,c
  9719  00130C  E301               	bnc	u3601
  9720  00130E  8031               	bsf	(??___ftdiv+1)& (0+255),0,c
  9721  001310                     u3601:
  9722  001310  5030               	movf	??___ftdiv,w,c
  9723  001312  6E37               	movwf	___ftdiv@exp,c
  9724  001314  5037               	movf	___ftdiv@exp,w,c
  9725  001316  A4D8               	btfss	status,2,c
  9726  001318  D002               	goto	l5166
  9727  00131A  D00E               	goto	l5168
  9728  00131C  D061               	goto	l1306
  9729  00131E                     l5166:
  9730  00131E  C02F  F030         	movff	___ftdiv@f2+2,??___ftdiv
  9731  001322  6A31               	clrf	(??___ftdiv+1)& (0+255),c
  9732  001324  6A32               	clrf	(??___ftdiv+2)& (0+255),c
  9733  001326  342E               	rlcf	___ftdiv@f2+1,w,c
  9734  001328  3630               	rlcf	??___ftdiv& (0+255),f,c
  9735  00132A  E301               	bnc	u3621
  9736  00132C  8031               	bsf	(??___ftdiv+1)& (0+255),0,c
  9737  00132E                     u3621:
  9738  00132E  5030               	movf	??___ftdiv,w,c
  9739  001330  6E38               	movwf	___ftdiv@sign,c
  9740  001332  5038               	movf	___ftdiv@sign,w,c
  9741  001334  A4D8               	btfss	status,2,c
  9742  001336  D007               	goto	l5172
  9743  001338                     l5168:
  9744  001338  0E00               	movlw	0
  9745  00133A  6E2A               	movwf	?___ftdiv,c
  9746  00133C  0E00               	movlw	0
  9747  00133E  6E2B               	movwf	?___ftdiv+1,c
  9748  001340  0E00               	movlw	0
  9749  001342  6E2C               	movwf	?___ftdiv+2,c
  9750  001344  D04D               	goto	l1306
  9751  001346                     l5172:
  9752  001346  0E00               	movlw	0
  9753  001348  6E34               	movwf	___ftdiv@f3,c
  9754  00134A  0E00               	movlw	0
  9755  00134C  6E35               	movwf	___ftdiv@f3+1,c
  9756  00134E  0E00               	movlw	0
  9757  001350  6E36               	movwf	___ftdiv@f3+2,c
  9758  001352  5038               	movf	___ftdiv@sign,w,c
  9759  001354  0F89               	addlw	137
  9760  001356  5E37               	subwf	___ftdiv@exp,f,c
  9761  001358  C02C  F038         	movff	___ftdiv@f1+2,___ftdiv@sign
  9762  00135C  502F               	movf	___ftdiv@f2+2,w,c
  9763  00135E  1A38               	xorwf	___ftdiv@sign,f,c
  9764  001360  0E80               	movlw	128
  9765  001362  1638               	andwf	___ftdiv@sign,f,c
  9766  001364  8E2B               	bsf	___ftdiv@f1+1,7,c
  9767  001366  0EFF               	movlw	255
  9768  001368  162A               	andwf	___ftdiv@f1,f,c
  9769  00136A  0EFF               	movlw	255
  9770  00136C  162B               	andwf	___ftdiv@f1+1,f,c
  9771  00136E  0E00               	movlw	0
  9772  001370  162C               	andwf	___ftdiv@f1+2,f,c
  9773  001372  8E2E               	bsf	___ftdiv@f2+1,7,c
  9774  001374  0EFF               	movlw	255
  9775  001376  162D               	andwf	___ftdiv@f2,f,c
  9776  001378  0EFF               	movlw	255
  9777  00137A  162E               	andwf	___ftdiv@f2+1,f,c
  9778  00137C  0E00               	movlw	0
  9779  00137E  162F               	andwf	___ftdiv@f2+2,f,c
  9780  001380  0E18               	movlw	24
  9781  001382  6E33               	movwf	___ftdiv@cntr,c
  9782  001384  D000               	goto	l5192
  9783  001386                     l5192:
  9784  001386  90D8               	bcf	status,0,c
  9785  001388  3634               	rlcf	___ftdiv@f3,f,c
  9786  00138A  3635               	rlcf	___ftdiv@f3+1,f,c
  9787  00138C  3636               	rlcf	___ftdiv@f3+2,f,c
  9788  00138E  502D               	movf	___ftdiv@f2,w,c
  9789  001390  5C2A               	subwf	___ftdiv@f1,w,c
  9790  001392  502E               	movf	___ftdiv@f2+1,w,c
  9791  001394  582B               	subwfb	___ftdiv@f1+1,w,c
  9792  001396  502F               	movf	___ftdiv@f2+2,w,c
  9793  001398  582C               	subwfb	___ftdiv@f1+2,w,c
  9794  00139A  A0D8               	btfss	status,0,c
  9795  00139C  D007               	goto	l1309
  9796  00139E  502D               	movf	___ftdiv@f2,w,c
  9797  0013A0  5E2A               	subwf	___ftdiv@f1,f,c
  9798  0013A2  502E               	movf	___ftdiv@f2+1,w,c
  9799  0013A4  5A2B               	subwfb	___ftdiv@f1+1,f,c
  9800  0013A6  502F               	movf	___ftdiv@f2+2,w,c
  9801  0013A8  5A2C               	subwfb	___ftdiv@f1+2,f,c
  9802  0013AA  8034               	bsf	___ftdiv@f3,0,c
  9803  0013AC                     l1309:
  9804  0013AC  90D8               	bcf	status,0,c
  9805  0013AE  362A               	rlcf	___ftdiv@f1,f,c
  9806  0013B0  362B               	rlcf	___ftdiv@f1+1,f,c
  9807  0013B2  362C               	rlcf	___ftdiv@f1+2,f,c
  9808  0013B4  2E33               	decfsz	___ftdiv@cntr,f,c
  9809  0013B6  D7E7               	goto	l5192
  9810  0013B8  D000               	goto	l5202
  9811  0013BA                     l5202:
  9812  0013BA  C034  F00F         	movff	___ftdiv@f3,___ftpack@arg
  9813  0013BE  C035  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9814  0013C2  C036  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9815  0013C6  C037  F012         	movff	___ftdiv@exp,___ftpack@exp
  9816  0013CA  C038  F013         	movff	___ftdiv@sign,___ftpack@sign
  9817  0013CE  ECCA  F00A         	call	___ftpack	;wreg free
  9818  0013D2  C00F  F02A         	movff	?___ftpack,?___ftdiv
  9819  0013D6  C010  F02B         	movff	?___ftpack+1,?___ftdiv+1
  9820  0013DA  C011  F02C         	movff	?___ftpack+2,?___ftdiv+2
  9821  0013DE  D000               	goto	l1306
  9822  0013E0                     l1306:
  9823  0013E0  0012               	return		;funcret
  9824  0013E2                     __end_of___ftdiv:
  9825                           	opt stack 0
  9826                           tblptru	equ	0xFF8
  9827                           tblptrh	equ	0xFF7
  9828                           tblptrl	equ	0xFF6
  9829                           tablat	equ	0xFF5
  9830                           prodh	equ	0xFF4
  9831                           prodl	equ	0xFF3
  9832                           intcon	equ	0xFF2
  9833                           intcon2	equ	0xFF1
  9834                           intcon3	equ	0xFF0
  9835                           postinc0	equ	0xFEE
  9836                           wreg	equ	0xFE8
  9837                           postdec1	equ	0xFE5
  9838                           fsr1l	equ	0xFE1
  9839                           indf2	equ	0xFDF
  9840                           postinc2	equ	0xFDE
  9841                           postdec2	equ	0xFDD
  9842                           fsr2h	equ	0xFDA
  9843                           fsr2l	equ	0xFD9
  9844                           status	equ	0xFD8
  9845                           
  9846 ;; *************** function ___ftpack *****************
  9847 ;; Defined at:
  9848 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  9849 ;; Parameters:    Size  Location     Type
  9850 ;;  arg             3   14[COMRAM] unsigned um
  9851 ;;  exp             1   17[COMRAM] unsigned char 
  9852 ;;  sign            1   18[COMRAM] unsigned char 
  9853 ;; Auto vars:     Size  Location     Type
  9854 ;;		None
  9855 ;; Return value:  Size  Location     Type
  9856 ;;                  3   14[COMRAM] float 
  9857 ;; Registers used:
  9858 ;;		wreg, status,2, status,0
  9859 ;; Tracked objects:
  9860 ;;		On entry : 0/0
  9861 ;;		On exit  : 0/0
  9862 ;;		Unchanged: 0/0
  9863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9864 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9866 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9867 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9868 ;;Total ram usage:        8 bytes
  9869 ;; Hardware stack levels used:    1
  9870 ;; Hardware stack levels required when called:    2
  9871 ;; This function calls:
  9872 ;;		Nothing
  9873 ;; This function is called by:
  9874 ;;		___ftdiv
  9875 ;;		___ftmul
  9876 ;;		___lbtoft
  9877 ;; This function uses a non-reentrant model
  9878 ;;
  9879                           
  9880                           	psect	text54
  9881  001594                     __ptext54:
  9882                           	opt stack 0
  9883  001594                     ___ftpack:
  9884                           	opt stack 26
  9885                           
  9886                           ;incstack = 0
  9887  001594  5012               	movf	___ftpack@exp,w,c
  9888  001596  B4D8               	btfsc	status,2,c
  9889  001598  D005               	goto	l5096
  9890  00159A  500F               	movf	___ftpack@arg,w,c
  9891  00159C  1010               	iorwf	___ftpack@arg+1,w,c
  9892  00159E  1011               	iorwf	___ftpack@arg+2,w,c
  9893  0015A0  A4D8               	btfss	status,2,c
  9894  0015A2  D00E               	goto	l5102
  9895  0015A4                     l5096:
  9896  0015A4  0E00               	movlw	0
  9897  0015A6  6E0F               	movwf	?___ftpack,c
  9898  0015A8  0E00               	movlw	0
  9899  0015AA  6E10               	movwf	?___ftpack+1,c
  9900  0015AC  0E00               	movlw	0
  9901  0015AE  6E11               	movwf	?___ftpack+2,c
  9902  0015B0  D053               	goto	l1234
  9903  0015B2  D006               	goto	l5102
  9904  0015B4                     l5100:
  9905  0015B4  2A12               	incf	___ftpack@exp,f,c
  9906  0015B6  90D8               	bcf	status,0,c
  9907  0015B8  3211               	rrcf	___ftpack@arg+2,f,c
  9908  0015BA  3210               	rrcf	___ftpack@arg+1,f,c
  9909  0015BC  320F               	rrcf	___ftpack@arg,f,c
  9910  0015BE  D000               	goto	l5102
  9911  0015C0                     l5102:
  9912  0015C0  0E00               	movlw	0
  9913  0015C2  140F               	andwf	___ftpack@arg,w,c
  9914  0015C4  6E14               	movwf	??___ftpack& (0+255),c
  9915  0015C6  0E00               	movlw	0
  9916  0015C8  1410               	andwf	___ftpack@arg+1,w,c
  9917  0015CA  6E15               	movwf	(??___ftpack+1)& (0+255),c
  9918  0015CC  0EFE               	movlw	254
  9919  0015CE  1411               	andwf	___ftpack@arg+2,w,c
  9920  0015D0  6E16               	movwf	(??___ftpack+2)& (0+255),c
  9921  0015D2  5014               	movf	??___ftpack,w,c
  9922  0015D4  1015               	iorwf	??___ftpack+1,w,c
  9923  0015D6  1016               	iorwf	??___ftpack+2,w,c
  9924  0015D8  B4D8               	btfsc	status,2,c
  9925  0015DA  D00E               	goto	l5108
  9926  0015DC  D7EB               	goto	l5100
  9927  0015DE  D00C               	goto	l5108
  9928  0015E0                     l5104:
  9929  0015E0  2A12               	incf	___ftpack@exp,f,c
  9930  0015E2  0E01               	movlw	1
  9931  0015E4  260F               	addwf	___ftpack@arg,f,c
  9932  0015E6  0E00               	movlw	0
  9933  0015E8  2210               	addwfc	___ftpack@arg+1,f,c
  9934  0015EA  0E00               	movlw	0
  9935  0015EC  2211               	addwfc	___ftpack@arg+2,f,c
  9936  0015EE  90D8               	bcf	status,0,c
  9937  0015F0  3211               	rrcf	___ftpack@arg+2,f,c
  9938  0015F2  3210               	rrcf	___ftpack@arg+1,f,c
  9939  0015F4  320F               	rrcf	___ftpack@arg,f,c
  9940  0015F6  D000               	goto	l5108
  9941  0015F8                     l5108:
  9942  0015F8  0E00               	movlw	0
  9943  0015FA  140F               	andwf	___ftpack@arg,w,c
  9944  0015FC  6E14               	movwf	??___ftpack& (0+255),c
  9945  0015FE  0E00               	movlw	0
  9946  001600  1410               	andwf	___ftpack@arg+1,w,c
  9947  001602  6E15               	movwf	(??___ftpack+1)& (0+255),c
  9948  001604  0EFF               	movlw	255
  9949  001606  1411               	andwf	___ftpack@arg+2,w,c
  9950  001608  6E16               	movwf	(??___ftpack+2)& (0+255),c
  9951  00160A  5014               	movf	??___ftpack,w,c
  9952  00160C  1015               	iorwf	??___ftpack+1,w,c
  9953  00160E  1016               	iorwf	??___ftpack+2,w,c
  9954  001610  B4D8               	btfsc	status,2,c
  9955  001612  D008               	goto	l5112
  9956  001614  D7E5               	goto	l5104
  9957  001616  D006               	goto	l5112
  9958  001618                     l5110:
  9959  001618  0612               	decf	___ftpack@exp,f,c
  9960  00161A  90D8               	bcf	status,0,c
  9961  00161C  360F               	rlcf	___ftpack@arg,f,c
  9962  00161E  3610               	rlcf	___ftpack@arg+1,f,c
  9963  001620  3611               	rlcf	___ftpack@arg+2,f,c
  9964  001622  D000               	goto	l5112
  9965  001624                     l5112:
  9966  001624  BE10               	btfsc	___ftpack@arg+1,7,c
  9967  001626  D004               	goto	l1245
  9968  001628  0E02               	movlw	2
  9969  00162A  6012               	cpfslt	___ftpack@exp,c
  9970  00162C  D7F5               	goto	l5110
  9971  00162E  D000               	goto	l1245
  9972  001630                     l1245:
  9973  001630  B012               	btfsc	___ftpack@exp,0,c
  9974  001632  D002               	goto	l5118
  9975  001634  9E10               	bcf	___ftpack@arg+1,7,c
  9976  001636  D000               	goto	l5118
  9977  001638                     l5118:
  9978  001638  90D8               	bcf	status,0,c
  9979  00163A  3212               	rrcf	___ftpack@exp,f,c
  9980  00163C  5012               	movf	___ftpack@exp,w,c
  9981  00163E  1211               	iorwf	___ftpack@arg+2,f,c
  9982  001640  5013               	movf	___ftpack@sign,w,c
  9983  001642  B4D8               	btfsc	status,2,c
  9984  001644  D002               	goto	l5124
  9985  001646  8E11               	bsf	___ftpack@arg+2,7,c
  9986  001648  D000               	goto	l5124
  9987  00164A                     l5124:
  9988  00164A  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  9989  00164E  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  9990  001652  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  9991  001656  D000               	goto	l1234
  9992  001658                     l1234:
  9993  001658  0012               	return		;funcret
  9994  00165A                     __end_of___ftpack:
  9995                           	opt stack 0
  9996                           tblptru	equ	0xFF8
  9997                           tblptrh	equ	0xFF7
  9998                           tblptrl	equ	0xFF6
  9999                           tablat	equ	0xFF5
 10000                           prodh	equ	0xFF4
 10001                           prodl	equ	0xFF3
 10002                           intcon	equ	0xFF2
 10003                           intcon2	equ	0xFF1
 10004                           intcon3	equ	0xFF0
 10005                           postinc0	equ	0xFEE
 10006                           wreg	equ	0xFE8
 10007                           postdec1	equ	0xFE5
 10008                           fsr1l	equ	0xFE1
 10009                           indf2	equ	0xFDF
 10010                           postinc2	equ	0xFDE
 10011                           postdec2	equ	0xFDD
 10012                           fsr2h	equ	0xFDA
 10013                           fsr2l	equ	0xFD9
 10014                           status	equ	0xFD8
 10015                           
 10016 ;; *************** function _Wait_One_Sec *****************
 10017 ;; Defined at:
 10018 ;;		line 88 in file "utils.c"
 10019 ;; Parameters:    Size  Location     Type
 10020 ;;		None
 10021 ;; Auto vars:     Size  Location     Type
 10022 ;;  k               2   14[COMRAM] int 
 10023 ;; Return value:  Size  Location     Type
 10024 ;;		None               void
 10025 ;; Registers used:
 10026 ;;		wreg, status,2, status,0
 10027 ;; Tracked objects:
 10028 ;;		On entry : 0/0
 10029 ;;		On exit  : 0/0
 10030 ;;		Unchanged: 0/0
 10031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10033 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10035 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10036 ;;Total ram usage:        2 bytes
 10037 ;; Hardware stack levels used:    1
 10038 ;; Hardware stack levels required when called:    2
 10039 ;; This function calls:
 10040 ;;		Nothing
 10041 ;; This function is called by:
 10042 ;;		_Do_Beep
 10043 ;;		_Do_Beep_Good
 10044 ;;		_Do_Beep_Bad
 10045 ;; This function uses a non-reentrant model
 10046 ;;
 10047                           
 10048                           	psect	text55
 10049  001FFA                     __ptext55:
 10050                           	opt stack 0
 10051  001FFA                     _Wait_One_Sec:
 10052                           	opt stack 26
 10053                           
 10054                           ;utils.c: 90: for (int k=0;k<0xffff;k++);
 10055                           
 10056                           ;incstack = 0
 10057  001FFA  0E00               	movlw	0
 10058  001FFC  6E10               	movwf	Wait_One_Sec@k+1,c
 10059  001FFE  0E00               	movlw	0
 10060  002000  6E0F               	movwf	Wait_One_Sec@k,c
 10061  002002                     l2150:
 10062  002002  280F               	incf	Wait_One_Sec@k,w,c
 10063  002004  E105               	bnz	l2154
 10064  002006  2810               	incf	Wait_One_Sec@k+1,w,c
 10065  002008  B4D8               	btfsc	status,2,c
 10066  00200A  D006               	goto	l791
 10067  00200C  D001               	goto	l2154
 10068  00200E  D004               	goto	l791
 10069  002010                     l2154:
 10070  002010  4A0F               	infsnz	Wait_One_Sec@k,f,c
 10071  002012  2A10               	incf	Wait_One_Sec@k+1,f,c
 10072  002014  D7F6               	goto	l2150
 10073  002016  D7FC               	goto	l2154
 10074  002018                     l791:
 10075  002018  0012               	return		;funcret
 10076  00201A                     __end_of_Wait_One_Sec:
 10077                           	opt stack 0
 10078                           tblptru	equ	0xFF8
 10079                           tblptrh	equ	0xFF7
 10080                           tblptrl	equ	0xFF6
 10081                           tablat	equ	0xFF5
 10082                           prodh	equ	0xFF4
 10083                           prodl	equ	0xFF3
 10084                           intcon	equ	0xFF2
 10085                           intcon2	equ	0xFF1
 10086                           intcon3	equ	0xFF0
 10087                           postinc0	equ	0xFEE
 10088                           wreg	equ	0xFE8
 10089                           postdec1	equ	0xFE5
 10090                           fsr1l	equ	0xFE1
 10091                           indf2	equ	0xFDF
 10092                           postinc2	equ	0xFDE
 10093                           postdec2	equ	0xFDD
 10094                           fsr2h	equ	0xFDA
 10095                           fsr2l	equ	0xFD9
 10096                           status	equ	0xFD8
 10097                           
 10098 ;; *************** function _Deactivate_Buzzer *****************
 10099 ;; Defined at:
 10100 ;;		line 125 in file "utils.c"
 10101 ;; Parameters:    Size  Location     Type
 10102 ;;		None
 10103 ;; Auto vars:     Size  Location     Type
 10104 ;;		None
 10105 ;; Return value:  Size  Location     Type
 10106 ;;		None               void
 10107 ;; Registers used:
 10108 ;;		wreg, status,2
 10109 ;; Tracked objects:
 10110 ;;		On entry : 0/0
 10111 ;;		On exit  : 0/0
 10112 ;;		Unchanged: 0/0
 10113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10117 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10118 ;;Total ram usage:        0 bytes
 10119 ;; Hardware stack levels used:    1
 10120 ;; Hardware stack levels required when called:    2
 10121 ;; This function calls:
 10122 ;;		Nothing
 10123 ;; This function is called by:
 10124 ;;		_Do_Beep
 10125 ;;		_Do_Beep_Good
 10126 ;;		_Do_Beep_Bad
 10127 ;; This function uses a non-reentrant model
 10128 ;;
 10129                           
 10130                           	psect	text56
 10131  002216                     __ptext56:
 10132                           	opt stack 0
 10133  002216                     _Deactivate_Buzzer:
 10134                           	opt stack 26
 10135                           
 10136                           ;utils.c: 127: CCP2CON = 0x0;
 10137                           
 10138                           ;incstack = 0
 10139  002216  0E00               	movlw	0
 10140  002218  6EBA               	movwf	4026,c	;volatile
 10141                           
 10142                           ;utils.c: 128: PORTBbits.RB3 = 0;
 10143  00221A  9681               	bcf	3969,3,c	;volatile
 10144  00221C  0012               	return		;funcret
 10145  00221E                     __end_of_Deactivate_Buzzer:
 10146                           	opt stack 0
 10147                           tblptru	equ	0xFF8
 10148                           tblptrh	equ	0xFF7
 10149                           tblptrl	equ	0xFF6
 10150                           tablat	equ	0xFF5
 10151                           prodh	equ	0xFF4
 10152                           prodl	equ	0xFF3
 10153                           intcon	equ	0xFF2
 10154                           intcon2	equ	0xFF1
 10155                           intcon3	equ	0xFF0
 10156                           postinc0	equ	0xFEE
 10157                           wreg	equ	0xFE8
 10158                           postdec1	equ	0xFE5
 10159                           fsr1l	equ	0xFE1
 10160                           indf2	equ	0xFDF
 10161                           postinc2	equ	0xFDE
 10162                           postdec2	equ	0xFDD
 10163                           fsr2h	equ	0xFDA
 10164                           fsr2l	equ	0xFD9
 10165                           status	equ	0xFD8
 10166                           
 10167 ;; *************** function _Activate_Buzzer *****************
 10168 ;; Defined at:
 10169 ;;		line 93 in file "utils.c"
 10170 ;; Parameters:    Size  Location     Type
 10171 ;;		None
 10172 ;; Auto vars:     Size  Location     Type
 10173 ;;		None
 10174 ;; Return value:  Size  Location     Type
 10175 ;;		None               void
 10176 ;; Registers used:
 10177 ;;		wreg, status,2
 10178 ;; Tracked objects:
 10179 ;;		On entry : 0/0
 10180 ;;		On exit  : 0/0
 10181 ;;		Unchanged: 0/0
 10182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10186 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10187 ;;Total ram usage:        0 bytes
 10188 ;; Hardware stack levels used:    1
 10189 ;; Hardware stack levels required when called:    2
 10190 ;; This function calls:
 10191 ;;		Nothing
 10192 ;; This function is called by:
 10193 ;;		_Do_Beep
 10194 ;; This function uses a non-reentrant model
 10195 ;;
 10196                           
 10197                           	psect	text57
 10198  00215C                     __ptext57:
 10199                           	opt stack 0
 10200  00215C                     _Activate_Buzzer:
 10201                           	opt stack 26
 10202                           
 10203                           ;utils.c: 95: PR2 = 0b11111001 ;
 10204                           
 10205                           ;incstack = 0
 10206  00215C  0EF9               	movlw	249
 10207  00215E  6ECB               	movwf	4043,c	;volatile
 10208                           
 10209                           ;utils.c: 96: T2CON = 0b00000101 ;
 10210  002160  0E05               	movlw	5
 10211  002162  6ECA               	movwf	4042,c	;volatile
 10212                           
 10213                           ;utils.c: 97: CCPR2L = 0b01001010 ;
 10214  002164  0E4A               	movlw	74
 10215  002166  6EBB               	movwf	4027,c	;volatile
 10216                           
 10217                           ;utils.c: 98: CCP2CON = 0b00111100 ;
 10218  002168  0E3C               	movlw	60
 10219  00216A  6EBA               	movwf	4026,c	;volatile
 10220  00216C  0012               	return		;funcret
 10221  00216E                     __end_of_Activate_Buzzer:
 10222                           	opt stack 0
 10223                           tblptru	equ	0xFF8
 10224                           tblptrh	equ	0xFF7
 10225                           tblptrl	equ	0xFF6
 10226                           tablat	equ	0xFF5
 10227                           prodh	equ	0xFF4
 10228                           prodl	equ	0xFF3
 10229                           intcon	equ	0xFF2
 10230                           intcon2	equ	0xFF1
 10231                           intcon3	equ	0xFF0
 10232                           postinc0	equ	0xFEE
 10233                           wreg	equ	0xFE8
 10234                           postdec1	equ	0xFE5
 10235                           fsr1l	equ	0xFE1
 10236                           indf2	equ	0xFDF
 10237                           postinc2	equ	0xFDE
 10238                           postdec2	equ	0xFDD
 10239                           fsr2h	equ	0xFDA
 10240                           fsr2l	equ	0xFD9
 10241                           status	equ	0xFD8
 10242                           
 10243 ;; *************** function _DS3231_Setup_Time *****************
 10244 ;; Defined at:
 10245 ;;		line 62 in file "I2C_Support.c"
 10246 ;; Parameters:    Size  Location     Type
 10247 ;;		None
 10248 ;; Auto vars:     Size  Location     Type
 10249 ;;  Device          1   17[COMRAM] unsigned char 
 10250 ;;  Address         1   16[COMRAM] unsigned char 
 10251 ;; Return value:  Size  Location     Type
 10252 ;;		None               void
 10253 ;; Registers used:
 10254 ;;		wreg, status,2, status,0, cstack
 10255 ;; Tracked objects:
 10256 ;;		On entry : 0/0
 10257 ;;		On exit  : 0/0
 10258 ;;		Unchanged: 0/0
 10259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10261 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10263 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10264 ;;Total ram usage:        2 bytes
 10265 ;; Hardware stack levels used:    1
 10266 ;; Hardware stack levels required when called:    4
 10267 ;; This function calls:
 10268 ;;		_I2C_Start
 10269 ;;		_I2C_Stop
 10270 ;;		_I2C_Write
 10271 ;; This function is called by:
 10272 ;;		_main
 10273 ;; This function uses a non-reentrant model
 10274 ;;
 10275                           
 10276                           	psect	text58
 10277  001AB0                     __ptext58:
 10278                           	opt stack 0
 10279  001AB0                     _DS3231_Setup_Time:
 10280                           	opt stack 26
 10281                           
 10282                           ;I2C_Support.c: 64: char Device = 0x68;
 10283                           
 10284                           ;incstack = 0
 10285  001AB0  0E68               	movlw	104
 10286  001AB2  6E12               	movwf	DS3231_Setup_Time@Device,c
 10287                           
 10288                           ;I2C_Support.c: 65: char Address = 0x00;
 10289  001AB4  0E00               	movlw	0
 10290  001AB6  6E11               	movwf	DS3231_Setup_Time@Address,c
 10291                           
 10292                           ;I2C_Support.c: 66: I2C_Start();
 10293  001AB8  ECC0  F010         	call	_I2C_Start	;wreg free
 10294                           
 10295                           ;I2C_Support.c: 67: second = 0x06;
 10296  001ABC  0E06               	movlw	6
 10297  001ABE  6E64               	movwf	_second,c
 10298                           
 10299                           ;I2C_Support.c: 68: minute = 0x05;
 10300  001AC0  0E05               	movlw	5
 10301  001AC2  6E61               	movwf	_minute,c
 10302                           
 10303                           ;I2C_Support.c: 69: hour = 0x04;
 10304  001AC4  0E04               	movlw	4
 10305  001AC6  6E60               	movwf	_hour,c
 10306                           
 10307                           ;I2C_Support.c: 70: dow = 0x05;
 10308  001AC8  0E05               	movlw	5
 10309  001ACA  6E5D               	movwf	_dow,c
 10310                           
 10311                           ;I2C_Support.c: 71: day = 0x18;
 10312  001ACC  0E18               	movlw	24
 10313  001ACE  6E5C               	movwf	_day,c
 10314                           
 10315                           ;I2C_Support.c: 72: month = 0x10;
 10316  001AD0  0E10               	movlw	16
 10317  001AD2  6E62               	movwf	_month,c
 10318                           
 10319                           ;I2C_Support.c: 73: year = 0x22;
 10320  001AD4  0E22               	movlw	34
 10321  001AD6  6E6E               	movwf	_year,c
 10322                           
 10323                           ;I2C_Support.c: 74: I2C_Write((Device << 1) | 0);
 10324  001AD8  5012               	movf	DS3231_Setup_Time@Device,w,c
 10325  001ADA  2412               	addwf	DS3231_Setup_Time@Device,w,c
 10326  001ADC  EC22  F00F         	call	_I2C_Write
 10327                           
 10328                           ;I2C_Support.c: 75: I2C_Write(second);
 10329  001AE0  5064               	movf	_second,w,c
 10330  001AE2  EC22  F00F         	call	_I2C_Write
 10331                           
 10332                           ;I2C_Support.c: 76: I2C_Write(minute);
 10333  001AE6  5061               	movf	_minute,w,c
 10334  001AE8  EC22  F00F         	call	_I2C_Write
 10335                           
 10336                           ;I2C_Support.c: 77: I2C_Write(hour);
 10337  001AEC  5060               	movf	_hour,w,c
 10338  001AEE  EC22  F00F         	call	_I2C_Write
 10339                           
 10340                           ;I2C_Support.c: 78: I2C_Write(dow);
 10341  001AF2  505D               	movf	_dow,w,c
 10342  001AF4  EC22  F00F         	call	_I2C_Write
 10343                           
 10344                           ;I2C_Support.c: 79: I2C_Write(day);
 10345  001AF8  505C               	movf	_day,w,c
 10346  001AFA  EC22  F00F         	call	_I2C_Write
 10347                           
 10348                           ;I2C_Support.c: 80: I2C_Write(month);
 10349  001AFE  5062               	movf	_month,w,c
 10350  001B00  EC22  F00F         	call	_I2C_Write
 10351                           
 10352                           ;I2C_Support.c: 81: I2C_Write(year);
 10353  001B04  506E               	movf	_year,w,c
 10354  001B06  EC22  F00F         	call	_I2C_Write
 10355                           
 10356                           ;I2C_Support.c: 82: I2C_Stop();
 10357  001B0A  ECB7  F010         	call	_I2C_Stop	;wreg free
 10358  001B0E  0012               	return		;funcret
 10359  001B10                     __end_of_DS3231_Setup_Time:
 10360                           	opt stack 0
 10361                           tblptru	equ	0xFF8
 10362                           tblptrh	equ	0xFF7
 10363                           tblptrl	equ	0xFF6
 10364                           tablat	equ	0xFF5
 10365                           prodh	equ	0xFF4
 10366                           prodl	equ	0xFF3
 10367                           intcon	equ	0xFF2
 10368                           intcon2	equ	0xFF1
 10369                           intcon3	equ	0xFF0
 10370                           postinc0	equ	0xFEE
 10371                           wreg	equ	0xFE8
 10372                           postdec1	equ	0xFE5
 10373                           fsr1l	equ	0xFE1
 10374                           indf2	equ	0xFDF
 10375                           postinc2	equ	0xFDE
 10376                           postdec2	equ	0xFDD
 10377                           fsr2h	equ	0xFDA
 10378                           fsr2l	equ	0xFD9
 10379                           status	equ	0xFD8
 10380                           
 10381 ;; *************** function _DS3231_Read_Time *****************
 10382 ;; Defined at:
 10383 ;;		line 43 in file "I2C_Support.c"
 10384 ;; Parameters:    Size  Location     Type
 10385 ;;		None
 10386 ;; Auto vars:     Size  Location     Type
 10387 ;;  Device          1   18[COMRAM] unsigned char 
 10388 ;;  Address         1   17[COMRAM] unsigned char 
 10389 ;; Return value:  Size  Location     Type
 10390 ;;		None               void
 10391 ;; Registers used:
 10392 ;;		wreg, status,2, status,0, cstack
 10393 ;; Tracked objects:
 10394 ;;		On entry : 0/0
 10395 ;;		On exit  : 0/0
 10396 ;;		Unchanged: 0/0
 10397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10399 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10401 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10402 ;;Total ram usage:        2 bytes
 10403 ;; Hardware stack levels used:    1
 10404 ;; Hardware stack levels required when called:    5
 10405 ;; This function calls:
 10406 ;;		_I2C_ReStart
 10407 ;;		_I2C_Read
 10408 ;;		_I2C_Start
 10409 ;;		_I2C_Stop
 10410 ;;		_I2C_Write
 10411 ;; This function is called by:
 10412 ;;		_main
 10413 ;; This function uses a non-reentrant model
 10414 ;;
 10415                           
 10416                           	psect	text59
 10417  001A4C                     __ptext59:
 10418                           	opt stack 0
 10419  001A4C                     _DS3231_Read_Time:
 10420                           	opt stack 25
 10421                           
 10422                           ;I2C_Support.c: 45: char Device = 0x68;
 10423                           
 10424                           ;incstack = 0
 10425  001A4C  0E68               	movlw	104
 10426  001A4E  6E13               	movwf	DS3231_Read_Time@Device,c
 10427                           
 10428                           ;I2C_Support.c: 46: char Address = 0x00;
 10429  001A50  0E00               	movlw	0
 10430  001A52  6E12               	movwf	DS3231_Read_Time@Address,c
 10431                           
 10432                           ;I2C_Support.c: 47: I2C_Start();
 10433  001A54  ECC0  F010         	call	_I2C_Start	;wreg free
 10434                           
 10435                           ;I2C_Support.c: 48: I2C_Write((Device << 1) | 0);
 10436  001A58  5013               	movf	DS3231_Read_Time@Device,w,c
 10437  001A5A  2413               	addwf	DS3231_Read_Time@Device,w,c
 10438  001A5C  EC22  F00F         	call	_I2C_Write
 10439                           
 10440                           ;I2C_Support.c: 49: I2C_Write(Address);
 10441  001A60  5012               	movf	DS3231_Read_Time@Address,w,c
 10442  001A62  EC22  F00F         	call	_I2C_Write
 10443                           
 10444                           ;I2C_Support.c: 50: I2C_ReStart();
 10445  001A66  EC7C  F010         	call	_I2C_ReStart	;wreg free
 10446                           
 10447                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 1);
 10448  001A6A  80D8               	bsf	status,0,c
 10449  001A6C  3413               	rlcf	DS3231_Read_Time@Device,w,c
 10450  001A6E  EC22  F00F         	call	_I2C_Write
 10451                           
 10452                           ;I2C_Support.c: 52: second = I2C_Read(1);
 10453  001A72  0E01               	movlw	1
 10454  001A74  EC9E  F00E         	call	_I2C_Read
 10455  001A78  6E64               	movwf	_second,c
 10456                           
 10457                           ;I2C_Support.c: 53: minute = I2C_Read(1);
 10458  001A7A  0E01               	movlw	1
 10459  001A7C  EC9E  F00E         	call	_I2C_Read
 10460  001A80  6E61               	movwf	_minute,c
 10461                           
 10462                           ;I2C_Support.c: 54: hour = I2C_Read(1);
 10463  001A82  0E01               	movlw	1
 10464  001A84  EC9E  F00E         	call	_I2C_Read
 10465  001A88  6E60               	movwf	_hour,c
 10466                           
 10467                           ;I2C_Support.c: 55: dow = I2C_Read(1);
 10468  001A8A  0E01               	movlw	1
 10469  001A8C  EC9E  F00E         	call	_I2C_Read
 10470  001A90  6E5D               	movwf	_dow,c
 10471                           
 10472                           ;I2C_Support.c: 56: day = I2C_Read(1);
 10473  001A92  0E01               	movlw	1
 10474  001A94  EC9E  F00E         	call	_I2C_Read
 10475  001A98  6E5C               	movwf	_day,c
 10476                           
 10477                           ;I2C_Support.c: 57: month = I2C_Read(1);
 10478  001A9A  0E01               	movlw	1
 10479  001A9C  EC9E  F00E         	call	_I2C_Read
 10480  001AA0  6E62               	movwf	_month,c
 10481                           
 10482                           ;I2C_Support.c: 58: year = I2C_Read(0);
 10483  001AA2  0E00               	movlw	0
 10484  001AA4  EC9E  F00E         	call	_I2C_Read
 10485  001AA8  6E6E               	movwf	_year,c
 10486                           
 10487                           ;I2C_Support.c: 59: I2C_Stop();
 10488  001AAA  ECB7  F010         	call	_I2C_Stop	;wreg free
 10489  001AAE  0012               	return		;funcret
 10490  001AB0                     __end_of_DS3231_Read_Time:
 10491                           	opt stack 0
 10492                           tblptru	equ	0xFF8
 10493                           tblptrh	equ	0xFF7
 10494                           tblptrl	equ	0xFF6
 10495                           tablat	equ	0xFF5
 10496                           prodh	equ	0xFF4
 10497                           prodl	equ	0xFF3
 10498                           intcon	equ	0xFF2
 10499                           intcon2	equ	0xFF1
 10500                           intcon3	equ	0xFF0
 10501                           postinc0	equ	0xFEE
 10502                           wreg	equ	0xFE8
 10503                           postdec1	equ	0xFE5
 10504                           fsr1l	equ	0xFE1
 10505                           indf2	equ	0xFDF
 10506                           postinc2	equ	0xFDE
 10507                           postdec2	equ	0xFDD
 10508                           fsr2h	equ	0xFDA
 10509                           fsr2l	equ	0xFD9
 10510                           status	equ	0xFD8
 10511                           
 10512 ;; *************** function _DS1621_Read_Temp *****************
 10513 ;; Defined at:
 10514 ;;		line 21 in file "I2C_Support.c"
 10515 ;; Parameters:    Size  Location     Type
 10516 ;;		None
 10517 ;; Auto vars:     Size  Location     Type
 10518 ;;  Device          1   21[COMRAM] unsigned char 
 10519 ;;  Data_Ret        1   20[COMRAM] unsigned char 
 10520 ;;  Cmd             1   19[COMRAM] unsigned char 
 10521 ;; Return value:  Size  Location     Type
 10522 ;;                  2   17[COMRAM] int 
 10523 ;; Registers used:
 10524 ;;		wreg, status,2, status,0, cstack
 10525 ;; Tracked objects:
 10526 ;;		On entry : 0/0
 10527 ;;		On exit  : 0/0
 10528 ;;		Unchanged: 0/0
 10529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10530 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10531 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10533 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10534 ;;Total ram usage:        5 bytes
 10535 ;; Hardware stack levels used:    1
 10536 ;; Hardware stack levels required when called:    5
 10537 ;; This function calls:
 10538 ;;		_I2C_ReStart
 10539 ;;		_I2C_Read
 10540 ;;		_I2C_Start
 10541 ;;		_I2C_Stop
 10542 ;;		_I2C_Write
 10543 ;; This function is called by:
 10544 ;;		_main
 10545 ;; This function uses a non-reentrant model
 10546 ;;
 10547                           
 10548                           	psect	text60
 10549  001E82                     __ptext60:
 10550                           	opt stack 0
 10551  001E82                     _DS1621_Read_Temp:
 10552                           	opt stack 25
 10553                           
 10554                           ;I2C_Support.c: 23: char Device = 0x48;
 10555                           
 10556                           ;incstack = 0
 10557  001E82  0E48               	movlw	72
 10558  001E84  6E16               	movwf	DS1621_Read_Temp@Device,c
 10559                           
 10560                           ;I2C_Support.c: 24: char Cmd = 0xAA;
 10561  001E86  0EAA               	movlw	170
 10562  001E88  6E14               	movwf	DS1621_Read_Temp@Cmd,c
 10563                           
 10564                           ;I2C_Support.c: 25: char Data_Ret;
 10565                           ;I2C_Support.c: 26: I2C_Start();
 10566  001E8A  ECC0  F010         	call	_I2C_Start	;wreg free
 10567                           
 10568                           ;I2C_Support.c: 27: I2C_Write((Device << 1) | 0);
 10569  001E8E  5016               	movf	DS1621_Read_Temp@Device,w,c
 10570  001E90  2416               	addwf	DS1621_Read_Temp@Device,w,c
 10571  001E92  EC22  F00F         	call	_I2C_Write
 10572                           
 10573                           ;I2C_Support.c: 28: I2C_Write(Cmd);
 10574  001E96  5014               	movf	DS1621_Read_Temp@Cmd,w,c
 10575  001E98  EC22  F00F         	call	_I2C_Write
 10576                           
 10577                           ;I2C_Support.c: 29: I2C_ReStart();
 10578  001E9C  EC7C  F010         	call	_I2C_ReStart	;wreg free
 10579                           
 10580                           ;I2C_Support.c: 30: I2C_Write((Device << 1) | 1);
 10581  001EA0  80D8               	bsf	status,0,c
 10582  001EA2  3416               	rlcf	DS1621_Read_Temp@Device,w,c
 10583  001EA4  EC22  F00F         	call	_I2C_Write
 10584                           
 10585                           ;I2C_Support.c: 31: Data_Ret = I2C_Read(0);
 10586  001EA8  0E00               	movlw	0
 10587  001EAA  EC9E  F00E         	call	_I2C_Read
 10588  001EAE  6E15               	movwf	DS1621_Read_Temp@Data_Ret,c
 10589                           
 10590                           ;I2C_Support.c: 32: I2C_Stop();
 10591  001EB0  ECB7  F010         	call	_I2C_Stop	;wreg free
 10592                           
 10593                           ;I2C_Support.c: 33: return Data_Ret;
 10594  001EB4  C015  F012         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 10595  001EB8  6A13               	clrf	?_DS1621_Read_Temp+1,c
 10596  001EBA  D000               	goto	l392
 10597  001EBC                     l392:
 10598  001EBC  0012               	return		;funcret
 10599  001EBE                     __end_of_DS1621_Read_Temp:
 10600                           	opt stack 0
 10601                           tblptru	equ	0xFF8
 10602                           tblptrh	equ	0xFF7
 10603                           tblptrl	equ	0xFF6
 10604                           tablat	equ	0xFF5
 10605                           prodh	equ	0xFF4
 10606                           prodl	equ	0xFF3
 10607                           intcon	equ	0xFF2
 10608                           intcon2	equ	0xFF1
 10609                           intcon3	equ	0xFF0
 10610                           postinc0	equ	0xFEE
 10611                           wreg	equ	0xFE8
 10612                           postdec1	equ	0xFE5
 10613                           fsr1l	equ	0xFE1
 10614                           indf2	equ	0xFDF
 10615                           postinc2	equ	0xFDE
 10616                           postdec2	equ	0xFDD
 10617                           fsr2h	equ	0xFDA
 10618                           fsr2l	equ	0xFD9
 10619                           status	equ	0xFD8
 10620                           
 10621 ;; *************** function _I2C_Write *****************
 10622 ;; Defined at:
 10623 ;;		line 37 in file "I2C_Soft.c"
 10624 ;; Parameters:    Size  Location     Type
 10625 ;;  outByte         1    wreg     unsigned char 
 10626 ;; Auto vars:     Size  Location     Type
 10627 ;;  outByte         1   14[COMRAM] unsigned char 
 10628 ;;  n               1   15[COMRAM] unsigned char 
 10629 ;; Return value:  Size  Location     Type
 10630 ;;		None               void
 10631 ;; Registers used:
 10632 ;;		wreg, status,2, status,0, cstack
 10633 ;; Tracked objects:
 10634 ;;		On entry : 0/0
 10635 ;;		On exit  : 0/0
 10636 ;;		Unchanged: 0/0
 10637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10639 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10641 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10642 ;;Total ram usage:        2 bytes
 10643 ;; Hardware stack levels used:    1
 10644 ;; Hardware stack levels required when called:    3
 10645 ;; This function calls:
 10646 ;;		_i2cHighScl
 10647 ;;		_i2cHighSda
 10648 ;;		_i2cLowScl
 10649 ;;		_i2cLowSda
 10650 ;; This function is called by:
 10651 ;;		_I2C_Write_Cmd_Only
 10652 ;;		_I2C_Write_Cmd_Write_Data
 10653 ;;		_DS1621_Read_Temp
 10654 ;;		_DS3231_Read_Time
 10655 ;;		_DS3231_Setup_Time
 10656 ;;		_I2C_Write_Address_Read_One_Byte
 10657 ;;		_I2C_Write_Address_Write_One_Byte
 10658 ;;		_I2C_Write_Cmd_Read_One_Byte
 10659 ;; This function uses a non-reentrant model
 10660 ;;
 10661                           
 10662                           	psect	text61
 10663  001E44                     __ptext61:
 10664                           	opt stack 0
 10665  001E44                     _I2C_Write:
 10666                           	opt stack 24
 10667                           
 10668                           ;incstack = 0
 10669                           ;I2C_Write@outByte stored from wreg
 10670  001E44  6E0F               	movwf	I2C_Write@outByte,c
 10671                           
 10672                           ;I2C_Soft.c: 39: unsigned char n;
 10673                           ;I2C_Soft.c: 40: for(n=0; n<8; n++)
 10674  001E46  0E00               	movlw	0
 10675  001E48  6E10               	movwf	I2C_Write@n,c
 10676  001E4A                     l1676:
 10677  001E4A  0E07               	movlw	7
 10678  001E4C  6410               	cpfsgt	I2C_Write@n,c
 10679  001E4E  D001               	goto	l315
 10680  001E50  D011               	goto	l1694
 10681  001E52                     l315:
 10682                           
 10683                           ;I2C_Soft.c: 41: {
 10684                           ;I2C_Soft.c: 42: if(outByte&0x80) i2cHighSda();
 10685  001E52  AE0F               	btfss	I2C_Write@outByte,7,c
 10686  001E54  D003               	goto	l1682
 10687  001E56  EC13  F011         	call	_i2cHighSda	;wreg free
 10688  001E5A  D003               	goto	l1684
 10689  001E5C                     l1682:
 10690                           
 10691                           ;I2C_Soft.c: 43: else i2cLowSda();
 10692  001E5C  EC06  F011         	call	_i2cLowSda	;wreg free
 10693  001E60  D000               	goto	l1684
 10694  001E62                     l1684:
 10695                           
 10696                           ;I2C_Soft.c: 44: i2cHighScl();
 10697  001E62  ECF1  F010         	call	_i2cHighScl	;wreg free
 10698                           
 10699                           ;I2C_Soft.c: 45: i2cLowScl();
 10700  001E66  EC0F  F011         	call	_i2cLowScl	;wreg free
 10701                           
 10702                           ;I2C_Soft.c: 46: outByte = outByte << 1;
 10703  001E6A  500F               	movf	I2C_Write@outByte,w,c
 10704  001E6C  240F               	addwf	I2C_Write@outByte,w,c
 10705  001E6E  6E0F               	movwf	I2C_Write@outByte,c
 10706  001E70  2A10               	incf	I2C_Write@n,f,c
 10707  001E72  D7EB               	goto	l1676
 10708  001E74                     l1694:
 10709                           
 10710                           ;I2C_Soft.c: 47: }
 10711                           ;I2C_Soft.c: 48: i2cHighSda();
 10712  001E74  EC13  F011         	call	_i2cHighSda	;wreg free
 10713                           
 10714                           ;I2C_Soft.c: 49: i2cHighScl();
 10715  001E78  ECF1  F010         	call	_i2cHighScl	;wreg free
 10716                           
 10717                           ;I2C_Soft.c: 50: i2cLowScl();
 10718  001E7C  EC0F  F011         	call	_i2cLowScl	;wreg free
 10719  001E80  0012               	return		;funcret
 10720  001E82                     __end_of_I2C_Write:
 10721                           	opt stack 0
 10722                           tblptru	equ	0xFF8
 10723                           tblptrh	equ	0xFF7
 10724                           tblptrl	equ	0xFF6
 10725                           tablat	equ	0xFF5
 10726                           prodh	equ	0xFF4
 10727                           prodl	equ	0xFF3
 10728                           intcon	equ	0xFF2
 10729                           intcon2	equ	0xFF1
 10730                           intcon3	equ	0xFF0
 10731                           postinc0	equ	0xFEE
 10732                           wreg	equ	0xFE8
 10733                           postdec1	equ	0xFE5
 10734                           fsr1l	equ	0xFE1
 10735                           indf2	equ	0xFDF
 10736                           postinc2	equ	0xFDE
 10737                           postdec2	equ	0xFDD
 10738                           fsr2h	equ	0xFDA
 10739                           fsr2l	equ	0xFD9
 10740                           status	equ	0xFD8
 10741                           
 10742 ;; *************** function _I2C_Stop *****************
 10743 ;; Defined at:
 10744 ;;		line 84 in file "I2C_Soft.c"
 10745 ;; Parameters:    Size  Location     Type
 10746 ;;		None
 10747 ;; Auto vars:     Size  Location     Type
 10748 ;;		None
 10749 ;; Return value:  Size  Location     Type
 10750 ;;		None               void
 10751 ;; Registers used:
 10752 ;;		wreg, cstack
 10753 ;; Tracked objects:
 10754 ;;		On entry : 0/0
 10755 ;;		On exit  : 0/0
 10756 ;;		Unchanged: 0/0
 10757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10761 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10762 ;;Total ram usage:        0 bytes
 10763 ;; Hardware stack levels used:    1
 10764 ;; Hardware stack levels required when called:    3
 10765 ;; This function calls:
 10766 ;;		_i2cHighScl
 10767 ;;		_i2cHighSda
 10768 ;;		_i2cLowScl
 10769 ;;		_i2cLowSda
 10770 ;; This function is called by:
 10771 ;;		_I2C_Write_Cmd_Only
 10772 ;;		_I2C_Write_Cmd_Write_Data
 10773 ;;		_DS1621_Read_Temp
 10774 ;;		_DS3231_Read_Time
 10775 ;;		_DS3231_Setup_Time
 10776 ;;		_I2C_Write_Address_Read_One_Byte
 10777 ;;		_I2C_Write_Address_Write_One_Byte
 10778 ;;		_I2C_Write_Cmd_Read_One_Byte
 10779 ;; This function uses a non-reentrant model
 10780 ;;
 10781                           
 10782                           	psect	text62
 10783  00216E                     __ptext62:
 10784                           	opt stack 0
 10785  00216E                     _I2C_Stop:
 10786                           	opt stack 24
 10787                           
 10788                           ;I2C_Soft.c: 86: i2cLowScl();
 10789                           
 10790                           ;incstack = 0
 10791  00216E  EC0F  F011         	call	_i2cLowScl	;wreg free
 10792                           
 10793                           ;I2C_Soft.c: 87: i2cLowSda();
 10794  002172  EC06  F011         	call	_i2cLowSda	;wreg free
 10795                           
 10796                           ;I2C_Soft.c: 88: i2cHighScl();
 10797  002176  ECF1  F010         	call	_i2cHighScl	;wreg free
 10798                           
 10799                           ;I2C_Soft.c: 89: i2cHighSda();
 10800  00217A  EC13  F011         	call	_i2cHighSda	;wreg free
 10801  00217E  0012               	return		;funcret
 10802  002180                     __end_of_I2C_Stop:
 10803                           	opt stack 0
 10804                           tblptru	equ	0xFF8
 10805                           tblptrh	equ	0xFF7
 10806                           tblptrl	equ	0xFF6
 10807                           tablat	equ	0xFF5
 10808                           prodh	equ	0xFF4
 10809                           prodl	equ	0xFF3
 10810                           intcon	equ	0xFF2
 10811                           intcon2	equ	0xFF1
 10812                           intcon3	equ	0xFF0
 10813                           postinc0	equ	0xFEE
 10814                           wreg	equ	0xFE8
 10815                           postdec1	equ	0xFE5
 10816                           fsr1l	equ	0xFE1
 10817                           indf2	equ	0xFDF
 10818                           postinc2	equ	0xFDE
 10819                           postdec2	equ	0xFDD
 10820                           fsr2h	equ	0xFDA
 10821                           fsr2l	equ	0xFD9
 10822                           status	equ	0xFD8
 10823                           
 10824 ;; *************** function _I2C_Start *****************
 10825 ;; Defined at:
 10826 ;;		line 67 in file "I2C_Soft.c"
 10827 ;; Parameters:    Size  Location     Type
 10828 ;;		None
 10829 ;; Auto vars:     Size  Location     Type
 10830 ;;		None
 10831 ;; Return value:  Size  Location     Type
 10832 ;;		None               void
 10833 ;; Registers used:
 10834 ;;		wreg, cstack
 10835 ;; Tracked objects:
 10836 ;;		On entry : 0/0
 10837 ;;		On exit  : 0/0
 10838 ;;		Unchanged: 0/0
 10839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10844 ;;Total ram usage:        0 bytes
 10845 ;; Hardware stack levels used:    1
 10846 ;; Hardware stack levels required when called:    3
 10847 ;; This function calls:
 10848 ;;		_i2cHighScl
 10849 ;;		_i2cHighSda
 10850 ;;		_i2cLowScl
 10851 ;;		_i2cLowSda
 10852 ;; This function is called by:
 10853 ;;		_I2C_Write_Cmd_Only
 10854 ;;		_I2C_Write_Cmd_Write_Data
 10855 ;;		_DS1621_Read_Temp
 10856 ;;		_DS3231_Read_Time
 10857 ;;		_DS3231_Setup_Time
 10858 ;;		_I2C_Write_Address_Read_One_Byte
 10859 ;;		_I2C_Write_Address_Write_One_Byte
 10860 ;;		_I2C_Write_Cmd_Read_One_Byte
 10861 ;; This function uses a non-reentrant model
 10862 ;;
 10863                           
 10864                           	psect	text63
 10865  002180                     __ptext63:
 10866                           	opt stack 0
 10867  002180                     _I2C_Start:
 10868                           	opt stack 24
 10869                           
 10870                           ;I2C_Soft.c: 69: i2cHighSda();
 10871                           
 10872                           ;incstack = 0
 10873  002180  EC13  F011         	call	_i2cHighSda	;wreg free
 10874                           
 10875                           ;I2C_Soft.c: 70: i2cHighScl();
 10876  002184  ECF1  F010         	call	_i2cHighScl	;wreg free
 10877                           
 10878                           ;I2C_Soft.c: 71: i2cLowSda();
 10879  002188  EC06  F011         	call	_i2cLowSda	;wreg free
 10880                           
 10881                           ;I2C_Soft.c: 72: i2cLowScl();
 10882  00218C  EC0F  F011         	call	_i2cLowScl	;wreg free
 10883  002190  0012               	return		;funcret
 10884  002192                     __end_of_I2C_Start:
 10885                           	opt stack 0
 10886                           tblptru	equ	0xFF8
 10887                           tblptrh	equ	0xFF7
 10888                           tblptrl	equ	0xFF6
 10889                           tablat	equ	0xFF5
 10890                           prodh	equ	0xFF4
 10891                           prodl	equ	0xFF3
 10892                           intcon	equ	0xFF2
 10893                           intcon2	equ	0xFF1
 10894                           intcon3	equ	0xFF0
 10895                           postinc0	equ	0xFEE
 10896                           wreg	equ	0xFE8
 10897                           postdec1	equ	0xFE5
 10898                           fsr1l	equ	0xFE1
 10899                           indf2	equ	0xFDF
 10900                           postinc2	equ	0xFDE
 10901                           postdec2	equ	0xFDD
 10902                           fsr2h	equ	0xFDA
 10903                           fsr2l	equ	0xFD9
 10904                           status	equ	0xFD8
 10905                           
 10906 ;; *************** function _I2C_Read *****************
 10907 ;; Defined at:
 10908 ;;		line 16 in file "I2C_Soft.c"
 10909 ;; Parameters:    Size  Location     Type
 10910 ;;  ack             1    wreg     unsigned char 
 10911 ;; Auto vars:     Size  Location     Type
 10912 ;;  ack             1   14[COMRAM] unsigned char 
 10913 ;;  inByte          1   16[COMRAM] unsigned char 
 10914 ;;  n               1   15[COMRAM] unsigned char 
 10915 ;; Return value:  Size  Location     Type
 10916 ;;                  1    wreg      unsigned char 
 10917 ;; Registers used:
 10918 ;;		wreg, status,2, status,0, cstack
 10919 ;; Tracked objects:
 10920 ;;		On entry : 0/0
 10921 ;;		On exit  : 0/0
 10922 ;;		Unchanged: 0/0
 10923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10925 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10927 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10928 ;;Total ram usage:        3 bytes
 10929 ;; Hardware stack levels used:    1
 10930 ;; Hardware stack levels required when called:    4
 10931 ;; This function calls:
 10932 ;;		_i2cAck
 10933 ;;		_i2cHighScl
 10934 ;;		_i2cHighSda
 10935 ;;		_i2cLowScl
 10936 ;;		_i2cNack
 10937 ;; This function is called by:
 10938 ;;		_DS1621_Read_Temp
 10939 ;;		_DS3231_Read_Time
 10940 ;;		_I2C_Write_Address_Read_One_Byte
 10941 ;;		_I2C_Write_Cmd_Read_One_Byte
 10942 ;; This function uses a non-reentrant model
 10943 ;;
 10944                           
 10945                           	psect	text64
 10946  001D3C                     __ptext64:
 10947                           	opt stack 0
 10948  001D3C                     _I2C_Read:
 10949                           	opt stack 25
 10950                           
 10951                           ;incstack = 0
 10952                           ;I2C_Read@ack stored from wreg
 10953  001D3C  6E0F               	movwf	I2C_Read@ack,c
 10954                           
 10955                           ;I2C_Soft.c: 18: unsigned char inByte, n;
 10956                           ;I2C_Soft.c: 19: i2cHighSda();
 10957  001D3E  EC13  F011         	call	_i2cHighSda	;wreg free
 10958                           
 10959                           ;I2C_Soft.c: 20: for (n=0; n<8; n++)
 10960  001D42  0E00               	movlw	0
 10961  001D44  6E10               	movwf	I2C_Read@n,c
 10962  001D46                     l2308:
 10963  001D46  0E07               	movlw	7
 10964  001D48  6410               	cpfsgt	I2C_Read@n,c
 10965  001D4A  D001               	goto	l2312
 10966  001D4C  D00F               	goto	l2326
 10967  001D4E                     l2312:
 10968                           
 10969                           ;I2C_Soft.c: 21: {
 10970                           ;I2C_Soft.c: 22: i2cHighScl();
 10971  001D4E  ECF1  F010         	call	_i2cHighScl	;wreg free
 10972                           
 10973                           ;I2C_Soft.c: 24: if (PORTDbits.RD7)
 10974  001D52  AE83               	btfss	3971,7,c	;volatile
 10975  001D54  D003               	goto	l2318
 10976                           
 10977                           ;I2C_Soft.c: 25: inByte = (inByte << 1) | 0x01;
 10978  001D56  80D8               	bsf	status,0,c
 10979  001D58  3611               	rlcf	I2C_Read@inByte,f,c
 10980  001D5A  D004               	goto	l2320
 10981  001D5C                     l2318:
 10982                           
 10983                           ;I2C_Soft.c: 26: else
 10984                           ;I2C_Soft.c: 27: inByte = inByte << 1;
 10985  001D5C  5011               	movf	I2C_Read@inByte,w,c
 10986  001D5E  2411               	addwf	I2C_Read@inByte,w,c
 10987  001D60  6E11               	movwf	I2C_Read@inByte,c
 10988  001D62  D000               	goto	l2320
 10989  001D64                     l2320:
 10990                           
 10991                           ;I2C_Soft.c: 28: i2cLowScl();
 10992  001D64  EC0F  F011         	call	_i2cLowScl	;wreg free
 10993  001D68  2A10               	incf	I2C_Read@n,f,c
 10994  001D6A  D7ED               	goto	l2308
 10995  001D6C                     l2326:
 10996                           
 10997                           ;I2C_Soft.c: 29: }
 10998                           ;I2C_Soft.c: 30: if (ack) i2cAck();
 10999  001D6C  500F               	movf	I2C_Read@ack,w,c
 11000  001D6E  B4D8               	btfsc	status,2,c
 11001  001D70  D003               	goto	l2330
 11002  001D72  ECC9  F010         	call	_i2cAck	;wreg free
 11003  001D76  D003               	goto	l2332
 11004  001D78                     l2330:
 11005                           
 11006                           ;I2C_Soft.c: 31: else i2cNack();
 11007  001D78  EC01  F011         	call	_i2cNack	;wreg free
 11008  001D7C  D000               	goto	l2332
 11009  001D7E                     l2332:
 11010                           
 11011                           ;I2C_Soft.c: 34: return(inByte);
 11012  001D7E  5011               	movf	I2C_Read@inByte,w,c
 11013  001D80  D000               	goto	l312
 11014  001D82                     l312:
 11015  001D82  0012               	return		;funcret
 11016  001D84                     __end_of_I2C_Read:
 11017                           	opt stack 0
 11018                           tblptru	equ	0xFF8
 11019                           tblptrh	equ	0xFF7
 11020                           tblptrl	equ	0xFF6
 11021                           tablat	equ	0xFF5
 11022                           prodh	equ	0xFF4
 11023                           prodl	equ	0xFF3
 11024                           intcon	equ	0xFF2
 11025                           intcon2	equ	0xFF1
 11026                           intcon3	equ	0xFF0
 11027                           postinc0	equ	0xFEE
 11028                           wreg	equ	0xFE8
 11029                           postdec1	equ	0xFE5
 11030                           fsr1l	equ	0xFE1
 11031                           indf2	equ	0xFDF
 11032                           postinc2	equ	0xFDE
 11033                           postdec2	equ	0xFDD
 11034                           fsr2h	equ	0xFDA
 11035                           fsr2l	equ	0xFD9
 11036                           status	equ	0xFD8
 11037                           
 11038 ;; *************** function _i2cNack *****************
 11039 ;; Defined at:
 11040 ;;		line 53 in file "I2C_Soft.c"
 11041 ;; Parameters:    Size  Location     Type
 11042 ;;		None
 11043 ;; Auto vars:     Size  Location     Type
 11044 ;;		None
 11045 ;; Return value:  Size  Location     Type
 11046 ;;		None               void
 11047 ;; Registers used:
 11048 ;;		wreg, cstack
 11049 ;; Tracked objects:
 11050 ;;		On entry : 0/0
 11051 ;;		On exit  : 0/0
 11052 ;;		Unchanged: 0/0
 11053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11058 ;;Total ram usage:        0 bytes
 11059 ;; Hardware stack levels used:    1
 11060 ;; Hardware stack levels required when called:    3
 11061 ;; This function calls:
 11062 ;;		_i2cHighScl
 11063 ;;		_i2cLowScl
 11064 ;; This function is called by:
 11065 ;;		_I2C_Read
 11066 ;; This function uses a non-reentrant model
 11067 ;;
 11068                           
 11069                           	psect	text65
 11070  002202                     __ptext65:
 11071                           	opt stack 0
 11072  002202                     _i2cNack:
 11073                           	opt stack 25
 11074                           
 11075                           ;I2C_Soft.c: 55: i2cHighScl();
 11076                           
 11077                           ;incstack = 0
 11078  002202  ECF1  F010         	call	_i2cHighScl	;wreg free
 11079                           
 11080                           ;I2C_Soft.c: 56: i2cLowScl();
 11081  002206  EC0F  F011         	call	_i2cLowScl	;wreg free
 11082  00220A  0012               	return		;funcret
 11083  00220C                     __end_of_i2cNack:
 11084                           	opt stack 0
 11085                           tblptru	equ	0xFF8
 11086                           tblptrh	equ	0xFF7
 11087                           tblptrl	equ	0xFF6
 11088                           tablat	equ	0xFF5
 11089                           prodh	equ	0xFF4
 11090                           prodl	equ	0xFF3
 11091                           intcon	equ	0xFF2
 11092                           intcon2	equ	0xFF1
 11093                           intcon3	equ	0xFF0
 11094                           postinc0	equ	0xFEE
 11095                           wreg	equ	0xFE8
 11096                           postdec1	equ	0xFE5
 11097                           fsr1l	equ	0xFE1
 11098                           indf2	equ	0xFDF
 11099                           postinc2	equ	0xFDE
 11100                           postdec2	equ	0xFDD
 11101                           fsr2h	equ	0xFDA
 11102                           fsr2l	equ	0xFD9
 11103                           status	equ	0xFD8
 11104                           
 11105 ;; *************** function _i2cAck *****************
 11106 ;; Defined at:
 11107 ;;		line 59 in file "I2C_Soft.c"
 11108 ;; Parameters:    Size  Location     Type
 11109 ;;		None
 11110 ;; Auto vars:     Size  Location     Type
 11111 ;;		None
 11112 ;; Return value:  Size  Location     Type
 11113 ;;		None               void
 11114 ;; Registers used:
 11115 ;;		wreg, cstack
 11116 ;; Tracked objects:
 11117 ;;		On entry : 0/0
 11118 ;;		On exit  : 0/0
 11119 ;;		Unchanged: 0/0
 11120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11125 ;;Total ram usage:        0 bytes
 11126 ;; Hardware stack levels used:    1
 11127 ;; Hardware stack levels required when called:    3
 11128 ;; This function calls:
 11129 ;;		_i2cHighScl
 11130 ;;		_i2cHighSda
 11131 ;;		_i2cLowScl
 11132 ;;		_i2cLowSda
 11133 ;; This function is called by:
 11134 ;;		_I2C_Read
 11135 ;; This function uses a non-reentrant model
 11136 ;;
 11137                           
 11138                           	psect	text66
 11139  002192                     __ptext66:
 11140                           	opt stack 0
 11141  002192                     _i2cAck:
 11142                           	opt stack 25
 11143                           
 11144                           ;I2C_Soft.c: 61: i2cLowSda();
 11145                           
 11146                           ;incstack = 0
 11147  002192  EC06  F011         	call	_i2cLowSda	;wreg free
 11148                           
 11149                           ;I2C_Soft.c: 62: i2cHighScl();
 11150  002196  ECF1  F010         	call	_i2cHighScl	;wreg free
 11151                           
 11152                           ;I2C_Soft.c: 63: i2cLowScl();
 11153  00219A  EC0F  F011         	call	_i2cLowScl	;wreg free
 11154                           
 11155                           ;I2C_Soft.c: 64: i2cHighSda();
 11156  00219E  EC13  F011         	call	_i2cHighSda	;wreg free
 11157  0021A2  0012               	return		;funcret
 11158  0021A4                     __end_of_i2cAck:
 11159                           	opt stack 0
 11160                           tblptru	equ	0xFF8
 11161                           tblptrh	equ	0xFF7
 11162                           tblptrl	equ	0xFF6
 11163                           tablat	equ	0xFF5
 11164                           prodh	equ	0xFF4
 11165                           prodl	equ	0xFF3
 11166                           intcon	equ	0xFF2
 11167                           intcon2	equ	0xFF1
 11168                           intcon3	equ	0xFF0
 11169                           postinc0	equ	0xFEE
 11170                           wreg	equ	0xFE8
 11171                           postdec1	equ	0xFE5
 11172                           fsr1l	equ	0xFE1
 11173                           indf2	equ	0xFDF
 11174                           postinc2	equ	0xFDE
 11175                           postdec2	equ	0xFDD
 11176                           fsr2h	equ	0xFDA
 11177                           fsr2l	equ	0xFD9
 11178                           status	equ	0xFD8
 11179                           
 11180 ;; *************** function _I2C_ReStart *****************
 11181 ;; Defined at:
 11182 ;;		line 75 in file "I2C_Soft.c"
 11183 ;; Parameters:    Size  Location     Type
 11184 ;;		None
 11185 ;; Auto vars:     Size  Location     Type
 11186 ;;		None
 11187 ;; Return value:  Size  Location     Type
 11188 ;;		None               void
 11189 ;; Registers used:
 11190 ;;		wreg, cstack
 11191 ;; Tracked objects:
 11192 ;;		On entry : 0/0
 11193 ;;		On exit  : 0/0
 11194 ;;		Unchanged: 0/0
 11195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11200 ;;Total ram usage:        0 bytes
 11201 ;; Hardware stack levels used:    1
 11202 ;; Hardware stack levels required when called:    3
 11203 ;; This function calls:
 11204 ;;		_i2cHighScl
 11205 ;;		_i2cHighSda
 11206 ;;		_i2cLowScl
 11207 ;;		_i2cLowSda
 11208 ;; This function is called by:
 11209 ;;		_DS1621_Read_Temp
 11210 ;;		_DS3231_Read_Time
 11211 ;;		_I2C_Write_Address_Read_One_Byte
 11212 ;;		_I2C_Write_Cmd_Read_One_Byte
 11213 ;; This function uses a non-reentrant model
 11214 ;;
 11215                           
 11216                           	psect	text67
 11217  0020F8                     __ptext67:
 11218                           	opt stack 0
 11219  0020F8                     _I2C_ReStart:
 11220                           	opt stack 26
 11221                           
 11222                           ;I2C_Soft.c: 77: i2cLowScl();
 11223                           
 11224                           ;incstack = 0
 11225  0020F8  EC0F  F011         	call	_i2cLowScl	;wreg free
 11226                           
 11227                           ;I2C_Soft.c: 78: i2cHighSda();
 11228  0020FC  EC13  F011         	call	_i2cHighSda	;wreg free
 11229                           
 11230                           ;I2C_Soft.c: 79: i2cHighScl();
 11231  002100  ECF1  F010         	call	_i2cHighScl	;wreg free
 11232                           
 11233                           ;I2C_Soft.c: 80: i2cLowSda();
 11234  002104  EC06  F011         	call	_i2cLowSda	;wreg free
 11235                           
 11236                           ;I2C_Soft.c: 81: i2cLowScl();
 11237  002108  EC0F  F011         	call	_i2cLowScl	;wreg free
 11238  00210C  0012               	return		;funcret
 11239  00210E                     __end_of_I2C_ReStart:
 11240                           	opt stack 0
 11241                           tblptru	equ	0xFF8
 11242                           tblptrh	equ	0xFF7
 11243                           tblptrl	equ	0xFF6
 11244                           tablat	equ	0xFF5
 11245                           prodh	equ	0xFF4
 11246                           prodl	equ	0xFF3
 11247                           intcon	equ	0xFF2
 11248                           intcon2	equ	0xFF1
 11249                           intcon3	equ	0xFF0
 11250                           postinc0	equ	0xFEE
 11251                           wreg	equ	0xFE8
 11252                           postdec1	equ	0xFE5
 11253                           fsr1l	equ	0xFE1
 11254                           indf2	equ	0xFDF
 11255                           postinc2	equ	0xFDE
 11256                           postdec2	equ	0xFDD
 11257                           fsr2h	equ	0xFDA
 11258                           fsr2l	equ	0xFD9
 11259                           status	equ	0xFD8
 11260                           
 11261 ;; *************** function _i2cLowSda *****************
 11262 ;; Defined at:
 11263 ;;		line 98 in file "I2C_Soft.c"
 11264 ;; Parameters:    Size  Location     Type
 11265 ;;		None
 11266 ;; Auto vars:     Size  Location     Type
 11267 ;;		None
 11268 ;; Return value:  Size  Location     Type
 11269 ;;		None               void
 11270 ;; Registers used:
 11271 ;;		None
 11272 ;; Tracked objects:
 11273 ;;		On entry : 0/0
 11274 ;;		On exit  : 0/0
 11275 ;;		Unchanged: 0/0
 11276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11281 ;;Total ram usage:        0 bytes
 11282 ;; Hardware stack levels used:    1
 11283 ;; Hardware stack levels required when called:    2
 11284 ;; This function calls:
 11285 ;;		Nothing
 11286 ;; This function is called by:
 11287 ;;		_I2C_Write
 11288 ;;		_i2cAck
 11289 ;;		_I2C_Start
 11290 ;;		_I2C_ReStart
 11291 ;;		_I2C_Stop
 11292 ;; This function uses a non-reentrant model
 11293 ;;
 11294                           
 11295                           	psect	text68
 11296  00220C                     __ptext68:
 11297                           	opt stack 0
 11298  00220C                     _i2cLowSda:
 11299                           	opt stack 24
 11300                           
 11301                           ;I2C_Soft.c: 100: PORTDbits.RD7 = 0;
 11302                           
 11303                           ;incstack = 0
 11304  00220C  9E83               	bcf	3971,7,c	;volatile
 11305                           
 11306                           ;I2C_Soft.c: 101: TRISDbits.RD7 = 0;
 11307  00220E  9E95               	bcf	3989,7,c	;volatile
 11308                           
 11309                           ;I2C_Soft.c: 102: _delay((unsigned long)((2)*(8000000/4000000.0)));
 11310  002210  D000               	nop2		;2 cycle nop
 11311  002212  D000               	nop2		;2 cycle nop
 11312  002214  0012               	return		;funcret
 11313  002216                     __end_of_i2cLowSda:
 11314                           	opt stack 0
 11315                           tblptru	equ	0xFF8
 11316                           tblptrh	equ	0xFF7
 11317                           tblptrl	equ	0xFF6
 11318                           tablat	equ	0xFF5
 11319                           prodh	equ	0xFF4
 11320                           prodl	equ	0xFF3
 11321                           intcon	equ	0xFF2
 11322                           intcon2	equ	0xFF1
 11323                           intcon3	equ	0xFF0
 11324                           postinc0	equ	0xFEE
 11325                           wreg	equ	0xFE8
 11326                           postdec1	equ	0xFE5
 11327                           fsr1l	equ	0xFE1
 11328                           indf2	equ	0xFDF
 11329                           postinc2	equ	0xFDE
 11330                           postdec2	equ	0xFDD
 11331                           fsr2h	equ	0xFDA
 11332                           fsr2l	equ	0xFD9
 11333                           status	equ	0xFD8
 11334                           
 11335 ;; *************** function _i2cLowScl *****************
 11336 ;; Defined at:
 11337 ;;		line 111 in file "I2C_Soft.c"
 11338 ;; Parameters:    Size  Location     Type
 11339 ;;		None
 11340 ;; Auto vars:     Size  Location     Type
 11341 ;;		None
 11342 ;; Return value:  Size  Location     Type
 11343 ;;		None               void
 11344 ;; Registers used:
 11345 ;;		None
 11346 ;; Tracked objects:
 11347 ;;		On entry : 0/0
 11348 ;;		On exit  : 0/0
 11349 ;;		Unchanged: 0/0
 11350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11355 ;;Total ram usage:        0 bytes
 11356 ;; Hardware stack levels used:    1
 11357 ;; Hardware stack levels required when called:    2
 11358 ;; This function calls:
 11359 ;;		Nothing
 11360 ;; This function is called by:
 11361 ;;		_I2C_Read
 11362 ;;		_I2C_Write
 11363 ;;		_i2cNack
 11364 ;;		_i2cAck
 11365 ;;		_I2C_Start
 11366 ;;		_I2C_ReStart
 11367 ;;		_I2C_Stop
 11368 ;; This function uses a non-reentrant model
 11369 ;;
 11370                           
 11371                           	psect	text69
 11372  00221E                     __ptext69:
 11373                           	opt stack 0
 11374  00221E                     _i2cLowScl:
 11375                           	opt stack 24
 11376                           
 11377                           ;I2C_Soft.c: 113: PORTDbits.RD6 = 0;
 11378                           
 11379                           ;incstack = 0
 11380  00221E  9C83               	bcf	3971,6,c	;volatile
 11381                           
 11382                           ;I2C_Soft.c: 114: TRISDbits.RD6 = 0;
 11383  002220  9C95               	bcf	3989,6,c	;volatile
 11384                           
 11385                           ;I2C_Soft.c: 115: _delay((unsigned long)((1)*(8000000/4000000.0)));
 11386  002222  D000               	nop2		;2 cycle nop
 11387  002224  0012               	return		;funcret
 11388  002226                     __end_of_i2cLowScl:
 11389                           	opt stack 0
 11390                           tblptru	equ	0xFF8
 11391                           tblptrh	equ	0xFF7
 11392                           tblptrl	equ	0xFF6
 11393                           tablat	equ	0xFF5
 11394                           prodh	equ	0xFF4
 11395                           prodl	equ	0xFF3
 11396                           intcon	equ	0xFF2
 11397                           intcon2	equ	0xFF1
 11398                           intcon3	equ	0xFF0
 11399                           postinc0	equ	0xFEE
 11400                           wreg	equ	0xFE8
 11401                           postdec1	equ	0xFE5
 11402                           fsr1l	equ	0xFE1
 11403                           indf2	equ	0xFDF
 11404                           postinc2	equ	0xFDE
 11405                           postdec2	equ	0xFDD
 11406                           fsr2h	equ	0xFDA
 11407                           fsr2l	equ	0xFD9
 11408                           status	equ	0xFD8
 11409                           
 11410 ;; *************** function _i2cHighSda *****************
 11411 ;; Defined at:
 11412 ;;		line 92 in file "I2C_Soft.c"
 11413 ;; Parameters:    Size  Location     Type
 11414 ;;		None
 11415 ;; Auto vars:     Size  Location     Type
 11416 ;;		None
 11417 ;; Return value:  Size  Location     Type
 11418 ;;		None               void
 11419 ;; Registers used:
 11420 ;;		None
 11421 ;; Tracked objects:
 11422 ;;		On entry : 0/0
 11423 ;;		On exit  : 0/0
 11424 ;;		Unchanged: 0/0
 11425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11430 ;;Total ram usage:        0 bytes
 11431 ;; Hardware stack levels used:    1
 11432 ;; Hardware stack levels required when called:    2
 11433 ;; This function calls:
 11434 ;;		Nothing
 11435 ;; This function is called by:
 11436 ;;		_I2C_Init
 11437 ;;		_I2C_Read
 11438 ;;		_I2C_Write
 11439 ;;		_i2cAck
 11440 ;;		_I2C_Start
 11441 ;;		_I2C_ReStart
 11442 ;;		_I2C_Stop
 11443 ;; This function uses a non-reentrant model
 11444 ;;
 11445                           
 11446                           	psect	text70
 11447  002226                     __ptext70:
 11448                           	opt stack 0
 11449  002226                     _i2cHighSda:
 11450                           	opt stack 26
 11451                           
 11452                           ;I2C_Soft.c: 94: TRISDbits.RD7 = 1;
 11453                           
 11454                           ;incstack = 0
 11455  002226  8E95               	bsf	3989,7,c	;volatile
 11456                           
 11457                           ;I2C_Soft.c: 95: _delay((unsigned long)((2)*(8000000/4000000.0)));
 11458  002228  D000               	nop2		;2 cycle nop
 11459  00222A  D000               	nop2		;2 cycle nop
 11460  00222C  0012               	return		;funcret
 11461  00222E                     __end_of_i2cHighSda:
 11462                           	opt stack 0
 11463                           tblptru	equ	0xFF8
 11464                           tblptrh	equ	0xFF7
 11465                           tblptrl	equ	0xFF6
 11466                           tablat	equ	0xFF5
 11467                           prodh	equ	0xFF4
 11468                           prodl	equ	0xFF3
 11469                           intcon	equ	0xFF2
 11470                           intcon2	equ	0xFF1
 11471                           intcon3	equ	0xFF0
 11472                           postinc0	equ	0xFEE
 11473                           wreg	equ	0xFE8
 11474                           postdec1	equ	0xFE5
 11475                           fsr1l	equ	0xFE1
 11476                           indf2	equ	0xFDF
 11477                           postinc2	equ	0xFDE
 11478                           postdec2	equ	0xFDD
 11479                           fsr2h	equ	0xFDA
 11480                           fsr2l	equ	0xFD9
 11481                           status	equ	0xFD8
 11482                           
 11483 ;; *************** function _i2cHighScl *****************
 11484 ;; Defined at:
 11485 ;;		line 105 in file "I2C_Soft.c"
 11486 ;; Parameters:    Size  Location     Type
 11487 ;;		None
 11488 ;; Auto vars:     Size  Location     Type
 11489 ;;		None
 11490 ;; Return value:  Size  Location     Type
 11491 ;;		None               void
 11492 ;; Registers used:
 11493 ;;		wreg
 11494 ;; Tracked objects:
 11495 ;;		On entry : 0/0
 11496 ;;		On exit  : 0/0
 11497 ;;		Unchanged: 0/0
 11498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11503 ;;Total ram usage:        0 bytes
 11504 ;; Hardware stack levels used:    1
 11505 ;; Hardware stack levels required when called:    2
 11506 ;; This function calls:
 11507 ;;		Nothing
 11508 ;; This function is called by:
 11509 ;;		_I2C_Init
 11510 ;;		_I2C_Read
 11511 ;;		_I2C_Write
 11512 ;;		_i2cNack
 11513 ;;		_i2cAck
 11514 ;;		_I2C_Start
 11515 ;;		_I2C_ReStart
 11516 ;;		_I2C_Stop
 11517 ;; This function uses a non-reentrant model
 11518 ;;
 11519                           
 11520                           	psect	text71
 11521  0021E2                     __ptext71:
 11522                           	opt stack 0
 11523  0021E2                     _i2cHighScl:
 11524                           	opt stack 26
 11525                           
 11526                           ;I2C_Soft.c: 107: TRISDbits.RD6 = 1;
 11527                           
 11528                           ;incstack = 0
 11529  0021E2  8C95               	bsf	3989,6,c	;volatile
 11530                           
 11531                           ;I2C_Soft.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
 11532  0021E4  0E06               	movlw	6
 11533  0021E6                     u4867:
 11534  0021E6  2EE8               	decfsz	wreg,f,c
 11535  0021E8  D7FE               	goto	u4867
 11536  0021EA  D000               	nop2		;nop
 11537  0021EC  0012               	return		;funcret
 11538  0021EE                     __end_of_i2cHighScl:
 11539                           	opt stack 0
 11540                           tblptru	equ	0xFF8
 11541                           tblptrh	equ	0xFF7
 11542                           tblptrl	equ	0xFF6
 11543                           tablat	equ	0xFF5
 11544                           prodh	equ	0xFF4
 11545                           prodl	equ	0xFF3
 11546                           intcon	equ	0xFF2
 11547                           intcon2	equ	0xFF1
 11548                           intcon3	equ	0xFF0
 11549                           postinc0	equ	0xFEE
 11550                           wreg	equ	0xFE8
 11551                           postdec1	equ	0xFE5
 11552                           fsr1l	equ	0xFE1
 11553                           indf2	equ	0xFDF
 11554                           postinc2	equ	0xFDE
 11555                           postdec2	equ	0xFDD
 11556                           fsr2h	equ	0xFDA
 11557                           fsr2l	equ	0xFD9
 11558                           status	equ	0xFD8
 11559                           
 11560 ;; *************** function _chkisr *****************
 11561 ;; Defined at:
 11562 ;;		line 22 in file "Interrupt.c"
 11563 ;; Parameters:    Size  Location     Type
 11564 ;;		None
 11565 ;; Auto vars:     Size  Location     Type
 11566 ;;		None
 11567 ;; Return value:  Size  Location     Type
 11568 ;;		None               void
 11569 ;; Registers used:
 11570 ;;		wreg, status,2, cstack
 11571 ;; Tracked objects:
 11572 ;;		On entry : 0/0
 11573 ;;		On exit  : 0/0
 11574 ;;		Unchanged: 0/0
 11575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11578 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11579 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11580 ;;Total ram usage:       14 bytes
 11581 ;; Hardware stack levels used:    1
 11582 ;; Hardware stack levels required when called:    1
 11583 ;; This function calls:
 11584 ;;		_INT0_ISR
 11585 ;;		_INT1_ISR
 11586 ;;		_INT2_ISR
 11587 ;; This function is called by:
 11588 ;;		Interrupt level 2
 11589 ;; This function uses a non-reentrant model
 11590 ;;
 11591                           
 11592                           	psect	intcode
 11593  000008                     __pintcode:
 11594                           	opt stack 0
 11595  000008                     _chkisr:
 11596                           	opt stack 21
 11597                           
 11598                           ;incstack = 0
 11599  000008  CFFA F001          	movff	pclath,??_chkisr
 11600  00000C  CFFB F002          	movff	pclatu,??_chkisr+1
 11601  000010  CFE9 F003          	movff	fsr0l,??_chkisr+2
 11602  000014  EDBC  F00B         	call	int_func,f	;refresh shadow registers
 11603                           pclatu	equ	0xFFB
 11604                           pclath	equ	0xFFA
 11605                           tblptru	equ	0xFF8
 11606                           tblptrh	equ	0xFF7
 11607                           tblptrl	equ	0xFF6
 11608                           tablat	equ	0xFF5
 11609                           prodh	equ	0xFF4
 11610                           prodl	equ	0xFF3
 11611                           intcon	equ	0xFF2
 11612                           intcon2	equ	0xFF1
 11613                           intcon3	equ	0xFF0
 11614                           postinc0	equ	0xFEE
 11615                           fsr0l	equ	0xFE9
 11616                           wreg	equ	0xFE8
 11617                           postdec1	equ	0xFE5
 11618                           fsr1l	equ	0xFE1
 11619                           indf2	equ	0xFDF
 11620                           postinc2	equ	0xFDE
 11621                           postdec2	equ	0xFDD
 11622                           fsr2h	equ	0xFDA
 11623                           fsr2l	equ	0xFD9
 11624                           status	equ	0xFD8
 11625                           
 11626                           	psect	intcode_body
 11627  001778                     __pintcode_body:
 11628                           	opt stack 21
 11629  001778                     int_func:
 11630                           	opt stack 21
 11631  001778  0006               	pop		; remove dummy address from shadow register refresh
 11632  00177A  CFEA F004          	movff	fsr0h,??_chkisr+3
 11633  00177E  CFE1 F005          	movff	fsr1l,??_chkisr+4
 11634  001782  CFE2 F006          	movff	fsr1h,??_chkisr+5
 11635  001786  CFD9 F007          	movff	fsr2l,??_chkisr+6
 11636  00178A  CFDA F008          	movff	fsr2h,??_chkisr+7
 11637  00178E  CFF3 F009          	movff	prodl,??_chkisr+8
 11638  001792  CFF4 F00A          	movff	prodh,??_chkisr+9
 11639  001796  CFF6 F00B          	movff	tblptrl,??_chkisr+10
 11640  00179A  CFF7 F00C          	movff	tblptrh,??_chkisr+11
 11641  00179E  CFF8 F00D          	movff	tblptru,??_chkisr+12
 11642  0017A2  CFF5 F00E          	movff	tablat,??_chkisr+13
 11643                           
 11644                           ;Interrupt.c: 23: if (INTCONbits.INT0IF == 1) INT0_ISR();
 11645  0017A6  A2F2               	btfss	intcon,1,c	;volatile
 11646  0017A8  D003               	goto	i2l3270
 11647  0017AA  EC1F  F011         	call	_INT0_ISR	;wreg free
 11648  0017AE  D000               	goto	i2l3270
 11649  0017B0                     i2l3270:
 11650                           
 11651                           ;Interrupt.c: 24: if (INTCON3bits.INT1IF == 1) INT1_ISR();
 11652  0017B0  A0F0               	btfss	intcon3,0,c	;volatile
 11653  0017B2  D003               	goto	i2l3274
 11654  0017B4  EC1B  F011         	call	_INT1_ISR	;wreg free
 11655  0017B8  D000               	goto	i2l3274
 11656  0017BA                     i2l3274:
 11657                           
 11658                           ;Interrupt.c: 25: if (INTCON3bits.INT2IF == 1) INT2_ISR();
 11659  0017BA  A2F0               	btfss	intcon3,1,c	;volatile
 11660  0017BC  D003               	goto	i2l428
 11661  0017BE  EC17  F011         	call	_INT2_ISR	;wreg free
 11662  0017C2  D000               	goto	i2l428
 11663  0017C4                     i2l428:
 11664  0017C4  C00E  FFF5         	movff	??_chkisr+13,tablat
 11665  0017C8  C00D  FFF8         	movff	??_chkisr+12,tblptru
 11666  0017CC  C00C  FFF7         	movff	??_chkisr+11,tblptrh
 11667  0017D0  C00B  FFF6         	movff	??_chkisr+10,tblptrl
 11668  0017D4  C00A  FFF4         	movff	??_chkisr+9,prodh
 11669  0017D8  C009  FFF3         	movff	??_chkisr+8,prodl
 11670  0017DC  C008  FFDA         	movff	??_chkisr+7,fsr2h
 11671  0017E0  C007  FFD9         	movff	??_chkisr+6,fsr2l
 11672  0017E4  C006  FFE2         	movff	??_chkisr+5,fsr1h
 11673  0017E8  C005  FFE1         	movff	??_chkisr+4,fsr1l
 11674  0017EC  C004  FFEA         	movff	??_chkisr+3,fsr0h
 11675  0017F0  C003  FFE9         	movff	??_chkisr+2,fsr0l
 11676  0017F4  C002  FFFB         	movff	??_chkisr+1,pclatu
 11677  0017F8  C001  FFFA         	movff	??_chkisr,pclath
 11678  0017FC  0011               	retfie		f
 11679  0017FE                     __end_of_chkisr:
 11680                           	opt stack 0
 11681                           pclatu	equ	0xFFB
 11682                           pclath	equ	0xFFA
 11683                           tblptru	equ	0xFF8
 11684                           tblptrh	equ	0xFF7
 11685                           tblptrl	equ	0xFF6
 11686                           tablat	equ	0xFF5
 11687                           prodh	equ	0xFF4
 11688                           prodl	equ	0xFF3
 11689                           intcon	equ	0xFF2
 11690                           intcon2	equ	0xFF1
 11691                           intcon3	equ	0xFF0
 11692                           postinc0	equ	0xFEE
 11693                           fsr0h	equ	0xFEA
 11694                           fsr0l	equ	0xFE9
 11695                           wreg	equ	0xFE8
 11696                           postdec1	equ	0xFE5
 11697                           fsr1h	equ	0xFE2
 11698                           fsr1l	equ	0xFE1
 11699                           indf2	equ	0xFDF
 11700                           postinc2	equ	0xFDE
 11701                           postdec2	equ	0xFDD
 11702                           fsr2h	equ	0xFDA
 11703                           fsr2l	equ	0xFD9
 11704                           status	equ	0xFD8
 11705                           
 11706 ;; *************** function _INT2_ISR *****************
 11707 ;; Defined at:
 11708 ;;		line 35 in file "Interrupt.c"
 11709 ;; Parameters:    Size  Location     Type
 11710 ;;		None
 11711 ;; Auto vars:     Size  Location     Type
 11712 ;;		None
 11713 ;; Return value:  Size  Location     Type
 11714 ;;		None               void
 11715 ;; Registers used:
 11716 ;;		wreg, status,2
 11717 ;; Tracked objects:
 11718 ;;		On entry : 0/0
 11719 ;;		On exit  : 0/0
 11720 ;;		Unchanged: 0/0
 11721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11726 ;;Total ram usage:        0 bytes
 11727 ;; Hardware stack levels used:    1
 11728 ;; This function calls:
 11729 ;;		Nothing
 11730 ;; This function is called by:
 11731 ;;		_chkisr
 11732 ;; This function uses a non-reentrant model
 11733 ;;
 11734                           
 11735                           	psect	text73
 11736  00222E                     __ptext73:
 11737                           	opt stack 0
 11738  00222E                     _INT2_ISR:
 11739                           	opt stack 21
 11740                           
 11741                           ;Interrupt.c: 36: INTCON3bits.INT2IF=0;
 11742                           
 11743                           ;incstack = 0
 11744  00222E  92F0               	bcf	intcon3,1,c	;volatile
 11745                           
 11746                           ;Interrupt.c: 37: INT2_flag = 1;
 11747  002230  0E01               	movlw	1
 11748  002232  6E53               	movwf	_INT2_flag,c
 11749  002234  0012               	return		;funcret
 11750  002236                     __end_of_INT2_ISR:
 11751                           	opt stack 0
 11752                           pclatu	equ	0xFFB
 11753                           pclath	equ	0xFFA
 11754                           tblptru	equ	0xFF8
 11755                           tblptrh	equ	0xFF7
 11756                           tblptrl	equ	0xFF6
 11757                           tablat	equ	0xFF5
 11758                           prodh	equ	0xFF4
 11759                           prodl	equ	0xFF3
 11760                           intcon	equ	0xFF2
 11761                           intcon2	equ	0xFF1
 11762                           intcon3	equ	0xFF0
 11763                           postinc0	equ	0xFEE
 11764                           fsr0h	equ	0xFEA
 11765                           fsr0l	equ	0xFE9
 11766                           wreg	equ	0xFE8
 11767                           postdec1	equ	0xFE5
 11768                           fsr1h	equ	0xFE2
 11769                           fsr1l	equ	0xFE1
 11770                           indf2	equ	0xFDF
 11771                           postinc2	equ	0xFDE
 11772                           postdec2	equ	0xFDD
 11773                           fsr2h	equ	0xFDA
 11774                           fsr2l	equ	0xFD9
 11775                           status	equ	0xFD8
 11776                           
 11777 ;; *************** function _INT1_ISR *****************
 11778 ;; Defined at:
 11779 ;;		line 31 in file "Interrupt.c"
 11780 ;; Parameters:    Size  Location     Type
 11781 ;;		None
 11782 ;; Auto vars:     Size  Location     Type
 11783 ;;		None
 11784 ;; Return value:  Size  Location     Type
 11785 ;;		None               void
 11786 ;; Registers used:
 11787 ;;		wreg, status,2
 11788 ;; Tracked objects:
 11789 ;;		On entry : 0/0
 11790 ;;		On exit  : 0/0
 11791 ;;		Unchanged: 0/0
 11792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11797 ;;Total ram usage:        0 bytes
 11798 ;; Hardware stack levels used:    1
 11799 ;; This function calls:
 11800 ;;		Nothing
 11801 ;; This function is called by:
 11802 ;;		_chkisr
 11803 ;; This function uses a non-reentrant model
 11804 ;;
 11805                           
 11806                           	psect	text74
 11807  002236                     __ptext74:
 11808                           	opt stack 0
 11809  002236                     _INT1_ISR:
 11810                           	opt stack 21
 11811                           
 11812                           ;Interrupt.c: 32: INTCON3bits.INT1IF=0;
 11813                           
 11814                           ;incstack = 0
 11815  002236  90F0               	bcf	intcon3,0,c	;volatile
 11816                           
 11817                           ;Interrupt.c: 33: INT1_flag = 1;
 11818  002238  0E01               	movlw	1
 11819  00223A  6E52               	movwf	_INT1_flag,c
 11820  00223C  0012               	return		;funcret
 11821  00223E                     __end_of_INT1_ISR:
 11822                           	opt stack 0
 11823                           pclatu	equ	0xFFB
 11824                           pclath	equ	0xFFA
 11825                           tblptru	equ	0xFF8
 11826                           tblptrh	equ	0xFF7
 11827                           tblptrl	equ	0xFF6
 11828                           tablat	equ	0xFF5
 11829                           prodh	equ	0xFF4
 11830                           prodl	equ	0xFF3
 11831                           intcon	equ	0xFF2
 11832                           intcon2	equ	0xFF1
 11833                           intcon3	equ	0xFF0
 11834                           postinc0	equ	0xFEE
 11835                           fsr0h	equ	0xFEA
 11836                           fsr0l	equ	0xFE9
 11837                           wreg	equ	0xFE8
 11838                           postdec1	equ	0xFE5
 11839                           fsr1h	equ	0xFE2
 11840                           fsr1l	equ	0xFE1
 11841                           indf2	equ	0xFDF
 11842                           postinc2	equ	0xFDE
 11843                           postdec2	equ	0xFDD
 11844                           fsr2h	equ	0xFDA
 11845                           fsr2l	equ	0xFD9
 11846                           status	equ	0xFD8
 11847                           
 11848 ;; *************** function _INT0_ISR *****************
 11849 ;; Defined at:
 11850 ;;		line 27 in file "Interrupt.c"
 11851 ;; Parameters:    Size  Location     Type
 11852 ;;		None
 11853 ;; Auto vars:     Size  Location     Type
 11854 ;;		None
 11855 ;; Return value:  Size  Location     Type
 11856 ;;		None               void
 11857 ;; Registers used:
 11858 ;;		wreg, status,2
 11859 ;; Tracked objects:
 11860 ;;		On entry : 0/0
 11861 ;;		On exit  : 0/0
 11862 ;;		Unchanged: 0/0
 11863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11868 ;;Total ram usage:        0 bytes
 11869 ;; Hardware stack levels used:    1
 11870 ;; This function calls:
 11871 ;;		Nothing
 11872 ;; This function is called by:
 11873 ;;		_chkisr
 11874 ;; This function uses a non-reentrant model
 11875 ;;
 11876                           
 11877                           	psect	text75
 11878  00223E                     __ptext75:
 11879                           	opt stack 0
 11880  00223E                     _INT0_ISR:
 11881                           	opt stack 21
 11882                           
 11883                           ;Interrupt.c: 28: INTCONbits.INT0IF=0;
 11884                           
 11885                           ;incstack = 0
 11886  00223E  92F2               	bcf	intcon,1,c	;volatile
 11887                           
 11888                           ;Interrupt.c: 29: INT0_flag = 1;
 11889  002240  0E01               	movlw	1
 11890  002242  6E51               	movwf	_INT0_flag,c
 11891  002244  0012               	return		;funcret
 11892  002246                     __end_of_INT0_ISR:
 11893                           	opt stack 0
 11894                           pclatu	equ	0xFFB
 11895                           pclath	equ	0xFFA
 11896                           tblptru	equ	0xFF8
 11897                           tblptrh	equ	0xFF7
 11898                           tblptrl	equ	0xFF6
 11899                           tablat	equ	0xFF5
 11900                           prodh	equ	0xFF4
 11901                           prodl	equ	0xFF3
 11902                           intcon	equ	0xFF2
 11903                           intcon2	equ	0xFF1
 11904                           intcon3	equ	0xFF0
 11905                           postinc0	equ	0xFEE
 11906                           fsr0h	equ	0xFEA
 11907                           fsr0l	equ	0xFE9
 11908                           wreg	equ	0xFE8
 11909                           postdec1	equ	0xFE5
 11910                           fsr1h	equ	0xFE2
 11911                           fsr1l	equ	0xFE1
 11912                           indf2	equ	0xFDF
 11913                           postinc2	equ	0xFDE
 11914                           postdec2	equ	0xFDD
 11915                           fsr2h	equ	0xFDA
 11916                           fsr2l	equ	0xFD9
 11917                           status	equ	0xFD8
 11918                           pclatu	equ	0xFFB
 11919                           pclath	equ	0xFFA
 11920                           tblptru	equ	0xFF8
 11921                           tblptrh	equ	0xFF7
 11922                           tblptrl	equ	0xFF6
 11923                           tablat	equ	0xFF5
 11924                           prodh	equ	0xFF4
 11925                           prodl	equ	0xFF3
 11926                           intcon	equ	0xFF2
 11927                           intcon2	equ	0xFF1
 11928                           intcon3	equ	0xFF0
 11929                           postinc0	equ	0xFEE
 11930                           fsr0h	equ	0xFEA
 11931                           fsr0l	equ	0xFE9
 11932                           wreg	equ	0xFE8
 11933                           postdec1	equ	0xFE5
 11934                           fsr1h	equ	0xFE2
 11935                           fsr1l	equ	0xFE1
 11936                           indf2	equ	0xFDF
 11937                           postinc2	equ	0xFDE
 11938                           postdec2	equ	0xFDD
 11939                           fsr2h	equ	0xFDA
 11940                           fsr2l	equ	0xFD9
 11941                           status	equ	0xFD8
 11942                           
 11943                           	psect	rparam
 11944  0000                     pclatu	equ	0xFFB
 11945                           pclath	equ	0xFFA
 11946                           tblptru	equ	0xFF8
 11947                           tblptrh	equ	0xFF7
 11948                           tblptrl	equ	0xFF6
 11949                           tablat	equ	0xFF5
 11950                           prodh	equ	0xFF4
 11951                           prodl	equ	0xFF3
 11952                           intcon	equ	0xFF2
 11953                           intcon2	equ	0xFF1
 11954                           intcon3	equ	0xFF0
 11955                           postinc0	equ	0xFEE
 11956                           fsr0h	equ	0xFEA
 11957                           fsr0l	equ	0xFE9
 11958                           wreg	equ	0xFE8
 11959                           postdec1	equ	0xFE5
 11960                           fsr1h	equ	0xFE2
 11961                           fsr1l	equ	0xFE1
 11962                           indf2	equ	0xFDF
 11963                           postinc2	equ	0xFDE
 11964                           postdec2	equ	0xFDD
 11965                           fsr2h	equ	0xFDA
 11966                           fsr2l	equ	0xFD9
 11967                           status	equ	0xFD8


Data Sizes:
    Strings     305
    Constant    493
    Data        151
    BSS         57
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     62     113
    BANK0           128      2     128
    BANK1           256     11      42
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_17(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[3]), 
		 -> STR_13(CODE[6]), STR_12(CODE[5]), STR_11(CODE[5]), STR_10(CODE[2]), 
		 -> STR_9(CODE[3]), STR_8(CODE[13]), STR_7(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 43
		 -> STR_19(CODE[22]), STR_18(CODE[16]), STR_6(CODE[31]), STR_5(CODE[31]), 
		 -> STR_4(CODE[31]), STR_3(CODE[15]), STR_2(CODE[43]), STR_1(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK1[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[31]), 


Critical Paths under _main in COMRAM

    _main->___fttol
    _printf->___lwmod
    ___lwmod->___lwdiv
    _get_RPM->___ftmul
    _Update_Screen->_drawtext
    ___awmod->___awdiv
    _Set_RPM_RGB->___awdiv
    _Set_DC_RGB->___awdiv
    ___awdiv->___wmul
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawCircle->_drawPixel
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _do_update_pwm->___fttol
    ___lbtoft->___ftpack
    ___fttol->_get_RPM
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    None.

Critical Paths under _main in BANK0

    _Update_Screen->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Update_Screen
    _Update_Screen->_drawtext
    _Turn_On_Fan->_do_update_pwm
    _Initialize_Screen->_drawtext
    _Increase_Speed->_do_update_pwm
    _Decrease_Speed->_do_update_pwm
    _Do_Beep->_do_update_pwm

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  143294
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                     _Decrease_Speed
                            _Do_Init
                     _Increase_Speed
                  _Initialize_Screen
                         _Set_DC_RGB
                        _Set_RPM_RGB
                         _Toggle_Fan
                      _Update_Screen
                            ___awdiv
                            ___fttol
                             ___wmul
                      _do_update_pwm
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    4018
                                             26 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             21 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     418
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              6     3      3    5813
                                             41 COMRAM     6     3      3
                    _Wait_One_Second
                            ___ftmul
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) _Wait_One_Second                                      2     2      0      30
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        4     4      0   25675
                                              7 BANK1      4     4      0
                            ___awdiv
                            ___awmod
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1973
                                             28 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _Toggle_Fan                                           0     0      0    9715
                       _Turn_Off_Fan
                        _Turn_On_Fan
 ---------------------------------------------------------------------------------
 (2) _Turn_On_Fan                                          0     0      0    9715
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _Turn_Off_Fan                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Set_RPM_RGB                                          2     0      2    2617
                                             28 COMRAM     2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _Set_DC_RGB                                           6     4      2    2657
                                             28 COMRAM     6     4      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4    2447
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   38710
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    1803
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2396
                                             33 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2288
                                             21 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   19387
                                             54 COMRAM     8     0      8
                                              0 BANK0      2     2      0
                                              0 BANK1      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     207
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   12308
                                             43 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    4404
                                             32 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3534
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    7512
                                             25 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4879
                                             21 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3    1178
                                             17 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    5248
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2494
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2494
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2364
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2364
                                             20 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1156
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Increase_Speed                                       0     0      0   19460
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0     815
                        _DS1621_Init
                           _I2C_Init
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     284
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     284
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      64
                                             14 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     467
                                             19 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     254
                                             16 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     168
                                             16 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Decrease_Speed                                       0     0      0   19460
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _Do_Beep                                              0     0      0    9745
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _do_update_pwm                                        9     9      0    9715
                                              0 BANK1      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2435
                                             22 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     525
                                             47 COMRAM    15    11      4
                            _get_RPM (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3314
                                             26 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3246
                                             41 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2404
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Sec                                         2     2      0      30
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    2     2      0      75
                                             16 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     2     2      0     195
                                             17 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     241
                                             17 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0      60
                                             14 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0      90
                                             14 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              0 COMRAM    14    14      0
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
 ---------------------------------------------------------------------------------
 (10) _INT2_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT1_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Decrease_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           _get_RPM (ARG)
             _Wait_One_Second
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___lbtoft
               ___ftpack
         ___lbtoft
           ___ftpack
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         _get_RPM (ARG)
           _Wait_One_Second
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft
             ___ftpack
       ___lbtoft
         ___ftpack
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Increase_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           _get_RPM (ARG)
             _Wait_One_Second
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___lbtoft
               ___ftpack
         ___lbtoft
           ___ftpack
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         _get_RPM (ARG)
           _Wait_One_Second
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft
             ___ftpack
       ___lbtoft
         ___ftpack
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Set_DC_RGB
     ___awdiv
       ___wmul (ARG)
   _Set_RPM_RGB
     ___awdiv
       ___wmul (ARG)
   _Toggle_Fan
     _Turn_Off_Fan
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           _get_RPM (ARG)
             _Wait_One_Second
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___lbtoft
               ___ftpack
         ___lbtoft
           ___ftpack
   _Update_Screen
     ___awdiv
       ___wmul (ARG)
     ___awmod
       ___awdiv (ARG)
         ___wmul (ARG)
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___wmul (ARG)
   ___fttol
     _get_RPM (ARG)
       _Wait_One_Second
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft
         ___ftpack
   ___wmul
   _do_update_pwm
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
       _get_RPM (ARG)
         _Wait_One_Second
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
     ___lbtoft
       ___ftpack
   _get_RPM
     _Wait_One_Second
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___lbtoft
       ___ftpack
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_ISR
   _INT1_ISR
   _INT2_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      B      2A       7       16.4%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      2      80       5      100.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     3E      71       1       89.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     11B      34        0.0%
DATA                 0      0     11B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Nov 09 18:47:14 2023

                      drawCircle@f 0028                        drawCircle@r 001E  
                      drawCircle@x 002A                        drawCircle@y 002C  
               __size_of_I2C_Start 0012                        _SSPSTATbits 000FC7  
               __size_of_I2C_Write 003E                       drawCircle@x0 001A  
                     drawCircle@y0 001C                                 _D2 00B9  
                               l35 1BB6                                 l45 2130  
                               l95 1776                                 l89 1F1E  
                     ___awdiv@sign 001A               __size_of_Turn_On_Fan 0010  
              ___wmul@multiplicand 0011                    ??_Update_Screen 0126  
                              l111 0E08                                l120 0D5E  
                              l113 0CE2                                l151 1498  
                              l312 1D82                                l152 14BA  
                              l315 1E52                                l251 2120  
                              l148 14BC                                l149 1428  
                              l246 1CF0                                l159 0A62  
                              l282 1C0C                                l392 1EBC  
                              l624 1FD8                                l627 21D8  
                              l920 19C8                                l921 19CA  
                              l914 19A2                                l923 19E4  
                              l853 04DC                                l918 19BC  
                              l926 1F70                                l791 2018  
                              l919 19BE                                _FAN 004F  
                              l890 0734                                _PR2 000FCB  
                              _day 005C                  _Deactivate_Buzzer 2216  
             __size_of_I2C_ReStart 0016                                _dow 005D  
                              _nbr 00FC                                _rpm 0049  
            __size_of_Turn_Off_Fan 000A                                _rps 004B  
                              _txt 004D                       ___awmod@sign 0022  
                              wreg 000FE8                 ?_Deactivate_Buzzer 0001  
                       _Fan_SW_Txt 00E9                    ??_fillRectangle 001B  
                     __CFG_LVP$OFF 000000            _TFT_GreenTab_Initialize 1F20  
                     ___ftdiv@cntr 0033                       ___ftdiv@sign 0038  
                     __CFG_WDT$OFF 000000                               l1132 187E  
                   drawFastVLine@h 0017                               l1119 16EE  
                             l1321 1126                               l1234 1658  
                             l1306 13E0                               l1245 1630  
                             l1309 13AC                               l2150 2002  
                             l1342 12FE                               l2320 1D64  
                             l2312 1D4E                               l2330 1D78  
                             l2154 2010                               l2332 1D7E  
                             l2308 1D46                     drawFastVLine@x 0020  
                             l1357 1FB8                     drawFastVLine@y 0016  
                             l2318 1D5C                               l2326 1D6C  
                             l1383 1F96                               l2272 1FC2  
                             l1449 1B62                               l1459 1C9E  
                             l5100 15B4                               l2276 1FD0  
                             l4220 1B30                               l5110 1618  
                             l5102 15C0                               l4230 1B56  
                             l4222 1B38                               l5112 1624  
                             l5104 15E0                               l1488 1E04  
                             l4240 1C74                               l4128 1FB0  
                             l1682 1E5C                               l5202 13BA  
                             l4218 1B26                               l4242 1C7C  
                             l6010 0718                               l1684 1E62  
                             l1676 1E4A                               l5124 164A  
                             l5108 15F8                               l5212 104E  
                             l6020 0058                               l6004 06F2  
                             l1694 1E74                               l5118 1638  
                             l5214 1068                               l4246 1C92  
                             l4238 1C6A                               l6006 0704  
                             l5240 10D2                               l5232 10AA  
                             l5072 1738                               l5400 0CC4  
                             l6008 070C                               l5250 1100  
                             l5242 10D8                               l5218 1076  
                             l5146 1F00                               l5082 175E  
                             l5154 1CFC                               l5410 0CE6  
                             l6042 012E                               l6026 0098  
                             l5172 1346                               l5236 10BC  
                             l5260 1238                               l5084 176C  
                             l5068 1700                               l5420 0D52  
                             l5404 0CD0                               l6036 00EE  
                             l5166 131E                               l5246 10EA  
                             l5510 1560                               l5158 1D18  
                             l5430 0D80                               l5422 0D56  
                             l5414 0CEE                               l6070 01C2  
                             l5096 15A4                               l5192 1386  
                             l5168 1338                               l5440 0DFC  
                             l5432 0DA8                               l5408 0CDE  
                             l6072 01D8                               l5290 12CA  
                             l5282 12A2                               l3930 1988  
                             l5602 0B38                               l5418 0D1E  
                             l5284 12A8                               l5292 12D4  
                             l5452 1DD2                               l5540 0E92  
                             l5278 1292                               l3950 19B4  
                             l3942 19A6                               l3934 1992  
                             l5438 0DD4                               l5446 0E04  
                             l5454 1DD8                               l5470 1460  
                             l5710 1858                               l5702 1830  
   I2C_Write_Cmd_Write_Data@Device 0013                               l5296 12EC  
                             l5288 12BC                               l5552 0F02  
                             l5544 0EB0                               l5528 0E36  
                             l5464 13F2                               l5640 1ED2  
                             l5704 183A                               l5810 2086  
                             l3938 199A                               l5802 204A  
                             l5554 0F0A                               l5490 14A6  
                             l5482 148E                               l5650 1670  
                             l5706 1842                               l5714 1864  
                             l5812 208C                               l5804 2050  
                             l5820 1A1C                               l5900 0442  
                             l6380 0C5C                               l6356 0B6E  
                             l5574 0A48                               l5486 149C  
                             l5638 1EC8                               l5662 1698  
                             l5830 1BD0                               l5718 1874  
                             l5496 14B6                               l5664 16A2  
                             l5656 1682                               l5912 04AE  
                             l5682 16E4                               l5674 16C8  
                             l5666 16AA                               l5834 1BE6  
                             l5930 0528                               l5828 1BCC  
                             l5924 050A                               l5908 04A6  
                             l6396 0C94                               l6388 0C78  
                             l5678 16D4                               l5694 1814  
                             l5942 055E                               l5934 0534  
                             l5952 0592                               l5944 0562  
                             l5960 05AA                               l5928 0524  
                             l5698 1822                               l5970 05EA  
                             l5938 0558                               l5890 0404  
                             l5796 211A                               l5980 0614  
                             l5972 05F4                               l5948 056E  
                             l5884 03E6                               l5990 064C  
                             l5966 05C6                               l5958 0598  
                             l5894 040E                               l5984 062C  
                             l5896 0424                               l5888 03F6  
                             l5986 0634                               l5994 0660  
                             l5978 060C                               l5996 0668  
                             l5998 06AC                               STR_1 FF56  
                             STR_2 FECE                               STR_3 FFC1  
                             STR_4 FEF9                               STR_5 FF18  
                             STR_6 FF37                               STR_7 FF8A  
                             STR_8 FFD0                               STR_9 FFF9  
                             u4040 0E6C                               u3601 1310  
                             u3460 172E                               u3621 132E  
                             u4350 1A12                               u3711 122A  
                             u3730 1256                               u3651 1040  
                             u3671 105E                               u3735 124E  
                             u3960 1420                               u3890 0DB6  
                             u3970 1456                               u4867 21E6  
                             _RBPU 007F8F                               _TRMT 007D61  
                     _DS1621_tempC 0041                       _DS1621_tempF 0043  
              ??_Deactivate_Buzzer 000F                               _date 00CE  
                             _main 0B4E                               _font FCE1  
                     ___ftpack@arg 000F                               _hour 0060  
                     ___ftpack@exp 0012                   __end_of_I2C_Init 2202  
                 __end_of_I2C_Read 1D84                               _time 00D7  
                             _year 006E                               fsr0h 000FEA  
                             fsr1h 000FE2                               fsr0l 000FE9  
                             fsr2h 000FDA                               fsr1l 000FE1  
                             indf2 000FDF                               fsr2l 000FD9  
                             _wrap 0071                               _volt 00F5  
                 __end_of_I2C_Stop 2180                               pclat 000FFA  
               __size_of_LCD_Reset 0012                               prodh 000FF4  
                             prodl 000FF3                    __end_of_Do_Beep 20E2  
                             start 0018        __size_of_I2C_Write_Cmd_Only 001A  
                  __end_of_Do_Init 1DC8                     _Increase_Speed 203A  
                  ??_drawFastVLine 001A                       ___ftmul@cntr 0028  
                  __end_of_i2cNack 220C                       ___param_bank 000010  
                     ___ftmul@sign 0029                       ___fttol@exp1 003E  
                     _Turn_Off_Fan 21EE                       ___fttol@lval 003A  
                 __end_of_INT0_ISR 2246                   __end_of_INT1_ISR 223E  
                 __end_of_INT2_ISR 2236          __end_of_Deactivate_Buzzer 221E  
                  ??_do_update_pwm 011F                    drawFastVLine@hi 001E  
                  drawFastVLine@lo 001F                              ?_main 0001  
                  __end_of___awdiv 16F0                    drawCircle@ddF_x 0024  
                            STR_10 FFF3                    drawCircle@ddF_y 0026  
                            STR_11 FFE3                              STR_12 FFE8  
                            STR_20 FFA0                              STR_13 FFDD  
                            STR_14 FFFC                              STR_15 FFF5  
                            STR_16 FFED                              STR_17 FFF1  
                            STR_18 FFB1                              STR_19 FF74  
                  __end_of___awmod 1880                    __end_of___ftdiv 13E2  
                  __end_of___ftmul 1128                              _T0CON 000FD5  
                  ___awdiv@divisor 0017                    __end_of___fttol 1300  
                            _T2CON 000FCA                              _T3CON 000FB1  
                  __end_of___lwdiv 1B6C                    __end_of___lwmod 1CA8  
                            i2l428 17C4                    ___awdiv@counter 0019  
                  drawCircle@color 0020                              _RCSTA 000FAB  
                            _TMR0H 000FD7                              _TMR0L 000FD6  
                            _TMR3L 000FB2                              _SPBRG 000FAF  
                            _PORTB 000F81                              _PORTE 000F84  
                            _TRISA 000F92                              _TRISB 000F93  
                            _TRISC 000F94                              _TRISD 000F95  
                            _TRISE 000F96                              _TXREG 000FAD  
                            _TXSTA 000FAC                    __end_of_get_RPM 1CF2  
                            _Rcmd1 0F20                              _Rcmd3 1128  
                       _i2cHighSda 2226                         _i2cHighScl 21E2  
                  __end_of_dpowers FEC6                              _color 00FA  
                            _font2 FDE0                  ??_Wait_One_Second 000F  
                            _found 005F                    __end_of_isdigit 1FBA  
                            _tempC 00ED                              _tempF 00F1  
                            _month 0062                      ___ftpack@sign 0013  
                            _putch 21D4                  __end_of_I2C_Start 2192  
                __end_of_I2C_Write 1E82                     __CFG_BOREN$OFF 000000  
                            tablat 000FF5                              status 000FD8  
           __end_of_Increase_Speed 2058                  ?_DS1621_Read_Temp 0012  
                  write_data@data_ 0011                 ??_DS1621_Read_Temp 0014  
                  __initialization 1880                      ??_Set_RPM_RGB 001F  
                     __end_of_main 0CB4                       __end_of_font FDE0  
                 __end_of_Rcmd2red 1E44                   ??_Decrease_Speed 003F  
                           ??_main 003F                      ___fttol@sign1 0039  
                    __activetblptr 000002                  ?_DS3231_Read_Time 0001  
                __end_of_LCD_Reset 215C                         _Set_DC_RGB 19E6  
        ??_TFT_GreenTab_Initialize 001B                 ??_DS3231_Read_Time 0012  
                           ?_Rcmd1 0001                             ?_Rcmd3 0001  
          __size_of_init_INTERRUPT 0016                          I2C_Init@c 000F  
                        I2C_Read@n 0010                             _ADCON0 000FC2  
                           _ADCON1 000FC1                             _ADCON2 000FC0  
              DS1621_Read_Temp@Cmd 0014                             _ADRESH 000FC4  
                           _ADRESL 000FC3                             _CCPR1L 000FBE  
                           _CCPR2L 000FBB                   ___awdiv@dividend 0015  
               __size_of_i2cLowSda 000A                 __size_of_i2cLowScl 0008  
                           _HEATER 0050                             ?_putch 0001  
                 __end_of___ftpack 165A                   __end_of___lbtoft 1F98  
                        ??_Do_Beep 003F                             _DC_Txt 00E5  
                           i2l3270 17B0                             i2l3274 17BA  
                        ??_Do_Init 0015                             _OSCCON 000FD3  
                           _SPBRGH 000FB0                             _SSPBUF 000FC9  
                  ?_Increase_Speed 0001                          ??_i2cNack 000F  
                     _Alarm_SW_Txt 00C5                   __end_of_delay_ms 1BBE  
                           _i2cAck 2192                   __end_of_fillRect 1D3C  
                 __end_of_drawChar 0E0A                 __size_of_OpenUSART 0070  
         __size_of_Activate_Buzzer 0012                             ___wmul 1F4A  
                        ??___awdiv 0019                   __end_of_drawtext 0F20  
                        ??___awmod 0021                          ??___ftdiv 0030  
                        ??___ftmul 0021                          ??___fttol 0034  
                           _chkisr 0008                          ??___lwdiv 0013  
                           _array1 0080                          ??___lwmod 001A  
                           _buffer 0100                             _nec_ok 0047  
                           clear_0 1886                             clear_1 1892  
                 ___awdiv@quotient 001B                             _minute 0061  
                           _second 0064            DS3231_Setup_Time@Device 0012  
                  ___awmod@divisor 001F                          ??_get_RPM 002D  
       __size_of_Deactivate_Buzzer 0008                    ___awmod@counter 0021  
                           _printf 03DC                       drawtext@size 003E  
                           _strcpy 1EBE                             _strlen 1DC8  
            ___ftmul@f3_as_product 0025                __end_of_Set_RPM_RGB 1C0E  
                       _Toggle_Fan 210E                       __pdataCOMRAM 006F  
                        ??_isdigit 000F                          ?_I2C_Init 000F  
                        ?_I2C_Read 0001                          ?_I2C_Stop 0001  
                     __mediumconst FCE0                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
 __end_of_I2C_Write_Cmd_Write_Data 1FFA                        ?_i2cHighSda 0001  
                      ?_i2cHighScl 0001                             putch@c 000F  
                 __end_of_spiwrite 2136                         __accesstop 0080  
          __end_of__initialization 18F6                          ?_INT0_ISR 0001  
                        ?_INT1_ISR 0001                          ?_INT2_ISR 0001  
               _setup_alarm_minute 0066                 _setup_alarm_second 0067  
                    ___rparam_used 000001                         ___ftdiv@f1 002A  
                       ___ftdiv@f2 002D                         ___ftdiv@f3 0034  
                       ___lbtoft@c 001A                         ___ftmul@f1 001B  
                       ___ftmul@f2 001E                         ___fttol@f1 0030  
                    __end_of_Rcmd1 1030                      __end_of_Rcmd3 121A  
                   __pcstackCOMRAM 0001                       __pidataBANK0 1900  
                     __pidataBANK1 201A                      __end_of_font2 FEBC  
                __end_of_i2cLowSda 2216                  __end_of_i2cLowScl 2226  
                    __end_of_putch 21E2                     drawPixel@color 0017  
           __size_of_write_command 0010                         ??_I2C_Init 0013  
                      ?_Set_DC_RGB 001D                         ??_I2C_Read 000F  
                     _alarm_minute 0059                       _alarm_second 005A  
                       ??_I2C_Stop 000F                            ??_Rcmd1 001B  
                          ??_Rcmd3 001B                 __size_of_drawPixel 0030  
                __end_of_OpenUSART 19E6                            ??_putch 000F  
                       __pbssBANK0 00F5                   _setup_alarm_hour 0065  
                 _setup_alarm_time 009E                      ??_DS1621_Init 0014  
                        ?_Rcmd2red 0001                 __size_of_init_UART 0014  
                       ??_INT0_ISR 0001                         ??_INT1_ISR 0001  
                       ??_INT2_ISR 0001                    spiwrite@spidata 0010  
                       _alarm_date 0057                         _alarm_mode 0045  
                       _alarm_hour 0058                         _alarm_time 0095  
                    ?_Wait_One_Sec 0001                            ?_i2cAck 0001  
             Set_DC_RGB@duty_cycle 001D                      ??_Turn_On_Fan 003F  
                   I2C_Read@inByte 0011                            ?___wmul 000F  
              __size_of_i2cHighSda 0008                __size_of_i2cHighScl 000C  
                      _Set_RPM_RGB 1BBE                            ?_chkisr 0001  
                  _heater_set_temp 006F             __size_of_setAddrWindow 004E  
                          _CCP1CON 000FBD   I2C_Write_Cmd_Write_Data@Data_Out 0012  
                          _CCP2CON 000FBA                      ??_I2C_ReStart 000F  
                          _ALARMEN 003F                          ?___ftpack 000F  
                        ?___lbtoft 0017                    _Wait_One_Second 1FBA  
                       I2C_Write@n 0010                            ?_printf 001B  
                          ?_strcpy 000F                            ?_strlen 000F  
                      ?_Toggle_Fan 0001                  ??_Activate_Buzzer 000F  
                       _fillScreen 2094                            _MATCHED 00F8  
            __end_of_Update_Screen 03DC                         _drawCircle 09A0  
                   _init_INTERRUPT 20E2                          ?_delay_ms 0015  
                        ?_fillRect 0021                          ?_drawChar 002C  
                          _SSPCON1 000FC6                            _SSPSTAT 000FC7  
                          _RPM_Txt 00E0              __end_of_fillRectangle 14BE  
                          _Do_Beep 20CA                          ?_drawtext 0037  
                _DS3231_Setup_Time 1AB0                            _Do_Init 1D84  
         _I2C_Write_Cmd_Write_Data 1FDA         __end_of_I2C_Write_Cmd_Only 20CA  
                       ??_Rcmd2red 0012             DS1621_Read_Temp@Device 0016  
                   ??_Wait_One_Sec 000F                            _i2cNack 2202  
               ?_DS3231_Setup_Time 0001                      _write_command 21C4  
                        _I2C_Start 2180                          _I2C_Write 1E44  
                  __size_of_i2cAck 0012                            __Hparam 0000  
                          __Lparam 0000                __size_of_Set_DC_RGB 0066  
              __end_of_DS1621_Init 2076                  __end_of_drawPixel 1F20  
              ??_DS3231_Setup_Time 0011              __end_of_drawFastVLine 1778  
                          ___awdiv 165A                            ___awmod 17FE  
                          ___ftdiv 1300                    __size_of___wmul 0028  
                          ___ftmul 1030                            ___fttol 121A  
                          ___lwdiv 1B10                            ___lwmod 1C5C  
                  __size_of_chkisr 17F6                          ?_spiwrite 0001  
                          __pcinit 1880                         ??___ftpack 0014  
                       ??___lbtoft 001A                            __ramtop 1000  
                          _get_RPM 1CA8                            __ptext0 0B4E  
                          __ptext1 03DC                            __ptext2 21D4  
                          __ptext3 1F98                            __ptext4 1C5C  
                          __ptext5 1B10          __size_of_DS1621_Read_Temp 003C  
                          __ptext6 1CA8                            __ptext7 1FBA  
                          __ptext8 001C                            __ptext9 17FE  
                  __size_of_printf 035A                  __end_of_init_UART 214A  
              __end_of_Turn_On_Fan 21B4             __end_of_init_INTERRUPT 20F8  
                        _T0CONbits 000FD5                    __size_of_strcpy 0032  
                  __size_of_strlen 003E                  __end_of_hexpowers FECE  
         DS3231_Setup_Time@Address 0011                            _dpowers FEBC  
            __end_of_do_update_pwm 1594                            _isdigit 1F98  
                        _T3CONbits 000FB1                   ___awmod@dividend 001D  
                       _duty_cycle 005E                         ??_delay_ms 0017  
              __end_of_I2C_ReStart 210E                      drawtext@_text 0038  
                    drawtext@color 003A                         ??_fillRect 0026  
        __end_of_DS3231_Setup_Time 1B10                   ??_Increase_Speed 003F  
                       ??_drawChar 0033                          _LCD_Reset 214A  
                    _setAddrWindow 1C0E                     __pintcode_body 1778  
                    Wait_One_Sec@k 000F                         delay_ms@ms 0015  
             end_of_initialization 18F6                          _INT0_flag 0051  
                        _INT1_flag 0052                          _INT2_flag 0053  
                       ??_drawtext 00FE                     ?_write_command 0001  
                    __Lmediumconst FCE0          __size_of_DS3231_Read_Time 0064  
                          int_func 1778            DS3231_Read_Time@Address 0012  
                       ?_I2C_Start 0001                         ?_I2C_Write 0001  
                       get_RPM@RPS 002D                __size_of_Toggle_Fan 0014  
                       _tempSecond 0070            __end_of_Wait_One_Second 1FDA  
                        _RCSTAbits 000FAB                            printf@c 0036  
                          printf@f 001B                            postdec1 000FE5  
                          postdec2 000FDD                            postinc0 000FEE  
                          postinc2 000FDE                         ??_spiwrite 000F  
                          strlen@s 000F        I2C_Write_Cmd_Write_Data@Cmd 0011  
                        _PORTAbits 000F80                   drawtext@cursor_x 0125  
                 drawtext@cursor_y 0124                          _PORTBbits 000F81  
                        _PORTCbits 000F82                          _PORTDbits 000F83  
                 I2C_Write@outByte 000F                    ?_init_INTERRUPT 0001  
                       _setup_date 00A7                        ?_fillScreen 0022  
                       _setup_hour 0069                         _setup_time 00B0  
                       _setup_year 006D                        ?_drawCircle 001A  
                       drawChar@bg 0030                          _TRISCbits 000F94  
                        _TRISDbits 000F95                       ??_i2cHighSda 000F  
                     ??_i2cHighScl 000F                  __size_of_I2C_Init 000A  
                __size_of_I2C_Read 0048                  __size_of_I2C_Stop 0012  
                   ?_setAddrWindow 0012                         ?_LCD_Reset 0001  
                 drawtext@textsize 0120                         drawPixel@x 0019  
                       drawPixel@y 0016                        _DS1621_Init 2058  
                      ___ftdiv@exp 0037                        printf@width 0034  
                        _TXSTAbits 000FAC                  __size_of_INT0_ISR 0008  
                __size_of_INT1_ISR 0008                  __size_of_INT2_ISR 0008  
                   __end_of_i2cAck 21A4                        ___ftmul@exp 0024  
         DS1621_Read_Temp@Data_Ret 0015                        _Turn_On_Fan 21A4  
               __end_of_i2cHighSda 222E                 __end_of_i2cHighScl 21EE  
                   __end_of___wmul 1F72                      delay_ms@count 0019  
                       _write_data 21B4                      __pidataCOMRAM 2246  
                   __end_of_chkisr 17FE           ?_TFT_GreenTab_Initialize 0001  
                      _I2C_ReStart 20F8                         drawtext@bg 003C  
                        _Nec_code1 0054                          _i2cLowSda 220C  
                        _i2cLowScl 221E               __end_of_Wait_One_Sec 201A  
                   __end_of_printf 0736                       ??_Set_DC_RGB 001F  
                 Wait_One_Second@k 000F                     __end_of_strcpy 1EF0  
                   __end_of_strlen 1E06                          _Nec_state 0055  
              start_initialization 1880             Update_Screen@neg_tempF 0128  
       __size_of_DS3231_Setup_Time 0060            __size_of_Decrease_Speed 001E  
                  ??_write_command 0011                          _OpenUSART 1976  
                 __CFG_OSC$INTIO67 000000                        ??_I2C_Start 000F  
                      ??_I2C_Write 000F                           ??_i2cAck 000F  
                __size_of_Rcmd2red 003E                __size_of_fillScreen 001C  
              __size_of_drawCircle 01AE                    _Activate_Buzzer 215C  
               __end_of_Set_DC_RGB 1A4C                   ?_Wait_One_Second 0001  
                         ??___wmul 0013                       ?_Set_RPM_RGB 001D  
                    ?_Turn_Off_Fan 0001                           ??_chkisr 0001  
                      __pdataBANK0 0080                        __pdataBANK1 0100  
                  setAddrWindow@x0 0015                    setAddrWindow@x1 0013  
                  setAddrWindow@y0 0012                    setAddrWindow@y1 0014  
                         ??_printf 0029                   _DS1621_Read_Temp 1E82  
                         ??_strcpy 0013                           ??_strlen 0011  
                     ??_Toggle_Fan 003F                         ?_i2cLowSda 0001  
                       ?_i2cLowScl 0001                  __size_of___ftpack 00C6  
                __size_of___lbtoft 0026                        __pbssCOMRAM 003F  
       ??_I2C_Write_Cmd_Write_Data 0013                    ??_setAddrWindow 0015  
                    __pcstackBANK0 00FE                      __pcstackBANK1 011F  
                      ??_LCD_Reset 001B                       _isdigit$2327 0010  
                __size_of_delay_ms 0052                           ?_Do_Beep 0001  
                         ?_Do_Init 0001                  __size_of_fillRect 004A  
                __size_of_drawChar 0156                         ?_OpenUSART 000F  
                 _DS3231_Read_Time 1A4C                _Heater_Set_Temp_Txt 00C9  
                         ?_i2cNack 0001                  __size_of_drawtext 0116  
                 ___lwdiv@dividend 000F                 __end_of_Toggle_Fan 2122  
                      I2C_Read@ack 000F                          __pintcode 0008  
  __end_of_TFT_GreenTab_Initialize 1F4A                     ??_Turn_Off_Fan 000F  
                    __pmediumconst FCE0                           ?___awdiv 0015  
                         ?___awmod 001D                           ?___ftdiv 002A  
                         ?___ftmul 001B                           ?___fttol 0030  
                        __tft_type 0056                           ?___lwdiv 000F  
               _I2C_Write_Cmd_Only 20B0                           ?___lwmod 0016  
               drawFastVLine@color 0018                        ?_write_data 0001  
                        _drawPixel 1EF0                           ?_get_RPM 002A  
                __size_of_spiwrite 0014                ?_I2C_Write_Cmd_Only 0011  
                         ?_isdigit 0001                           _I2C_Init 21F8  
                         _I2C_Read 1D3C                           _I2C_Stop 216E  
                _Initialize_Screen 0736                     __size_of_Rcmd1 0110  
                   __size_of_Rcmd3 00F2                          _init_UART 2136  
         I2C_Write_Cmd_Only@Device 0012                          _hexpowers FEC6  
               ?_Initialize_Screen 0001                   ___lwdiv@quotient 0013  
                   __size_of_putch 000E            __end_of_Activate_Buzzer 216E  
                         _INT0_ISR 223E                           _INT1_ISR 2236  
                         _INT2_ISR 222E                     ___wmul@product 0013  
              ??_Initialize_Screen 003F               ??_I2C_Write_Cmd_Only 0012  
                         _PIE1bits 000F9D             __size_of_Update_Screen 03C0  
           DS3231_Read_Time@Device 0013                           _PIR1bits 000F9E  
                 ??_init_INTERRUPT 000F              __size_of_Wait_One_Sec 0020  
                        _setup_day 0068                  DS1621_Init@Device 0014  
                        fillRect@h 0023                          fillRect@i 002A  
                        fillRect@w 0022                          fillRect@x 0029  
                        fillRect@y 0021                          drawChar@c 002D  
                        drawChar@i 0036                          drawChar@j 0035  
                        drawChar@x 0034                          drawChar@y 002C  
                       ?_drawPixel 0016             __size_of_fillRectangle 00DC  
                       _ADCON0bits 000FC2                  ___wmul@multiplier 000F  
        __end_of_Initialize_Screen 09A0                        ??_i2cLowSda 000F  
                      ??_i2cLowScl 000F                       ??_fillScreen 0024  
                     ??_drawCircle 0022                         printf@flag 0033  
                       printf@prec 0030                         ?_init_UART 0001  
                   _Decrease_Speed 2076                        _INTCON2bits 000FF1  
                      _INTCON3bits 000FF0                          copy_data0 18AC  
                        copy_data1 18CC                          drawtext@i 0122  
           __size_of_drawFastVLine 0088                          drawtext@x 011F  
                        drawtext@y 0037                  write_command@cmd_ 0011  
                      ??_OpenUSART 0011                   __size_of_Do_Beep 0018  
                     ?_DS1621_Init 0001                           _Rcmd2red 1E06  
                 __size_of_Do_Init 0044                __size_of_write_data 0010  
                  OpenUSART@config 0011                   __size_of_i2cNack 000A  
                    _RTC_ALARM_Txt 00CC                       _Wait_One_Sec 1FFA  
                         __Hrparam 0000             __size_of_do_update_pwm 00D6  
               __end_of_fillScreen 20B0                           __Lrparam 0000  
               __end_of_drawCircle 0B4E                       ?_Turn_On_Fan 0001  
                 __size_of___awdiv 0096                   __size_of___awmod 0082  
                 __size_of___ftdiv 00E2                   __size_of___ftmul 00F8  
                 __size_of___fttol 00E6                   __size_of___lwdiv 005C  
                         _Volt_Txt 00C0                   __size_of___lwmod 004C  
             __size_of_Set_RPM_RGB 0050                           ___ftpack 1594  
                         ___lbtoft 1F72                       ?_I2C_ReStart 0001  
                 __size_of_get_RPM 004A                      _Update_Screen 001C  
                 __size_of_isdigit 0022                           _delay_ms 1B6C  
           __end_of_Decrease_Speed 2094                    ___lwdiv@divisor 0011  
                  ___lwdiv@counter 0015                           __ptext10 210E  
                         __ptext11 21A4                           __ptext20 0E0A  
                         __ptext12 21EE                           __ptext21 1DC8  
                         __ptext13 1BBE                           __ptext30 1E06  
                         __ptext22 0CB4                           __ptext14 19E6  
                         __ptext31 0F20                           __ptext23 1CF2  
                         __ptext15 165A                           __ptext40 2136  
                         __ptext32 21B4                           __ptext24 16F0  
                         __ptext16 0736                           __ptext41 1976  
                         __ptext33 21C4                           __ptext25 09A0  
                         __ptext17 1EBE                           __ptext50 1F72  
                         __ptext42 20E2                           __ptext34 2122  
                         __ptext26 1EF0                           __ptext18 2094  
                         __ptext51 121A                           __ptext43 21F8  
                         __ptext35 214A                           __ptext27 1C0E  
                         __ptext19 13E2                           __ptext60 1E82  
                         __ptext52 1030                           __ptext44 2058  
                         __ptext36 1B6C                           __ptext28 1F20  
                         __ptext61 1E44                           __ptext53 1300  
                         __ptext45 1FDA                           __ptext37 1F4A  
                         __ptext29 1128                           __ptext70 2226  
                         __ptext62 216E                           __ptext54 1594  
                         __ptext46 20B0                           __ptext38 203A  
                         __ptext71 21E2                           __ptext63 2180  
                         __ptext55 1FFA                           __ptext47 2076  
                         __ptext39 1D84                           __ptext64 1D3C  
                         __ptext56 2216                           __ptext48 20CA  
                         __ptext73 222E                           __ptext65 2202  
                         __ptext57 215C                           __ptext49 14BE  
                         __ptext74 2236                           __ptext66 2192  
                         __ptext58 1AB0                           __ptext75 223E  
                         __ptext67 20F8                           __ptext59 1A4C  
                         __ptext68 220C                           __ptext69 221E  
                    Set_DC_RGB@num 0021                           _fillRect 1CF2  
                         _drawChar 0CB4               __end_of_Turn_Off_Fan 21F8  
 __size_of_TFT_GreenTab_Initialize 002A                           _colstart 005B  
                         _drawtext 0E0A                         strcpy@from 0011  
                    _fillRectangle 13E2           __end_of_DS1621_Read_Temp 1EBE  
                 ?_Activate_Buzzer 0001                      __size_of_main 0166  
          __size_of_Increase_Speed 001E                    fillRectangle@hi 001F  
                  fillRectangle@lo 0020                      _drawFastVLine 16F0  
                        printf@idx 002D                           _spiwrite 2122  
                        printf@val 0031                        ??_drawPixel 0019  
                         _rowstart 0063           __end_of_DS3231_Read_Time 1AB0  
       __size_of_Initialize_Screen 026A                     ?_Update_Screen 0001  
                       _INTCONbits 000FF2                      _do_update_pwm 14BE  
                   OpenUSART@spbrg 000F                        ??_init_UART 0012  
                  ?_Decrease_Speed 0001                           isdigit@c 0011  
                        spiwrite@x 000F                           intlevel2 0000  
                   ?_fillRectangle 0016                   ___lwmod@dividend 0016  
            __end_of_write_command 21D4                    fillScreen@color 0022  
          do_update_pwm@duty_cycle 0125                     fillRectangle@h 0018  
                   fillRectangle@w 0017                     fillRectangle@x 0021  
                   fillRectangle@y 0016                     ?_drawFastVLine 0016  
                         printf@ap 002E                       ??_write_data 0011  
                    fillRect@color 0024           __size_of_Wait_One_Second 0020  
                   ?_do_update_pwm 0001                    ___lwmod@divisor 0018  
                         strcpy@cp 0013                           strlen@cp 0013  
                         strcpy@to 000F              I2C_Write_Cmd_Only@Cmd 0011  
                  ___lwmod@counter 001A                       _setup_minute 006A  
                     _setup_second 006C              __end_of_setAddrWindow 1C5C  
               fillRectangle@color 0019                  do_update_pwm@dc_I 0126  
                do_update_pwm@dc_f 0122                      drawChar@color 002E  
                      _setup_month 006B                     Set_RPM_RGB@rpm 001D  
               __end_of_write_data 21C4                       drawChar@line 0033  
                     drawChar@size 0032  __size_of_I2C_Write_Cmd_Write_Data 0020  
             __size_of_DS1621_Init 001E          ?_I2C_Write_Cmd_Write_Data 0011  
