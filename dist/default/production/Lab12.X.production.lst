

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Nov 21 18:33:58 2023

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    92                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    99                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   100  0000                     
   101                           	psect	idataCOMRAM
   102  002430                     __pidataCOMRAM:
   103                           	opt stack 0
   104                           
   105                           ;initializer for _fan_set_temp
   106  002430  4B                 	db	75
   107                           
   108                           ;initializer for _tempSecond
   109  002431  FF                 	db	255
   110                           
   111                           ;initializer for _wrap
   112  002432  01                 	db	1
   113                           
   114                           	psect	idataBANK0
   115  001B8E                     __pidataBANK0:
   116                           	opt stack 0
   117                           
   118                           ;initializer for _alarm_time
   119  001B8E  30                 	db	48
   120  001B8F  30                 	db	48
   121  001B90  3A                 	db	58
   122  001B91  30                 	db	48
   123  001B92  30                 	db	48
   124  001B93  3A                 	db	58
   125  001B94  30                 	db	48
   126  001B95  30                 	db	48
   127  001B96  00                 	db	0
   128                           
   129                           ;initializer for _setup_alarm_time
   130  001B97  30                 	db	48
   131  001B98  30                 	db	48
   132  001B99  3A                 	db	58
   133  001B9A  30                 	db	48
   134  001B9B  30                 	db	48
   135  001B9C  3A                 	db	58
   136  001B9D  30                 	db	48
   137  001B9E  30                 	db	48
   138  001B9F  00                 	db	0
   139                           
   140                           ;initializer for _setup_date
   141  001BA0  30                 	db	48
   142  001BA1  31                 	db	49
   143  001BA2  2F                 	db	47
   144  001BA3  30                 	db	48
   145  001BA4  31                 	db	49
   146  001BA5  2F                 	db	47
   147  001BA6  30                 	db	48
   148  001BA7  30                 	db	48
   149  001BA8  00                 	db	0
   150                           
   151                           ;initializer for _setup_time
   152  001BA9  30                 	db	48
   153  001BAA  30                 	db	48
   154  001BAB  3A                 	db	58
   155  001BAC  30                 	db	48
   156  001BAD  30                 	db	48
   157  001BAE  3A                 	db	58
   158  001BAF  30                 	db	48
   159  001BB0  30                 	db	48
   160  001BB1  00                 	db	0
   161                           
   162                           ;initializer for _D2
   163  001BB2  01                 	db	1
   164  001BB3  02                 	db	2
   165  001BB4  03                 	db	3
   166  001BB5  04                 	db	4
   167  001BB6  05                 	db	5
   168  001BB7  06                 	db	6
   169  001BB8  07                 	db	7
   170                           
   171                           ;initializer for _Volt_Txt
   172  001BB9  30                 	db	48
   173  001BBA  2E                 	db	46
   174  001BBB  30                 	db	48
   175  001BBC  30                 	db	48
   176  001BBD  56                 	db	86
   177  001BBE  00                 	db	0
   178                           
   179                           ;initializer for _Fan_Set_Temp_Txt
   180  001BBF  30                 	db	48
   181  001BC0  37                 	db	55
   182  001BC1  35                 	db	53
   183  001BC2  46                 	db	70
   184  001BC3  00                 	db	0
   185                           
   186                           ;initializer for _setup_fan_set_text
   187  001BC4  30                 	db	48
   188  001BC5  37                 	db	55
   189  001BC6  35                 	db	53
   190  001BC7  46                 	db	70
   191  001BC8  00                 	db	0
   192                           
   193                           ;initializer for _Alarm_SW_Txt
   194  001BC9  4F                 	db	79
   195  001BCA  46                 	db	70
   196  001BCB  46                 	db	70
   197  001BCC  00                 	db	0
   198                           
   199                           ;initializer for _RTC_ALARM_Txt
   200  001BCD  30                 	db	48
   201  001BCE  00                 	db	0
   202                           
   203                           ;initializer for _date
   204  001BCF  30                 	db	48
   205  001BD0  30                 	db	48
   206  001BD1  2F                 	db	47
   207  001BD2  30                 	db	48
   208  001BD3  30                 	db	48
   209  001BD4  2F                 	db	47
   210  001BD5  30                 	db	48
   211  001BD6  30                 	db	48
   212  001BD7  00                 	db	0
   213                           
   214                           ;initializer for _time
   215  001BD8  30                 	db	48
   216  001BD9  30                 	db	48
   217  001BDA  3A                 	db	58
   218  001BDB  30                 	db	48
   219  001BDC  30                 	db	48
   220  001BDD  3A                 	db	58
   221  001BDE  30                 	db	48
   222  001BDF  30                 	db	48
   223  001BE0  00                 	db	0
   224                           
   225                           ;initializer for _RPM_Txt
   226  001BE1  30                 	db	48
   227  001BE2  30                 	db	48
   228  001BE3  30                 	db	48
   229  001BE4  30                 	db	48
   230  001BE5  00                 	db	0
   231                           
   232                           ;initializer for _DC_Txt
   233  001BE6  30                 	db	48
   234  001BE7  30                 	db	48
   235  001BE8  30                 	db	48
   236  001BE9  00                 	db	0
   237                           
   238                           ;initializer for _Fan_SW_Txt
   239  001BEA  4F                 	db	79
   240  001BEB  46                 	db	70
   241  001BEC  46                 	db	70
   242  001BED  00                 	db	0
   243                           
   244                           ;initializer for _tempC
   245  001BEE  2B                 	db	43
   246  001BEF  32                 	db	50
   247  001BF0  35                 	db	53
   248  001BF1  00                 	db	0
   249                           
   250                           ;initializer for _tempF
   251  001BF2  2B                 	db	43
   252  001BF3  37                 	db	55
   253  001BF4  37                 	db	55
   254  001BF5  00                 	db	0
   255                           
   256                           	psect	idataBANK1
   257  001CC0                     __pidataBANK1:
   258                           	opt stack 0
   259                           
   260                           ;initializer for _array2
   261  001CC0  0001               	dw	1
   262  001CC2  0001               	dw	1
   263  001CC4  0001               	dw	1
   264  001CC6  0006               	dw	6
   265  001CC8  0006               	dw	6
   266  001CCA  0002               	dw	2
   267  001CCC  0004               	dw	4
   268  001CCE  0004               	dw	4
   269  001CD0  0005               	dw	5
   270  001CD2  0007               	dw	7
   271  001CD4  0007               	dw	7
   272  001CD6  0007               	dw	7
   273  001CD8  0007               	dw	7
   274  001CDA  0007               	dw	7
   275  001CDC  0007               	dw	7
   276  001CDE  0007               	dw	7
   277  001CE0  0007               	dw	7
   278  001CE2  0007               	dw	7
   279  001CE4  0007               	dw	7
   280  001CE6  0007               	dw	7
   281  001CE8  0007               	dw	7
   282                           
   283                           ;initializer for _array1
   284  001CEA  A2                 	db	162
   285  001CEB  62                 	db	98
   286  001CEC  E2                 	db	226
   287  001CED  22                 	db	34
   288  001CEE  02                 	db	2
   289  001CEF  C2                 	db	194
   290  001CF0  E0                 	db	224
   291  001CF1  A8                 	db	168
   292  001CF2  90                 	db	144
   293  001CF3  68                 	db	104
   294  001CF4  98                 	db	152
   295  001CF5  B0                 	db	176
   296  001CF6  30                 	db	48
   297  001CF7  18                 	db	24
   298  001CF8  7A                 	db	122
   299  001CF9  10                 	db	16
   300  001CFA  38                 	db	56
   301  001CFB  5A                 	db	90
   302  001CFC  42                 	db	66
   303  001CFD  4A                 	db	74
   304  001CFE  52                 	db	82
   305                           
   306                           ;initializer for _buffer
   307  001CFF  20                 	db	32
   308  001D00  45                 	db	69
   309  001D01  43                 	db	67
   310  001D02  45                 	db	69
   311  001D03  33                 	db	51
   312  001D04  33                 	db	51
   313  001D05  30                 	db	48
   314  001D06  31                 	db	49
   315  001D07  4C                 	db	76
   316  001D08  20                 	db	32
   317  001D09  46                 	db	70
   318  001D0A  41                 	db	65
   319  001D0B  32                 	db	50
   320  001D0C  31                 	db	49
   321  001D0D  5F                 	db	95
   322  001D0E  53                 	db	83
   323  001D0F  32                 	db	50
   324  001D10  00                 	db	0
   325  001D11  00                 	db	0
   326  001D12  00                 	db	0
   327  001D13  00                 	db	0
   328  001D14  00                 	db	0
   329  001D15  00                 	db	0
   330  001D16  00                 	db	0
   331  001D17  00                 	db	0
   332  001D18  00                 	db	0
   333  001D19  00                 	db	0
   334  001D1A  00                 	db	0
   335  001D1B  00                 	db	0
   336  001D1C  00                 	db	0
   337  001D1D  00                 	db	0
   338                           
   339                           	psect	mediumconst
   340  00FD38                     __pmediumconst:
   341                           	opt stack 0
   342  00FD38  00                 	db	0
   343  00FD39                     _font:
   344                           	opt stack 0
   345  00FD39  00                 	db	0
   346  00FD3A  00                 	db	0
   347  00FD3B  00                 	db	0
   348  00FD3C  00                 	db	0
   349  00FD3D  00                 	db	0
   350  00FD3E  00                 	db	0
   351  00FD3F  00                 	db	0
   352  00FD40  5F                 	db	95
   353  00FD41  00                 	db	0
   354  00FD42  00                 	db	0
   355  00FD43  00                 	db	0
   356  00FD44  07                 	db	7
   357  00FD45  00                 	db	0
   358  00FD46  07                 	db	7
   359  00FD47  00                 	db	0
   360  00FD48  14                 	db	20
   361  00FD49  7F                 	db	127
   362  00FD4A  14                 	db	20
   363  00FD4B  7F                 	db	127
   364  00FD4C  14                 	db	20
   365  00FD4D  24                 	db	36
   366  00FD4E  2A                 	db	42
   367  00FD4F  7F                 	db	127
   368  00FD50  2A                 	db	42
   369  00FD51  12                 	db	18
   370  00FD52  23                 	db	35
   371  00FD53  13                 	db	19
   372  00FD54  08                 	db	8
   373  00FD55  64                 	db	100
   374  00FD56  62                 	db	98
   375  00FD57  36                 	db	54
   376  00FD58  49                 	db	73
   377  00FD59  56                 	db	86
   378  00FD5A  20                 	db	32
   379  00FD5B  50                 	db	80
   380  00FD5C  00                 	db	0
   381  00FD5D  08                 	db	8
   382  00FD5E  07                 	db	7
   383  00FD5F  03                 	db	3
   384  00FD60  00                 	db	0
   385  00FD61  00                 	db	0
   386  00FD62  1C                 	db	28
   387  00FD63  22                 	db	34
   388  00FD64  41                 	db	65
   389  00FD65  00                 	db	0
   390  00FD66  00                 	db	0
   391  00FD67  41                 	db	65
   392  00FD68  22                 	db	34
   393  00FD69  1C                 	db	28
   394  00FD6A  00                 	db	0
   395  00FD6B  2A                 	db	42
   396  00FD6C  1C                 	db	28
   397  00FD6D  7F                 	db	127
   398  00FD6E  1C                 	db	28
   399  00FD6F  2A                 	db	42
   400  00FD70  08                 	db	8
   401  00FD71  08                 	db	8
   402  00FD72  3E                 	db	62
   403  00FD73  08                 	db	8
   404  00FD74  08                 	db	8
   405  00FD75  00                 	db	0
   406  00FD76  80                 	db	128
   407  00FD77  70                 	db	112
   408  00FD78  30                 	db	48
   409  00FD79  00                 	db	0
   410  00FD7A  08                 	db	8
   411  00FD7B  08                 	db	8
   412  00FD7C  08                 	db	8
   413  00FD7D  08                 	db	8
   414  00FD7E  08                 	db	8
   415  00FD7F  00                 	db	0
   416  00FD80  00                 	db	0
   417  00FD81  60                 	db	96
   418  00FD82  60                 	db	96
   419  00FD83  00                 	db	0
   420  00FD84  20                 	db	32
   421  00FD85  10                 	db	16
   422  00FD86  08                 	db	8
   423  00FD87  04                 	db	4
   424  00FD88  02                 	db	2
   425  00FD89  3E                 	db	62
   426  00FD8A  51                 	db	81
   427  00FD8B  49                 	db	73
   428  00FD8C  45                 	db	69
   429  00FD8D  3E                 	db	62
   430  00FD8E  00                 	db	0
   431  00FD8F  42                 	db	66
   432  00FD90  7F                 	db	127
   433  00FD91  40                 	db	64
   434  00FD92  00                 	db	0
   435  00FD93  72                 	db	114
   436  00FD94  49                 	db	73
   437  00FD95  49                 	db	73
   438  00FD96  49                 	db	73
   439  00FD97  46                 	db	70
   440  00FD98  21                 	db	33
   441  00FD99  41                 	db	65
   442  00FD9A  49                 	db	73
   443  00FD9B  4D                 	db	77
   444  00FD9C  33                 	db	51
   445  00FD9D  18                 	db	24
   446  00FD9E  14                 	db	20
   447  00FD9F  12                 	db	18
   448  00FDA0  7F                 	db	127
   449  00FDA1  10                 	db	16
   450  00FDA2  27                 	db	39
   451  00FDA3  45                 	db	69
   452  00FDA4  45                 	db	69
   453  00FDA5  45                 	db	69
   454  00FDA6  39                 	db	57
   455  00FDA7  3C                 	db	60
   456  00FDA8  4A                 	db	74
   457  00FDA9  49                 	db	73
   458  00FDAA  49                 	db	73
   459  00FDAB  31                 	db	49
   460  00FDAC  41                 	db	65
   461  00FDAD  21                 	db	33
   462  00FDAE  11                 	db	17
   463  00FDAF  09                 	db	9
   464  00FDB0  07                 	db	7
   465  00FDB1  36                 	db	54
   466  00FDB2  49                 	db	73
   467  00FDB3  49                 	db	73
   468  00FDB4  49                 	db	73
   469  00FDB5  36                 	db	54
   470  00FDB6  46                 	db	70
   471  00FDB7  49                 	db	73
   472  00FDB8  49                 	db	73
   473  00FDB9  29                 	db	41
   474  00FDBA  1E                 	db	30
   475  00FDBB  00                 	db	0
   476  00FDBC  00                 	db	0
   477  00FDBD  14                 	db	20
   478  00FDBE  00                 	db	0
   479  00FDBF  00                 	db	0
   480  00FDC0  00                 	db	0
   481  00FDC1  40                 	db	64
   482  00FDC2  34                 	db	52
   483  00FDC3  00                 	db	0
   484  00FDC4  00                 	db	0
   485  00FDC5  00                 	db	0
   486  00FDC6  08                 	db	8
   487  00FDC7  14                 	db	20
   488  00FDC8  22                 	db	34
   489  00FDC9  41                 	db	65
   490  00FDCA  14                 	db	20
   491  00FDCB  14                 	db	20
   492  00FDCC  14                 	db	20
   493  00FDCD  14                 	db	20
   494  00FDCE  14                 	db	20
   495  00FDCF  00                 	db	0
   496  00FDD0  41                 	db	65
   497  00FDD1  22                 	db	34
   498  00FDD2  14                 	db	20
   499  00FDD3  08                 	db	8
   500  00FDD4  02                 	db	2
   501  00FDD5  01                 	db	1
   502  00FDD6  59                 	db	89
   503  00FDD7  09                 	db	9
   504  00FDD8  06                 	db	6
   505  00FDD9  3E                 	db	62
   506  00FDDA  41                 	db	65
   507  00FDDB  5D                 	db	93
   508  00FDDC  59                 	db	89
   509  00FDDD  4E                 	db	78
   510  00FDDE  7C                 	db	124
   511  00FDDF  12                 	db	18
   512  00FDE0  11                 	db	17
   513  00FDE1  12                 	db	18
   514  00FDE2  7C                 	db	124
   515  00FDE3  7F                 	db	127
   516  00FDE4  49                 	db	73
   517  00FDE5  49                 	db	73
   518  00FDE6  49                 	db	73
   519  00FDE7  36                 	db	54
   520  00FDE8  3E                 	db	62
   521  00FDE9  41                 	db	65
   522  00FDEA  41                 	db	65
   523  00FDEB  41                 	db	65
   524  00FDEC  22                 	db	34
   525  00FDED  7F                 	db	127
   526  00FDEE  41                 	db	65
   527  00FDEF  41                 	db	65
   528  00FDF0  41                 	db	65
   529  00FDF1  3E                 	db	62
   530  00FDF2  7F                 	db	127
   531  00FDF3  49                 	db	73
   532  00FDF4  49                 	db	73
   533  00FDF5  49                 	db	73
   534  00FDF6  41                 	db	65
   535  00FDF7  7F                 	db	127
   536  00FDF8  09                 	db	9
   537  00FDF9  09                 	db	9
   538  00FDFA  09                 	db	9
   539  00FDFB  01                 	db	1
   540  00FDFC  3E                 	db	62
   541  00FDFD  41                 	db	65
   542  00FDFE  41                 	db	65
   543  00FDFF  51                 	db	81
   544  00FE00  73                 	db	115
   545  00FE01  7F                 	db	127
   546  00FE02  08                 	db	8
   547  00FE03  08                 	db	8
   548  00FE04  08                 	db	8
   549  00FE05  7F                 	db	127
   550  00FE06  00                 	db	0
   551  00FE07  41                 	db	65
   552  00FE08  7F                 	db	127
   553  00FE09  41                 	db	65
   554  00FE0A  00                 	db	0
   555  00FE0B  20                 	db	32
   556  00FE0C  40                 	db	64
   557  00FE0D  41                 	db	65
   558  00FE0E  3F                 	db	63
   559  00FE0F  01                 	db	1
   560  00FE10  7F                 	db	127
   561  00FE11  08                 	db	8
   562  00FE12  14                 	db	20
   563  00FE13  22                 	db	34
   564  00FE14  41                 	db	65
   565  00FE15  7F                 	db	127
   566  00FE16  40                 	db	64
   567  00FE17  40                 	db	64
   568  00FE18  40                 	db	64
   569  00FE19  40                 	db	64
   570  00FE1A  7F                 	db	127
   571  00FE1B  02                 	db	2
   572  00FE1C  1C                 	db	28
   573  00FE1D  02                 	db	2
   574  00FE1E  7F                 	db	127
   575  00FE1F  7F                 	db	127
   576  00FE20  04                 	db	4
   577  00FE21  08                 	db	8
   578  00FE22  10                 	db	16
   579  00FE23  7F                 	db	127
   580  00FE24  3E                 	db	62
   581  00FE25  41                 	db	65
   582  00FE26  41                 	db	65
   583  00FE27  41                 	db	65
   584  00FE28  3E                 	db	62
   585  00FE29  7F                 	db	127
   586  00FE2A  09                 	db	9
   587  00FE2B  09                 	db	9
   588  00FE2C  09                 	db	9
   589  00FE2D  06                 	db	6
   590  00FE2E  3E                 	db	62
   591  00FE2F  41                 	db	65
   592  00FE30  51                 	db	81
   593  00FE31  21                 	db	33
   594  00FE32  5E                 	db	94
   595  00FE33  7F                 	db	127
   596  00FE34  09                 	db	9
   597  00FE35  19                 	db	25
   598  00FE36  29                 	db	41
   599  00FE37  46                 	db	70
   600  00FE38                     __end_of_font:
   601                           	opt stack 0
   602  00FE38                     _font2:
   603                           	opt stack 0
   604  00FE38  26                 	db	38
   605  00FE39  49                 	db	73
   606  00FE3A  49                 	db	73
   607  00FE3B  49                 	db	73
   608  00FE3C  32                 	db	50
   609  00FE3D  03                 	db	3
   610  00FE3E  01                 	db	1
   611  00FE3F  7F                 	db	127
   612  00FE40  01                 	db	1
   613  00FE41  03                 	db	3
   614  00FE42  3F                 	db	63
   615  00FE43  40                 	db	64
   616  00FE44  40                 	db	64
   617  00FE45  40                 	db	64
   618  00FE46  3F                 	db	63
   619  00FE47  1F                 	db	31
   620  00FE48  20                 	db	32
   621  00FE49  40                 	db	64
   622  00FE4A  20                 	db	32
   623  00FE4B  1F                 	db	31
   624  00FE4C  3F                 	db	63
   625  00FE4D  40                 	db	64
   626  00FE4E  38                 	db	56
   627  00FE4F  40                 	db	64
   628  00FE50  3F                 	db	63
   629  00FE51  63                 	db	99
   630  00FE52  14                 	db	20
   631  00FE53  08                 	db	8
   632  00FE54  14                 	db	20
   633  00FE55  63                 	db	99
   634  00FE56  03                 	db	3
   635  00FE57  04                 	db	4
   636  00FE58  78                 	db	120
   637  00FE59  04                 	db	4
   638  00FE5A  03                 	db	3
   639  00FE5B  61                 	db	97
   640  00FE5C  59                 	db	89
   641  00FE5D  49                 	db	73
   642  00FE5E  4D                 	db	77
   643  00FE5F  43                 	db	67
   644  00FE60  00                 	db	0
   645  00FE61  7F                 	db	127
   646  00FE62  41                 	db	65
   647  00FE63  41                 	db	65
   648  00FE64  41                 	db	65
   649  00FE65  02                 	db	2
   650  00FE66  04                 	db	4
   651  00FE67  08                 	db	8
   652  00FE68  10                 	db	16
   653  00FE69  20                 	db	32
   654  00FE6A  00                 	db	0
   655  00FE6B  41                 	db	65
   656  00FE6C  41                 	db	65
   657  00FE6D  41                 	db	65
   658  00FE6E  7F                 	db	127
   659  00FE6F  04                 	db	4
   660  00FE70  02                 	db	2
   661  00FE71  01                 	db	1
   662  00FE72  02                 	db	2
   663  00FE73  04                 	db	4
   664  00FE74  40                 	db	64
   665  00FE75  40                 	db	64
   666  00FE76  40                 	db	64
   667  00FE77  40                 	db	64
   668  00FE78  40                 	db	64
   669  00FE79  00                 	db	0
   670  00FE7A  03                 	db	3
   671  00FE7B  07                 	db	7
   672  00FE7C  08                 	db	8
   673  00FE7D  00                 	db	0
   674  00FE7E  20                 	db	32
   675  00FE7F  54                 	db	84
   676  00FE80  54                 	db	84
   677  00FE81  78                 	db	120
   678  00FE82  40                 	db	64
   679  00FE83  7F                 	db	127
   680  00FE84  28                 	db	40
   681  00FE85  44                 	db	68
   682  00FE86  44                 	db	68
   683  00FE87  38                 	db	56
   684  00FE88  38                 	db	56
   685  00FE89  44                 	db	68
   686  00FE8A  44                 	db	68
   687  00FE8B  44                 	db	68
   688  00FE8C  28                 	db	40
   689  00FE8D  38                 	db	56
   690  00FE8E  44                 	db	68
   691  00FE8F  44                 	db	68
   692  00FE90  28                 	db	40
   693  00FE91  7F                 	db	127
   694  00FE92  38                 	db	56
   695  00FE93  54                 	db	84
   696  00FE94  54                 	db	84
   697  00FE95  54                 	db	84
   698  00FE96  18                 	db	24
   699  00FE97  00                 	db	0
   700  00FE98  08                 	db	8
   701  00FE99  7E                 	db	126
   702  00FE9A  09                 	db	9
   703  00FE9B  02                 	db	2
   704  00FE9C  18                 	db	24
   705  00FE9D  A4                 	db	164
   706  00FE9E  A4                 	db	164
   707  00FE9F  9C                 	db	156
   708  00FEA0  78                 	db	120
   709  00FEA1  7F                 	db	127
   710  00FEA2  08                 	db	8
   711  00FEA3  04                 	db	4
   712  00FEA4  04                 	db	4
   713  00FEA5  78                 	db	120
   714  00FEA6  00                 	db	0
   715  00FEA7  44                 	db	68
   716  00FEA8  7D                 	db	125
   717  00FEA9  40                 	db	64
   718  00FEAA  00                 	db	0
   719  00FEAB  20                 	db	32
   720  00FEAC  40                 	db	64
   721  00FEAD  40                 	db	64
   722  00FEAE  3D                 	db	61
   723  00FEAF  00                 	db	0
   724  00FEB0  7F                 	db	127
   725  00FEB1  10                 	db	16
   726  00FEB2  28                 	db	40
   727  00FEB3  44                 	db	68
   728  00FEB4  00                 	db	0
   729  00FEB5  00                 	db	0
   730  00FEB6  41                 	db	65
   731  00FEB7  7F                 	db	127
   732  00FEB8  40                 	db	64
   733  00FEB9  00                 	db	0
   734  00FEBA  7C                 	db	124
   735  00FEBB  04                 	db	4
   736  00FEBC  78                 	db	120
   737  00FEBD  04                 	db	4
   738  00FEBE  78                 	db	120
   739  00FEBF  7C                 	db	124
   740  00FEC0  08                 	db	8
   741  00FEC1  04                 	db	4
   742  00FEC2  04                 	db	4
   743  00FEC3  78                 	db	120
   744  00FEC4  38                 	db	56
   745  00FEC5  44                 	db	68
   746  00FEC6  44                 	db	68
   747  00FEC7  44                 	db	68
   748  00FEC8  38                 	db	56
   749  00FEC9  FC                 	db	252
   750  00FECA  18                 	db	24
   751  00FECB  24                 	db	36
   752  00FECC  24                 	db	36
   753  00FECD  18                 	db	24
   754  00FECE  18                 	db	24
   755  00FECF  24                 	db	36
   756  00FED0  24                 	db	36
   757  00FED1  18                 	db	24
   758  00FED2  FC                 	db	252
   759  00FED3  7C                 	db	124
   760  00FED4  08                 	db	8
   761  00FED5  04                 	db	4
   762  00FED6  04                 	db	4
   763  00FED7  08                 	db	8
   764  00FED8  48                 	db	72
   765  00FED9  54                 	db	84
   766  00FEDA  54                 	db	84
   767  00FEDB  54                 	db	84
   768  00FEDC  24                 	db	36
   769  00FEDD  04                 	db	4
   770  00FEDE  04                 	db	4
   771  00FEDF  3F                 	db	63
   772  00FEE0  44                 	db	68
   773  00FEE1  24                 	db	36
   774  00FEE2  3C                 	db	60
   775  00FEE3  40                 	db	64
   776  00FEE4  40                 	db	64
   777  00FEE5  20                 	db	32
   778  00FEE6  7C                 	db	124
   779  00FEE7  1C                 	db	28
   780  00FEE8  20                 	db	32
   781  00FEE9  40                 	db	64
   782  00FEEA  20                 	db	32
   783  00FEEB  1C                 	db	28
   784  00FEEC  3C                 	db	60
   785  00FEED  40                 	db	64
   786  00FEEE  30                 	db	48
   787  00FEEF  40                 	db	64
   788  00FEF0  3C                 	db	60
   789  00FEF1  44                 	db	68
   790  00FEF2  28                 	db	40
   791  00FEF3  10                 	db	16
   792  00FEF4  28                 	db	40
   793  00FEF5  44                 	db	68
   794  00FEF6  4C                 	db	76
   795  00FEF7  90                 	db	144
   796  00FEF8  90                 	db	144
   797  00FEF9  90                 	db	144
   798  00FEFA  7C                 	db	124
   799  00FEFB  44                 	db	68
   800  00FEFC  64                 	db	100
   801  00FEFD  54                 	db	84
   802  00FEFE  4C                 	db	76
   803  00FEFF  44                 	db	68
   804  00FF00  00                 	db	0
   805  00FF01  08                 	db	8
   806  00FF02  36                 	db	54
   807  00FF03  41                 	db	65
   808  00FF04  00                 	db	0
   809  00FF05  00                 	db	0
   810  00FF06  00                 	db	0
   811  00FF07  77                 	db	119
   812  00FF08  00                 	db	0
   813  00FF09  00                 	db	0
   814  00FF0A  00                 	db	0
   815  00FF0B  41                 	db	65
   816  00FF0C  36                 	db	54
   817  00FF0D  08                 	db	8
   818  00FF0E  00                 	db	0
   819  00FF0F  02                 	db	2
   820  00FF10  01                 	db	1
   821  00FF11  02                 	db	2
   822  00FF12  04                 	db	4
   823  00FF13  02                 	db	2
   824  00FF14                     __end_of_font2:
   825                           	opt stack 0
   826  00FF14                     _dpowers:
   827                           	opt stack 0
   828  00FF14  0001               	dw	1
   829  00FF16  000A               	dw	10
   830  00FF18  0064               	dw	100
   831  00FF1A  03E8               	dw	1000
   832  00FF1C  2710               	dw	10000
   833  00FF1E                     __end_of_dpowers:
   834                           	opt stack 0
   835  00FF1E                     _hexpowers:
   836                           	opt stack 0
   837  00FF1E  0001               	dw	1
   838  00FF20  0010               	dw	16
   839  00FF22  0100               	dw	256
   840  00FF24  1000               	dw	4096
   841  00FF26                     __end_of_hexpowers:
   842                           	opt stack 0
   843  0000                     _ADCON0	set	4034
   844  0000                     _ADCON0bits	set	4034
   845  0000                     _ADCON1	set	4033
   846  0000                     _ADCON2	set	4032
   847  0000                     _ADRESH	set	4036
   848  0000                     _ADRESL	set	4035
   849  0000                     _CCP1CON	set	4029
   850  0000                     _CCP2CON	set	4026
   851  0000                     _CCPR1L	set	4030
   852  0000                     _CCPR2L	set	4027
   853  0000                     _INTCON2bits	set	4081
   854  0000                     _INTCON3bits	set	4080
   855  0000                     _INTCONbits	set	4082
   856  0000                     _OSCCON	set	4051
   857  0000                     _PIE1bits	set	3997
   858  0000                     _PIR1bits	set	3998
   859  0000                     _PORTAbits	set	3968
   860  0000                     _PORTB	set	3969
   861  0000                     _PORTCbits	set	3970
   862  0000                     _PORTDbits	set	3971
   863  0000                     _PORTE	set	3972
   864  0000                     _PORTEbits	set	3972
   865  0000                     _PR2	set	4043
   866  0000                     _RCSTA	set	4011
   867  0000                     _RCSTAbits	set	4011
   868  0000                     _SPBRG	set	4015
   869  0000                     _SPBRGH	set	4016
   870  0000                     _SSPBUF	set	4041
   871  0000                     _SSPCON1	set	4038
   872  0000                     _SSPSTAT	set	4039
   873  0000                     _SSPSTATbits	set	4039
   874  0000                     _T0CON	set	4053
   875  0000                     _T0CONbits	set	4053
   876  0000                     _T1CON	set	4045
   877  0000                     _T1CONbits	set	4045
   878  0000                     _T2CON	set	4042
   879  0000                     _T3CON	set	4017
   880  0000                     _T3CONbits	set	4017
   881  0000                     _TMR0H	set	4055
   882  0000                     _TMR0L	set	4054
   883  0000                     _TMR1H	set	4047
   884  0000                     _TMR1L	set	4046
   885  0000                     _TMR3L	set	4018
   886  0000                     _TRISA	set	3986
   887  0000                     _TRISB	set	3987
   888  0000                     _TRISC	set	3988
   889  0000                     _TRISCbits	set	3988
   890  0000                     _TRISD	set	3989
   891  0000                     _TRISDbits	set	3989
   892  0000                     _TRISE	set	3990
   893  0000                     _TXREG	set	4013
   894  0000                     _TXSTA	set	4012
   895  0000                     _TXSTAbits	set	4012
   896  0000                     _RBPU	set	32655
   897  0000                     _TRMT	set	32097
   898  00FF26                     STR_12:
   899  00FF26  25                 	db	37
   900  00FF27  30                 	db	48	;'0'
   901  00FF28  32                 	db	50	;'2'
   902  00FF29  78                 	db	120	;'x'
   903  00FF2A  3A                 	db	58	;':'
   904  00FF2B  25                 	db	37
   905  00FF2C  30                 	db	48	;'0'
   906  00FF2D  32                 	db	50	;'2'
   907  00FF2E  78                 	db	120	;'x'
   908  00FF2F  3A                 	db	58	;':'
   909  00FF30  25                 	db	37
   910  00FF31  30                 	db	48	;'0'
   911  00FF32  32                 	db	50	;'2'
   912  00FF33  78                 	db	120	;'x'
   913  00FF34  20                 	db	32
   914  00FF35  25                 	db	37
   915  00FF36  30                 	db	48	;'0'
   916  00FF37  32                 	db	50	;'2'
   917  00FF38  78                 	db	120	;'x'
   918  00FF39  2F                 	db	47
   919  00FF3A  25                 	db	37
   920  00FF3B  30                 	db	48	;'0'
   921  00FF3C  32                 	db	50	;'2'
   922  00FF3D  78                 	db	120	;'x'
   923  00FF3E  2F                 	db	47
   924  00FF3F  25                 	db	37
   925  00FF40  30                 	db	48	;'0'
   926  00FF41  32                 	db	50	;'2'
   927  00FF42  78                 	db	120	;'x'
   928  00FF43  00                 	db	0
   929  00FF44                     STR_17:
   930  00FF44  42                 	db	66	;'B'
   931  00FF45  75                 	db	117	;'u'
   932  00FF46  74                 	db	116	;'t'
   933  00FF47  74                 	db	116	;'t'
   934  00FF48  6F                 	db	111	;'o'
   935  00FF49  6E                 	db	110	;'n'
   936  00FF4A  20                 	db	32
   937  00FF4B  50                 	db	80	;'P'
   938  00FF4C  6F                 	db	111	;'o'
   939  00FF4D  73                 	db	115	;'s'
   940  00FF4E  69                 	db	105	;'i'
   941  00FF4F  74                 	db	116	;'t'
   942  00FF50  69                 	db	105	;'i'
   943  00FF51  6F                 	db	111	;'o'
   944  00FF52  6E                 	db	110	;'n'
   945  00FF53  20                 	db	32
   946  00FF54  3D                 	db	61	;'='
   947  00FF55  20                 	db	32
   948  00FF56  25                 	db	37
   949  00FF57  78                 	db	120	;'x'
   950  00FF58  0D                 	db	13
   951  00FF59  0A                 	db	10
   952  00FF5A  00                 	db	0
   953  00FF5B                     STR_16:
   954  00FF5B  43                 	db	67	;'C'
   955  00FF5C  61                 	db	97	;'a'
   956  00FF5D  6E                 	db	110	;'n'
   957  00FF5E  6E                 	db	110	;'n'
   958  00FF5F  6F                 	db	111	;'o'
   959  00FF60  74                 	db	116	;'t'
   960  00FF61  20                 	db	32
   961  00FF62  66                 	db	102	;'f'
   962  00FF63  69                 	db	105	;'i'
   963  00FF64  6E                 	db	110	;'n'
   964  00FF65  64                 	db	100	;'d'
   965  00FF66  20                 	db	32
   966  00FF67  62                 	db	98	;'b'
   967  00FF68  75                 	db	117	;'u'
   968  00FF69  74                 	db	116	;'t'
   969  00FF6A  74                 	db	116	;'t'
   970  00FF6B  6F                 	db	111	;'o'
   971  00FF6C  6E                 	db	110	;'n'
   972  00FF6D  20                 	db	32
   973  00FF6E  0D                 	db	13
   974  00FF6F  0A                 	db	10
   975  00FF70  00                 	db	0
   976  00FF71                     STR_13:
   977  00FF71  20                 	db	32
   978  00FF72  54                 	db	84	;'T'
   979  00FF73  65                 	db	101	;'e'
   980  00FF74  6D                 	db	109	;'m'
   981  00FF75  70                 	db	112	;'p'
   982  00FF76  20                 	db	32
   983  00FF77  3D                 	db	61	;'='
   984  00FF78  20                 	db	32
   985  00FF79  25                 	db	37
   986  00FF7A  64                 	db	100	;'d'
   987  00FF7B  20                 	db	32
   988  00FF7C  43                 	db	67	;'C'
   989  00FF7D  20                 	db	32
   990  00FF7E  3D                 	db	61	;'='
   991  00FF7F  20                 	db	32
   992  00FF80  25                 	db	37
   993  00FF81  64                 	db	100	;'d'
   994  00FF82  20                 	db	32
   995  00FF83  46                 	db	70	;'F'
   996  00FF84  20                 	db	32
   997  00FF85  00                 	db	0
   998  00FF86                     STR_14:
   999  00FF86  52                 	db	82	;'R'
  1000  00FF87  50                 	db	80	;'P'
  1001  00FF88  4D                 	db	77	;'M'
  1002  00FF89  20                 	db	32
  1003  00FF8A  3D                 	db	61	;'='
  1004  00FF8B  20                 	db	32
  1005  00FF8C  25                 	db	37
  1006  00FF8D  64                 	db	100	;'d'
  1007  00FF8E  20                 	db	32
  1008  00FF8F  20                 	db	32
  1009  00FF90  64                 	db	100	;'d'
  1010  00FF91  63                 	db	99	;'c'
  1011  00FF92  20                 	db	32
  1012  00FF93  3D                 	db	61	;'='
  1013  00FF94  20                 	db	32
  1014  00FF95  25                 	db	37
  1015  00FF96  64                 	db	100	;'d'
  1016  00FF97  0D                 	db	13
  1017  00FF98  0A                 	db	10
  1018  00FF99  00                 	db	0
  1019  00FF9A                     STR_1:
  1020  00FF9A  45                 	db	69	;'E'
  1021  00FF9B  43                 	db	67	;'C'
  1022  00FF9C  45                 	db	69	;'E'
  1023  00FF9D  33                 	db	51	;'3'
  1024  00FF9E  33                 	db	51	;'3'
  1025  00FF9F  30                 	db	48	;'0'
  1026  00FFA0  31                 	db	49	;'1'
  1027  00FFA1  4C                 	db	76	;'L'
  1028  00FFA2  20                 	db	32
  1029  00FFA3  46                 	db	70	;'F'
  1030  00FFA4  41                 	db	65	;'A'
  1031  00FFA5  4C                 	db	76	;'L'
  1032  00FFA6  4C                 	db	76	;'L'
  1033  00FFA7  20                 	db	32
  1034  00FFA8  32                 	db	50	;'2'
  1035  00FFA9  30                 	db	48	;'0'
  1036  00FFAA  32                 	db	50	;'2'
  1037  00FFAB  34                 	db	52	;'4'
  1038  00FFAC  00                 	db	0
  1039  00FFAD                     STR_15:
  1040  00FFAD  4E                 	db	78	;'N'
  1041  00FFAE  65                 	db	101	;'e'
  1042  00FFAF  63                 	db	99	;'c'
  1043  00FFB0  5F                 	db	95	;'_'
  1044  00FFB1  62                 	db	98	;'b'
  1045  00FFB2  75                 	db	117	;'u'
  1046  00FFB3  74                 	db	116	;'t'
  1047  00FFB4  74                 	db	116	;'t'
  1048  00FFB5  6F                 	db	111	;'o'
  1049  00FFB6  6E                 	db	110	;'n'
  1050  00FFB7  20                 	db	32
  1051  00FFB8  3D                 	db	61	;'='
  1052  00FFB9  20                 	db	32
  1053  00FFBA  25                 	db	37
  1054  00FFBB  78                 	db	120	;'x'
  1055  00FFBC  0D                 	db	13
  1056  00FFBD  0A                 	db	10
  1057  00FFBE  00                 	db	0
  1058  00FFBF                     STR_18:
  1059  00FFBF  30                 	db	48	;'0'
  1060  00FFC0  31                 	db	49	;'1'
  1061  00FFC1  32                 	db	50	;'2'
  1062  00FFC2  33                 	db	51	;'3'
  1063  00FFC3  34                 	db	52	;'4'
  1064  00FFC4  35                 	db	53	;'5'
  1065  00FFC5  36                 	db	54	;'6'
  1066  00FFC6  37                 	db	55	;'7'
  1067  00FFC7  38                 	db	56	;'8'
  1068  00FFC8  39                 	db	57	;'9'
  1069  00FFC9  61                 	db	97	;'a'
  1070  00FFCA  62                 	db	98	;'b'
  1071  00FFCB  63                 	db	99	;'c'
  1072  00FFCC  64                 	db	100	;'d'
  1073  00FFCD  65                 	db	101	;'e'
  1074  00FFCE  66                 	db	102	;'f'
  1075  00FFCF  00                 	db	0
  1076  00FFD0                     STR_2:
  1077  00FFD0  54                 	db	84	;'T'
  1078  00FFD1  65                 	db	101	;'e'
  1079  00FFD2  6D                 	db	109	;'m'
  1080  00FFD3  70                 	db	112	;'p'
  1081  00FFD4  65                 	db	101	;'e'
  1082  00FFD5  72                 	db	114	;'r'
  1083  00FFD6  61                 	db	97	;'a'
  1084  00FFD7  74                 	db	116	;'t'
  1085  00FFD8  75                 	db	117	;'u'
  1086  00FFD9  72                 	db	114	;'r'
  1087  00FFDA  65                 	db	101	;'e'
  1088  00FFDB  3A                 	db	58	;':'
  1089  00FFDC  00                 	db	0
  1090  00FFDD                     STR_7:
  1091  00FFDD  20                 	db	32
  1092  00FFDE  20                 	db	32
  1093  00FFDF  46                 	db	70	;'F'
  1094  00FFE0  41                 	db	65	;'A'
  1095  00FFE1  4E                 	db	78	;'N'
  1096  00FFE2  00                 	db	0
  1097  00FFE3                     STR_5:
  1098  00FFE3  54                 	db	84	;'T'
  1099  00FFE4  69                 	db	105	;'i'
  1100  00FFE5  6D                 	db	109	;'m'
  1101  00FFE6  65                 	db	101	;'e'
  1102  00FFE7  00                 	db	0
  1103  00FFE8                     STR_6:
  1104  00FFE8  44                 	db	68	;'D'
  1105  00FFE9  61                 	db	97	;'a'
  1106  00FFEA  74                 	db	116	;'t'
  1107  00FFEB  65                 	db	101	;'e'
  1108  00FFEC  00                 	db	0
  1109  00FFED                     STR_10:
  1110  00FFED  4F                 	db	79	;'O'
  1111  00FFEE  4E                 	db	78	;'N'
  1112  00FFEF  20                 	db	32
  1113  00FFF0  00                 	db	0
  1114  00FFF1                     STR_11:
  1115  00FFF1  4F                 	db	79	;'O'
  1116  00FFF2  46                 	db	70	;'F'
  1117  00FFF3  46                 	db	70	;'F'
  1118  00FFF4  00                 	db	0
  1119  00FFF5                     STR_9:
  1120  00FFF5  52                 	db	82	;'R'
  1121  00FFF6  50                 	db	80	;'P'
  1122  00FFF7  4D                 	db	77	;'M'
  1123  00FFF8  00                 	db	0
  1124  00FFF9                     STR_3:
  1125  00FFF9  43                 	db	67	;'C'
  1126  00FFFA  2F                 	db	47
  1127  00FFFB  00                 	db	0
  1128  00FFFC                     STR_8:
  1129  00FFFC  44                 	db	68	;'D'
  1130  00FFFD  43                 	db	67	;'C'
  1131  00FFFE  00                 	db	0
  1132  0000                     
  1133                           ; #config settings
  1134  00FFFF  00                 	db	0	; dummy byte at the end
  1135  0000                     
  1136                           	psect	cinit
  1137  001A9E                     __pcinit:
  1138                           	opt stack 0
  1139  001A9E                     start_initialization:
  1140                           	opt stack 0
  1141  001A9E                     __initialization:
  1142                           	opt stack 0
  1143                           
  1144                           ; Clear objects allocated to BANK0 (21 bytes)
  1145  001A9E  EE00  F0E8         	lfsr	0,__pbssBANK0
  1146  001AA2  0E15               	movlw	21
  1147  001AA4                     clear_0:
  1148  001AA4  6AEE               	clrf	postinc0,c
  1149  001AA6  06E8               	decf	wreg,f,c
  1150  001AA8  E1FD               	bnz	clear_0
  1151                           
  1152                           ; Clear objects allocated to COMRAM (42 bytes)
  1153  001AAA  EE00  F043         	lfsr	0,__pbssCOMRAM
  1154  001AAE  0E2A               	movlw	42
  1155  001AB0                     clear_1:
  1156  001AB0  6AEE               	clrf	postinc0,c
  1157  001AB2  06E8               	decf	wreg,f,c
  1158  001AB4  E1FD               	bnz	clear_1
  1159                           
  1160                           ; Initialize objects allocated to BANK1 (94 bytes)
  1161                           ; load TBLPTR registers with __pidataBANK1
  1162  001AB6  0EC0               	movlw	low __pidataBANK1
  1163  001AB8  6EF6               	movwf	tblptrl,c
  1164  001ABA  0E1C               	movlw	high __pidataBANK1
  1165  001ABC  6EF7               	movwf	tblptrh,c
  1166  001ABE  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1167  001AC0  6EF8               	movwf	tblptru,c
  1168  001AC2  EE01  F000         	lfsr	0,__pdataBANK1
  1169  001AC6  EE10 F05E          	lfsr	1,94
  1170  001ACA                     copy_data0:
  1171  001ACA  0009               	tblrd		*+
  1172  001ACC  CFF5 FFEE          	movff	tablat,postinc0
  1173  001AD0  50E5               	movf	postdec1,w,c
  1174  001AD2  50E1               	movf	fsr1l,w,c
  1175  001AD4  E1FA               	bnz	copy_data0
  1176                           
  1177                           ; Initialize objects allocated to BANK0 (104 bytes)
  1178                           ; load TBLPTR registers with __pidataBANK0
  1179  001AD6  0E8E               	movlw	low __pidataBANK0
  1180  001AD8  6EF6               	movwf	tblptrl,c
  1181  001ADA  0E1B               	movlw	high __pidataBANK0
  1182  001ADC  6EF7               	movwf	tblptrh,c
  1183  001ADE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1184  001AE0  6EF8               	movwf	tblptru,c
  1185  001AE2  EE00  F080         	lfsr	0,__pdataBANK0
  1186  001AE6  EE10 F068          	lfsr	1,104
  1187  001AEA                     copy_data1:
  1188  001AEA  0009               	tblrd		*+
  1189  001AEC  CFF5 FFEE          	movff	tablat,postinc0
  1190  001AF0  50E5               	movf	postdec1,w,c
  1191  001AF2  50E1               	movf	fsr1l,w,c
  1192  001AF4  E1FA               	bnz	copy_data1
  1193                           
  1194                           ; Initialize objects allocated to COMRAM (3 bytes)
  1195                           ; load TBLPTR registers with __pidataCOMRAM
  1196  001AF6  0E30               	movlw	low __pidataCOMRAM
  1197  001AF8  6EF6               	movwf	tblptrl,c
  1198  001AFA  0E24               	movlw	high __pidataCOMRAM
  1199  001AFC  6EF7               	movwf	tblptrh,c
  1200  001AFE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1201  001B00  6EF8               	movwf	tblptru,c
  1202  001B02  0009               	tblrd		*+	;fetch initializer
  1203  001B04  CFF5 F06D          	movff	tablat,__pdataCOMRAM
  1204  001B08  0009               	tblrd		*+	;fetch initializer
  1205  001B0A  CFF5 F06E          	movff	tablat,__pdataCOMRAM+1
  1206  001B0E  0009               	tblrd		*+	;fetch initializer
  1207  001B10  CFF5 F06F          	movff	tablat,__pdataCOMRAM+2
  1208  001B14                     end_of_initialization:
  1209                           	opt stack 0
  1210  001B14                     __end_of__initialization:
  1211                           	opt stack 0
  1212  001B14  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1213  001B16  6EF8               	movwf	tblptru,c
  1214  001B18  0100               	movlb	0
  1215  001B1A  EFD0  F004         	goto	_main	;jump to C main() function
  1216                           tblptru	equ	0xFF8
  1217                           tblptrh	equ	0xFF7
  1218                           tblptrl	equ	0xFF6
  1219                           tablat	equ	0xFF5
  1220                           postinc0	equ	0xFEE
  1221                           wreg	equ	0xFE8
  1222                           postdec1	equ	0xFE5
  1223                           fsr1l	equ	0xFE1
  1224                           
  1225                           	psect	bssCOMRAM
  1226  000043                     __pbssCOMRAM:
  1227                           	opt stack 0
  1228  000043                     _DS1621_tempC:
  1229                           	opt stack 0
  1230  000043                     	ds	2
  1231  000045                     _DS1621_tempF:
  1232                           	opt stack 0
  1233  000045                     	ds	2
  1234  000047                     _Time_Elapsed:
  1235                           	opt stack 0
  1236  000047                     	ds	2
  1237  000049                     _rpm:
  1238                           	opt stack 0
  1239  000049                     	ds	2
  1240  00004B                     _txt:
  1241                           	opt stack 0
  1242  00004B                     	ds	2
  1243  00004D                     _FAN:
  1244                           	opt stack 0
  1245  00004D                     	ds	1
  1246  00004E                     _INT0_flag:
  1247                           	opt stack 0
  1248  00004E                     	ds	1
  1249  00004F                     _INT1_flag:
  1250                           	opt stack 0
  1251  00004F                     	ds	1
  1252  000050                     _INT2_flag:
  1253                           	opt stack 0
  1254  000050                     	ds	1
  1255  000051                     _Nec_State:
  1256                           	opt stack 0
  1257  000051                     	ds	1
  1258  000052                     _Nec_button:
  1259                           	opt stack 0
  1260  000052                     	ds	1
  1261  000053                     __tft_type:
  1262                           	opt stack 0
  1263  000053                     	ds	1
  1264  000054                     _alarm_date:
  1265                           	opt stack 0
  1266  000054                     	ds	1
  1267  000055                     _alarm_hour:
  1268                           	opt stack 0
  1269  000055                     	ds	1
  1270  000056                     _alarm_minute:
  1271                           	opt stack 0
  1272  000056                     	ds	1
  1273  000057                     _alarm_second:
  1274                           	opt stack 0
  1275  000057                     	ds	1
  1276  000058                     _bit_count:
  1277                           	opt stack 0
  1278  000058                     	ds	1
  1279  000059                     _colstart:
  1280                           	opt stack 0
  1281  000059                     	ds	1
  1282  00005A                     _day:
  1283                           	opt stack 0
  1284  00005A                     	ds	1
  1285  00005B                     _dow:
  1286                           	opt stack 0
  1287  00005B                     	ds	1
  1288  00005C                     _duty_cycle:
  1289                           	opt stack 0
  1290  00005C                     	ds	1
  1291  00005D                     _found:
  1292                           	opt stack 0
  1293  00005D                     	ds	1
  1294  00005E                     _hour:
  1295                           	opt stack 0
  1296  00005E                     	ds	1
  1297  00005F                     _minute:
  1298                           	opt stack 0
  1299  00005F                     	ds	1
  1300  000060                     _month:
  1301                           	opt stack 0
  1302  000060                     	ds	1
  1303  000061                     _rowstart:
  1304                           	opt stack 0
  1305  000061                     	ds	1
  1306  000062                     _second:
  1307                           	opt stack 0
  1308  000062                     	ds	1
  1309  000063                     _setup_alarm_hour:
  1310                           	opt stack 0
  1311  000063                     	ds	1
  1312  000064                     _setup_alarm_minute:
  1313                           	opt stack 0
  1314  000064                     	ds	1
  1315  000065                     _setup_alarm_second:
  1316                           	opt stack 0
  1317  000065                     	ds	1
  1318  000066                     _setup_day:
  1319                           	opt stack 0
  1320  000066                     	ds	1
  1321  000067                     _setup_hour:
  1322                           	opt stack 0
  1323  000067                     	ds	1
  1324  000068                     _setup_minute:
  1325                           	opt stack 0
  1326  000068                     	ds	1
  1327  000069                     _setup_month:
  1328                           	opt stack 0
  1329  000069                     	ds	1
  1330  00006A                     _setup_second:
  1331                           	opt stack 0
  1332  00006A                     	ds	1
  1333  00006B                     _setup_year:
  1334                           	opt stack 0
  1335  00006B                     	ds	1
  1336  00006C                     _year:
  1337                           	opt stack 0
  1338  00006C                     	ds	1
  1339                           tblptru	equ	0xFF8
  1340                           tblptrh	equ	0xFF7
  1341                           tblptrl	equ	0xFF6
  1342                           tablat	equ	0xFF5
  1343                           postinc0	equ	0xFEE
  1344                           wreg	equ	0xFE8
  1345                           postdec1	equ	0xFE5
  1346                           fsr1l	equ	0xFE1
  1347                           
  1348                           	psect	dataCOMRAM
  1349  00006D                     __pdataCOMRAM:
  1350                           	opt stack 0
  1351  00006D                     _fan_set_temp:
  1352                           	opt stack 0
  1353  00006D                     	ds	1
  1354  00006E                     _tempSecond:
  1355                           	opt stack 0
  1356  00006E                     	ds	1
  1357  00006F                     _wrap:
  1358                           	opt stack 0
  1359  00006F                     	ds	1
  1360                           tblptru	equ	0xFF8
  1361                           tblptrh	equ	0xFF7
  1362                           tblptrl	equ	0xFF6
  1363                           tablat	equ	0xFF5
  1364                           postinc0	equ	0xFEE
  1365                           wreg	equ	0xFE8
  1366                           postdec1	equ	0xFE5
  1367                           fsr1l	equ	0xFE1
  1368                           
  1369                           	psect	bssBANK0
  1370  0000E8                     __pbssBANK0:
  1371                           	opt stack 0
  1372  0000E8                     _Nec_code:
  1373                           	opt stack 0
  1374  0000E8                     	ds	4
  1375  0000EC                     _volt:
  1376                           	opt stack 0
  1377  0000EC                     	ds	3
  1378  0000EF                     _ALARMEN:
  1379                           	opt stack 0
  1380  0000EF                     	ds	2
  1381  0000F1                     _MATCHED:
  1382                           	opt stack 0
  1383  0000F1                     	ds	2
  1384  0000F3                     _Nec_ok:
  1385                           	opt stack 0
  1386  0000F3                     	ds	2
  1387  0000F5                     _alarm_mode:
  1388                           	opt stack 0
  1389  0000F5                     	ds	2
  1390  0000F7                     _color:
  1391                           	opt stack 0
  1392  0000F7                     	ds	2
  1393  0000F9                     _nbr:
  1394                           	opt stack 0
  1395  0000F9                     	ds	2
  1396  0000FB                     _rps:
  1397                           	opt stack 0
  1398  0000FB                     	ds	2
  1399                           tblptru	equ	0xFF8
  1400                           tblptrh	equ	0xFF7
  1401                           tblptrl	equ	0xFF6
  1402                           tablat	equ	0xFF5
  1403                           postinc0	equ	0xFEE
  1404                           wreg	equ	0xFE8
  1405                           postdec1	equ	0xFE5
  1406                           fsr1l	equ	0xFE1
  1407                           
  1408                           	psect	dataBANK0
  1409  000080                     __pdataBANK0:
  1410                           	opt stack 0
  1411  000080                     _alarm_time:
  1412                           	opt stack 0
  1413  000080                     	ds	9
  1414  000089                     _setup_alarm_time:
  1415                           	opt stack 0
  1416  000089                     	ds	9
  1417  000092                     _setup_date:
  1418                           	opt stack 0
  1419  000092                     	ds	9
  1420  00009B                     _setup_time:
  1421                           	opt stack 0
  1422  00009B                     	ds	9
  1423  0000A4                     _D2:
  1424                           	opt stack 0
  1425  0000A4                     	ds	7
  1426  0000AB                     _Volt_Txt:
  1427                           	opt stack 0
  1428  0000AB                     	ds	6
  1429  0000B1                     _Fan_Set_Temp_Txt:
  1430                           	opt stack 0
  1431  0000B1                     	ds	5
  1432  0000B6                     _setup_fan_set_text:
  1433                           	opt stack 0
  1434  0000B6                     	ds	5
  1435  0000BB                     _Alarm_SW_Txt:
  1436                           	opt stack 0
  1437  0000BB                     	ds	4
  1438  0000BF                     _RTC_ALARM_Txt:
  1439                           	opt stack 0
  1440  0000BF                     	ds	2
  1441  0000C1                     _date:
  1442                           	opt stack 0
  1443  0000C1                     	ds	9
  1444  0000CA                     _time:
  1445                           	opt stack 0
  1446  0000CA                     	ds	9
  1447  0000D3                     _RPM_Txt:
  1448                           	opt stack 0
  1449  0000D3                     	ds	5
  1450  0000D8                     _DC_Txt:
  1451                           	opt stack 0
  1452  0000D8                     	ds	4
  1453  0000DC                     _Fan_SW_Txt:
  1454                           	opt stack 0
  1455  0000DC                     	ds	4
  1456  0000E0                     _tempC:
  1457                           	opt stack 0
  1458  0000E0                     	ds	4
  1459  0000E4                     _tempF:
  1460                           	opt stack 0
  1461  0000E4                     	ds	4
  1462                           tblptru	equ	0xFF8
  1463                           tblptrh	equ	0xFF7
  1464                           tblptrl	equ	0xFF6
  1465                           tablat	equ	0xFF5
  1466                           postinc0	equ	0xFEE
  1467                           wreg	equ	0xFE8
  1468                           postdec1	equ	0xFE5
  1469                           fsr1l	equ	0xFE1
  1470                           
  1471                           	psect	dataBANK1
  1472  000100                     __pdataBANK1:
  1473                           	opt stack 0
  1474  000100                     _array2:
  1475                           	opt stack 0
  1476  000100                     	ds	42
  1477  00012A                     _array1:
  1478                           	opt stack 0
  1479  00012A                     	ds	21
  1480  00013F                     _buffer:
  1481                           	opt stack 0
  1482  00013F                     	ds	31
  1483                           tblptru	equ	0xFF8
  1484                           tblptrh	equ	0xFF7
  1485                           tblptrl	equ	0xFF6
  1486                           tablat	equ	0xFF5
  1487                           postinc0	equ	0xFEE
  1488                           wreg	equ	0xFE8
  1489                           postdec1	equ	0xFE5
  1490                           fsr1l	equ	0xFE1
  1491                           
  1492                           	psect	cstackBANK1
  1493  00015E                     __pcstackBANK1:
  1494                           	opt stack 0
  1495  00015E                     drawtext@x:
  1496                           	opt stack 0
  1497  00015E                     do_update_pwm@dc_f:
  1498                           	opt stack 0
  1499                           
  1500                           ; 3 bytes @ 0x0
  1501  00015E                     	ds	1
  1502  00015F                     drawtext@textsize:
  1503                           	opt stack 0
  1504                           
  1505                           ; 2 bytes @ 0x1
  1506  00015F                     	ds	2
  1507  000161                     do_update_pwm@duty_cycle:
  1508                           	opt stack 0
  1509  000161                     drawtext@i:
  1510                           	opt stack 0
  1511                           
  1512                           ; 2 bytes @ 0x3
  1513  000161                     	ds	1
  1514  000162                     do_update_pwm@dc_I:
  1515                           	opt stack 0
  1516                           
  1517                           ; 2 bytes @ 0x4
  1518  000162                     	ds	1
  1519  000163                     drawtext@cursor_y:
  1520                           	opt stack 0
  1521                           
  1522                           ; 1 bytes @ 0x5
  1523  000163                     	ds	1
  1524  000164                     drawtext@cursor_x:
  1525                           	opt stack 0
  1526                           
  1527                           ; 1 bytes @ 0x6
  1528  000164                     	ds	1
  1529  000165                     Update_Screen@neg_tempF:
  1530                           	opt stack 0
  1531                           
  1532                           ; 2 bytes @ 0x7
  1533  000165                     	ds	2
  1534  000167                     
  1535                           ; 0 bytes @ 0x9
  1536  000167                     	ds	1
  1537  000168                     main@i:
  1538                           	opt stack 0
  1539                           
  1540                           ; 2 bytes @ 0xA
  1541  000168                     	ds	2
  1542  00016A                     main@j:
  1543                           	opt stack 0
  1544                           
  1545                           ; 2 bytes @ 0xC
  1546  00016A                     	ds	2
  1547                           tblptru	equ	0xFF8
  1548                           tblptrh	equ	0xFF7
  1549                           tblptrl	equ	0xFF6
  1550                           tablat	equ	0xFF5
  1551                           postinc0	equ	0xFEE
  1552                           wreg	equ	0xFE8
  1553                           postdec1	equ	0xFE5
  1554                           fsr1l	equ	0xFE1
  1555                           
  1556                           	psect	cstackBANK0
  1557  0000FD                     __pcstackBANK0:
  1558                           	opt stack 0
  1559  0000FD                     ??_do_update_pwm:
  1560  0000FD                     ??_Update_Screen:
  1561                           
  1562                           ; 0 bytes @ 0x0
  1563  0000FD                     	ds	3
  1564                           tblptru	equ	0xFF8
  1565                           tblptrh	equ	0xFF7
  1566                           tblptrl	equ	0xFF6
  1567                           tablat	equ	0xFF5
  1568                           postinc0	equ	0xFEE
  1569                           wreg	equ	0xFE8
  1570                           postdec1	equ	0xFE5
  1571                           fsr1l	equ	0xFE1
  1572                           
  1573                           	psect	cstackCOMRAM
  1574  000001                     __pcstackCOMRAM:
  1575                           	opt stack 0
  1576  000001                     ??_INT0_isr:
  1577  000001                     
  1578                           ; 2 bytes @ 0x0
  1579  000001                     	ds	2
  1580  000003                     ??_chkisr:
  1581                           
  1582                           ; 0 bytes @ 0x2
  1583  000003                     	ds	14
  1584  000011                     ??_isdigit:
  1585  000011                     ?_strlen:
  1586                           	opt stack 0
  1587  000011                     ?___wmul:
  1588                           	opt stack 0
  1589  000011                     ?___lwdiv:
  1590                           	opt stack 0
  1591  000011                     ?___ftpack:
  1592                           	opt stack 0
  1593  000011                     spiwrite@x:
  1594                           	opt stack 0
  1595  000011                     I2C_Read@ack:
  1596                           	opt stack 0
  1597  000011                     I2C_Write@outByte:
  1598                           	opt stack 0
  1599  000011                     putch@c:
  1600                           	opt stack 0
  1601  000011                     OpenUSART@spbrg:
  1602                           	opt stack 0
  1603  000011                     ___wmul@multiplier:
  1604                           	opt stack 0
  1605  000011                     ___lwdiv@dividend:
  1606                           	opt stack 0
  1607  000011                     strcpy@to:
  1608                           	opt stack 0
  1609  000011                     strlen@s:
  1610                           	opt stack 0
  1611  000011                     ___ftpack@arg:
  1612                           	opt stack 0
  1613  000011                     I2C_Init@c:
  1614                           	opt stack 0
  1615                           
  1616                           ; 4 bytes @ 0x10
  1617  000011                     	ds	1
  1618  000012                     spiwrite@spidata:
  1619                           	opt stack 0
  1620  000012                     I2C_Read@n:
  1621                           	opt stack 0
  1622  000012                     I2C_Write@n:
  1623                           	opt stack 0
  1624  000012                     _isdigit$2717:
  1625                           	opt stack 0
  1626                           
  1627                           ; 1 bytes @ 0x11
  1628  000012                     	ds	1
  1629  000013                     ??_strlen:
  1630  000013                     write_command@cmd_:
  1631                           	opt stack 0
  1632  000013                     write_data@data_:
  1633                           	opt stack 0
  1634  000013                     I2C_Read@inByte:
  1635                           	opt stack 0
  1636  000013                     I2C_Write_Cmd_Only@Cmd:
  1637                           	opt stack 0
  1638  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1639                           	opt stack 0
  1640  000013                     DS3231_Setup_Time@Device:
  1641                           	opt stack 0
  1642  000013                     OpenUSART@config:
  1643                           	opt stack 0
  1644  000013                     isdigit@c:
  1645                           	opt stack 0
  1646  000013                     ___wmul@multiplicand:
  1647                           	opt stack 0
  1648  000013                     ___lwdiv@divisor:
  1649                           	opt stack 0
  1650  000013                     strcpy@from:
  1651                           	opt stack 0
  1652                           
  1653                           ; 2 bytes @ 0x12
  1654  000013                     	ds	1
  1655  000014                     ?_DS1621_Read_Temp:
  1656                           	opt stack 0
  1657  000014                     setAddrWindow@y0:
  1658                           	opt stack 0
  1659  000014                     I2C_Write_Cmd_Only@Device:
  1660                           	opt stack 0
  1661  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1662                           	opt stack 0
  1663  000014                     DS3231_Read_Time@Address:
  1664                           	opt stack 0
  1665  000014                     DS3231_Setup_Time@Address:
  1666                           	opt stack 0
  1667  000014                     ___ftpack@exp:
  1668                           	opt stack 0
  1669                           
  1670                           ; 1 bytes @ 0x13
  1671  000014                     	ds	1
  1672  000015                     setAddrWindow@x1:
  1673                           	opt stack 0
  1674  000015                     I2C_Write_Cmd_Write_Data@Device:
  1675                           	opt stack 0
  1676  000015                     DS3231_Read_Time@Device:
  1677                           	opt stack 0
  1678  000015                     ___ftpack@sign:
  1679                           	opt stack 0
  1680  000015                     ___lwdiv@counter:
  1681                           	opt stack 0
  1682  000015                     ___wmul@product:
  1683                           	opt stack 0
  1684  000015                     strcpy@cp:
  1685                           	opt stack 0
  1686  000015                     strlen@cp:
  1687                           	opt stack 0
  1688                           
  1689                           ; 2 bytes @ 0x14
  1690  000015                     	ds	1
  1691  000016                     ??___ftpack:
  1692  000016                     setAddrWindow@y1:
  1693                           	opt stack 0
  1694  000016                     DS1621_Read_Temp@Data_Ret:
  1695                           	opt stack 0
  1696  000016                     DS1621_Init@Device:
  1697                           	opt stack 0
  1698  000016                     ___lwdiv@quotient:
  1699                           	opt stack 0
  1700                           
  1701                           ; 2 bytes @ 0x15
  1702  000016                     	ds	1
  1703  000017                     ?___awdiv:
  1704                           	opt stack 0
  1705  000017                     setAddrWindow@x0:
  1706                           	opt stack 0
  1707  000017                     DS1621_Read_Temp@Cmd:
  1708                           	opt stack 0
  1709  000017                     delay_ms@ms:
  1710                           	opt stack 0
  1711  000017                     ___awdiv@dividend:
  1712                           	opt stack 0
  1713                           
  1714                           ; 2 bytes @ 0x16
  1715  000017                     	ds	1
  1716  000018                     ?___lwmod:
  1717                           	opt stack 0
  1718  000018                     drawPixel@y:
  1719                           	opt stack 0
  1720  000018                     drawFastVLine@y:
  1721                           	opt stack 0
  1722  000018                     fillRectangle@y:
  1723                           	opt stack 0
  1724  000018                     DS1621_Read_Temp@Device:
  1725                           	opt stack 0
  1726  000018                     ___lwmod@dividend:
  1727                           	opt stack 0
  1728                           
  1729                           ; 2 bytes @ 0x17
  1730  000018                     	ds	1
  1731  000019                     ??_delay_ms:
  1732  000019                     ?___lbtoft:
  1733                           	opt stack 0
  1734  000019                     drawFastVLine@h:
  1735                           	opt stack 0
  1736  000019                     fillRectangle@w:
  1737                           	opt stack 0
  1738  000019                     drawPixel@color:
  1739                           	opt stack 0
  1740  000019                     ___awdiv@divisor:
  1741                           	opt stack 0
  1742                           
  1743                           ; 2 bytes @ 0x18
  1744  000019                     	ds	1
  1745  00001A                     fillRectangle@h:
  1746                           	opt stack 0
  1747  00001A                     drawFastVLine@color:
  1748                           	opt stack 0
  1749  00001A                     ___lwmod@divisor:
  1750                           	opt stack 0
  1751                           
  1752                           ; 2 bytes @ 0x19
  1753  00001A                     	ds	1
  1754  00001B                     drawPixel@x:
  1755                           	opt stack 0
  1756  00001B                     ___awdiv@counter:
  1757                           	opt stack 0
  1758  00001B                     delay_ms@count:
  1759                           	opt stack 0
  1760  00001B                     fillRectangle@color:
  1761                           	opt stack 0
  1762                           
  1763                           ; 2 bytes @ 0x1A
  1764  00001B                     	ds	1
  1765  00001C                     ??_drawFastVLine:
  1766  00001C                     ___awdiv@sign:
  1767                           	opt stack 0
  1768  00001C                     ___lbtoft@c:
  1769                           	opt stack 0
  1770  00001C                     ___lwmod@counter:
  1771                           	opt stack 0
  1772  00001C                     drawCircle@x0:
  1773                           	opt stack 0
  1774                           
  1775                           ; 2 bytes @ 0x1B
  1776  00001C                     	ds	1
  1777  00001D                     ??_fillRectangle:
  1778  00001D                     ?_printf:
  1779                           	opt stack 0
  1780  00001D                     ?___ftmul:
  1781                           	opt stack 0
  1782  00001D                     printf@f:
  1783                           	opt stack 0
  1784  00001D                     ___awdiv@quotient:
  1785                           	opt stack 0
  1786  00001D                     ___ftmul@f1:
  1787                           	opt stack 0
  1788                           
  1789                           ; 3 bytes @ 0x1C
  1790  00001D                     	ds	1
  1791  00001E                     drawCircle@y0:
  1792                           	opt stack 0
  1793                           
  1794                           ; 2 bytes @ 0x1D
  1795  00001E                     	ds	1
  1796  00001F                     ?___awmod:
  1797                           	opt stack 0
  1798  00001F                     ___awmod@dividend:
  1799                           	opt stack 0
  1800                           
  1801                           ; 2 bytes @ 0x1E
  1802  00001F                     	ds	1
  1803  000020                     drawFastVLine@hi:
  1804                           	opt stack 0
  1805  000020                     drawCircle@r:
  1806                           	opt stack 0
  1807  000020                     ___ftmul@f2:
  1808                           	opt stack 0
  1809                           
  1810                           ; 3 bytes @ 0x1F
  1811  000020                     	ds	1
  1812  000021                     drawFastVLine@lo:
  1813                           	opt stack 0
  1814  000021                     fillRectangle@hi:
  1815                           	opt stack 0
  1816  000021                     ___awmod@divisor:
  1817                           	opt stack 0
  1818                           
  1819                           ; 2 bytes @ 0x20
  1820  000021                     	ds	1
  1821  000022                     drawFastVLine@x:
  1822                           	opt stack 0
  1823  000022                     fillRectangle@lo:
  1824                           	opt stack 0
  1825  000022                     drawCircle@color:
  1826                           	opt stack 0
  1827                           
  1828                           ; 2 bytes @ 0x21
  1829  000022                     	ds	1
  1830  000023                     ??___ftmul:
  1831  000023                     fillRect@y:
  1832                           	opt stack 0
  1833  000023                     fillRectangle@x:
  1834                           	opt stack 0
  1835  000023                     ___awmod@counter:
  1836                           	opt stack 0
  1837                           
  1838                           ; 1 bytes @ 0x22
  1839  000023                     	ds	1
  1840  000024                     ??_drawCircle:
  1841  000024                     fillRect@w:
  1842                           	opt stack 0
  1843  000024                     ___awmod@sign:
  1844                           	opt stack 0
  1845  000024                     fillScreen@color:
  1846                           	opt stack 0
  1847                           
  1848                           ; 2 bytes @ 0x23
  1849  000024                     	ds	1
  1850  000025                     fillRect@h:
  1851                           	opt stack 0
  1852                           
  1853                           ; 1 bytes @ 0x24
  1854  000025                     	ds	1
  1855  000026                     ___ftmul@exp:
  1856                           	opt stack 0
  1857  000026                     fillRect@color:
  1858                           	opt stack 0
  1859  000026                     drawCircle@ddF_x:
  1860                           	opt stack 0
  1861                           
  1862                           ; 2 bytes @ 0x25
  1863  000026                     	ds	1
  1864  000027                     ___ftmul@f3_as_product:
  1865                           	opt stack 0
  1866                           
  1867                           ; 3 bytes @ 0x26
  1868  000027                     	ds	1
  1869  000028                     ??_fillRect:
  1870  000028                     drawCircle@ddF_y:
  1871                           	opt stack 0
  1872                           
  1873                           ; 2 bytes @ 0x27
  1874  000028                     	ds	2
  1875  00002A                     ___ftmul@cntr:
  1876                           	opt stack 0
  1877  00002A                     drawCircle@f:
  1878                           	opt stack 0
  1879                           
  1880                           ; 2 bytes @ 0x29
  1881  00002A                     	ds	1
  1882  00002B                     ??_printf:
  1883  00002B                     fillRect@x:
  1884                           	opt stack 0
  1885  00002B                     ___ftmul@sign:
  1886                           	opt stack 0
  1887                           
  1888                           ; 1 bytes @ 0x2A
  1889  00002B                     	ds	1
  1890  00002C                     ?___ftdiv:
  1891                           	opt stack 0
  1892  00002C                     ?_get_RPM:
  1893                           	opt stack 0
  1894  00002C                     fillRect@i:
  1895                           	opt stack 0
  1896  00002C                     drawCircle@x:
  1897                           	opt stack 0
  1898  00002C                     ___ftdiv@f1:
  1899                           	opt stack 0
  1900                           
  1901                           ; 3 bytes @ 0x2B
  1902  00002C                     	ds	2
  1903  00002E                     drawChar@y:
  1904                           	opt stack 0
  1905  00002E                     drawCircle@y:
  1906                           	opt stack 0
  1907                           
  1908                           ; 2 bytes @ 0x2D
  1909  00002E                     	ds	1
  1910  00002F                     drawChar@c:
  1911                           	opt stack 0
  1912  00002F                     printf@idx:
  1913                           	opt stack 0
  1914  00002F                     get_RPM@RPS:
  1915                           	opt stack 0
  1916  00002F                     ___ftdiv@f2:
  1917                           	opt stack 0
  1918                           
  1919                           ; 3 bytes @ 0x2E
  1920  00002F                     	ds	1
  1921  000030                     drawChar@color:
  1922                           	opt stack 0
  1923  000030                     printf@ap:
  1924                           	opt stack 0
  1925                           
  1926                           ; 2 bytes @ 0x2F
  1927  000030                     	ds	2
  1928  000032                     ??___ftdiv:
  1929  000032                     ?___fttol:
  1930                           	opt stack 0
  1931  000032                     printf@prec:
  1932                           	opt stack 0
  1933  000032                     drawChar@bg:
  1934                           	opt stack 0
  1935  000032                     ___fttol@f1:
  1936                           	opt stack 0
  1937                           
  1938                           ; 3 bytes @ 0x31
  1939  000032                     	ds	1
  1940  000033                     printf@val:
  1941                           	opt stack 0
  1942                           
  1943                           ; 2 bytes @ 0x32
  1944  000033                     	ds	1
  1945  000034                     drawChar@size:
  1946                           	opt stack 0
  1947                           
  1948                           ; 1 bytes @ 0x33
  1949  000034                     	ds	1
  1950  000035                     drawChar@line:
  1951                           	opt stack 0
  1952  000035                     printf@flag:
  1953                           	opt stack 0
  1954  000035                     ___ftdiv@cntr:
  1955                           	opt stack 0
  1956                           
  1957                           ; 1 bytes @ 0x34
  1958  000035                     	ds	1
  1959  000036                     ??___fttol:
  1960  000036                     drawChar@x:
  1961                           	opt stack 0
  1962  000036                     printf@width:
  1963                           	opt stack 0
  1964  000036                     ___ftdiv@f3:
  1965                           	opt stack 0
  1966                           
  1967                           ; 3 bytes @ 0x35
  1968  000036                     	ds	1
  1969  000037                     drawChar@j:
  1970                           	opt stack 0
  1971                           
  1972                           ; 1 bytes @ 0x36
  1973  000037                     	ds	1
  1974  000038                     drawChar@i:
  1975                           	opt stack 0
  1976  000038                     printf@c:
  1977                           	opt stack 0
  1978                           
  1979                           ; 1 bytes @ 0x37
  1980  000038                     	ds	1
  1981  000039                     drawtext@y:
  1982                           	opt stack 0
  1983  000039                     ___ftdiv@exp:
  1984                           	opt stack 0
  1985                           
  1986                           ; 1 bytes @ 0x38
  1987  000039                     	ds	1
  1988  00003A                     ___ftdiv@sign:
  1989                           	opt stack 0
  1990  00003A                     drawtext@_text:
  1991                           	opt stack 0
  1992                           
  1993                           ; 2 bytes @ 0x39
  1994  00003A                     	ds	1
  1995  00003B                     ___fttol@sign1:
  1996                           	opt stack 0
  1997                           
  1998                           ; 1 bytes @ 0x3A
  1999  00003B                     	ds	1
  2000  00003C                     drawtext@color:
  2001                           	opt stack 0
  2002  00003C                     ___fttol@lval:
  2003                           	opt stack 0
  2004                           
  2005                           ; 4 bytes @ 0x3B
  2006  00003C                     	ds	2
  2007  00003E                     drawtext@bg:
  2008                           	opt stack 0
  2009                           
  2010                           ; 2 bytes @ 0x3D
  2011  00003E                     	ds	2
  2012  000040                     drawtext@size:
  2013                           	opt stack 0
  2014  000040                     ___fttol@exp1:
  2015                           	opt stack 0
  2016                           
  2017                           ; 1 bytes @ 0x3F
  2018  000040                     	ds	1
  2019  000041                     ??_drawtext:
  2020  000041                     
  2021                           ; 0 bytes @ 0x40
  2022  000041                     	ds	2
  2023  000043                     tblptru	equ	0xFF8
  2024                           tblptrh	equ	0xFF7
  2025                           tblptrl	equ	0xFF6
  2026                           tablat	equ	0xFF5
  2027                           postinc0	equ	0xFEE
  2028                           wreg	equ	0xFE8
  2029                           postdec1	equ	0xFE5
  2030                           fsr1l	equ	0xFE1
  2031                           
  2032                           ; 0 bytes @ 0x42
  2033 ;;
  2034 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2035 ;;
  2036 ;; *************** function _main *****************
  2037 ;; Defined at:
  2038 ;;		line 138 in file "Lab12.c"
  2039 ;; Parameters:    Size  Location     Type
  2040 ;;		None
  2041 ;; Auto vars:     Size  Location     Type
  2042 ;;  i               2   10[BANK1 ] int 
  2043 ;;  j               2   12[BANK1 ] int 
  2044 ;; Return value:  Size  Location     Type
  2045 ;;		None               void
  2046 ;; Registers used:
  2047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2048 ;; Tracked objects:
  2049 ;;		On entry : 0/0
  2050 ;;		On exit  : 0/0
  2051 ;;		Unchanged: 0/0
  2052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2054 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2055 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2056 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2057 ;;Total ram usage:        5 bytes
  2058 ;; Hardware stack levels required when called:   11
  2059 ;; This function calls:
  2060 ;;		_Activate_Buzzer
  2061 ;;		_DS1621_Read_Temp
  2062 ;;		_DS3231_Read_Time
  2063 ;;		_DS3231_Setup_Time
  2064 ;;		_Deactivate_Buzzer
  2065 ;;		_Decrease_Speed
  2066 ;;		_Do_Beep_Bad
  2067 ;;		_Do_Init
  2068 ;;		_Increase_Speed
  2069 ;;		_Initialize_Screen
  2070 ;;		_Toggle_Fan
  2071 ;;		_Update_Screen
  2072 ;;		_Wait_One_Second
  2073 ;;		___awdiv
  2074 ;;		___fttol
  2075 ;;		___wmul
  2076 ;;		_get_RPM
  2077 ;;		_printf
  2078 ;; This function is called by:
  2079 ;;		Startup code after reset
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082                           
  2083                           	psect	text0
  2084  0009A0                     __ptext0:
  2085                           	opt stack 0
  2086  0009A0                     _main:
  2087                           	opt stack 20
  2088                           
  2089                           ;Lab12.c: 140: Do_Init();
  2090                           
  2091                           ;incstack = 0
  2092  0009A0  ECBD  F00E         	call	_Do_Init	;wreg free
  2093                           
  2094                           ;Lab12.c: 141: Initialize_Screen();
  2095  0009A4  EC9B  F003         	call	_Initialize_Screen	;wreg free
  2096                           
  2097                           ;Lab12.c: 143: tempSecond = 0xff;
  2098  0009A8  686E               	setf	_tempSecond,c
  2099  0009AA  D000               	goto	l7363
  2100  0009AC                     l7363:
  2101                           
  2102                           ;Lab12.c: 145: {
  2103                           ;Lab12.c: 146: DS3231_Read_Time();
  2104  0009AC  EC2E  F00E         	call	_DS3231_Read_Time	;wreg free
  2105                           
  2106                           ;Lab12.c: 148: if(tempSecond != second)
  2107  0009B0  5062               	movf	_second,w,c
  2108  0009B2  186E               	xorwf	_tempSecond,w,c
  2109  0009B4  B4D8               	btfsc	status,2,c
  2110  0009B6  D066               	goto	l7381
  2111                           
  2112                           ;Lab12.c: 149: {
  2113                           ;Lab12.c: 150: tempSecond = second;
  2114  0009B8  C062  F06E         	movff	_second,_tempSecond
  2115                           
  2116                           ;Lab12.c: 151: rpm = get_RPM();
  2117  0009BC  EC60  F00F         	call	_get_RPM	;wreg free
  2118  0009C0  C02C  F032         	movff	?_get_RPM,___fttol@f1
  2119  0009C4  C02D  F033         	movff	?_get_RPM+1,___fttol@f1+1
  2120  0009C8  C02E  F034         	movff	?_get_RPM+2,___fttol@f1+2
  2121  0009CC  EC17  F00A         	call	___fttol	;wreg free
  2122  0009D0  C032  F049         	movff	?___fttol,_rpm
  2123  0009D4  C033  F04A         	movff	?___fttol+1,_rpm+1
  2124                           
  2125                           ;Lab12.c: 153: DS1621_tempC = DS1621_Read_Temp();
  2126  0009D8  EC2B  F010         	call	_DS1621_Read_Temp	;wreg free
  2127  0009DC  C014  F043         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2128  0009E0  C015  F044         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2129                           
  2130                           ;Lab12.c: 154: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2131  0009E4  C043  F011         	movff	_DS1621_tempC,___wmul@multiplier
  2132  0009E8  C044  F012         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2133  0009EC  0E00               	movlw	0
  2134  0009EE  6E14               	movwf	___wmul@multiplicand+1,c
  2135  0009F0  0E09               	movlw	9
  2136  0009F2  6E13               	movwf	___wmul@multiplicand,c
  2137  0009F4  EC8F  F010         	call	___wmul	;wreg free
  2138  0009F8  C011  F017         	movff	?___wmul,___awdiv@dividend
  2139  0009FC  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  2140  000A00  0E00               	movlw	0
  2141  000A02  6E1A               	movwf	___awdiv@divisor+1,c
  2142  000A04  0E05               	movlw	5
  2143  000A06  6E19               	movwf	___awdiv@divisor,c
  2144  000A08  EC37  F00C         	call	___awdiv	;wreg free
  2145  000A0C  0E20               	movlw	32
  2146  000A0E  2417               	addwf	?___awdiv,w,c
  2147  000A10  6E45               	movwf	_DS1621_tempF,c
  2148  000A12  0E00               	movlw	0
  2149  000A14  2018               	addwfc	?___awdiv+1,w,c
  2150  000A16  6E46               	movwf	_DS1621_tempF+1,c
  2151                           
  2152                           ;Lab12.c: 156: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,year
      +                          );
  2153  000A18  0E26               	movlw	low STR_12
  2154  000A1A  6E1D               	movwf	printf@f,c
  2155  000A1C  0EFF               	movlw	high STR_12
  2156  000A1E  6E1E               	movwf	printf@f+1,c
  2157  000A20  C05E  F01F         	movff	_hour,?_printf+2
  2158  000A24  6A20               	clrf	?_printf+3,c
  2159  000A26  C05F  F021         	movff	_minute,?_printf+4
  2160  000A2A  6A22               	clrf	?_printf+5,c
  2161  000A2C  C062  F023         	movff	_second,?_printf+6
  2162  000A30  6A24               	clrf	?_printf+7,c
  2163  000A32  C060  F025         	movff	_month,?_printf+8
  2164  000A36  6A26               	clrf	?_printf+9,c
  2165  000A38  C05A  F027         	movff	_day,?_printf+10
  2166  000A3C  6A28               	clrf	?_printf+11,c
  2167  000A3E  C06C  F029         	movff	_year,?_printf+12
  2168  000A42  6A2A               	clrf	?_printf+13,c
  2169  000A44  ECEE  F001         	call	_printf	;wreg free
  2170                           
  2171                           ;Lab12.c: 157: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2172  000A48  0E71               	movlw	low STR_13
  2173  000A4A  6E1D               	movwf	printf@f,c
  2174  000A4C  0EFF               	movlw	high STR_13
  2175  000A4E  6E1E               	movwf	printf@f+1,c
  2176  000A50  C043  F01F         	movff	_DS1621_tempC,?_printf+2
  2177  000A54  C044  F020         	movff	_DS1621_tempC+1,?_printf+3
  2178  000A58  C045  F021         	movff	_DS1621_tempF,?_printf+4
  2179  000A5C  C046  F022         	movff	_DS1621_tempF+1,?_printf+5
  2180  000A60  ECEE  F001         	call	_printf	;wreg free
  2181                           
  2182                           ;Lab12.c: 159: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  2183  000A64  0E86               	movlw	low STR_14
  2184  000A66  6E1D               	movwf	printf@f,c
  2185  000A68  0EFF               	movlw	high STR_14
  2186  000A6A  6E1E               	movwf	printf@f+1,c
  2187  000A6C  C049  F01F         	movff	_rpm,?_printf+2
  2188  000A70  C04A  F020         	movff	_rpm+1,?_printf+3
  2189  000A74  C05C  F021         	movff	_duty_cycle,?_printf+4
  2190  000A78  6A22               	clrf	?_printf+5,c
  2191  000A7A  ECEE  F001         	call	_printf	;wreg free
  2192                           
  2193                           ;Lab12.c: 161: Update_Screen();
  2194  000A7E  EC0E  F000         	call	_Update_Screen	;wreg free
  2195  000A82  D000               	goto	l7381
  2196  000A84                     l7381:
  2197                           
  2198                           ;Lab12.c: 162: }
  2199                           ;Lab12.c: 165: if (Nec_ok == 1)
  2200  000A84  0100               	movlb	0	; () banked
  2201  000A86  05F3               	decf	_Nec_ok& (0+255),w,b
  2202  000A88  0100               	movlb	0	; () banked
  2203  000A8A  11F4               	iorwf	(_Nec_ok+1)& (0+255),w,b
  2204  000A8C  A4D8               	btfss	status,2,c
  2205  000A8E  D78E               	goto	l7363
  2206                           
  2207                           ; BSR set to: 0
  2208                           ;Lab12.c: 166: {
  2209                           ;Lab12.c: 167: Nec_ok = 0;
  2210  000A90  0E00               	movlw	0
  2211  000A92  0100               	movlb	0	; () banked
  2212  000A94  6FF4               	movwf	(_Nec_ok+1)& (0+255),b
  2213  000A96  0E00               	movlw	0
  2214  000A98  6FF3               	movwf	_Nec_ok& (0+255),b
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;Lab12.c: 170: INTCONbits.INT0IE = 1;
  2218  000A9A  88F2               	bsf	intcon,4,c	;volatile
  2219                           
  2220                           ; BSR set to: 0
  2221                           ;Lab12.c: 171: INTCON2bits.INTEDG0 = 0;
  2222  000A9C  9CF1               	bcf	intcon2,6,c	;volatile
  2223                           
  2224                           ; BSR set to: 0
  2225                           ;Lab12.c: 172: printf ("Nec_button = %x\r\n", Nec_button);
  2226  000A9E  0EAD               	movlw	low STR_15
  2227  000AA0  6E1D               	movwf	printf@f,c
  2228  000AA2  0EFF               	movlw	high STR_15
  2229  000AA4  6E1E               	movwf	printf@f+1,c
  2230  000AA6  C052  F01F         	movff	_Nec_button,?_printf+2
  2231  000AAA  6A20               	clrf	?_printf+3,c
  2232  000AAC  ECEE  F001         	call	_printf	;wreg free
  2233                           
  2234                           ;Lab12.c: 174: found = 0xff;
  2235  000AB0  685D               	setf	_found,c
  2236                           
  2237                           ;Lab12.c: 175: for (int j=0; j< 21; j++)
  2238  000AB2  0E00               	movlw	0
  2239  000AB4  0101               	movlb	1	; () banked
  2240  000AB6  6F6B               	movwf	(main@j+1)& (0+255),b
  2241  000AB8  0E00               	movlw	0
  2242  000ABA  6F6A               	movwf	main@j& (0+255),b
  2243  000ABC                     l7395:
  2244                           
  2245                           ; BSR set to: 1
  2246  000ABC  0101               	movlb	1	; () banked
  2247  000ABE  BF6B               	btfsc	(main@j+1)& (0+255),7,b
  2248  000AC0  D00A               	goto	l7399
  2249  000AC2  0101               	movlb	1	; () banked
  2250  000AC4  516B               	movf	(main@j+1)& (0+255),w,b
  2251  000AC6  E120               	bnz	l7409
  2252  000AC8  0E15               	movlw	21
  2253  000ACA  0101               	movlb	1	; () banked
  2254  000ACC  5D6A               	subwf	main@j& (0+255),w,b
  2255  000ACE  B0D8               	btfsc	status,0,c
  2256  000AD0  D01B               	goto	l7409
  2257  000AD2  D001               	goto	l7399
  2258                           
  2259                           ; BSR set to: 1
  2260  000AD4  D019               	goto	l7409
  2261  000AD6                     l7399:
  2262                           
  2263                           ; BSR set to: 1
  2264                           ;Lab12.c: 176: {
  2265                           ;Lab12.c: 177: if (Nec_button == array1[j])
  2266  000AD6  0E2A               	movlw	low _array1
  2267  000AD8  0101               	movlb	1	; () banked
  2268  000ADA  256A               	addwf	main@j& (0+255),w,b
  2269  000ADC  6ED9               	movwf	fsr2l,c
  2270  000ADE  0E01               	movlw	high _array1
  2271  000AE0  0101               	movlb	1	; () banked
  2272  000AE2  216B               	addwfc	(main@j+1)& (0+255),w,b
  2273  000AE4  6EDA               	movwf	fsr2h,c
  2274  000AE6  5052               	movf	_Nec_button,w,c
  2275  000AE8  18DE               	xorwf	postinc2,w,c
  2276  000AEA  A4D8               	btfss	status,2,c
  2277  000AEC  D008               	goto	l7405
  2278                           
  2279                           ; BSR set to: 1
  2280                           ;Lab12.c: 178: {
  2281                           ;Lab12.c: 179: found = j;
  2282  000AEE  C16A  F05D         	movff	main@j,_found
  2283                           
  2284                           ; BSR set to: 1
  2285                           ;Lab12.c: 180: j = 21;
  2286  000AF2  0E00               	movlw	0
  2287  000AF4  0101               	movlb	1	; () banked
  2288  000AF6  6F6B               	movwf	(main@j+1)& (0+255),b
  2289  000AF8  0E15               	movlw	21
  2290  000AFA  6F6A               	movwf	main@j& (0+255),b
  2291  000AFC  D000               	goto	l7405
  2292  000AFE                     l7405:
  2293                           
  2294                           ; BSR set to: 1
  2295  000AFE  0101               	movlb	1	; () banked
  2296  000B00  4B6A               	infsnz	main@j& (0+255),f,b
  2297  000B02  2B6B               	incf	(main@j+1)& (0+255),f,b
  2298  000B04  D7DB               	goto	l7395
  2299                           
  2300                           ; BSR set to: 1
  2301  000B06  D000               	goto	l7409
  2302  000B08                     l7409:
  2303                           
  2304                           ; BSR set to: 1
  2305                           ;Lab12.c: 182: }
  2306                           ;Lab12.c: 183: }
  2307                           ;Lab12.c: 185: if (found == 0xff)
  2308  000B08  285D               	incf	_found,w,c
  2309  000B0A  A4D8               	btfss	status,2,c
  2310  000B0C  D009               	goto	l7417
  2311                           
  2312                           ; BSR set to: 1
  2313                           ;Lab12.c: 186: {
  2314                           ;Lab12.c: 187: printf ("Cannot find button \r\n");
  2315  000B0E  0E5B               	movlw	low STR_16
  2316  000B10  6E1D               	movwf	printf@f,c
  2317  000B12  0EFF               	movlw	high STR_16
  2318  000B14  6E1E               	movwf	printf@f+1,c
  2319  000B16  ECEE  F001         	call	_printf	;wreg free
  2320                           
  2321                           ;Lab12.c: 188: return;
  2322  000B1A  EF0C  F000         	goto	start
  2323                           
  2324                           ;Lab12.c: 189: }
  2325  000B1E  D746               	goto	l7363
  2326  000B20                     l7417:
  2327                           
  2328                           ;Lab12.c: 190: else
  2329                           ;Lab12.c: 191: {
  2330                           ;Lab12.c: 192: int i = array2[found];
  2331  000B20  505D               	movf	_found,w,c
  2332  000B22  0D02               	mullw	2
  2333  000B24  0E00               	movlw	low _array2
  2334  000B26  24F3               	addwf	prodl,w,c
  2335  000B28  6ED9               	movwf	fsr2l,c
  2336  000B2A  0E01               	movlw	high _array2
  2337  000B2C  20F4               	addwfc	prodh,w,c
  2338  000B2E  6EDA               	movwf	fsr2h,c
  2339  000B30  CFDE F168          	movff	postinc2,main@i
  2340  000B34  CFDD F169          	movff	postdec2,main@i+1
  2341                           
  2342                           ;Lab12.c: 193: printf ("Button Position = %x\r\n", found);
  2343  000B38  0E44               	movlw	low STR_17
  2344  000B3A  6E1D               	movwf	printf@f,c
  2345  000B3C  0EFF               	movlw	high STR_17
  2346  000B3E  6E1E               	movwf	printf@f+1,c
  2347  000B40  C05D  F01F         	movff	_found,?_printf+2
  2348  000B44  6A20               	clrf	?_printf+3,c
  2349  000B46  ECEE  F001         	call	_printf	;wreg free
  2350                           
  2351                           ;Lab12.c: 194: PORTEbits.RE0 = 1;
  2352  000B4A  8084               	bsf	3972,0,c	;volatile
  2353                           
  2354                           ;Lab12.c: 195: PORTB = PORTB & 0x07;
  2355  000B4C  5081               	movf	3969,w,c	;volatile
  2356  000B4E  0B07               	andlw	7
  2357  000B50  6E81               	movwf	3969,c	;volatile
  2358                           
  2359                           ;Lab12.c: 196: PORTB = (i << 3) | PORTB;
  2360  000B52  0101               	movlb	1	; () banked
  2361  000B54  3968               	swapf	main@i& (0+255),w,b
  2362  000B56  42E8               	rrncf	wreg,f,c
  2363  000B58  0BF8               	andlw	248
  2364  000B5A  1081               	iorwf	3969,w,c	;volatile
  2365  000B5C  6E81               	movwf	3969,c	;volatile
  2366                           
  2367                           ; BSR set to: 1
  2368                           ;Lab12.c: 197: Activate_Buzzer();
  2369  000B5E  EC8E  F011         	call	_Activate_Buzzer	;wreg free
  2370                           
  2371                           ;Lab12.c: 198: Wait_One_Second();
  2372  000B62  ECEF  F011         	call	_Wait_One_Second	;wreg free
  2373                           
  2374                           ;Lab12.c: 199: Deactivate_Buzzer();
  2375  000B66  EC08  F012         	call	_Deactivate_Buzzer	;wreg free
  2376                           
  2377                           ;Lab12.c: 200: PORTEbits.RE0 = 0;
  2378  000B6A  9084               	bcf	3972,0,c	;volatile
  2379                           
  2380                           ;Lab12.c: 201: switch (found)
  2381  000B6C  D013               	goto	l7453
  2382  000B6E                     l7435:
  2383                           
  2384                           ;Lab12.c: 204: DS3231_Setup_Time();
  2385  000B6E  ECFB  F00D         	call	_DS3231_Setup_Time	;wreg free
  2386                           
  2387                           ;Lab12.c: 205: break;
  2388  000B72  D71C               	goto	l7363
  2389  000B74                     l7437:
  2390                           
  2391                           ;Lab12.c: 208: Decrease_Speed();
  2392  000B74  EC07  F011         	call	_Decrease_Speed	;wreg free
  2393                           
  2394                           ;Lab12.c: 209: break;
  2395  000B78  D719               	goto	l7363
  2396  000B7A                     l7439:
  2397                           
  2398                           ;Lab12.c: 212: Increase_Speed();
  2399  000B7A  ECE9  F010         	call	_Increase_Speed	;wreg free
  2400                           
  2401                           ;Lab12.c: 213: break;
  2402  000B7E  D716               	goto	l7363
  2403  000B80                     l7441:
  2404                           
  2405                           ;Lab12.c: 216: Toggle_Fan();
  2406  000B80  EC55  F011         	call	_Toggle_Fan	;wreg free
  2407                           
  2408                           ;Lab12.c: 217: PORTAbits.RA3 =1;
  2409  000B84  8680               	bsf	3968,3,c	;volatile
  2410                           
  2411                           ;Lab12.c: 218: Wait_One_Second();
  2412  000B86  ECEF  F011         	call	_Wait_One_Second	;wreg free
  2413                           
  2414                           ;Lab12.c: 219: PORTAbits.RA3=0;
  2415  000B8A  9680               	bcf	3968,3,c	;volatile
  2416                           
  2417                           ;Lab12.c: 221: break;
  2418  000B8C  D70F               	goto	l7363
  2419  000B8E                     l7449:
  2420                           
  2421                           ;Lab12.c: 225: Do_Beep_Bad();
  2422  000B8E  EC3E  F011         	call	_Do_Beep_Bad	;wreg free
  2423                           
  2424                           ;Lab12.c: 227: }
  2425                           
  2426                           ;Lab12.c: 226: break;
  2427  000B92  D70C               	goto	l7363
  2428  000B94                     l7453:
  2429  000B94  505D               	movf	_found,w,c
  2430                           
  2431                           ; Switch size 1, requested type "space"
  2432                           ; Number of cases is 4, Range of values is 5 to 8
  2433                           ; switch strategies available:
  2434                           ; Name         Instructions Cycles
  2435                           ; simple_byte           13     7 (average)
  2436                           ;	Chosen strategy is simple_byte
  2437  000B96  0A05               	xorlw	5	; case 5
  2438  000B98  B4D8               	btfsc	status,2,c
  2439  000B9A  D7F2               	goto	l7441
  2440  000B9C  0A03               	xorlw	3	; case 6
  2441  000B9E  B4D8               	btfsc	status,2,c
  2442  000BA0  D7E9               	goto	l7437
  2443  000BA2  0A01               	xorlw	1	; case 7
  2444  000BA4  B4D8               	btfsc	status,2,c
  2445  000BA6  D7E9               	goto	l7439
  2446  000BA8  0A0F               	xorlw	15	; case 8
  2447  000BAA  B4D8               	btfsc	status,2,c
  2448  000BAC  D7E0               	goto	l7435
  2449  000BAE  D7EF               	goto	l7449
  2450  000BB0  D6FD               	goto	l7363
  2451  000BB2  EF0C  F000         	goto	start
  2452  000BB6                     __end_of_main:
  2453                           	opt stack 0
  2454                           tblptru	equ	0xFF8
  2455                           tblptrh	equ	0xFF7
  2456                           tblptrl	equ	0xFF6
  2457                           tablat	equ	0xFF5
  2458                           prodh	equ	0xFF4
  2459                           prodl	equ	0xFF3
  2460                           intcon	equ	0xFF2
  2461                           intcon2	equ	0xFF1
  2462                           postinc0	equ	0xFEE
  2463                           wreg	equ	0xFE8
  2464                           postdec1	equ	0xFE5
  2465                           fsr1l	equ	0xFE1
  2466                           postinc2	equ	0xFDE
  2467                           postdec2	equ	0xFDD
  2468                           fsr2h	equ	0xFDA
  2469                           fsr2l	equ	0xFD9
  2470                           status	equ	0xFD8
  2471                           
  2472 ;; *************** function _printf *****************
  2473 ;; Defined at:
  2474 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2475 ;; Parameters:    Size  Location     Type
  2476 ;;  f               2   28[COMRAM] PTR const unsigned char 
  2477 ;;		 -> STR_17(23), STR_16(22), STR_15(18), STR_14(20), 
  2478 ;;		 -> STR_13(21), STR_12(30), 
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;  idx             1   46[COMRAM] unsigned char 
  2481 ;;  tmpval          4    0        struct .
  2482 ;;  cp              3    0        PTR const unsigned char 
  2483 ;;  width           2   53[COMRAM] int 
  2484 ;;  val             2   50[COMRAM] unsigned int 
  2485 ;;  ap              2   47[COMRAM] PTR void [1]
  2486 ;;		 -> ?_printf(2), 
  2487 ;;  len             2    0        unsigned int 
  2488 ;;  c               1   55[COMRAM] char 
  2489 ;;  flag            1   52[COMRAM] unsigned char 
  2490 ;;  prec            1   49[COMRAM] char 
  2491 ;; Return value:  Size  Location     Type
  2492 ;;                  2   28[COMRAM] int 
  2493 ;; Registers used:
  2494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2495 ;; Tracked objects:
  2496 ;;		On entry : 0/0
  2497 ;;		On exit  : 0/0
  2498 ;;		Unchanged: 0/0
  2499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2500 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2501 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2502 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2503 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2504 ;;Total ram usage:       28 bytes
  2505 ;; Hardware stack levels used:    1
  2506 ;; Hardware stack levels required when called:    4
  2507 ;; This function calls:
  2508 ;;		___lwdiv
  2509 ;;		___lwmod
  2510 ;;		___wmul
  2511 ;;		_isdigit
  2512 ;;		_putch
  2513 ;; This function is called by:
  2514 ;;		_main
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518                           	psect	text1
  2519  0003DC                     __ptext1:
  2520                           	opt stack 0
  2521  0003DC                     _printf:
  2522                           	opt stack 26
  2523                           
  2524                           ;doprnt.c: 466: va_list ap;
  2525                           ;doprnt.c: 499: signed char c;
  2526                           ;doprnt.c: 501: int width;
  2527                           ;doprnt.c: 506: signed char prec;
  2528                           ;doprnt.c: 508: unsigned char flag;
  2529                           ;doprnt.c: 523: union {
  2530                           ;doprnt.c: 524: unsigned long vd;
  2531                           ;doprnt.c: 525: double integ;
  2532                           ;doprnt.c: 526: } tmpval;
  2533                           ;doprnt.c: 528: unsigned int val;
  2534                           ;doprnt.c: 529: unsigned len;
  2535                           ;doprnt.c: 530: const char * cp;
  2536                           ;doprnt.c: 533: *ap = __va_start();
  2537                           
  2538                           ;incstack = 0
  2539  0003DC  0E1F               	movlw	low (?_printf+2)
  2540  0003DE  6E30               	movwf	printf@ap,c
  2541  0003E0  0E00               	movlw	high (?_printf+2)
  2542  0003E2  6E31               	movwf	printf@ap+1,c
  2543                           
  2544                           ;doprnt.c: 536: while(c = *f++) {
  2545  0003E4  D199               	goto	l7027
  2546  0003E6                     l6901:
  2547                           
  2548                           ;doprnt.c: 538: if(c != '%')
  2549  0003E6  0E25               	movlw	37
  2550  0003E8  1838               	xorwf	printf@c,w,c
  2551  0003EA  B4D8               	btfsc	status,2,c
  2552  0003EC  D004               	goto	l6905
  2553                           
  2554                           ;doprnt.c: 540: {
  2555                           ;doprnt.c: 541: (putch(c) );
  2556  0003EE  5038               	movf	printf@c,w,c
  2557  0003F0  ECCA  F011         	call	_putch
  2558                           
  2559                           ;doprnt.c: 542: continue;
  2560  0003F4  D191               	goto	l7027
  2561  0003F6                     l6905:
  2562                           
  2563                           ;doprnt.c: 543: }
  2564                           ;doprnt.c: 546: width = 0;
  2565  0003F6  0E00               	movlw	0
  2566  0003F8  6E37               	movwf	printf@width+1,c
  2567  0003FA  0E00               	movlw	0
  2568  0003FC  6E36               	movwf	printf@width,c
  2569                           
  2570                           ;doprnt.c: 548: flag = 0;
  2571  0003FE  0E00               	movlw	0
  2572  000400  6E35               	movwf	printf@flag,c
  2573                           
  2574                           ;doprnt.c: 551: switch(*f) {
  2575                           
  2576                           ;doprnt.c: 550: for(;;) {
  2577  000402  D005               	goto	l6911
  2578  000404                     l6907:
  2579                           
  2580                           ;doprnt.c: 580: flag |= 0x04;
  2581  000404  8435               	bsf	printf@flag,2,c
  2582                           
  2583                           ;doprnt.c: 581: f++;
  2584  000406  4A1D               	infsnz	printf@f,f,c
  2585  000408  2A1E               	incf	printf@f+1,f,c
  2586                           
  2587                           ;doprnt.c: 582: continue;
  2588  00040A  D001               	goto	l6911
  2589                           
  2590                           ;doprnt.c: 584: }
  2591  00040C  D00B               	goto	l6913
  2592  00040E                     l6911:
  2593  00040E  C01D  FFF6         	movff	printf@f,tblptrl
  2594  000412  C01E  FFF7         	movff	printf@f+1,tblptrh
  2595  000416                     	if	0	;tblptru may be non-zero
  2596  000416                     	endif
  2597  000416                     	if	0	;tblptru may be non-zero
  2598  000416                     	endif
  2599  000416  0008               	tblrd		*
  2600  000418  50F5               	movf	tablat,w,c
  2601                           
  2602                           ; Switch size 1, requested type "space"
  2603                           ; Number of cases is 1, Range of values is 48 to 48
  2604                           ; switch strategies available:
  2605                           ; Name         Instructions Cycles
  2606                           ; simple_byte            4     3 (average)
  2607                           ;	Chosen strategy is simple_byte
  2608  00041A  0A30               	xorlw	48	; case 48
  2609  00041C  B4D8               	btfsc	status,2,c
  2610  00041E  D7F2               	goto	l6907
  2611                           
  2612                           ;doprnt.c: 585: break;
  2613  000420  D001               	goto	l6913
  2614                           
  2615                           ;doprnt.c: 586: }
  2616  000422  D7F5               	goto	l6911
  2617  000424                     l6913:
  2618                           
  2619                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2620  000424  C01D  FFF6         	movff	printf@f,tblptrl
  2621  000428  C01E  FFF7         	movff	printf@f+1,tblptrh
  2622  00042C                     	if	0	;tblptru may be non-zero
  2623  00042C                     	endif
  2624  00042C                     	if	0	;tblptru may be non-zero
  2625  00042C                     	endif
  2626  00042C  0008               	tblrd		*
  2627  00042E  50F5               	movf	tablat,w,c
  2628  000430  ECC8  F010         	call	_isdigit
  2629  000434  A0D8               	btfss	status,0,c
  2630  000436  D03B               	goto	l6929
  2631                           
  2632                           ;doprnt.c: 598: width = 0;
  2633  000438  0E00               	movlw	0
  2634  00043A  6E37               	movwf	printf@width+1,c
  2635  00043C  0E00               	movlw	0
  2636  00043E  6E36               	movwf	printf@width,c
  2637  000440  D000               	goto	l6917
  2638  000442                     l6917:
  2639                           
  2640                           ;doprnt.c: 600: width *= 10;
  2641  000442  C036  F011         	movff	printf@width,___wmul@multiplier
  2642  000446  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
  2643  00044A  0E00               	movlw	0
  2644  00044C  6E14               	movwf	___wmul@multiplicand+1,c
  2645  00044E  0E0A               	movlw	10
  2646  000450  6E13               	movwf	___wmul@multiplicand,c
  2647  000452  EC8F  F010         	call	___wmul	;wreg free
  2648  000456  C011  F036         	movff	?___wmul,printf@width
  2649  00045A  C012  F037         	movff	?___wmul+1,printf@width+1
  2650                           
  2651                           ;doprnt.c: 601: width += *f++ - '0';
  2652  00045E  0ED0               	movlw	208
  2653  000460  6E2B               	movwf	??_printf& (0+255),c
  2654  000462  0EFF               	movlw	255
  2655  000464  6E2C               	movwf	(??_printf+1)& (0+255),c
  2656  000466  C01D  FFF6         	movff	printf@f,tblptrl
  2657  00046A  C01E  FFF7         	movff	printf@f+1,tblptrh
  2658  00046E                     	if	0	;tblptru may be non-zero
  2659  00046E                     	endif
  2660  00046E                     	if	0	;tblptru may be non-zero
  2661  00046E                     	endif
  2662  00046E  0008               	tblrd		*
  2663  000470  50F5               	movf	tablat,w,c
  2664  000472  6E2D               	movwf	(??_printf+2)& (0+255),c
  2665  000474  6A2E               	clrf	(??_printf+3)& (0+255),c
  2666  000476  502B               	movf	??_printf,w,c
  2667  000478  262D               	addwf	??_printf+2,f,c
  2668  00047A  502C               	movf	??_printf+1,w,c
  2669  00047C  222E               	addwfc	??_printf+3,f,c
  2670  00047E  502D               	movf	??_printf+2,w,c
  2671  000480  2636               	addwf	printf@width,f,c
  2672  000482  502E               	movf	??_printf+3,w,c
  2673  000484  2237               	addwfc	printf@width+1,f,c
  2674  000486  4A1D               	infsnz	printf@f,f,c
  2675  000488  2A1E               	incf	printf@f+1,f,c
  2676                           
  2677                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2678  00048A  C01D  FFF6         	movff	printf@f,tblptrl
  2679  00048E  C01E  FFF7         	movff	printf@f+1,tblptrh
  2680  000492                     	if	0	;tblptru may be non-zero
  2681  000492                     	endif
  2682  000492                     	if	0	;tblptru may be non-zero
  2683  000492                     	endif
  2684  000492  0008               	tblrd		*
  2685  000494  50F5               	movf	tablat,w,c
  2686  000496  ECC8  F010         	call	_isdigit
  2687  00049A  A0D8               	btfss	status,0,c
  2688  00049C  D008               	goto	l6929
  2689  00049E  D7D1               	goto	l6917
  2690                           
  2691                           ;doprnt.c: 608: }
  2692                           ;doprnt.c: 635: switch(c = *f++) {
  2693  0004A0  D006               	goto	l6929
  2694                           
  2695                           ;doprnt.c: 638: goto alldone;
  2696                           
  2697                           ;doprnt.c: 637: case 0:
  2698  0004A2  D148               	goto	l975
  2699                           
  2700                           ;doprnt.c: 698: case 'i':
  2701                           ;doprnt.c: 699: break;
  2702                           
  2703                           ;doprnt.c: 697: case 'd':
  2704  0004A4  D01B               	goto	l938
  2705  0004A6                     l6925:
  2706                           
  2707                           ;doprnt.c: 721: flag |= 0x80;
  2708  0004A6  8E35               	bsf	printf@flag,7,c
  2709                           
  2710                           ;doprnt.c: 723: break;
  2711  0004A8  D019               	goto	l938
  2712                           
  2713                           ;doprnt.c: 813: continue;
  2714                           
  2715                           ;doprnt.c: 802: default:
  2716  0004AA  D136               	goto	l7027
  2717                           
  2718                           ;doprnt.c: 822: }
  2719  0004AC  D017               	goto	l938
  2720  0004AE                     l6929:
  2721  0004AE  C01D  FFF6         	movff	printf@f,tblptrl
  2722  0004B2  C01E  FFF7         	movff	printf@f+1,tblptrh
  2723  0004B6  4A1D               	infsnz	printf@f,f,c
  2724  0004B8  2A1E               	incf	printf@f+1,f,c
  2725  0004BA                     	if	0	;tblptru may be non-zero
  2726  0004BA                     	endif
  2727  0004BA                     	if	0	;tblptru may be non-zero
  2728  0004BA                     	endif
  2729  0004BA  0008               	tblrd		*
  2730  0004BC  CFF5 F038          	movff	tablat,printf@c
  2731  0004C0  5038               	movf	printf@c,w,c
  2732                           
  2733                           ; Switch size 1, requested type "space"
  2734                           ; Number of cases is 4, Range of values is 0 to 120
  2735                           ; switch strategies available:
  2736                           ; Name         Instructions Cycles
  2737                           ; simple_byte           13     7 (average)
  2738                           ;	Chosen strategy is simple_byte
  2739  0004C2  0A00               	xorlw	0	; case 0
  2740  0004C4  B4D8               	btfsc	status,2,c
  2741  0004C6  D136               	goto	l975
  2742  0004C8  0A64               	xorlw	100	; case 100
  2743  0004CA  B4D8               	btfsc	status,2,c
  2744  0004CC  D007               	goto	l938
  2745  0004CE  0A0D               	xorlw	13	; case 105
  2746  0004D0  B4D8               	btfsc	status,2,c
  2747  0004D2  D004               	goto	l938
  2748  0004D4  0A11               	xorlw	17	; case 120
  2749  0004D6  B4D8               	btfsc	status,2,c
  2750  0004D8  D7E6               	goto	l6925
  2751  0004DA  D11E               	goto	l7027
  2752  0004DC                     l938:
  2753                           
  2754                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2755  0004DC  BE35               	btfsc	printf@flag,7,c
  2756  0004DE  D015               	goto	l6941
  2757                           
  2758                           ;doprnt.c: 1253: {
  2759                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2760  0004E0  C030  FFD9         	movff	printf@ap,fsr2l
  2761  0004E4  C031  FFDA         	movff	printf@ap+1,fsr2h
  2762  0004E8  CFDE F033          	movff	postinc2,printf@val
  2763  0004EC  CFDD F034          	movff	postdec2,printf@val+1
  2764  0004F0  0E02               	movlw	2
  2765  0004F2  2630               	addwf	printf@ap,f,c
  2766  0004F4  0E00               	movlw	0
  2767  0004F6  2231               	addwfc	printf@ap+1,f,c
  2768                           
  2769                           ;doprnt.c: 1261: if((int)val < 0) {
  2770  0004F8  AE34               	btfss	printf@val+1,7,c
  2771  0004FA  D04E               	goto	l6975
  2772                           
  2773                           ;doprnt.c: 1262: flag |= 0x03;
  2774  0004FC  0E03               	movlw	3
  2775  0004FE  1235               	iorwf	printf@flag,f,c
  2776                           
  2777                           ;doprnt.c: 1263: val = -val;
  2778  000500  6C33               	negf	printf@val,c
  2779  000502  1E34               	comf	printf@val+1,f,c
  2780  000504  B0D8               	btfsc	status,0,c
  2781  000506  2A34               	incf	printf@val+1,f,c
  2782                           
  2783                           ;doprnt.c: 1264: }
  2784                           ;doprnt.c: 1266: }
  2785  000508  D047               	goto	l6975
  2786  00050A                     l6941:
  2787                           
  2788                           ;doprnt.c: 1268: else
  2789                           ;doprnt.c: 1273: {
  2790                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2791  00050A  C030  FFD9         	movff	printf@ap,fsr2l
  2792  00050E  C031  FFDA         	movff	printf@ap+1,fsr2h
  2793  000512  CFDE F033          	movff	postinc2,printf@val
  2794  000516  CFDD F034          	movff	postdec2,printf@val+1
  2795  00051A  0E02               	movlw	2
  2796  00051C  2630               	addwf	printf@ap,f,c
  2797  00051E  0E00               	movlw	0
  2798  000520  2231               	addwfc	printf@ap+1,f,c
  2799                           
  2800                           ;doprnt.c: 1287: }
  2801                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2802  000522  D03A               	goto	l6975
  2803  000524                     l6945:
  2804                           
  2805                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2806  000524  0E01               	movlw	1
  2807  000526  6E38               	movwf	printf@c,c
  2808  000528                     l6947:
  2809  000528  0E05               	movlw	5
  2810  00052A  1838               	xorwf	printf@c,w,c
  2811  00052C  B4D8               	btfsc	status,2,c
  2812  00052E  D03D               	goto	l6977
  2813  000530  D001               	goto	l6951
  2814  000532  D03B               	goto	l6977
  2815  000534                     l6951:
  2816                           
  2817                           ;doprnt.c: 1306: if(val < dpowers[c])
  2818  000534  5038               	movf	printf@c,w,c
  2819  000536  0D02               	mullw	2
  2820  000538  0E14               	movlw	low _dpowers
  2821  00053A  24F3               	addwf	prodl,w,c
  2822  00053C  6EF6               	movwf	tblptrl,c
  2823  00053E  0EFF               	movlw	high _dpowers
  2824  000540  20F4               	addwfc	prodh,w,c
  2825  000542  6EF7               	movwf	tblptrh,c
  2826  000544                     	if	0	;There are less than 3 active tblptr bytes
  2827  000544                     	endif
  2828  000544  0009               	tblrd		*+
  2829  000546  50F5               	movf	tablat,w,c
  2830  000548  5C33               	subwf	printf@val,w,c
  2831  00054A  0009               	tblrd		*+
  2832  00054C  50F5               	movf	tablat,w,c
  2833  00054E  5834               	subwfb	printf@val+1,w,c
  2834  000550  A0D8               	btfss	status,0,c
  2835  000552  D02B               	goto	l6977
  2836  000554  D001               	goto	l6955
  2837                           
  2838                           ;doprnt.c: 1307: break;
  2839  000556  D029               	goto	l6977
  2840  000558                     l6955:
  2841  000558  2A38               	incf	printf@c,f,c
  2842  00055A  D7E6               	goto	l6947
  2843                           
  2844                           ;doprnt.c: 1309: break;
  2845  00055C  D026               	goto	l6977
  2846  00055E                     l6959:
  2847                           
  2848                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2849  00055E  0E01               	movlw	1
  2850  000560  6E38               	movwf	printf@c,c
  2851  000562                     l6961:
  2852  000562  0E04               	movlw	4
  2853  000564  1838               	xorwf	printf@c,w,c
  2854  000566  B4D8               	btfsc	status,2,c
  2855  000568  D020               	goto	l6977
  2856  00056A  D001               	goto	l6965
  2857  00056C  D01E               	goto	l6977
  2858  00056E                     l6965:
  2859                           
  2860                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2861  00056E  5038               	movf	printf@c,w,c
  2862  000570  0D02               	mullw	2
  2863  000572  0E1E               	movlw	low _hexpowers
  2864  000574  24F3               	addwf	prodl,w,c
  2865  000576  6EF6               	movwf	tblptrl,c
  2866  000578  0EFF               	movlw	high _hexpowers
  2867  00057A  20F4               	addwfc	prodh,w,c
  2868  00057C  6EF7               	movwf	tblptrh,c
  2869  00057E                     	if	0	;There are less than 3 active tblptr bytes
  2870  00057E                     	endif
  2871  00057E  0009               	tblrd		*+
  2872  000580  50F5               	movf	tablat,w,c
  2873  000582  5C33               	subwf	printf@val,w,c
  2874  000584  0009               	tblrd		*+
  2875  000586  50F5               	movf	tablat,w,c
  2876  000588  5834               	subwfb	printf@val+1,w,c
  2877  00058A  A0D8               	btfss	status,0,c
  2878  00058C  D00E               	goto	l6977
  2879  00058E  D001               	goto	l6969
  2880                           
  2881                           ;doprnt.c: 1318: break;
  2882  000590  D00C               	goto	l6977
  2883  000592                     l6969:
  2884  000592  2A38               	incf	printf@c,f,c
  2885  000594  D7E6               	goto	l6961
  2886                           
  2887                           ;doprnt.c: 1336: }
  2888                           
  2889                           ;doprnt.c: 1320: break;
  2890  000596  D009               	goto	l6977
  2891  000598                     l6975:
  2892  000598  5035               	movf	printf@flag,w,c
  2893  00059A  0B80               	andlw	128
  2894                           
  2895                           ; Switch size 1, requested type "space"
  2896                           ; Number of cases is 2, Range of values is 0 to 128
  2897                           ; switch strategies available:
  2898                           ; Name         Instructions Cycles
  2899                           ; simple_byte            7     4 (average)
  2900                           ;	Chosen strategy is simple_byte
  2901  00059C  0A00               	xorlw	0	; case 0
  2902  00059E  B4D8               	btfsc	status,2,c
  2903  0005A0  D7C1               	goto	l6945
  2904  0005A2  0A80               	xorlw	128	; case 128
  2905  0005A4  B4D8               	btfsc	status,2,c
  2906  0005A6  D7DB               	goto	l6959
  2907  0005A8  D000               	goto	l6977
  2908  0005AA                     l6977:
  2909                           
  2910                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2911  0005AA  5036               	movf	printf@width,w,c
  2912  0005AC  1037               	iorwf	printf@width+1,w,c
  2913  0005AE  B4D8               	btfsc	status,2,c
  2914  0005B0  D00A               	goto	l6983
  2915  0005B2  C035  F02B         	movff	printf@flag,??_printf
  2916  0005B6  0E03               	movlw	3
  2917  0005B8  162B               	andwf	??_printf,f,c
  2918  0005BA  B4D8               	btfsc	status,2,c
  2919  0005BC  D004               	goto	l6983
  2920                           
  2921                           ;doprnt.c: 1346: width--;
  2922  0005BE  0636               	decf	printf@width,f,c
  2923  0005C0  A0D8               	btfss	status,0,c
  2924  0005C2  0637               	decf	printf@width+1,f,c
  2925  0005C4  D000               	goto	l6983
  2926  0005C6                     l6983:
  2927                           
  2928                           ;doprnt.c: 1381: if(width > c)
  2929  0005C6  0E80               	movlw	128
  2930  0005C8  BE38               	btfsc	printf@c,7,c
  2931  0005CA  0E7F               	movlw	127
  2932  0005CC  6E2B               	movwf	??_printf& (0+255),c
  2933  0005CE  5036               	movf	printf@width,w,c
  2934  0005D0  5C38               	subwf	printf@c,w,c
  2935  0005D2  5037               	movf	printf@width+1,w,c
  2936  0005D4  0A80               	xorlw	128
  2937  0005D6  582B               	subwfb	??_printf& (0+255),w,c
  2938  0005D8  B0D8               	btfsc	status,0,c
  2939  0005DA  D007               	goto	l6987
  2940                           
  2941                           ;doprnt.c: 1382: width -= c;
  2942  0005DC  5038               	movf	printf@c,w,c
  2943  0005DE  5E36               	subwf	printf@width,f,c
  2944  0005E0  0E00               	movlw	0
  2945  0005E2  BE38               	btfsc	printf@c,7,c
  2946  0005E4  0EFF               	movlw	255
  2947  0005E6  5A37               	subwfb	printf@width+1,f,c
  2948  0005E8  D005               	goto	l6989
  2949  0005EA                     l6987:
  2950                           
  2951                           ;doprnt.c: 1383: else
  2952                           ;doprnt.c: 1384: width = 0;
  2953  0005EA  0E00               	movlw	0
  2954  0005EC  6E37               	movwf	printf@width+1,c
  2955  0005EE  0E00               	movlw	0
  2956  0005F0  6E36               	movwf	printf@width,c
  2957  0005F2  D000               	goto	l6989
  2958  0005F4                     l6989:
  2959                           
  2960                           ;doprnt.c: 1387: if(flag & 0x04) {
  2961  0005F4  A435               	btfss	printf@flag,2,c
  2962  0005F6  D01A               	goto	l7001
  2963                           
  2964                           ;doprnt.c: 1392: if(flag & 0x03)
  2965  0005F8  C035  F02B         	movff	printf@flag,??_printf
  2966  0005FC  0E03               	movlw	3
  2967  0005FE  162B               	andwf	??_printf,f,c
  2968  000600  B4D8               	btfsc	status,2,c
  2969  000602  D004               	goto	l6995
  2970                           
  2971                           ;doprnt.c: 1393: (putch('-') );
  2972  000604  0E2D               	movlw	45
  2973  000606  ECCA  F011         	call	_putch
  2974  00060A  D000               	goto	l6995
  2975  00060C                     l6995:
  2976                           
  2977                           ;doprnt.c: 1415: if(width)
  2978  00060C  5036               	movf	printf@width,w,c
  2979  00060E  1037               	iorwf	printf@width+1,w,c
  2980  000610  B4D8               	btfsc	status,2,c
  2981  000612  D026               	goto	l7011
  2982  000614                     l6997:
  2983                           
  2984                           ;doprnt.c: 1417: (putch('0') );
  2985  000614  0E30               	movlw	48
  2986  000616  ECCA  F011         	call	_putch
  2987                           
  2988                           ;doprnt.c: 1418: while(--width);
  2989  00061A  0636               	decf	printf@width,f,c
  2990  00061C  A0D8               	btfss	status,0,c
  2991  00061E  0637               	decf	printf@width+1,f,c
  2992  000620  5036               	movf	printf@width,w,c
  2993  000622  1037               	iorwf	printf@width+1,w,c
  2994  000624  B4D8               	btfsc	status,2,c
  2995  000626  D01C               	goto	l7011
  2996  000628  D7F5               	goto	l6997
  2997                           
  2998                           ;doprnt.c: 1420: } else
  2999  00062A  D01A               	goto	l7011
  3000  00062C                     l7001:
  3001                           
  3002                           ;doprnt.c: 1422: {
  3003                           ;doprnt.c: 1424: if(width
  3004                           ;doprnt.c: 1428: )
  3005  00062C  5036               	movf	printf@width,w,c
  3006  00062E  1037               	iorwf	printf@width+1,w,c
  3007  000630  B4D8               	btfsc	status,2,c
  3008  000632  D00C               	goto	l7007
  3009  000634                     l7003:
  3010                           
  3011                           ;doprnt.c: 1430: (putch(' ') );
  3012  000634  0E20               	movlw	32
  3013  000636  ECCA  F011         	call	_putch
  3014                           
  3015                           ;doprnt.c: 1431: while(--width);
  3016  00063A  0636               	decf	printf@width,f,c
  3017  00063C  A0D8               	btfss	status,0,c
  3018  00063E  0637               	decf	printf@width+1,f,c
  3019  000640  5036               	movf	printf@width,w,c
  3020  000642  1037               	iorwf	printf@width+1,w,c
  3021  000644  B4D8               	btfsc	status,2,c
  3022  000646  D002               	goto	l7007
  3023  000648  D7F5               	goto	l7003
  3024  00064A  D000               	goto	l7007
  3025  00064C                     l7007:
  3026                           
  3027                           ;doprnt.c: 1438: if(flag & 0x03)
  3028  00064C  C035  F02B         	movff	printf@flag,??_printf
  3029  000650  0E03               	movlw	3
  3030  000652  162B               	andwf	??_printf,f,c
  3031  000654  B4D8               	btfsc	status,2,c
  3032  000656  D004               	goto	l7011
  3033                           
  3034                           ;doprnt.c: 1439: (putch('-') );
  3035  000658  0E2D               	movlw	45
  3036  00065A  ECCA  F011         	call	_putch
  3037  00065E  D000               	goto	l7011
  3038  000660                     l7011:
  3039                           
  3040                           ;doprnt.c: 1469: }
  3041                           ;doprnt.c: 1472: prec = c;
  3042  000660  C038  F032         	movff	printf@c,printf@prec
  3043                           
  3044                           ;doprnt.c: 1474: while(prec--) {
  3045  000664  D053               	goto	l7025
  3046                           
  3047                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  3048  000666  D045               	goto	l7021
  3049  000668                     l7013:
  3050                           
  3051                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3052  000668  5032               	movf	printf@prec,w,c
  3053  00066A  0D02               	mullw	2
  3054  00066C  0E14               	movlw	low _dpowers
  3055  00066E  24F3               	addwf	prodl,w,c
  3056  000670  6EF6               	movwf	tblptrl,c
  3057  000672  0EFF               	movlw	high _dpowers
  3058  000674  20F4               	addwfc	prodh,w,c
  3059  000676  6EF7               	movwf	tblptrh,c
  3060  000678                     	if	0	;There are less than 3 active tblptr bytes
  3061  000678                     	endif
  3062  000678  0009               	tblrd		*+
  3063  00067A  CFF5 F013          	movff	tablat,___lwdiv@divisor
  3064  00067E  000A               	tblrd		*-
  3065  000680  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  3066  000684  C033  F011         	movff	printf@val,___lwdiv@dividend
  3067  000688  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  3068  00068C  EC8F  F00E         	call	___lwdiv	;wreg free
  3069  000690  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  3070  000694  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  3071  000698  0E00               	movlw	0
  3072  00069A  6E1B               	movwf	___lwmod@divisor+1,c
  3073  00069C  0E0A               	movlw	10
  3074  00069E  6E1A               	movwf	___lwmod@divisor,c
  3075  0006A0  EC3A  F00F         	call	___lwmod	;wreg free
  3076  0006A4  5018               	movf	?___lwmod,w,c
  3077  0006A6  0F30               	addlw	48
  3078  0006A8  6E38               	movwf	printf@c,c
  3079                           
  3080                           ;doprnt.c: 1491: break;
  3081  0006AA  D02C               	goto	l7023
  3082  0006AC                     l7015:
  3083                           
  3084                           ;doprnt.c: 1499: {
  3085                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3086  0006AC  C033  F011         	movff	printf@val,___lwdiv@dividend
  3087  0006B0  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  3088  0006B4  5032               	movf	printf@prec,w,c
  3089  0006B6  0D02               	mullw	2
  3090  0006B8  0E1E               	movlw	low _hexpowers
  3091  0006BA  24F3               	addwf	prodl,w,c
  3092  0006BC  6EF6               	movwf	tblptrl,c
  3093  0006BE  0EFF               	movlw	high _hexpowers
  3094  0006C0  20F4               	addwfc	prodh,w,c
  3095  0006C2  6EF7               	movwf	tblptrh,c
  3096  0006C4                     	if	0	;There are less than 3 active tblptr bytes
  3097  0006C4                     	endif
  3098  0006C4  0009               	tblrd		*+
  3099  0006C6  CFF5 F013          	movff	tablat,___lwdiv@divisor
  3100  0006CA  000A               	tblrd		*-
  3101  0006CC  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  3102  0006D0  EC8F  F00E         	call	___lwdiv	;wreg free
  3103  0006D4  5011               	movf	?___lwdiv,w,c
  3104  0006D6  0B0F               	andlw	15
  3105  0006D8  6E2F               	movwf	printf@idx,c
  3106                           
  3107                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3108  0006DA  502F               	movf	printf@idx,w,c
  3109  0006DC  0D01               	mullw	1
  3110  0006DE  0EBF               	movlw	low STR_18
  3111  0006E0  24F3               	addwf	prodl,w,c
  3112  0006E2  6EF6               	movwf	tblptrl,c
  3113  0006E4  0EFF               	movlw	high STR_18
  3114  0006E6  20F4               	addwfc	prodh,w,c
  3115  0006E8  6EF7               	movwf	tblptrh,c
  3116  0006EA                     	if	0	;There are less than 3 active tblptr bytes
  3117  0006EA                     	endif
  3118  0006EA  0008               	tblrd		*
  3119  0006EC  CFF5 F038          	movff	tablat,printf@c
  3120                           
  3121                           ;doprnt.c: 1523: }
  3122                           
  3123                           ;doprnt.c: 1508: }
  3124                           ;doprnt.c: 1510: break;
  3125  0006F0  D009               	goto	l7023
  3126  0006F2                     l7021:
  3127  0006F2  5035               	movf	printf@flag,w,c
  3128  0006F4  0B80               	andlw	128
  3129                           
  3130                           ; Switch size 1, requested type "space"
  3131                           ; Number of cases is 2, Range of values is 0 to 128
  3132                           ; switch strategies available:
  3133                           ; Name         Instructions Cycles
  3134                           ; simple_byte            7     4 (average)
  3135                           ;	Chosen strategy is simple_byte
  3136  0006F6  0A00               	xorlw	0	; case 0
  3137  0006F8  B4D8               	btfsc	status,2,c
  3138  0006FA  D7B6               	goto	l7013
  3139  0006FC  0A80               	xorlw	128	; case 128
  3140  0006FE  B4D8               	btfsc	status,2,c
  3141  000700  D7D5               	goto	l7015
  3142  000702  D000               	goto	l7023
  3143  000704                     l7023:
  3144                           
  3145                           ;doprnt.c: 1524: (putch(c) );
  3146  000704  5038               	movf	printf@c,w,c
  3147  000706  ECCA  F011         	call	_putch
  3148  00070A  D000               	goto	l7025
  3149  00070C                     l7025:
  3150  00070C  0632               	decf	printf@prec,f,c
  3151  00070E  2832               	incf	printf@prec,w,c
  3152  000710  B4D8               	btfsc	status,2,c
  3153  000712  D002               	goto	l7027
  3154  000714  D7EE               	goto	l7021
  3155  000716  D000               	goto	l7027
  3156  000718                     l7027:
  3157  000718  C01D  FFF6         	movff	printf@f,tblptrl
  3158  00071C  C01E  FFF7         	movff	printf@f+1,tblptrh
  3159  000720  4A1D               	infsnz	printf@f,f,c
  3160  000722  2A1E               	incf	printf@f+1,f,c
  3161  000724                     	if	0	;tblptru may be non-zero
  3162  000724                     	endif
  3163  000724                     	if	0	;tblptru may be non-zero
  3164  000724                     	endif
  3165  000724  0008               	tblrd		*
  3166  000726  CFF5 F038          	movff	tablat,printf@c
  3167  00072A  5038               	movf	printf@c,w,c
  3168  00072C  B4D8               	btfsc	status,2,c
  3169  00072E  D002               	goto	l975
  3170  000730  D65A               	goto	l6901
  3171  000732  D000               	goto	l975
  3172  000734                     l975:
  3173  000734  0012               	return		;funcret
  3174  000736                     __end_of_printf:
  3175                           	opt stack 0
  3176                           tblptru	equ	0xFF8
  3177                           tblptrh	equ	0xFF7
  3178                           tblptrl	equ	0xFF6
  3179                           tablat	equ	0xFF5
  3180                           prodh	equ	0xFF4
  3181                           prodl	equ	0xFF3
  3182                           intcon	equ	0xFF2
  3183                           intcon2	equ	0xFF1
  3184                           postinc0	equ	0xFEE
  3185                           wreg	equ	0xFE8
  3186                           postdec1	equ	0xFE5
  3187                           fsr1l	equ	0xFE1
  3188                           postinc2	equ	0xFDE
  3189                           postdec2	equ	0xFDD
  3190                           fsr2h	equ	0xFDA
  3191                           fsr2l	equ	0xFD9
  3192                           status	equ	0xFD8
  3193                           
  3194 ;; *************** function _putch *****************
  3195 ;; Defined at:
  3196 ;;		line 97 in file "Lab12.c"
  3197 ;; Parameters:    Size  Location     Type
  3198 ;;  c               1    wreg     unsigned char 
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;  c               1   16[COMRAM] unsigned char 
  3201 ;; Return value:  Size  Location     Type
  3202 ;;		None               void
  3203 ;; Registers used:
  3204 ;;		wreg
  3205 ;; Tracked objects:
  3206 ;;		On entry : 0/0
  3207 ;;		On exit  : 0/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3211 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3213 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3214 ;;Total ram usage:        1 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; Hardware stack levels required when called:    3
  3217 ;; This function calls:
  3218 ;;		Nothing
  3219 ;; This function is called by:
  3220 ;;		_printf
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           	psect	text2
  3225  002394                     __ptext2:
  3226                           	opt stack 0
  3227  002394                     _putch:
  3228                           	opt stack 26
  3229                           
  3230                           ;incstack = 0
  3231                           ;putch@c stored from wreg
  3232  002394  6E11               	movwf	putch@c,c
  3233                           
  3234                           ;Lab12.c: 99: while (!TRMT);
  3235  002396  D000               	goto	l788
  3236  002398                     l788:
  3237  002398  A2AC               	btfss	4012,1,c	;volatile
  3238  00239A  D7FE               	goto	l788
  3239                           
  3240                           ;Lab12.c: 100: TXREG = c;
  3241  00239C  C011  FFAD         	movff	putch@c,4013	;volatile
  3242  0023A0  0012               	return		;funcret
  3243  0023A2                     __end_of_putch:
  3244                           	opt stack 0
  3245                           tblptru	equ	0xFF8
  3246                           tblptrh	equ	0xFF7
  3247                           tblptrl	equ	0xFF6
  3248                           tablat	equ	0xFF5
  3249                           prodh	equ	0xFF4
  3250                           prodl	equ	0xFF3
  3251                           intcon	equ	0xFF2
  3252                           intcon2	equ	0xFF1
  3253                           postinc0	equ	0xFEE
  3254                           wreg	equ	0xFE8
  3255                           postdec1	equ	0xFE5
  3256                           fsr1l	equ	0xFE1
  3257                           postinc2	equ	0xFDE
  3258                           postdec2	equ	0xFDD
  3259                           fsr2h	equ	0xFDA
  3260                           fsr2l	equ	0xFD9
  3261                           status	equ	0xFD8
  3262                           
  3263 ;; *************** function _isdigit *****************
  3264 ;; Defined at:
  3265 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3266 ;; Parameters:    Size  Location     Type
  3267 ;;  c               1    wreg     unsigned char 
  3268 ;; Auto vars:     Size  Location     Type
  3269 ;;  c               1   18[COMRAM] unsigned char 
  3270 ;; Return value:  Size  Location     Type
  3271 ;;		None               void
  3272 ;; Registers used:
  3273 ;;		wreg, status,2, status,0
  3274 ;; Tracked objects:
  3275 ;;		On entry : 0/0
  3276 ;;		On exit  : 0/0
  3277 ;;		Unchanged: 0/0
  3278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3280 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3281 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3282 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3283 ;;Total ram usage:        3 bytes
  3284 ;; Hardware stack levels used:    1
  3285 ;; Hardware stack levels required when called:    3
  3286 ;; This function calls:
  3287 ;;		Nothing
  3288 ;; This function is called by:
  3289 ;;		_printf
  3290 ;; This function uses a non-reentrant model
  3291 ;;
  3292                           
  3293                           	psect	text3
  3294  002190                     __ptext3:
  3295                           	opt stack 0
  3296  002190                     _isdigit:
  3297                           	opt stack 26
  3298                           
  3299                           ;incstack = 0
  3300                           ;isdigit@c stored from wreg
  3301  002190  6E13               	movwf	isdigit@c,c
  3302  002192  0E00               	movlw	0
  3303  002194  6E12               	movwf	_isdigit$2717,c
  3304  002196  0E3A               	movlw	58
  3305  002198  6013               	cpfslt	isdigit@c,c
  3306  00219A  D006               	goto	l6441
  3307  00219C  0E2F               	movlw	47
  3308  00219E  6413               	cpfsgt	isdigit@c,c
  3309  0021A0  D003               	goto	l6441
  3310  0021A2  0E01               	movlw	1
  3311  0021A4  6E12               	movwf	_isdigit$2717,c
  3312  0021A6  D000               	goto	l6441
  3313  0021A8                     l6441:
  3314  0021A8  C012  F011         	movff	_isdigit$2717,??_isdigit
  3315  0021AC  3011               	rrcf	??_isdigit,w,c
  3316  0021AE  D000               	goto	l1442
  3317  0021B0                     l1442:
  3318  0021B0  0012               	return		;funcret
  3319  0021B2                     __end_of_isdigit:
  3320                           	opt stack 0
  3321                           tblptru	equ	0xFF8
  3322                           tblptrh	equ	0xFF7
  3323                           tblptrl	equ	0xFF6
  3324                           tablat	equ	0xFF5
  3325                           prodh	equ	0xFF4
  3326                           prodl	equ	0xFF3
  3327                           intcon	equ	0xFF2
  3328                           intcon2	equ	0xFF1
  3329                           postinc0	equ	0xFEE
  3330                           wreg	equ	0xFE8
  3331                           postdec1	equ	0xFE5
  3332                           fsr1l	equ	0xFE1
  3333                           postinc2	equ	0xFDE
  3334                           postdec2	equ	0xFDD
  3335                           fsr2h	equ	0xFDA
  3336                           fsr2l	equ	0xFD9
  3337                           status	equ	0xFD8
  3338                           
  3339 ;; *************** function ___lwmod *****************
  3340 ;; Defined at:
  3341 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  3342 ;; Parameters:    Size  Location     Type
  3343 ;;  dividend        2   23[COMRAM] unsigned int 
  3344 ;;  divisor         2   25[COMRAM] unsigned int 
  3345 ;; Auto vars:     Size  Location     Type
  3346 ;;  counter         1   27[COMRAM] unsigned char 
  3347 ;; Return value:  Size  Location     Type
  3348 ;;                  2   23[COMRAM] unsigned int 
  3349 ;; Registers used:
  3350 ;;		wreg, status,2, status,0
  3351 ;; Tracked objects:
  3352 ;;		On entry : 0/0
  3353 ;;		On exit  : 0/0
  3354 ;;		Unchanged: 0/0
  3355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3356 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3357 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3359 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3360 ;;Total ram usage:        5 bytes
  3361 ;; Hardware stack levels used:    1
  3362 ;; Hardware stack levels required when called:    3
  3363 ;; This function calls:
  3364 ;;		Nothing
  3365 ;; This function is called by:
  3366 ;;		_printf
  3367 ;; This function uses a non-reentrant model
  3368 ;;
  3369                           
  3370                           	psect	text4
  3371  001E74                     __ptext4:
  3372                           	opt stack 0
  3373  001E74                     ___lwmod:
  3374                           	opt stack 26
  3375                           
  3376                           ;incstack = 0
  3377  001E74  501A               	movf	___lwmod@divisor,w,c
  3378  001E76  101B               	iorwf	___lwmod@divisor+1,w,c
  3379  001E78  B4D8               	btfsc	status,2,c
  3380  001E7A  D01D               	goto	l1544
  3381  001E7C  0E01               	movlw	1
  3382  001E7E  6E1C               	movwf	___lwmod@counter,c
  3383  001E80  D005               	goto	l6553
  3384  001E82                     l6551:
  3385  001E82  90D8               	bcf	status,0,c
  3386  001E84  361A               	rlcf	___lwmod@divisor,f,c
  3387  001E86  361B               	rlcf	___lwmod@divisor+1,f,c
  3388  001E88  2A1C               	incf	___lwmod@counter,f,c
  3389  001E8A  D000               	goto	l6553
  3390  001E8C                     l6553:
  3391  001E8C  BE1B               	btfsc	___lwmod@divisor+1,7,c
  3392  001E8E  D002               	goto	l6555
  3393  001E90  D7F8               	goto	l6551
  3394  001E92  D000               	goto	l6555
  3395  001E94                     l6555:
  3396  001E94  501A               	movf	___lwmod@divisor,w,c
  3397  001E96  5C18               	subwf	___lwmod@dividend,w,c
  3398  001E98  501B               	movf	___lwmod@divisor+1,w,c
  3399  001E9A  5819               	subwfb	___lwmod@dividend+1,w,c
  3400  001E9C  A0D8               	btfss	status,0,c
  3401  001E9E  D005               	goto	l6559
  3402  001EA0  501A               	movf	___lwmod@divisor,w,c
  3403  001EA2  5E18               	subwf	___lwmod@dividend,f,c
  3404  001EA4  501B               	movf	___lwmod@divisor+1,w,c
  3405  001EA6  5A19               	subwfb	___lwmod@dividend+1,f,c
  3406  001EA8  D000               	goto	l6559
  3407  001EAA                     l6559:
  3408  001EAA  90D8               	bcf	status,0,c
  3409  001EAC  321B               	rrcf	___lwmod@divisor+1,f,c
  3410  001EAE  321A               	rrcf	___lwmod@divisor,f,c
  3411  001EB0  2E1C               	decfsz	___lwmod@counter,f,c
  3412  001EB2  D7F0               	goto	l6555
  3413  001EB4  D000               	goto	l1544
  3414  001EB6                     l1544:
  3415  001EB6  C018  F018         	movff	___lwmod@dividend,?___lwmod
  3416  001EBA  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  3417  001EBE  0012               	return		;funcret
  3418  001EC0                     __end_of___lwmod:
  3419                           	opt stack 0
  3420                           tblptru	equ	0xFF8
  3421                           tblptrh	equ	0xFF7
  3422                           tblptrl	equ	0xFF6
  3423                           tablat	equ	0xFF5
  3424                           prodh	equ	0xFF4
  3425                           prodl	equ	0xFF3
  3426                           intcon	equ	0xFF2
  3427                           intcon2	equ	0xFF1
  3428                           postinc0	equ	0xFEE
  3429                           wreg	equ	0xFE8
  3430                           postdec1	equ	0xFE5
  3431                           fsr1l	equ	0xFE1
  3432                           postinc2	equ	0xFDE
  3433                           postdec2	equ	0xFDD
  3434                           fsr2h	equ	0xFDA
  3435                           fsr2l	equ	0xFD9
  3436                           status	equ	0xFD8
  3437                           
  3438 ;; *************** function ___lwdiv *****************
  3439 ;; Defined at:
  3440 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  3441 ;; Parameters:    Size  Location     Type
  3442 ;;  dividend        2   16[COMRAM] unsigned int 
  3443 ;;  divisor         2   18[COMRAM] unsigned int 
  3444 ;; Auto vars:     Size  Location     Type
  3445 ;;  quotient        2   21[COMRAM] unsigned int 
  3446 ;;  counter         1   20[COMRAM] unsigned char 
  3447 ;; Return value:  Size  Location     Type
  3448 ;;                  2   16[COMRAM] unsigned int 
  3449 ;; Registers used:
  3450 ;;		wreg, status,2, status,0
  3451 ;; Tracked objects:
  3452 ;;		On entry : 0/0
  3453 ;;		On exit  : 0/0
  3454 ;;		Unchanged: 0/0
  3455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3456 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3457 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3459 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3460 ;;Total ram usage:        7 bytes
  3461 ;; Hardware stack levels used:    1
  3462 ;; Hardware stack levels required when called:    3
  3463 ;; This function calls:
  3464 ;;		Nothing
  3465 ;; This function is called by:
  3466 ;;		_printf
  3467 ;; This function uses a non-reentrant model
  3468 ;;
  3469                           
  3470                           	psect	text5
  3471  001D1E                     __ptext5:
  3472                           	opt stack 0
  3473  001D1E                     ___lwdiv:
  3474                           	opt stack 26
  3475                           
  3476                           ;incstack = 0
  3477  001D1E  0E00               	movlw	0
  3478  001D20  6E17               	movwf	___lwdiv@quotient+1,c
  3479  001D22  0E00               	movlw	0
  3480  001D24  6E16               	movwf	___lwdiv@quotient,c
  3481  001D26  5013               	movf	___lwdiv@divisor,w,c
  3482  001D28  1014               	iorwf	___lwdiv@divisor+1,w,c
  3483  001D2A  B4D8               	btfsc	status,2,c
  3484  001D2C  D021               	goto	l1534
  3485  001D2E  0E01               	movlw	1
  3486  001D30  6E15               	movwf	___lwdiv@counter,c
  3487  001D32  D005               	goto	l6533
  3488  001D34                     l6531:
  3489  001D34  90D8               	bcf	status,0,c
  3490  001D36  3613               	rlcf	___lwdiv@divisor,f,c
  3491  001D38  3614               	rlcf	___lwdiv@divisor+1,f,c
  3492  001D3A  2A15               	incf	___lwdiv@counter,f,c
  3493  001D3C  D000               	goto	l6533
  3494  001D3E                     l6533:
  3495  001D3E  BE14               	btfsc	___lwdiv@divisor+1,7,c
  3496  001D40  D002               	goto	l6535
  3497  001D42  D7F8               	goto	l6531
  3498  001D44  D000               	goto	l6535
  3499  001D46                     l6535:
  3500  001D46  90D8               	bcf	status,0,c
  3501  001D48  3616               	rlcf	___lwdiv@quotient,f,c
  3502  001D4A  3617               	rlcf	___lwdiv@quotient+1,f,c
  3503  001D4C  5013               	movf	___lwdiv@divisor,w,c
  3504  001D4E  5C11               	subwf	___lwdiv@dividend,w,c
  3505  001D50  5014               	movf	___lwdiv@divisor+1,w,c
  3506  001D52  5812               	subwfb	___lwdiv@dividend+1,w,c
  3507  001D54  A0D8               	btfss	status,0,c
  3508  001D56  D006               	goto	l6543
  3509  001D58  5013               	movf	___lwdiv@divisor,w,c
  3510  001D5A  5E11               	subwf	___lwdiv@dividend,f,c
  3511  001D5C  5014               	movf	___lwdiv@divisor+1,w,c
  3512  001D5E  5A12               	subwfb	___lwdiv@dividend+1,f,c
  3513  001D60  8016               	bsf	___lwdiv@quotient,0,c
  3514  001D62  D000               	goto	l6543
  3515  001D64                     l6543:
  3516  001D64  90D8               	bcf	status,0,c
  3517  001D66  3214               	rrcf	___lwdiv@divisor+1,f,c
  3518  001D68  3213               	rrcf	___lwdiv@divisor,f,c
  3519  001D6A  2E15               	decfsz	___lwdiv@counter,f,c
  3520  001D6C  D7EC               	goto	l6535
  3521  001D6E  D000               	goto	l1534
  3522  001D70                     l1534:
  3523  001D70  C016  F011         	movff	___lwdiv@quotient,?___lwdiv
  3524  001D74  C017  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3525  001D78  0012               	return		;funcret
  3526  001D7A                     __end_of___lwdiv:
  3527                           	opt stack 0
  3528                           tblptru	equ	0xFF8
  3529                           tblptrh	equ	0xFF7
  3530                           tblptrl	equ	0xFF6
  3531                           tablat	equ	0xFF5
  3532                           prodh	equ	0xFF4
  3533                           prodl	equ	0xFF3
  3534                           intcon	equ	0xFF2
  3535                           intcon2	equ	0xFF1
  3536                           postinc0	equ	0xFEE
  3537                           wreg	equ	0xFE8
  3538                           postdec1	equ	0xFE5
  3539                           fsr1l	equ	0xFE1
  3540                           postinc2	equ	0xFDE
  3541                           postdec2	equ	0xFDD
  3542                           fsr2h	equ	0xFDA
  3543                           fsr2l	equ	0xFD9
  3544                           status	equ	0xFD8
  3545                           
  3546 ;; *************** function _get_RPM *****************
  3547 ;; Defined at:
  3548 ;;		line 20 in file "Fan_Support.c"
  3549 ;; Parameters:    Size  Location     Type
  3550 ;;		None
  3551 ;; Auto vars:     Size  Location     Type
  3552 ;;  RPS             3   46[COMRAM] float 
  3553 ;; Return value:  Size  Location     Type
  3554 ;;                  3   43[COMRAM] float 
  3555 ;; Registers used:
  3556 ;;		wreg, status,2, status,0, cstack
  3557 ;; Tracked objects:
  3558 ;;		On entry : 0/0
  3559 ;;		On exit  : 0/0
  3560 ;;		Unchanged: 0/0
  3561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3562 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3563 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3565 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3566 ;;Total ram usage:        6 bytes
  3567 ;; Hardware stack levels used:    1
  3568 ;; Hardware stack levels required when called:    5
  3569 ;; This function calls:
  3570 ;;		_Wait_One_Second
  3571 ;;		___ftmul
  3572 ;;		___lbtoft
  3573 ;; This function is called by:
  3574 ;;		_main
  3575 ;; This function uses a non-reentrant model
  3576 ;;
  3577                           
  3578                           	psect	text6
  3579  001EC0                     __ptext6:
  3580                           	opt stack 0
  3581  001EC0                     _get_RPM:
  3582                           	opt stack 25
  3583                           
  3584                           ;Fan_Support.c: 21: TMR3L = 0;
  3585                           
  3586                           ;incstack = 0
  3587  001EC0  0E00               	movlw	0
  3588  001EC2  6EB2               	movwf	4018,c	;volatile
  3589                           
  3590                           ;Fan_Support.c: 22: T3CONbits.TMR3ON = 1;
  3591  001EC4  80B1               	bsf	4017,0,c	;volatile
  3592                           
  3593                           ;Fan_Support.c: 23: Wait_One_Second();
  3594  001EC6  ECEF  F011         	call	_Wait_One_Second	;wreg free
  3595                           
  3596                           ;Fan_Support.c: 24: T3CONbits.TMR3ON = 0;
  3597  001ECA  90B1               	bcf	4017,0,c	;volatile
  3598                           
  3599                           ;Fan_Support.c: 25: float RPS = TMR3L;
  3600  001ECC  50B2               	movf	4018,w,c	;volatile
  3601  001ECE  ECA3  F010         	call	___lbtoft
  3602  001ED2  C019  F02F         	movff	?___lbtoft,get_RPM@RPS
  3603  001ED6  C01A  F030         	movff	?___lbtoft+1,get_RPM@RPS+1
  3604  001EDA  C01B  F031         	movff	?___lbtoft+2,get_RPM@RPS+2
  3605                           
  3606                           ;Fan_Support.c: 26: return (RPS * 60.00);
  3607  001EDE  C02F  F01D         	movff	get_RPM@RPS,___ftmul@f1
  3608  001EE2  C030  F01E         	movff	get_RPM@RPS+1,___ftmul@f1+1
  3609  001EE6  C031  F01F         	movff	get_RPM@RPS+2,___ftmul@f1+2
  3610  001EEA  0E00               	movlw	0
  3611  001EEC  6E20               	movwf	___ftmul@f2,c
  3612  001EEE  0E70               	movlw	112
  3613  001EF0  6E21               	movwf	___ftmul@f2+1,c
  3614  001EF2  0E42               	movlw	66
  3615  001EF4  6E22               	movwf	___ftmul@f2+2,c
  3616  001EF6  EC22  F009         	call	___ftmul	;wreg free
  3617  001EFA  C01D  F02C         	movff	?___ftmul,?_get_RPM
  3618  001EFE  C01E  F02D         	movff	?___ftmul+1,?_get_RPM+1
  3619  001F02  C01F  F02E         	movff	?___ftmul+2,?_get_RPM+2
  3620  001F06  D000               	goto	l246
  3621  001F08                     l246:
  3622  001F08  0012               	return		;funcret
  3623  001F0A                     __end_of_get_RPM:
  3624                           	opt stack 0
  3625                           tblptru	equ	0xFF8
  3626                           tblptrh	equ	0xFF7
  3627                           tblptrl	equ	0xFF6
  3628                           tablat	equ	0xFF5
  3629                           prodh	equ	0xFF4
  3630                           prodl	equ	0xFF3
  3631                           intcon	equ	0xFF2
  3632                           intcon2	equ	0xFF1
  3633                           postinc0	equ	0xFEE
  3634                           wreg	equ	0xFE8
  3635                           postdec1	equ	0xFE5
  3636                           fsr1l	equ	0xFE1
  3637                           postinc2	equ	0xFDE
  3638                           postdec2	equ	0xFDD
  3639                           fsr2h	equ	0xFDA
  3640                           fsr2l	equ	0xFD9
  3641                           status	equ	0xFD8
  3642                           
  3643 ;; *************** function _Update_Screen *****************
  3644 ;; Defined at:
  3645 ;;		line 67 in file "Main_Screen.c"
  3646 ;; Parameters:    Size  Location     Type
  3647 ;;		None
  3648 ;; Auto vars:     Size  Location     Type
  3649 ;;  neg_tempF       2    7[BANK1 ] int 
  3650 ;; Return value:  Size  Location     Type
  3651 ;;		None               void
  3652 ;; Registers used:
  3653 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3654 ;; Tracked objects:
  3655 ;;		On entry : 0/0
  3656 ;;		On exit  : 0/0
  3657 ;;		Unchanged: 0/0
  3658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3660 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3661 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3662 ;;      Totals:         0       2       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3663 ;;Total ram usage:        4 bytes
  3664 ;; Hardware stack levels used:    1
  3665 ;; Hardware stack levels required when called:   10
  3666 ;; This function calls:
  3667 ;;		___awdiv
  3668 ;;		___awmod
  3669 ;;		_drawtext
  3670 ;;		_strcpy
  3671 ;; This function is called by:
  3672 ;;		_main
  3673 ;; This function uses a non-reentrant model
  3674 ;;
  3675                           
  3676                           	psect	text7
  3677  00001C                     __ptext7:
  3678                           	opt stack 0
  3679  00001C                     _Update_Screen:
  3680                           	opt stack 20
  3681                           
  3682                           ;Main_Screen.c: 68: if ((DS1621_tempC & 0x80) == 0x80) {
  3683                           
  3684                           ;incstack = 0
  3685  00001C  AE43               	btfss	_DS1621_tempC,7,c
  3686  00001E  D01C               	goto	l6781
  3687                           
  3688                           ;Main_Screen.c: 69: tempC[0] = '-';
  3689  000020  0E2D               	movlw	45
  3690  000022  0100               	movlb	0	; () banked
  3691  000024  6FE0               	movwf	_tempC& (0+255),b
  3692                           
  3693                           ; BSR set to: 0
  3694                           ;Main_Screen.c: 70: tempC[1] = (DS1621_tempC & 0x7f) / 10 + '0';
  3695  000026  0E7F               	movlw	127
  3696  000028  1443               	andwf	_DS1621_tempC,w,c
  3697  00002A  6E17               	movwf	___awdiv@dividend,c
  3698  00002C  6A18               	clrf	___awdiv@dividend+1,c
  3699  00002E  0E00               	movlw	0
  3700  000030  6E1A               	movwf	___awdiv@divisor+1,c
  3701  000032  0E0A               	movlw	10
  3702  000034  6E19               	movwf	___awdiv@divisor,c
  3703  000036  EC37  F00C         	call	___awdiv	;wreg free
  3704  00003A  5017               	movf	?___awdiv,w,c
  3705  00003C  0F30               	addlw	48
  3706  00003E  0100               	movlb	0	; () banked
  3707  000040  6FE1               	movwf	(_tempC+1)& (0+255),b
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;Main_Screen.c: 71: tempC[2] = (DS1621_tempC & 0x7f) % 10 + '0';
  3711  000042  0E7F               	movlw	127
  3712  000044  1443               	andwf	_DS1621_tempC,w,c
  3713  000046  6E1F               	movwf	___awmod@dividend,c
  3714  000048  6A20               	clrf	___awmod@dividend+1,c
  3715  00004A  0E00               	movlw	0
  3716  00004C  6E22               	movwf	___awmod@divisor+1,c
  3717  00004E  0E0A               	movlw	10
  3718  000050  6E21               	movwf	___awmod@divisor,c
  3719  000052  EC0E  F00D         	call	___awmod	;wreg free
  3720  000056  D01B               	goto	L1
  3721  000058                     l6781:
  3722                           
  3723                           ;Main_Screen.c: 73: tempC[0] = '+';
  3724  000058  0E2B               	movlw	43
  3725  00005A  0100               	movlb	0	; () banked
  3726  00005C  6FE0               	movwf	_tempC& (0+255),b
  3727                           
  3728                           ; BSR set to: 0
  3729                           ;Main_Screen.c: 74: tempC[1] = DS1621_tempC / 10 + '0';
  3730  00005E  C043  F017         	movff	_DS1621_tempC,___awdiv@dividend
  3731  000062  C044  F018         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  3732  000066  0E00               	movlw	0
  3733  000068  6E1A               	movwf	___awdiv@divisor+1,c
  3734  00006A  0E0A               	movlw	10
  3735  00006C  6E19               	movwf	___awdiv@divisor,c
  3736  00006E  EC37  F00C         	call	___awdiv	;wreg free
  3737  000072  5017               	movf	?___awdiv,w,c
  3738  000074  0F30               	addlw	48
  3739  000076  0100               	movlb	0	; () banked
  3740  000078  6FE1               	movwf	(_tempC+1)& (0+255),b
  3741                           
  3742                           ; BSR set to: 0
  3743                           ;Main_Screen.c: 75: tempC[2] = DS1621_tempC % 10 + '0';
  3744  00007A  C043  F01F         	movff	_DS1621_tempC,___awmod@dividend
  3745  00007E  C044  F020         	movff	_DS1621_tempC+1,___awmod@dividend+1
  3746  000082  0E00               	movlw	0
  3747  000084  6E22               	movwf	___awmod@divisor+1,c
  3748  000086  0E0A               	movlw	10
  3749  000088  6E21               	movwf	___awmod@divisor,c
  3750  00008A  EC0E  F00D         	call	___awmod	;wreg free
  3751  00008E                     L1:
  3752  00008E  501F               	movf	?___awmod,w,c
  3753  000090  0F30               	addlw	48
  3754  000092  0100               	movlb	0	; () banked
  3755  000094  6FE2               	movwf	(_tempC+2)& (0+255),b
  3756  000096  D000               	goto	l6787
  3757  000098                     l6787:
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;Main_Screen.c: 76: }
  3761                           ;Main_Screen.c: 78: if (DS1621_tempF < 0) {
  3762  000098  AE46               	btfss	_DS1621_tempF+1,7,c
  3763  00009A  D029               	goto	l6797
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;Main_Screen.c: 79: tempF[0] = '-';
  3767  00009C  0E2D               	movlw	45
  3768  00009E  0100               	movlb	0	; () banked
  3769  0000A0  6FE4               	movwf	_tempF& (0+255),b
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;Main_Screen.c: 80: int neg_tempF = -DS1621_tempF;
  3773  0000A2  C045  F0FD         	movff	_DS1621_tempF,??_Update_Screen
  3774  0000A6  C046  F0FE         	movff	_DS1621_tempF+1,??_Update_Screen+1
  3775  0000AA  0100               	movlb	0	; () banked
  3776  0000AC  1FFD               	comf	??_Update_Screen& (0+255),f,b
  3777  0000AE  1FFE               	comf	(??_Update_Screen+1)& (0+255),f,b
  3778  0000B0  4BFD               	infsnz	??_Update_Screen& (0+255),f,b
  3779  0000B2  2BFE               	incf	(??_Update_Screen+1)& (0+255),f,b
  3780  0000B4  C0FD  F165         	movff	??_Update_Screen,Update_Screen@neg_tempF
  3781  0000B8  C0FE  F166         	movff	??_Update_Screen+1,Update_Screen@neg_tempF+1
  3782                           
  3783                           ; BSR set to: 0
  3784                           ;Main_Screen.c: 81: tempF[1] = neg_tempF / 10 + '0';
  3785  0000BC  C165  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3786  0000C0  C166  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3787  0000C4  0E00               	movlw	0
  3788  0000C6  6E1A               	movwf	___awdiv@divisor+1,c
  3789  0000C8  0E0A               	movlw	10
  3790  0000CA  6E19               	movwf	___awdiv@divisor,c
  3791  0000CC  EC37  F00C         	call	___awdiv	;wreg free
  3792  0000D0  5017               	movf	?___awdiv,w,c
  3793  0000D2  0F30               	addlw	48
  3794  0000D4  0100               	movlb	0	; () banked
  3795  0000D6  6FE5               	movwf	(_tempF+1)& (0+255),b
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;Main_Screen.c: 82: tempF[2] = neg_tempF % 10 + '0';
  3799  0000D8  C165  F01F         	movff	Update_Screen@neg_tempF,___awmod@dividend
  3800  0000DC  C166  F020         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  3801  0000E0  0E00               	movlw	0
  3802  0000E2  6E22               	movwf	___awmod@divisor+1,c
  3803  0000E4  0E0A               	movlw	10
  3804  0000E6  6E21               	movwf	___awmod@divisor,c
  3805  0000E8  EC0E  F00D         	call	___awmod	;wreg free
  3806  0000EC  D01B               	goto	L2
  3807  0000EE                     l6797:
  3808                           
  3809                           ; BSR set to: 0
  3810                           ;Main_Screen.c: 84: tempF[0] = '+';
  3811  0000EE  0E2B               	movlw	43
  3812  0000F0  0100               	movlb	0	; () banked
  3813  0000F2  6FE4               	movwf	_tempF& (0+255),b
  3814                           
  3815                           ; BSR set to: 0
  3816                           ;Main_Screen.c: 85: tempF[1] = DS1621_tempF / 10 + '0';
  3817  0000F4  C045  F017         	movff	_DS1621_tempF,___awdiv@dividend
  3818  0000F8  C046  F018         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  3819  0000FC  0E00               	movlw	0
  3820  0000FE  6E1A               	movwf	___awdiv@divisor+1,c
  3821  000100  0E0A               	movlw	10
  3822  000102  6E19               	movwf	___awdiv@divisor,c
  3823  000104  EC37  F00C         	call	___awdiv	;wreg free
  3824  000108  5017               	movf	?___awdiv,w,c
  3825  00010A  0F30               	addlw	48
  3826  00010C  0100               	movlb	0	; () banked
  3827  00010E  6FE5               	movwf	(_tempF+1)& (0+255),b
  3828                           
  3829                           ; BSR set to: 0
  3830                           ;Main_Screen.c: 86: tempF[2] = DS1621_tempF % 10 + '0';
  3831  000110  C045  F01F         	movff	_DS1621_tempF,___awmod@dividend
  3832  000114  C046  F020         	movff	_DS1621_tempF+1,___awmod@dividend+1
  3833  000118  0E00               	movlw	0
  3834  00011A  6E22               	movwf	___awmod@divisor+1,c
  3835  00011C  0E0A               	movlw	10
  3836  00011E  6E21               	movwf	___awmod@divisor,c
  3837  000120  EC0E  F00D         	call	___awmod	;wreg free
  3838  000124                     L2:
  3839  000124  501F               	movf	?___awmod,w,c
  3840  000126  0F30               	addlw	48
  3841  000128  0100               	movlb	0	; () banked
  3842  00012A  6FE6               	movwf	(_tempF+2)& (0+255),b
  3843  00012C  D000               	goto	l6803
  3844  00012E                     l6803:
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;Main_Screen.c: 87: }
  3848                           ;Main_Screen.c: 88: time[0] = (hour >> 4) + '0';
  3849  00012E  385E               	swapf	_hour,w,c
  3850  000130  0B0F               	andlw	15
  3851  000132  0F30               	addlw	48
  3852  000134  0100               	movlb	0	; () banked
  3853  000136  6FCA               	movwf	_time& (0+255),b
  3854                           
  3855                           ; BSR set to: 0
  3856                           ;Main_Screen.c: 89: time[1] = (hour & 0x0f) + '0';
  3857  000138  505E               	movf	_hour,w,c
  3858  00013A  0B0F               	andlw	15
  3859  00013C  0F30               	addlw	48
  3860  00013E  0100               	movlb	0	; () banked
  3861  000140  6FCB               	movwf	(_time+1)& (0+255),b
  3862                           
  3863                           ; BSR set to: 0
  3864                           ;Main_Screen.c: 92: time[3] = (minute >> 4) + '0';
  3865  000142  385F               	swapf	_minute,w,c
  3866  000144  0B0F               	andlw	15
  3867  000146  0F30               	addlw	48
  3868  000148  0100               	movlb	0	; () banked
  3869  00014A  6FCD               	movwf	(_time+3)& (0+255),b
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;Main_Screen.c: 93: time[4] = (minute & 0x0f) + '0';
  3873  00014C  505F               	movf	_minute,w,c
  3874  00014E  0B0F               	andlw	15
  3875  000150  0F30               	addlw	48
  3876  000152  0100               	movlb	0	; () banked
  3877  000154  6FCE               	movwf	(_time+4)& (0+255),b
  3878                           
  3879                           ; BSR set to: 0
  3880                           ;Main_Screen.c: 95: time[6] = (second >> 4) + '0';
  3881  000156  3862               	swapf	_second,w,c
  3882  000158  0B0F               	andlw	15
  3883  00015A  0F30               	addlw	48
  3884  00015C  0100               	movlb	0	; () banked
  3885  00015E  6FD0               	movwf	(_time+6)& (0+255),b
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;Main_Screen.c: 96: time[7] = (second & 0x0f) + '0';
  3889  000160  5062               	movf	_second,w,c
  3890  000162  0B0F               	andlw	15
  3891  000164  0F30               	addlw	48
  3892  000166  0100               	movlb	0	; () banked
  3893  000168  6FD1               	movwf	(_time+7)& (0+255),b
  3894                           
  3895                           ; BSR set to: 0
  3896                           ;Main_Screen.c: 98: date[0] = (month >> 4) + '0';
  3897  00016A  3860               	swapf	_month,w,c
  3898  00016C  0B0F               	andlw	15
  3899  00016E  0F30               	addlw	48
  3900  000170  0100               	movlb	0	; () banked
  3901  000172  6FC1               	movwf	_date& (0+255),b
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;Main_Screen.c: 99: date[1] = (month & 0x0f) + '0';
  3905  000174  5060               	movf	_month,w,c
  3906  000176  0B0F               	andlw	15
  3907  000178  0F30               	addlw	48
  3908  00017A  0100               	movlb	0	; () banked
  3909  00017C  6FC2               	movwf	(_date+1)& (0+255),b
  3910                           
  3911                           ; BSR set to: 0
  3912                           ;Main_Screen.c: 101: date[3] = (day >> 4) + '0';
  3913  00017E  385A               	swapf	_day,w,c
  3914  000180  0B0F               	andlw	15
  3915  000182  0F30               	addlw	48
  3916  000184  0100               	movlb	0	; () banked
  3917  000186  6FC4               	movwf	(_date+3)& (0+255),b
  3918                           
  3919                           ; BSR set to: 0
  3920                           ;Main_Screen.c: 102: date[4] = (day & 0x0f) + '0';
  3921  000188  505A               	movf	_day,w,c
  3922  00018A  0B0F               	andlw	15
  3923  00018C  0F30               	addlw	48
  3924  00018E  0100               	movlb	0	; () banked
  3925  000190  6FC5               	movwf	(_date+4)& (0+255),b
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;Main_Screen.c: 104: date[6] = (year >> 4) + '0';
  3929  000192  386C               	swapf	_year,w,c
  3930  000194  0B0F               	andlw	15
  3931  000196  0F30               	addlw	48
  3932  000198  0100               	movlb	0	; () banked
  3933  00019A  6FC7               	movwf	(_date+6)& (0+255),b
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;Main_Screen.c: 105: date[7] = (year & 0x0f) + '0';
  3937  00019C  506C               	movf	_year,w,c
  3938  00019E  0B0F               	andlw	15
  3939  0001A0  0F30               	addlw	48
  3940  0001A2  0100               	movlb	0	; () banked
  3941  0001A4  6FC8               	movwf	(_date+7)& (0+255),b
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;Main_Screen.c: 108: if (FAN == 1) strcpy(Fan_SW_Txt, "ON ");
  3945  0001A6  044D               	decf	_FAN,w,c
  3946  0001A8  A4D8               	btfss	status,2,c
  3947  0001AA  D00B               	goto	l6831
  3948                           
  3949                           ; BSR set to: 0
  3950  0001AC  0EDC               	movlw	low _Fan_SW_Txt
  3951  0001AE  6E11               	movwf	strcpy@to,c
  3952  0001B0  0E00               	movlw	high _Fan_SW_Txt
  3953  0001B2  6E12               	movwf	strcpy@to+1,c
  3954  0001B4  0EED               	movlw	low STR_10
  3955  0001B6  6E13               	movwf	strcpy@from,c
  3956  0001B8  0EFF               	movlw	high STR_10
  3957  0001BA  6E14               	movwf	strcpy@from+1,c
  3958  0001BC  EC49  F010         	call	_strcpy	;wreg free
  3959  0001C0  D00B               	goto	l6833
  3960  0001C2                     l6831:
  3961                           
  3962                           ;Main_Screen.c: 109: else strcpy(Fan_SW_Txt, "OFF");
  3963  0001C2  0EDC               	movlw	low _Fan_SW_Txt
  3964  0001C4  6E11               	movwf	strcpy@to,c
  3965  0001C6  0E00               	movlw	high _Fan_SW_Txt
  3966  0001C8  6E12               	movwf	strcpy@to+1,c
  3967  0001CA  0EF1               	movlw	low STR_11
  3968  0001CC  6E13               	movwf	strcpy@from,c
  3969  0001CE  0EFF               	movlw	high STR_11
  3970  0001D0  6E14               	movwf	strcpy@from+1,c
  3971  0001D2  EC49  F010         	call	_strcpy	;wreg free
  3972  0001D6  D000               	goto	l6833
  3973  0001D8                     l6833:
  3974                           
  3975                           ;Main_Screen.c: 112: DC_Txt[0] = duty_cycle / 100 + '0';
  3976  0001D8  C05C  F017         	movff	_duty_cycle,___awdiv@dividend
  3977  0001DC  6A18               	clrf	___awdiv@dividend+1,c
  3978  0001DE  0E00               	movlw	0
  3979  0001E0  6E1A               	movwf	___awdiv@divisor+1,c
  3980  0001E2  0E64               	movlw	100
  3981  0001E4  6E19               	movwf	___awdiv@divisor,c
  3982  0001E6  EC37  F00C         	call	___awdiv	;wreg free
  3983  0001EA  5017               	movf	?___awdiv,w,c
  3984  0001EC  0F30               	addlw	48
  3985  0001EE  0100               	movlb	0	; () banked
  3986  0001F0  6FD8               	movwf	_DC_Txt& (0+255),b
  3987                           
  3988                           ; BSR set to: 0
  3989                           ;Main_Screen.c: 113: DC_Txt[1] = (duty_cycle / 10) % 10 + '0';
  3990  0001F2  0E00               	movlw	0
  3991  0001F4  6E1A               	movwf	___awdiv@divisor+1,c
  3992  0001F6  0E0A               	movlw	10
  3993  0001F8  6E19               	movwf	___awdiv@divisor,c
  3994  0001FA  C05C  F017         	movff	_duty_cycle,___awdiv@dividend
  3995  0001FE  6A18               	clrf	___awdiv@dividend+1,c
  3996  000200  EC37  F00C         	call	___awdiv	;wreg free
  3997  000204  C017  F01F         	movff	?___awdiv,___awmod@dividend
  3998  000208  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  3999  00020C  0E00               	movlw	0
  4000  00020E  6E22               	movwf	___awmod@divisor+1,c
  4001  000210  0E0A               	movlw	10
  4002  000212  6E21               	movwf	___awmod@divisor,c
  4003  000214  EC0E  F00D         	call	___awmod	;wreg free
  4004  000218  501F               	movf	?___awmod,w,c
  4005  00021A  0F30               	addlw	48
  4006  00021C  0100               	movlb	0	; () banked
  4007  00021E  6FD9               	movwf	(_DC_Txt+1)& (0+255),b
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;Main_Screen.c: 114: DC_Txt[2] = duty_cycle % 10 + '0';
  4011  000220  C05C  F01F         	movff	_duty_cycle,___awmod@dividend
  4012  000224  6A20               	clrf	___awmod@dividend+1,c
  4013  000226  0E00               	movlw	0
  4014  000228  6E22               	movwf	___awmod@divisor+1,c
  4015  00022A  0E0A               	movlw	10
  4016  00022C  6E21               	movwf	___awmod@divisor,c
  4017  00022E  EC0E  F00D         	call	___awmod	;wreg free
  4018  000232  501F               	movf	?___awmod,w,c
  4019  000234  0F30               	addlw	48
  4020  000236  0100               	movlb	0	; () banked
  4021  000238  6FDA               	movwf	(_DC_Txt+2)& (0+255),b
  4022                           
  4023                           ; BSR set to: 0
  4024                           ;Main_Screen.c: 121: RPM_Txt[0] = rpm / 1000 + '0';
  4025  00023A  C049  F017         	movff	_rpm,___awdiv@dividend
  4026  00023E  C04A  F018         	movff	_rpm+1,___awdiv@dividend+1
  4027  000242  0E03               	movlw	3
  4028  000244  6E1A               	movwf	___awdiv@divisor+1,c
  4029  000246  0EE8               	movlw	232
  4030  000248  6E19               	movwf	___awdiv@divisor,c
  4031  00024A  EC37  F00C         	call	___awdiv	;wreg free
  4032  00024E  5017               	movf	?___awdiv,w,c
  4033  000250  0F30               	addlw	48
  4034  000252  0100               	movlb	0	; () banked
  4035  000254  6FD3               	movwf	_RPM_Txt& (0+255),b
  4036                           
  4037                           ; BSR set to: 0
  4038                           ;Main_Screen.c: 122: RPM_Txt[1] = (rpm / 100) % 10 + '0';
  4039  000256  0E00               	movlw	0
  4040  000258  6E1A               	movwf	___awdiv@divisor+1,c
  4041  00025A  0E64               	movlw	100
  4042  00025C  6E19               	movwf	___awdiv@divisor,c
  4043  00025E  C049  F017         	movff	_rpm,___awdiv@dividend
  4044  000262  C04A  F018         	movff	_rpm+1,___awdiv@dividend+1
  4045  000266  EC37  F00C         	call	___awdiv	;wreg free
  4046  00026A  C017  F01F         	movff	?___awdiv,___awmod@dividend
  4047  00026E  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  4048  000272  0E00               	movlw	0
  4049  000274  6E22               	movwf	___awmod@divisor+1,c
  4050  000276  0E0A               	movlw	10
  4051  000278  6E21               	movwf	___awmod@divisor,c
  4052  00027A  EC0E  F00D         	call	___awmod	;wreg free
  4053  00027E  501F               	movf	?___awmod,w,c
  4054  000280  0F30               	addlw	48
  4055  000282  0100               	movlb	0	; () banked
  4056  000284  6FD4               	movwf	(_RPM_Txt+1)& (0+255),b
  4057                           
  4058                           ; BSR set to: 0
  4059                           ;Main_Screen.c: 123: RPM_Txt[2] = (rpm / 10) % 10 + '0';
  4060  000286  0E00               	movlw	0
  4061  000288  6E1A               	movwf	___awdiv@divisor+1,c
  4062  00028A  0E0A               	movlw	10
  4063  00028C  6E19               	movwf	___awdiv@divisor,c
  4064  00028E  C049  F017         	movff	_rpm,___awdiv@dividend
  4065  000292  C04A  F018         	movff	_rpm+1,___awdiv@dividend+1
  4066  000296  EC37  F00C         	call	___awdiv	;wreg free
  4067  00029A  C017  F01F         	movff	?___awdiv,___awmod@dividend
  4068  00029E  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  4069  0002A2  0E00               	movlw	0
  4070  0002A4  6E22               	movwf	___awmod@divisor+1,c
  4071  0002A6  0E0A               	movlw	10
  4072  0002A8  6E21               	movwf	___awmod@divisor,c
  4073  0002AA  EC0E  F00D         	call	___awmod	;wreg free
  4074  0002AE  501F               	movf	?___awmod,w,c
  4075  0002B0  0F30               	addlw	48
  4076  0002B2  0100               	movlb	0	; () banked
  4077  0002B4  6FD5               	movwf	(_RPM_Txt+2)& (0+255),b
  4078                           
  4079                           ; BSR set to: 0
  4080                           ;Main_Screen.c: 124: RPM_Txt[3] = rpm % 10 + '0';
  4081  0002B6  C049  F01F         	movff	_rpm,___awmod@dividend
  4082  0002BA  C04A  F020         	movff	_rpm+1,___awmod@dividend+1
  4083  0002BE  0E00               	movlw	0
  4084  0002C0  6E22               	movwf	___awmod@divisor+1,c
  4085  0002C2  0E0A               	movlw	10
  4086  0002C4  6E21               	movwf	___awmod@divisor,c
  4087  0002C6  EC0E  F00D         	call	___awmod	;wreg free
  4088  0002CA  501F               	movf	?___awmod,w,c
  4089  0002CC  0F30               	addlw	48
  4090  0002CE  0100               	movlb	0	; () banked
  4091  0002D0  6FD6               	movwf	(_RPM_Txt+3)& (0+255),b
  4092                           
  4093                           ; BSR set to: 0
  4094                           ;Main_Screen.c: 126: drawtext(1, 23, tempC, 0xFFE0, 0x0000, 2);
  4095  0002D2  0E17               	movlw	23
  4096  0002D4  6E39               	movwf	drawtext@y,c
  4097  0002D6  0EE0               	movlw	low _tempC
  4098  0002D8  6E3A               	movwf	drawtext@_text,c
  4099  0002DA  0E00               	movlw	high _tempC
  4100  0002DC  6E3B               	movwf	drawtext@_text+1,c
  4101  0002DE  0EFF               	movlw	255
  4102  0002E0  6E3D               	movwf	drawtext@color+1,c
  4103  0002E2  0EE0               	movlw	224
  4104  0002E4  6E3C               	movwf	drawtext@color,c
  4105  0002E6  0E00               	movlw	0
  4106  0002E8  6E3F               	movwf	drawtext@bg+1,c
  4107  0002EA  0E00               	movlw	0
  4108  0002EC  6E3E               	movwf	drawtext@bg,c
  4109  0002EE  0E02               	movlw	2
  4110  0002F0  6E40               	movwf	drawtext@size,c
  4111  0002F2  0E01               	movlw	1
  4112  0002F4  EC9D  F008         	call	_drawtext
  4113                           
  4114                           ;Main_Screen.c: 127: drawtext(70, 23, tempF, 0xFFE0, 0x0000, 2);
  4115  0002F8  0E17               	movlw	23
  4116  0002FA  6E39               	movwf	drawtext@y,c
  4117  0002FC  0EE4               	movlw	low _tempF
  4118  0002FE  6E3A               	movwf	drawtext@_text,c
  4119  000300  0E00               	movlw	high _tempF
  4120  000302  6E3B               	movwf	drawtext@_text+1,c
  4121  000304  0EFF               	movlw	255
  4122  000306  6E3D               	movwf	drawtext@color+1,c
  4123  000308  0EE0               	movlw	224
  4124  00030A  6E3C               	movwf	drawtext@color,c
  4125  00030C  0E00               	movlw	0
  4126  00030E  6E3F               	movwf	drawtext@bg+1,c
  4127  000310  0E00               	movlw	0
  4128  000312  6E3E               	movwf	drawtext@bg,c
  4129  000314  0E02               	movlw	2
  4130  000316  6E40               	movwf	drawtext@size,c
  4131  000318  0E46               	movlw	70
  4132  00031A  EC9D  F008         	call	_drawtext
  4133                           
  4134                           ;Main_Screen.c: 128: drawtext(15, 52, time, 0x07FF, 0x0000, 2);
  4135  00031E  0E34               	movlw	52
  4136  000320  6E39               	movwf	drawtext@y,c
  4137  000322  0ECA               	movlw	low _time
  4138  000324  6E3A               	movwf	drawtext@_text,c
  4139  000326  0E00               	movlw	high _time
  4140  000328  6E3B               	movwf	drawtext@_text+1,c
  4141  00032A  0E07               	movlw	7
  4142  00032C  6E3D               	movwf	drawtext@color+1,c
  4143  00032E  683C               	setf	drawtext@color,c
  4144  000330  0E00               	movlw	0
  4145  000332  6E3F               	movwf	drawtext@bg+1,c
  4146  000334  0E00               	movlw	0
  4147  000336  6E3E               	movwf	drawtext@bg,c
  4148  000338  0E02               	movlw	2
  4149  00033A  6E40               	movwf	drawtext@size,c
  4150  00033C  0E0F               	movlw	15
  4151  00033E  EC9D  F008         	call	_drawtext
  4152                           
  4153                           ;Main_Screen.c: 129: drawtext(15, 82, date, 0x07E0, 0x0000, 2);
  4154  000342  0E52               	movlw	82
  4155  000344  6E39               	movwf	drawtext@y,c
  4156  000346  0EC1               	movlw	low _date
  4157  000348  6E3A               	movwf	drawtext@_text,c
  4158  00034A  0E00               	movlw	high _date
  4159  00034C  6E3B               	movwf	drawtext@_text+1,c
  4160  00034E  0E07               	movlw	7
  4161  000350  6E3D               	movwf	drawtext@color+1,c
  4162  000352  0EE0               	movlw	224
  4163  000354  6E3C               	movwf	drawtext@color,c
  4164  000356  0E00               	movlw	0
  4165  000358  6E3F               	movwf	drawtext@bg+1,c
  4166  00035A  0E00               	movlw	0
  4167  00035C  6E3E               	movwf	drawtext@bg,c
  4168  00035E  0E02               	movlw	2
  4169  000360  6E40               	movwf	drawtext@size,c
  4170  000362  0E0F               	movlw	15
  4171  000364  EC9D  F008         	call	_drawtext
  4172                           
  4173                           ;Main_Screen.c: 131: drawtext(95, 130, Fan_SW_Txt, 0xF800, 0x0000, 1);
  4174  000368  0E82               	movlw	130
  4175  00036A  6E39               	movwf	drawtext@y,c
  4176  00036C  0EDC               	movlw	low _Fan_SW_Txt
  4177  00036E  6E3A               	movwf	drawtext@_text,c
  4178  000370  0E00               	movlw	high _Fan_SW_Txt
  4179  000372  6E3B               	movwf	drawtext@_text+1,c
  4180  000374  0EF8               	movlw	248
  4181  000376  6E3D               	movwf	drawtext@color+1,c
  4182  000378  0E00               	movlw	0
  4183  00037A  6E3C               	movwf	drawtext@color,c
  4184  00037C  0E00               	movlw	0
  4185  00037E  6E3F               	movwf	drawtext@bg+1,c
  4186  000380  0E00               	movlw	0
  4187  000382  6E3E               	movwf	drawtext@bg,c
  4188  000384  0E01               	movlw	1
  4189  000386  6E40               	movwf	drawtext@size,c
  4190  000388  0E5F               	movlw	95
  4191  00038A  EC9D  F008         	call	_drawtext
  4192                           
  4193                           ;Main_Screen.c: 132: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  4194  00038E  0E96               	movlw	150
  4195  000390  6E39               	movwf	drawtext@y,c
  4196  000392  0ED8               	movlw	low _DC_Txt
  4197  000394  6E3A               	movwf	drawtext@_text,c
  4198  000396  0E00               	movlw	high _DC_Txt
  4199  000398  6E3B               	movwf	drawtext@_text+1,c
  4200  00039A  0E07               	movlw	7
  4201  00039C  6E3D               	movwf	drawtext@color+1,c
  4202  00039E  0EE0               	movlw	224
  4203  0003A0  6E3C               	movwf	drawtext@color,c
  4204  0003A2  0E00               	movlw	0
  4205  0003A4  6E3F               	movwf	drawtext@bg+1,c
  4206  0003A6  0E00               	movlw	0
  4207  0003A8  6E3E               	movwf	drawtext@bg,c
  4208  0003AA  0E01               	movlw	1
  4209  0003AC  6E40               	movwf	drawtext@size,c
  4210  0003AE  0E0A               	movlw	10
  4211  0003B0  EC9D  F008         	call	_drawtext
  4212                           
  4213                           ;Main_Screen.c: 133: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  4214  0003B4  0E96               	movlw	150
  4215  0003B6  6E39               	movwf	drawtext@y,c
  4216  0003B8  0ED3               	movlw	low _RPM_Txt
  4217  0003BA  6E3A               	movwf	drawtext@_text,c
  4218  0003BC  0E00               	movlw	high _RPM_Txt
  4219  0003BE  6E3B               	movwf	drawtext@_text+1,c
  4220  0003C0  0E07               	movlw	7
  4221  0003C2  6E3D               	movwf	drawtext@color+1,c
  4222  0003C4  0EE0               	movlw	224
  4223  0003C6  6E3C               	movwf	drawtext@color,c
  4224  0003C8  0E00               	movlw	0
  4225  0003CA  6E3F               	movwf	drawtext@bg+1,c
  4226  0003CC  0E00               	movlw	0
  4227  0003CE  6E3E               	movwf	drawtext@bg,c
  4228  0003D0  0E01               	movlw	1
  4229  0003D2  6E40               	movwf	drawtext@size,c
  4230  0003D4  0E5D               	movlw	93
  4231  0003D6  EC9D  F008         	call	_drawtext
  4232  0003DA  0012               	return		;funcret
  4233  0003DC                     __end_of_Update_Screen:
  4234                           	opt stack 0
  4235                           tblptru	equ	0xFF8
  4236                           tblptrh	equ	0xFF7
  4237                           tblptrl	equ	0xFF6
  4238                           tablat	equ	0xFF5
  4239                           prodh	equ	0xFF4
  4240                           prodl	equ	0xFF3
  4241                           intcon	equ	0xFF2
  4242                           intcon2	equ	0xFF1
  4243                           postinc0	equ	0xFEE
  4244                           wreg	equ	0xFE8
  4245                           postdec1	equ	0xFE5
  4246                           fsr1l	equ	0xFE1
  4247                           postinc2	equ	0xFDE
  4248                           postdec2	equ	0xFDD
  4249                           fsr2h	equ	0xFDA
  4250                           fsr2l	equ	0xFD9
  4251                           status	equ	0xFD8
  4252                           
  4253 ;; *************** function ___awmod *****************
  4254 ;; Defined at:
  4255 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;  dividend        2   30[COMRAM] int 
  4258 ;;  divisor         2   32[COMRAM] int 
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;  sign            1   35[COMRAM] unsigned char 
  4261 ;;  counter         1   34[COMRAM] unsigned char 
  4262 ;; Return value:  Size  Location     Type
  4263 ;;                  2   30[COMRAM] int 
  4264 ;; Registers used:
  4265 ;;		wreg, status,2, status,0
  4266 ;; Tracked objects:
  4267 ;;		On entry : 0/0
  4268 ;;		On exit  : 0/0
  4269 ;;		Unchanged: 0/0
  4270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4271 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4272 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4274 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4275 ;;Total ram usage:        6 bytes
  4276 ;; Hardware stack levels used:    1
  4277 ;; Hardware stack levels required when called:    3
  4278 ;; This function calls:
  4279 ;;		Nothing
  4280 ;; This function is called by:
  4281 ;;		_Update_Screen
  4282 ;;		_dec_2_bcd
  4283 ;; This function uses a non-reentrant model
  4284 ;;
  4285                           
  4286                           	psect	text8
  4287  001A1C                     __ptext8:
  4288                           	opt stack 0
  4289  001A1C                     ___awmod:
  4290                           	opt stack 26
  4291                           
  4292                           ;incstack = 0
  4293  001A1C  0E00               	movlw	0
  4294  001A1E  6E24               	movwf	___awmod@sign,c
  4295  001A20  AE20               	btfss	___awmod@dividend+1,7,c
  4296  001A22  D007               	goto	l6497
  4297  001A24  6C1F               	negf	___awmod@dividend,c
  4298  001A26  1E20               	comf	___awmod@dividend+1,f,c
  4299  001A28  B0D8               	btfsc	status,0,c
  4300  001A2A  2A20               	incf	___awmod@dividend+1,f,c
  4301  001A2C  0E01               	movlw	1
  4302  001A2E  6E24               	movwf	___awmod@sign,c
  4303  001A30  D000               	goto	l6497
  4304  001A32                     l6497:
  4305  001A32  AE22               	btfss	___awmod@divisor+1,7,c
  4306  001A34  D005               	goto	l6501
  4307  001A36  6C21               	negf	___awmod@divisor,c
  4308  001A38  1E22               	comf	___awmod@divisor+1,f,c
  4309  001A3A  B0D8               	btfsc	status,0,c
  4310  001A3C  2A22               	incf	___awmod@divisor+1,f,c
  4311  001A3E  D000               	goto	l6501
  4312  001A40                     l6501:
  4313  001A40  5021               	movf	___awmod@divisor,w,c
  4314  001A42  1022               	iorwf	___awmod@divisor+1,w,c
  4315  001A44  B4D8               	btfsc	status,2,c
  4316  001A46  D01D               	goto	l6517
  4317  001A48  0E01               	movlw	1
  4318  001A4A  6E23               	movwf	___awmod@counter,c
  4319  001A4C  D005               	goto	l6507
  4320  001A4E                     l6505:
  4321  001A4E  90D8               	bcf	status,0,c
  4322  001A50  3621               	rlcf	___awmod@divisor,f,c
  4323  001A52  3622               	rlcf	___awmod@divisor+1,f,c
  4324  001A54  2A23               	incf	___awmod@counter,f,c
  4325  001A56  D000               	goto	l6507
  4326  001A58                     l6507:
  4327  001A58  BE22               	btfsc	___awmod@divisor+1,7,c
  4328  001A5A  D002               	goto	l6509
  4329  001A5C  D7F8               	goto	l6505
  4330  001A5E  D000               	goto	l6509
  4331  001A60                     l6509:
  4332  001A60  5021               	movf	___awmod@divisor,w,c
  4333  001A62  5C1F               	subwf	___awmod@dividend,w,c
  4334  001A64  5022               	movf	___awmod@divisor+1,w,c
  4335  001A66  5820               	subwfb	___awmod@dividend+1,w,c
  4336  001A68  A0D8               	btfss	status,0,c
  4337  001A6A  D005               	goto	l6513
  4338  001A6C  5021               	movf	___awmod@divisor,w,c
  4339  001A6E  5E1F               	subwf	___awmod@dividend,f,c
  4340  001A70  5022               	movf	___awmod@divisor+1,w,c
  4341  001A72  5A20               	subwfb	___awmod@dividend+1,f,c
  4342  001A74  D000               	goto	l6513
  4343  001A76                     l6513:
  4344  001A76  90D8               	bcf	status,0,c
  4345  001A78  3222               	rrcf	___awmod@divisor+1,f,c
  4346  001A7A  3221               	rrcf	___awmod@divisor,f,c
  4347  001A7C  2E23               	decfsz	___awmod@counter,f,c
  4348  001A7E  D7F0               	goto	l6509
  4349  001A80  D000               	goto	l6517
  4350  001A82                     l6517:
  4351  001A82  5024               	movf	___awmod@sign,w,c
  4352  001A84  B4D8               	btfsc	status,2,c
  4353  001A86  D005               	goto	l6521
  4354  001A88  6C1F               	negf	___awmod@dividend,c
  4355  001A8A  1E20               	comf	___awmod@dividend+1,f,c
  4356  001A8C  B0D8               	btfsc	status,0,c
  4357  001A8E  2A20               	incf	___awmod@dividend+1,f,c
  4358  001A90  D000               	goto	l6521
  4359  001A92                     l6521:
  4360  001A92  C01F  F01F         	movff	___awmod@dividend,?___awmod
  4361  001A96  C020  F020         	movff	___awmod@dividend+1,?___awmod+1
  4362  001A9A  D000               	goto	l1217
  4363  001A9C                     l1217:
  4364  001A9C  0012               	return		;funcret
  4365  001A9E                     __end_of___awmod:
  4366                           	opt stack 0
  4367                           tblptru	equ	0xFF8
  4368                           tblptrh	equ	0xFF7
  4369                           tblptrl	equ	0xFF6
  4370                           tablat	equ	0xFF5
  4371                           prodh	equ	0xFF4
  4372                           prodl	equ	0xFF3
  4373                           intcon	equ	0xFF2
  4374                           intcon2	equ	0xFF1
  4375                           postinc0	equ	0xFEE
  4376                           wreg	equ	0xFE8
  4377                           postdec1	equ	0xFE5
  4378                           fsr1l	equ	0xFE1
  4379                           postinc2	equ	0xFDE
  4380                           postdec2	equ	0xFDD
  4381                           fsr2h	equ	0xFDA
  4382                           fsr2l	equ	0xFD9
  4383                           status	equ	0xFD8
  4384                           
  4385 ;; *************** function ___awdiv *****************
  4386 ;; Defined at:
  4387 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  4388 ;; Parameters:    Size  Location     Type
  4389 ;;  dividend        2   22[COMRAM] int 
  4390 ;;  divisor         2   24[COMRAM] int 
  4391 ;; Auto vars:     Size  Location     Type
  4392 ;;  quotient        2   28[COMRAM] int 
  4393 ;;  sign            1   27[COMRAM] unsigned char 
  4394 ;;  counter         1   26[COMRAM] unsigned char 
  4395 ;; Return value:  Size  Location     Type
  4396 ;;                  2   22[COMRAM] int 
  4397 ;; Registers used:
  4398 ;;		wreg, status,2, status,0
  4399 ;; Tracked objects:
  4400 ;;		On entry : 0/0
  4401 ;;		On exit  : 0/0
  4402 ;;		Unchanged: 0/0
  4403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4404 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4405 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4407 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4408 ;;Total ram usage:        8 bytes
  4409 ;; Hardware stack levels used:    1
  4410 ;; Hardware stack levels required when called:    3
  4411 ;; This function calls:
  4412 ;;		Nothing
  4413 ;; This function is called by:
  4414 ;;		_Update_Screen
  4415 ;;		_main
  4416 ;;		_Set_DC_RGB
  4417 ;;		_Set_RPM_RGB
  4418 ;;		_dec_2_bcd
  4419 ;; This function uses a non-reentrant model
  4420 ;;
  4421                           
  4422                           	psect	text9
  4423  00186E                     __ptext9:
  4424                           	opt stack 0
  4425  00186E                     ___awdiv:
  4426                           	opt stack 27
  4427                           
  4428                           ;incstack = 0
  4429  00186E  0E00               	movlw	0
  4430  001870  6E1C               	movwf	___awdiv@sign,c
  4431  001872  AE1A               	btfss	___awdiv@divisor+1,7,c
  4432  001874  D007               	goto	l6453
  4433  001876  6C19               	negf	___awdiv@divisor,c
  4434  001878  1E1A               	comf	___awdiv@divisor+1,f,c
  4435  00187A  B0D8               	btfsc	status,0,c
  4436  00187C  2A1A               	incf	___awdiv@divisor+1,f,c
  4437  00187E  0E01               	movlw	1
  4438  001880  6E1C               	movwf	___awdiv@sign,c
  4439  001882  D000               	goto	l6453
  4440  001884                     l6453:
  4441  001884  AE18               	btfss	___awdiv@dividend+1,7,c
  4442  001886  D007               	goto	l6459
  4443  001888  6C17               	negf	___awdiv@dividend,c
  4444  00188A  1E18               	comf	___awdiv@dividend+1,f,c
  4445  00188C  B0D8               	btfsc	status,0,c
  4446  00188E  2A18               	incf	___awdiv@dividend+1,f,c
  4447  001890  0E01               	movlw	1
  4448  001892  1A1C               	xorwf	___awdiv@sign,f,c
  4449  001894  D000               	goto	l6459
  4450  001896                     l6459:
  4451  001896  0E00               	movlw	0
  4452  001898  6E1E               	movwf	___awdiv@quotient+1,c
  4453  00189A  0E00               	movlw	0
  4454  00189C  6E1D               	movwf	___awdiv@quotient,c
  4455  00189E  5019               	movf	___awdiv@divisor,w,c
  4456  0018A0  101A               	iorwf	___awdiv@divisor+1,w,c
  4457  0018A2  B4D8               	btfsc	status,2,c
  4458  0018A4  D021               	goto	l6481
  4459  0018A6  0E01               	movlw	1
  4460  0018A8  6E1B               	movwf	___awdiv@counter,c
  4461  0018AA  D005               	goto	l6467
  4462  0018AC                     l6465:
  4463  0018AC  90D8               	bcf	status,0,c
  4464  0018AE  3619               	rlcf	___awdiv@divisor,f,c
  4465  0018B0  361A               	rlcf	___awdiv@divisor+1,f,c
  4466  0018B2  2A1B               	incf	___awdiv@counter,f,c
  4467  0018B4  D000               	goto	l6467
  4468  0018B6                     l6467:
  4469  0018B6  BE1A               	btfsc	___awdiv@divisor+1,7,c
  4470  0018B8  D002               	goto	l6469
  4471  0018BA  D7F8               	goto	l6465
  4472  0018BC  D000               	goto	l6469
  4473  0018BE                     l6469:
  4474  0018BE  90D8               	bcf	status,0,c
  4475  0018C0  361D               	rlcf	___awdiv@quotient,f,c
  4476  0018C2  361E               	rlcf	___awdiv@quotient+1,f,c
  4477  0018C4  5019               	movf	___awdiv@divisor,w,c
  4478  0018C6  5C17               	subwf	___awdiv@dividend,w,c
  4479  0018C8  501A               	movf	___awdiv@divisor+1,w,c
  4480  0018CA  5818               	subwfb	___awdiv@dividend+1,w,c
  4481  0018CC  A0D8               	btfss	status,0,c
  4482  0018CE  D006               	goto	l6477
  4483  0018D0  5019               	movf	___awdiv@divisor,w,c
  4484  0018D2  5E17               	subwf	___awdiv@dividend,f,c
  4485  0018D4  501A               	movf	___awdiv@divisor+1,w,c
  4486  0018D6  5A18               	subwfb	___awdiv@dividend+1,f,c
  4487  0018D8  801D               	bsf	___awdiv@quotient,0,c
  4488  0018DA  D000               	goto	l6477
  4489  0018DC                     l6477:
  4490  0018DC  90D8               	bcf	status,0,c
  4491  0018DE  321A               	rrcf	___awdiv@divisor+1,f,c
  4492  0018E0  3219               	rrcf	___awdiv@divisor,f,c
  4493  0018E2  2E1B               	decfsz	___awdiv@counter,f,c
  4494  0018E4  D7EC               	goto	l6469
  4495  0018E6  D000               	goto	l6481
  4496  0018E8                     l6481:
  4497  0018E8  501C               	movf	___awdiv@sign,w,c
  4498  0018EA  B4D8               	btfsc	status,2,c
  4499  0018EC  D005               	goto	l6485
  4500  0018EE  6C1D               	negf	___awdiv@quotient,c
  4501  0018F0  1E1E               	comf	___awdiv@quotient+1,f,c
  4502  0018F2  B0D8               	btfsc	status,0,c
  4503  0018F4  2A1E               	incf	___awdiv@quotient+1,f,c
  4504  0018F6  D000               	goto	l6485
  4505  0018F8                     l6485:
  4506  0018F8  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  4507  0018FC  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  4508  001900  D000               	goto	l1204
  4509  001902                     l1204:
  4510  001902  0012               	return		;funcret
  4511  001904                     __end_of___awdiv:
  4512                           	opt stack 0
  4513                           tblptru	equ	0xFF8
  4514                           tblptrh	equ	0xFF7
  4515                           tblptrl	equ	0xFF6
  4516                           tablat	equ	0xFF5
  4517                           prodh	equ	0xFF4
  4518                           prodl	equ	0xFF3
  4519                           intcon	equ	0xFF2
  4520                           intcon2	equ	0xFF1
  4521                           postinc0	equ	0xFEE
  4522                           wreg	equ	0xFE8
  4523                           postdec1	equ	0xFE5
  4524                           fsr1l	equ	0xFE1
  4525                           postinc2	equ	0xFDE
  4526                           postdec2	equ	0xFDD
  4527                           fsr2h	equ	0xFDA
  4528                           fsr2l	equ	0xFD9
  4529                           status	equ	0xFD8
  4530                           
  4531 ;; *************** function _Toggle_Fan *****************
  4532 ;; Defined at:
  4533 ;;		line 29 in file "Fan_Support.c"
  4534 ;; Parameters:    Size  Location     Type
  4535 ;;		None
  4536 ;; Auto vars:     Size  Location     Type
  4537 ;;		None
  4538 ;; Return value:  Size  Location     Type
  4539 ;;		None               void
  4540 ;; Registers used:
  4541 ;;		wreg, status,2, status,0, cstack
  4542 ;; Tracked objects:
  4543 ;;		On entry : 0/0
  4544 ;;		On exit  : 0/0
  4545 ;;		Unchanged: 0/0
  4546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4551 ;;Total ram usage:        0 bytes
  4552 ;; Hardware stack levels used:    1
  4553 ;; Hardware stack levels required when called:    7
  4554 ;; This function calls:
  4555 ;;		_Turn_Off_Fan
  4556 ;;		_Turn_On_Fan
  4557 ;; This function is called by:
  4558 ;;		_main
  4559 ;;		_INT0_ISR
  4560 ;; This function uses a non-reentrant model
  4561 ;;
  4562                           
  4563                           	psect	text10
  4564  0022AA                     __ptext10:
  4565                           	opt stack 0
  4566  0022AA                     _Toggle_Fan:
  4567                           	opt stack 23
  4568                           
  4569                           ;Fan_Support.c: 30: if (FAN) {
  4570                           
  4571                           ;incstack = 0
  4572  0022AA  504D               	movf	_FAN,w,c
  4573  0022AC  B4D8               	btfsc	status,2,c
  4574  0022AE  D003               	goto	l6637
  4575                           
  4576                           ;Fan_Support.c: 31: Turn_Off_Fan();
  4577  0022B0  ECE5  F011         	call	_Turn_Off_Fan	;wreg free
  4578                           
  4579                           ;Fan_Support.c: 32: } else
  4580  0022B4  D003               	goto	l251
  4581  0022B6                     l6637:
  4582                           
  4583                           ;Fan_Support.c: 33: Turn_On_Fan();
  4584  0022B6  ECB2  F011         	call	_Turn_On_Fan	;wreg free
  4585  0022BA  D000               	goto	l251
  4586  0022BC                     l251:
  4587  0022BC  0012               	return		;funcret
  4588  0022BE                     __end_of_Toggle_Fan:
  4589                           	opt stack 0
  4590                           tblptru	equ	0xFF8
  4591                           tblptrh	equ	0xFF7
  4592                           tblptrl	equ	0xFF6
  4593                           tablat	equ	0xFF5
  4594                           prodh	equ	0xFF4
  4595                           prodl	equ	0xFF3
  4596                           intcon	equ	0xFF2
  4597                           intcon2	equ	0xFF1
  4598                           postinc0	equ	0xFEE
  4599                           wreg	equ	0xFE8
  4600                           postdec1	equ	0xFE5
  4601                           fsr1l	equ	0xFE1
  4602                           postinc2	equ	0xFDE
  4603                           postdec2	equ	0xFDD
  4604                           fsr2h	equ	0xFDA
  4605                           fsr2l	equ	0xFD9
  4606                           status	equ	0xFD8
  4607                           
  4608 ;; *************** function _Turn_On_Fan *****************
  4609 ;; Defined at:
  4610 ;;		line 42 in file "Fan_Support.c"
  4611 ;; Parameters:    Size  Location     Type
  4612 ;;		None
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;		None
  4615 ;; Return value:  Size  Location     Type
  4616 ;;		None               void
  4617 ;; Registers used:
  4618 ;;		wreg, status,2, status,0, cstack
  4619 ;; Tracked objects:
  4620 ;;		On entry : 0/0
  4621 ;;		On exit  : 0/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;Total ram usage:        0 bytes
  4629 ;; Hardware stack levels used:    1
  4630 ;; Hardware stack levels required when called:    6
  4631 ;; This function calls:
  4632 ;;		_do_update_pwm
  4633 ;; This function is called by:
  4634 ;;		_Toggle_Fan
  4635 ;; This function uses a non-reentrant model
  4636 ;;
  4637                           
  4638                           	psect	text11
  4639  002364                     __ptext11:
  4640                           	opt stack 0
  4641  002364                     _Turn_On_Fan:
  4642                           	opt stack 23
  4643                           
  4644                           ;Fan_Support.c: 43: FAN = 1;
  4645                           
  4646                           ;incstack = 0
  4647  002364  0E01               	movlw	1
  4648  002366  6E4D               	movwf	_FAN,c
  4649                           
  4650                           ;Fan_Support.c: 44: do_update_pwm(duty_cycle);
  4651  002368  505C               	movf	_duty_cycle,w,c
  4652  00236A  EC69  F00B         	call	_do_update_pwm
  4653                           
  4654                           ;Fan_Support.c: 45: PORTAbits.RA5 = 1;
  4655  00236E  8A80               	bsf	3968,5,c	;volatile
  4656                           
  4657                           ;Fan_Support.c: 46: PORTAbits.RA4 = 1;
  4658  002370  8880               	bsf	3968,4,c	;volatile
  4659  002372  0012               	return		;funcret
  4660  002374                     __end_of_Turn_On_Fan:
  4661                           	opt stack 0
  4662                           tblptru	equ	0xFF8
  4663                           tblptrh	equ	0xFF7
  4664                           tblptrl	equ	0xFF6
  4665                           tablat	equ	0xFF5
  4666                           prodh	equ	0xFF4
  4667                           prodl	equ	0xFF3
  4668                           intcon	equ	0xFF2
  4669                           intcon2	equ	0xFF1
  4670                           postinc0	equ	0xFEE
  4671                           wreg	equ	0xFE8
  4672                           postdec1	equ	0xFE5
  4673                           fsr1l	equ	0xFE1
  4674                           postinc2	equ	0xFDE
  4675                           postdec2	equ	0xFDD
  4676                           fsr2h	equ	0xFDA
  4677                           fsr2l	equ	0xFD9
  4678                           status	equ	0xFD8
  4679                           
  4680 ;; *************** function _Initialize_Screen *****************
  4681 ;; Defined at:
  4682 ;;		line 35 in file "Main_Screen.c"
  4683 ;; Parameters:    Size  Location     Type
  4684 ;;		None
  4685 ;; Auto vars:     Size  Location     Type
  4686 ;;		None
  4687 ;; Return value:  Size  Location     Type
  4688 ;;		None               void
  4689 ;; Registers used:
  4690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4691 ;; Tracked objects:
  4692 ;;		On entry : 0/0
  4693 ;;		On exit  : 0/0
  4694 ;;		Unchanged: 0/0
  4695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4700 ;;Total ram usage:        0 bytes
  4701 ;; Hardware stack levels used:    1
  4702 ;; Hardware stack levels required when called:   10
  4703 ;; This function calls:
  4704 ;;		_LCD_Reset
  4705 ;;		_TFT_GreenTab_Initialize
  4706 ;;		_drawCircle
  4707 ;;		_drawtext
  4708 ;;		_fillScreen
  4709 ;;		_strcpy
  4710 ;; This function is called by:
  4711 ;;		_main
  4712 ;; This function uses a non-reentrant model
  4713 ;;
  4714                           
  4715                           	psect	text12
  4716  000736                     __ptext12:
  4717                           	opt stack 0
  4718  000736                     _Initialize_Screen:
  4719                           	opt stack 20
  4720                           
  4721                           ;Main_Screen.c: 36: LCD_Reset();
  4722                           
  4723                           ;incstack = 0
  4724  000736  EC73  F011         	call	_LCD_Reset	;wreg free
  4725                           
  4726                           ;Main_Screen.c: 37: TFT_GreenTab_Initialize();
  4727  00073A  EC7A  F010         	call	_TFT_GreenTab_Initialize	;wreg free
  4728                           
  4729                           ;Main_Screen.c: 38: fillScreen(0x0000);
  4730  00073E  0E00               	movlw	0
  4731  000740  6E25               	movwf	fillScreen@color+1,c
  4732  000742  0E00               	movlw	0
  4733  000744  6E24               	movwf	fillScreen@color,c
  4734  000746  EC16  F011         	call	_fillScreen	;wreg free
  4735                           
  4736                           ;Main_Screen.c: 39: txt = buffer;
  4737  00074A  0E3F               	movlw	low _buffer
  4738  00074C  6E4B               	movwf	_txt,c
  4739  00074E  0E01               	movlw	high _buffer
  4740  000750  6E4C               	movwf	_txt+1,c
  4741                           
  4742                           ;Main_Screen.c: 40: strcpy(txt, "ECE3301L FALL 2024");
  4743  000752  C04B  F011         	movff	_txt,strcpy@to
  4744  000756  C04C  F012         	movff	_txt+1,strcpy@to+1
  4745  00075A  0E9A               	movlw	low STR_1
  4746  00075C  6E13               	movwf	strcpy@from,c
  4747  00075E  0EFF               	movlw	high STR_1
  4748  000760  6E14               	movwf	strcpy@from+1,c
  4749  000762  EC49  F010         	call	_strcpy	;wreg free
  4750                           
  4751                           ;Main_Screen.c: 42: drawtext(1, 1, txt, 0xFFFF, 0x0000, 1);
  4752  000766  0E01               	movlw	1
  4753  000768  6E39               	movwf	drawtext@y,c
  4754  00076A  C04B  F03A         	movff	_txt,drawtext@_text
  4755  00076E  C04C  F03B         	movff	_txt+1,drawtext@_text+1
  4756  000772  0EFF               	movlw	255
  4757  000774  6E3D               	movwf	drawtext@color+1,c
  4758  000776  683C               	setf	drawtext@color,c
  4759  000778  0E00               	movlw	0
  4760  00077A  6E3F               	movwf	drawtext@bg+1,c
  4761  00077C  0E00               	movlw	0
  4762  00077E  6E3E               	movwf	drawtext@bg,c
  4763  000780  0E01               	movlw	1
  4764  000782  6E40               	movwf	drawtext@size,c
  4765  000784  0E01               	movlw	1
  4766  000786  EC9D  F008         	call	_drawtext
  4767                           
  4768                           ;Main_Screen.c: 44: strcpy(txt, "Temperature:");
  4769  00078A  C04B  F011         	movff	_txt,strcpy@to
  4770  00078E  C04C  F012         	movff	_txt+1,strcpy@to+1
  4771  000792  0ED0               	movlw	low STR_2
  4772  000794  6E13               	movwf	strcpy@from,c
  4773  000796  0EFF               	movlw	high STR_2
  4774  000798  6E14               	movwf	strcpy@from+1,c
  4775  00079A  EC49  F010         	call	_strcpy	;wreg free
  4776                           
  4777                           ;Main_Screen.c: 45: drawtext(24, 11, txt, 0xF81F, 0x0000, 1);
  4778  00079E  0E0B               	movlw	11
  4779  0007A0  6E39               	movwf	drawtext@y,c
  4780  0007A2  C04B  F03A         	movff	_txt,drawtext@_text
  4781  0007A6  C04C  F03B         	movff	_txt+1,drawtext@_text+1
  4782  0007AA  0EF8               	movlw	248
  4783  0007AC  6E3D               	movwf	drawtext@color+1,c
  4784  0007AE  0E1F               	movlw	31
  4785  0007B0  6E3C               	movwf	drawtext@color,c
  4786  0007B2  0E00               	movlw	0
  4787  0007B4  6E3F               	movwf	drawtext@bg+1,c
  4788  0007B6  0E00               	movlw	0
  4789  0007B8  6E3E               	movwf	drawtext@bg,c
  4790  0007BA  0E01               	movlw	1
  4791  0007BC  6E40               	movwf	drawtext@size,c
  4792  0007BE  0E18               	movlw	24
  4793  0007C0  EC9D  F008         	call	_drawtext
  4794                           
  4795                           ;Main_Screen.c: 46: drawCircle(40, 23, 2, 0xFFE0);
  4796  0007C4  0E00               	movlw	0
  4797  0007C6  6E1D               	movwf	drawCircle@x0+1,c
  4798  0007C8  0E28               	movlw	40
  4799  0007CA  6E1C               	movwf	drawCircle@x0,c
  4800  0007CC  0E00               	movlw	0
  4801  0007CE  6E1F               	movwf	drawCircle@y0+1,c
  4802  0007D0  0E17               	movlw	23
  4803  0007D2  6E1E               	movwf	drawCircle@y0,c
  4804  0007D4  0E00               	movlw	0
  4805  0007D6  6E21               	movwf	drawCircle@r+1,c
  4806  0007D8  0E02               	movlw	2
  4807  0007DA  6E20               	movwf	drawCircle@r,c
  4808  0007DC  0EFF               	movlw	255
  4809  0007DE  6E23               	movwf	drawCircle@color+1,c
  4810  0007E0  0EE0               	movlw	224
  4811  0007E2  6E22               	movwf	drawCircle@color,c
  4812  0007E4  ECDB  F005         	call	_drawCircle	;wreg free
  4813                           
  4814                           ;Main_Screen.c: 47: strcpy(txt, "C/");
  4815  0007E8  C04B  F011         	movff	_txt,strcpy@to
  4816  0007EC  C04C  F012         	movff	_txt+1,strcpy@to+1
  4817  0007F0  0EF9               	movlw	low STR_3
  4818  0007F2  6E13               	movwf	strcpy@from,c
  4819  0007F4  0EFF               	movlw	high STR_3
  4820  0007F6  6E14               	movwf	strcpy@from+1,c
  4821  0007F8  EC49  F010         	call	_strcpy	;wreg free
  4822                           
  4823                           ;Main_Screen.c: 48: drawtext(45, 23, txt, 0xFFE0, 0x0000, 2);
  4824  0007FC  0E17               	movlw	23
  4825  0007FE  6E39               	movwf	drawtext@y,c
  4826  000800  C04B  F03A         	movff	_txt,drawtext@_text
  4827  000804  C04C  F03B         	movff	_txt+1,drawtext@_text+1
  4828  000808  0EFF               	movlw	255
  4829  00080A  6E3D               	movwf	drawtext@color+1,c
  4830  00080C  0EE0               	movlw	224
  4831  00080E  6E3C               	movwf	drawtext@color,c
  4832  000810  0E00               	movlw	0
  4833  000812  6E3F               	movwf	drawtext@bg+1,c
  4834  000814  0E00               	movlw	0
  4835  000816  6E3E               	movwf	drawtext@bg,c
  4836  000818  0E02               	movlw	2
  4837  00081A  6E40               	movwf	drawtext@size,c
  4838  00081C  0E2D               	movlw	45
  4839  00081E  EC9D  F008         	call	_drawtext
  4840                           
  4841                           ;Main_Screen.c: 49: strcpy(txt, "F");
  4842  000822  C04B  F011         	movff	_txt,strcpy@to
  4843  000826  C04C  F012         	movff	_txt+1,strcpy@to+1
  4844  00082A  0EF3               	movlw	low (STR_11+2)
  4845  00082C  6E13               	movwf	strcpy@from,c
  4846  00082E  0EFF               	movlw	high (STR_11+2)
  4847  000830  6E14               	movwf	strcpy@from+1,c
  4848  000832  EC49  F010         	call	_strcpy	;wreg free
  4849                           
  4850                           ;Main_Screen.c: 50: drawCircle(110, 23, 2, 0xFFE0);
  4851  000836  0E00               	movlw	0
  4852  000838  6E1D               	movwf	drawCircle@x0+1,c
  4853  00083A  0E6E               	movlw	110
  4854  00083C  6E1C               	movwf	drawCircle@x0,c
  4855  00083E  0E00               	movlw	0
  4856  000840  6E1F               	movwf	drawCircle@y0+1,c
  4857  000842  0E17               	movlw	23
  4858  000844  6E1E               	movwf	drawCircle@y0,c
  4859  000846  0E00               	movlw	0
  4860  000848  6E21               	movwf	drawCircle@r+1,c
  4861  00084A  0E02               	movlw	2
  4862  00084C  6E20               	movwf	drawCircle@r,c
  4863  00084E  0EFF               	movlw	255
  4864  000850  6E23               	movwf	drawCircle@color+1,c
  4865  000852  0EE0               	movlw	224
  4866  000854  6E22               	movwf	drawCircle@color,c
  4867  000856  ECDB  F005         	call	_drawCircle	;wreg free
  4868                           
  4869                           ;Main_Screen.c: 51: drawtext(115, 23, txt, 0xFFE0, 0x0000, 2);
  4870  00085A  0E17               	movlw	23
  4871  00085C  6E39               	movwf	drawtext@y,c
  4872  00085E  C04B  F03A         	movff	_txt,drawtext@_text
  4873  000862  C04C  F03B         	movff	_txt+1,drawtext@_text+1
  4874  000866  0EFF               	movlw	255
  4875  000868  6E3D               	movwf	drawtext@color+1,c
  4876  00086A  0EE0               	movlw	224
  4877  00086C  6E3C               	movwf	drawtext@color,c
  4878  00086E  0E00               	movlw	0
  4879  000870  6E3F               	movwf	drawtext@bg+1,c
  4880  000872  0E00               	movlw	0
  4881  000874  6E3E               	movwf	drawtext@bg,c
  4882  000876  0E02               	movlw	2
  4883  000878  6E40               	movwf	drawtext@size,c
  4884  00087A  0E73               	movlw	115
  4885  00087C  EC9D  F008         	call	_drawtext
  4886                           
  4887                           ;Main_Screen.c: 52: strcpy(txt, "Time");
  4888  000880  C04B  F011         	movff	_txt,strcpy@to
  4889  000884  C04C  F012         	movff	_txt+1,strcpy@to+1
  4890  000888  0EE3               	movlw	low STR_5
  4891  00088A  6E13               	movwf	strcpy@from,c
  4892  00088C  0EFF               	movlw	high STR_5
  4893  00088E  6E14               	movwf	strcpy@from+1,c
  4894  000890  EC49  F010         	call	_strcpy	;wreg free
  4895                           
  4896                           ;Main_Screen.c: 53: drawtext(50, 40, txt, 0x001F, 0x0000, 1);
  4897  000894  0E28               	movlw	40
  4898  000896  6E39               	movwf	drawtext@y,c
  4899  000898  C04B  F03A         	movff	_txt,drawtext@_text
  4900  00089C  C04C  F03B         	movff	_txt+1,drawtext@_text+1
  4901  0008A0  0E00               	movlw	0
  4902  0008A2  6E3D               	movwf	drawtext@color+1,c
  4903  0008A4  0E1F               	movlw	31
  4904  0008A6  6E3C               	movwf	drawtext@color,c
  4905  0008A8  0E00               	movlw	0
  4906  0008AA  6E3F               	movwf	drawtext@bg+1,c
  4907  0008AC  0E00               	movlw	0
  4908  0008AE  6E3E               	movwf	drawtext@bg,c
  4909  0008B0  0E01               	movlw	1
  4910  0008B2  6E40               	movwf	drawtext@size,c
  4911  0008B4  0E32               	movlw	50
  4912  0008B6  EC9D  F008         	call	_drawtext
  4913                           
  4914                           ;Main_Screen.c: 54: strcpy(txt, "Date");
  4915  0008BA  C04B  F011         	movff	_txt,strcpy@to
  4916  0008BE  C04C  F012         	movff	_txt+1,strcpy@to+1
  4917  0008C2  0EE8               	movlw	low STR_6
  4918  0008C4  6E13               	movwf	strcpy@from,c
  4919  0008C6  0EFF               	movlw	high STR_6
  4920  0008C8  6E14               	movwf	strcpy@from+1,c
  4921  0008CA  EC49  F010         	call	_strcpy	;wreg free
  4922                           
  4923                           ;Main_Screen.c: 55: drawtext(50, 71, txt, 0xF800, 0x0000, 1);
  4924  0008CE  0E47               	movlw	71
  4925  0008D0  6E39               	movwf	drawtext@y,c
  4926  0008D2  C04B  F03A         	movff	_txt,drawtext@_text
  4927  0008D6  C04C  F03B         	movff	_txt+1,drawtext@_text+1
  4928  0008DA  0EF8               	movlw	248
  4929  0008DC  6E3D               	movwf	drawtext@color+1,c
  4930  0008DE  0E00               	movlw	0
  4931  0008E0  6E3C               	movwf	drawtext@color,c
  4932  0008E2  0E00               	movlw	0
  4933  0008E4  6E3F               	movwf	drawtext@bg+1,c
  4934  0008E6  0E00               	movlw	0
  4935  0008E8  6E3E               	movwf	drawtext@bg,c
  4936  0008EA  0E01               	movlw	1
  4937  0008EC  6E40               	movwf	drawtext@size,c
  4938  0008EE  0E32               	movlw	50
  4939  0008F0  EC9D  F008         	call	_drawtext
  4940                           
  4941                           ;Main_Screen.c: 57: strcpy(txt, "  FAN");
  4942  0008F4  C04B  F011         	movff	_txt,strcpy@to
  4943  0008F8  C04C  F012         	movff	_txt+1,strcpy@to+1
  4944  0008FC  0EDD               	movlw	low STR_7
  4945  0008FE  6E13               	movwf	strcpy@from,c
  4946  000900  0EFF               	movlw	high STR_7
  4947  000902  6E14               	movwf	strcpy@from+1,c
  4948  000904  EC49  F010         	call	_strcpy	;wreg free
  4949                           
  4950                           ;Main_Screen.c: 58: drawtext(85, 120, txt, 0x001F, 0x0000, 1);
  4951  000908  0E78               	movlw	120
  4952  00090A  6E39               	movwf	drawtext@y,c
  4953  00090C  C04B  F03A         	movff	_txt,drawtext@_text
  4954  000910  C04C  F03B         	movff	_txt+1,drawtext@_text+1
  4955  000914  0E00               	movlw	0
  4956  000916  6E3D               	movwf	drawtext@color+1,c
  4957  000918  0E1F               	movlw	31
  4958  00091A  6E3C               	movwf	drawtext@color,c
  4959  00091C  0E00               	movlw	0
  4960  00091E  6E3F               	movwf	drawtext@bg+1,c
  4961  000920  0E00               	movlw	0
  4962  000922  6E3E               	movwf	drawtext@bg,c
  4963  000924  0E01               	movlw	1
  4964  000926  6E40               	movwf	drawtext@size,c
  4965  000928  0E55               	movlw	85
  4966  00092A  EC9D  F008         	call	_drawtext
  4967                           
  4968                           ;Main_Screen.c: 60: strcpy(txt, "DC");
  4969  00092E  C04B  F011         	movff	_txt,strcpy@to
  4970  000932  C04C  F012         	movff	_txt+1,strcpy@to+1
  4971  000936  0EFC               	movlw	low STR_8
  4972  000938  6E13               	movwf	strcpy@from,c
  4973  00093A  0EFF               	movlw	high STR_8
  4974  00093C  6E14               	movwf	strcpy@from+1,c
  4975  00093E  EC49  F010         	call	_strcpy	;wreg free
  4976                           
  4977                           ;Main_Screen.c: 61: drawtext(12, 140, txt, 0xFFFF, 0x0000, 1);
  4978  000942  0E8C               	movlw	140
  4979  000944  6E39               	movwf	drawtext@y,c
  4980  000946  C04B  F03A         	movff	_txt,drawtext@_text
  4981  00094A  C04C  F03B         	movff	_txt+1,drawtext@_text+1
  4982  00094E  0EFF               	movlw	255
  4983  000950  6E3D               	movwf	drawtext@color+1,c
  4984  000952  683C               	setf	drawtext@color,c
  4985  000954  0E00               	movlw	0
  4986  000956  6E3F               	movwf	drawtext@bg+1,c
  4987  000958  0E00               	movlw	0
  4988  00095A  6E3E               	movwf	drawtext@bg,c
  4989  00095C  0E01               	movlw	1
  4990  00095E  6E40               	movwf	drawtext@size,c
  4991  000960  0E0C               	movlw	12
  4992  000962  EC9D  F008         	call	_drawtext
  4993                           
  4994                           ;Main_Screen.c: 63: strcpy(txt, "RPM");
  4995  000966  C04B  F011         	movff	_txt,strcpy@to
  4996  00096A  C04C  F012         	movff	_txt+1,strcpy@to+1
  4997  00096E  0EF5               	movlw	low STR_9
  4998  000970  6E13               	movwf	strcpy@from,c
  4999  000972  0EFF               	movlw	high STR_9
  5000  000974  6E14               	movwf	strcpy@from+1,c
  5001  000976  EC49  F010         	call	_strcpy	;wreg free
  5002                           
  5003                           ;Main_Screen.c: 64: drawtext(95, 140, txt, 0xFFFF, 0x0000, 1);
  5004  00097A  0E8C               	movlw	140
  5005  00097C  6E39               	movwf	drawtext@y,c
  5006  00097E  C04B  F03A         	movff	_txt,drawtext@_text
  5007  000982  C04C  F03B         	movff	_txt+1,drawtext@_text+1
  5008  000986  0EFF               	movlw	255
  5009  000988  6E3D               	movwf	drawtext@color+1,c
  5010  00098A  683C               	setf	drawtext@color,c
  5011  00098C  0E00               	movlw	0
  5012  00098E  6E3F               	movwf	drawtext@bg+1,c
  5013  000990  0E00               	movlw	0
  5014  000992  6E3E               	movwf	drawtext@bg,c
  5015  000994  0E01               	movlw	1
  5016  000996  6E40               	movwf	drawtext@size,c
  5017  000998  0E5F               	movlw	95
  5018  00099A  EC9D  F008         	call	_drawtext
  5019  00099E  0012               	return		;funcret
  5020  0009A0                     __end_of_Initialize_Screen:
  5021                           	opt stack 0
  5022                           tblptru	equ	0xFF8
  5023                           tblptrh	equ	0xFF7
  5024                           tblptrl	equ	0xFF6
  5025                           tablat	equ	0xFF5
  5026                           prodh	equ	0xFF4
  5027                           prodl	equ	0xFF3
  5028                           intcon	equ	0xFF2
  5029                           intcon2	equ	0xFF1
  5030                           postinc0	equ	0xFEE
  5031                           wreg	equ	0xFE8
  5032                           postdec1	equ	0xFE5
  5033                           fsr1l	equ	0xFE1
  5034                           postinc2	equ	0xFDE
  5035                           postdec2	equ	0xFDD
  5036                           fsr2h	equ	0xFDA
  5037                           fsr2l	equ	0xFD9
  5038                           status	equ	0xFD8
  5039                           
  5040 ;; *************** function _strcpy *****************
  5041 ;; Defined at:
  5042 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  5043 ;; Parameters:    Size  Location     Type
  5044 ;;  to              2   16[COMRAM] PTR unsigned char 
  5045 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(31), 
  5046 ;;  from            2   18[COMRAM] PTR const unsigned char 
  5047 ;;		 -> STR_11(4), STR_10(4), STR_9(4), STR_8(3), 
  5048 ;;		 -> STR_7(6), STR_6(5), STR_5(5), STR_4(2), 
  5049 ;;		 -> STR_3(3), STR_2(13), STR_1(19), 
  5050 ;; Auto vars:     Size  Location     Type
  5051 ;;  cp              2   20[COMRAM] PTR unsigned char 
  5052 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(31), 
  5053 ;; Return value:  Size  Location     Type
  5054 ;;                  2   16[COMRAM] PTR unsigned char 
  5055 ;; Registers used:
  5056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5057 ;; Tracked objects:
  5058 ;;		On entry : 0/0
  5059 ;;		On exit  : 0/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5062 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5063 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5065 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5066 ;;Total ram usage:        6 bytes
  5067 ;; Hardware stack levels used:    1
  5068 ;; Hardware stack levels required when called:    3
  5069 ;; This function calls:
  5070 ;;		Nothing
  5071 ;; This function is called by:
  5072 ;;		_Initialize_Screen
  5073 ;;		_Update_Screen
  5074 ;; This function uses a non-reentrant model
  5075 ;;
  5076                           
  5077                           	psect	text13
  5078  002092                     __ptext13:
  5079                           	opt stack 0
  5080  002092                     _strcpy:
  5081                           	opt stack 26
  5082                           
  5083                           ;incstack = 0
  5084  002092  C011  F015         	movff	strcpy@to,strcpy@cp
  5085  002096  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  5086  00209A  D005               	goto	l6391
  5087  00209C                     l6389:
  5088  00209C  4A15               	infsnz	strcpy@cp,f,c
  5089  00209E  2A16               	incf	strcpy@cp+1,f,c
  5090  0020A0  4A13               	infsnz	strcpy@from,f,c
  5091  0020A2  2A14               	incf	strcpy@from+1,f,c
  5092  0020A4  D000               	goto	l6391
  5093  0020A6                     l6391:
  5094  0020A6  C013  FFF6         	movff	strcpy@from,tblptrl
  5095  0020AA  C014  FFF7         	movff	strcpy@from+1,tblptrh
  5096  0020AE                     	if	0	;tblptru may be non-zero
  5097  0020AE                     	endif
  5098  0020AE                     	if	0	;tblptru may be non-zero
  5099  0020AE                     	endif
  5100  0020AE  C015  FFD9         	movff	strcpy@cp,fsr2l
  5101  0020B2  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  5102  0020B6  0008               	tblrd		*
  5103  0020B8  CFF5 FFDF          	movff	tablat,indf2
  5104  0020BC  50DF               	movf	indf2,w,c
  5105  0020BE  A4D8               	btfss	status,2,c
  5106  0020C0  D7ED               	goto	l6389
  5107                           
  5108                           ;	Return value of _strcpy is never used
  5109  0020C2  0012               	return		;funcret
  5110  0020C4                     __end_of_strcpy:
  5111                           	opt stack 0
  5112                           tblptru	equ	0xFF8
  5113                           tblptrh	equ	0xFF7
  5114                           tblptrl	equ	0xFF6
  5115                           tablat	equ	0xFF5
  5116                           prodh	equ	0xFF4
  5117                           prodl	equ	0xFF3
  5118                           intcon	equ	0xFF2
  5119                           intcon2	equ	0xFF1
  5120                           postinc0	equ	0xFEE
  5121                           wreg	equ	0xFE8
  5122                           postdec1	equ	0xFE5
  5123                           fsr1l	equ	0xFE1
  5124                           indf2	equ	0xFDF
  5125                           postinc2	equ	0xFDE
  5126                           postdec2	equ	0xFDD
  5127                           fsr2h	equ	0xFDA
  5128                           fsr2l	equ	0xFD9
  5129                           status	equ	0xFD8
  5130                           
  5131 ;; *************** function _fillScreen *****************
  5132 ;; Defined at:
  5133 ;;		line 620 in file "ST7735_TFT.c"
  5134 ;; Parameters:    Size  Location     Type
  5135 ;;  color           2   35[COMRAM] unsigned int 
  5136 ;; Auto vars:     Size  Location     Type
  5137 ;;		None
  5138 ;; Return value:  Size  Location     Type
  5139 ;;		None               void
  5140 ;; Registers used:
  5141 ;;		wreg, status,2, status,0, cstack
  5142 ;; Tracked objects:
  5143 ;;		On entry : 0/0
  5144 ;;		On exit  : 0/0
  5145 ;;		Unchanged: 0/0
  5146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5147 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5150 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5151 ;;Total ram usage:        2 bytes
  5152 ;; Hardware stack levels used:    1
  5153 ;; Hardware stack levels required when called:    7
  5154 ;; This function calls:
  5155 ;;		_fillRectangle
  5156 ;; This function is called by:
  5157 ;;		_Initialize_Screen
  5158 ;; This function uses a non-reentrant model
  5159 ;;
  5160                           
  5161                           	psect	text14
  5162  00222C                     __ptext14:
  5163                           	opt stack 0
  5164  00222C                     _fillScreen:
  5165                           	opt stack 22
  5166                           
  5167                           ;ST7735_TFT.c: 622: fillRectangle(0, 0, 128, 160, color);
  5168                           
  5169                           ;incstack = 0
  5170  00222C  0E00               	movlw	0
  5171  00222E  6E18               	movwf	fillRectangle@y,c
  5172  002230  0E80               	movlw	128
  5173  002232  6E19               	movwf	fillRectangle@w,c
  5174  002234  0EA0               	movlw	160
  5175  002236  6E1A               	movwf	fillRectangle@h,c
  5176  002238  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  5177  00223C  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  5178  002240  0E00               	movlw	0
  5179  002242  ECFB  F00A         	call	_fillRectangle
  5180  002246  0012               	return		;funcret
  5181  002248                     __end_of_fillScreen:
  5182                           	opt stack 0
  5183                           tblptru	equ	0xFF8
  5184                           tblptrh	equ	0xFF7
  5185                           tblptrl	equ	0xFF6
  5186                           tablat	equ	0xFF5
  5187                           prodh	equ	0xFF4
  5188                           prodl	equ	0xFF3
  5189                           intcon	equ	0xFF2
  5190                           intcon2	equ	0xFF1
  5191                           postinc0	equ	0xFEE
  5192                           wreg	equ	0xFE8
  5193                           postdec1	equ	0xFE5
  5194                           fsr1l	equ	0xFE1
  5195                           indf2	equ	0xFDF
  5196                           postinc2	equ	0xFDE
  5197                           postdec2	equ	0xFDD
  5198                           fsr2h	equ	0xFDA
  5199                           fsr2l	equ	0xFD9
  5200                           status	equ	0xFD8
  5201                           
  5202 ;; *************** function _fillRectangle *****************
  5203 ;; Defined at:
  5204 ;;		line 504 in file "ST7735_TFT.c"
  5205 ;; Parameters:    Size  Location     Type
  5206 ;;  x               1    wreg     unsigned char 
  5207 ;;  y               1   23[COMRAM] unsigned char 
  5208 ;;  w               1   24[COMRAM] unsigned char 
  5209 ;;  h               1   25[COMRAM] unsigned char 
  5210 ;;  color           2   26[COMRAM] unsigned int 
  5211 ;; Auto vars:     Size  Location     Type
  5212 ;;  x               1   34[COMRAM] unsigned char 
  5213 ;;  lo              1   33[COMRAM] unsigned char 
  5214 ;;  hi              1   32[COMRAM] unsigned char 
  5215 ;; Return value:  Size  Location     Type
  5216 ;;		None               void
  5217 ;; Registers used:
  5218 ;;		wreg, status,2, status,0, cstack
  5219 ;; Tracked objects:
  5220 ;;		On entry : 0/0
  5221 ;;		On exit  : 0/0
  5222 ;;		Unchanged: 0/0
  5223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5224 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5225 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5226 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5227 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5228 ;;Total ram usage:       12 bytes
  5229 ;; Hardware stack levels used:    1
  5230 ;; Hardware stack levels required when called:    6
  5231 ;; This function calls:
  5232 ;;		_setAddrWindow
  5233 ;;		_spiwrite
  5234 ;; This function is called by:
  5235 ;;		_fillScreen
  5236 ;; This function uses a non-reentrant model
  5237 ;;
  5238                           
  5239                           	psect	text15
  5240  0015F6                     __ptext15:
  5241                           	opt stack 0
  5242  0015F6                     _fillRectangle:
  5243                           	opt stack 22
  5244                           
  5245                           ;incstack = 0
  5246                           ;fillRectangle@x stored from wreg
  5247  0015F6  6E23               	movwf	fillRectangle@x,c
  5248                           
  5249                           ;ST7735_TFT.c: 506: unsigned char hi, lo;
  5250                           ;ST7735_TFT.c: 507: if((x >= 128) || (y >= 160))
  5251  0015F8  0E80               	movlw	128
  5252  0015FA  6023               	cpfslt	fillRectangle@x,c
  5253  0015FC  D069               	goto	l148
  5254  0015FE  0E9F               	movlw	159
  5255  001600  6418               	cpfsgt	fillRectangle@y,c
  5256  001602  D001               	goto	l6071
  5257                           
  5258                           ;ST7735_TFT.c: 508: return;
  5259  001604  D065               	goto	l148
  5260  001606                     l6071:
  5261                           
  5262                           ;ST7735_TFT.c: 509: if((x + w - 1) >= 128)
  5263  001606  0EFF               	movlw	255
  5264  001608  6E1D               	movwf	??_fillRectangle& (0+255),c
  5265  00160A  0EFF               	movlw	255
  5266  00160C  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5267  00160E  5019               	movf	fillRectangle@w,w,c
  5268  001610  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  5269  001614  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  5270  001616  261F               	addwf	??_fillRectangle+2,f,c
  5271  001618  0E00               	movlw	0
  5272  00161A  2220               	addwfc	??_fillRectangle+3,f,c
  5273  00161C  501D               	movf	??_fillRectangle,w,c
  5274  00161E  261F               	addwf	??_fillRectangle+2,f,c
  5275  001620  501E               	movf	??_fillRectangle+1,w,c
  5276  001622  2220               	addwfc	??_fillRectangle+3,f,c
  5277  001624  BE20               	btfsc	??_fillRectangle+3,7,c
  5278  001626  D00A               	goto	l149
  5279  001628  5020               	movf	??_fillRectangle+3,w,c
  5280  00162A  E104               	bnz	u4220
  5281  00162C  0E80               	movlw	128
  5282  00162E  5C1F               	subwf	??_fillRectangle+2,w,c
  5283  001630  A0D8               	btfss	status,0,c
  5284  001632  D004               	goto	l149
  5285  001634                     u4220:
  5286                           
  5287                           ;ST7735_TFT.c: 510: w = 128 - x;
  5288  001634  5023               	movf	fillRectangle@x,w,c
  5289  001636  0800               	sublw	0
  5290  001638  0F80               	addlw	128
  5291  00163A  6E19               	movwf	fillRectangle@w,c
  5292  00163C                     l149:
  5293                           
  5294                           ;ST7735_TFT.c: 511: if((y + h - 1) >= 160)
  5295  00163C  0EFF               	movlw	255
  5296  00163E  6E1D               	movwf	??_fillRectangle& (0+255),c
  5297  001640  0EFF               	movlw	255
  5298  001642  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5299  001644  501A               	movf	fillRectangle@h,w,c
  5300  001646  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  5301  00164A  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  5302  00164C  261F               	addwf	??_fillRectangle+2,f,c
  5303  00164E  0E00               	movlw	0
  5304  001650  2220               	addwfc	??_fillRectangle+3,f,c
  5305  001652  501D               	movf	??_fillRectangle,w,c
  5306  001654  261F               	addwf	??_fillRectangle+2,f,c
  5307  001656  501E               	movf	??_fillRectangle+1,w,c
  5308  001658  2220               	addwfc	??_fillRectangle+3,f,c
  5309  00165A  BE20               	btfsc	??_fillRectangle+3,7,c
  5310  00165C  D00B               	goto	l6077
  5311  00165E  5020               	movf	??_fillRectangle+3,w,c
  5312  001660  E104               	bnz	u4230
  5313  001662  0EA0               	movlw	160
  5314  001664  5C1F               	subwf	??_fillRectangle+2,w,c
  5315  001666  A0D8               	btfss	status,0,c
  5316  001668  D005               	goto	l6077
  5317  00166A                     u4230:
  5318                           
  5319                           ;ST7735_TFT.c: 512: h = 160 - y;
  5320  00166A  5018               	movf	fillRectangle@y,w,c
  5321  00166C  0800               	sublw	0
  5322  00166E  0FA0               	addlw	160
  5323  001670  6E1A               	movwf	fillRectangle@h,c
  5324  001672  D000               	goto	l6077
  5325  001674                     l6077:
  5326                           
  5327                           ;ST7735_TFT.c: 513: setAddrWindow(x, y, x+w-1, y+h-1);
  5328  001674  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  5329  001678  5023               	movf	fillRectangle@x,w,c
  5330  00167A  2419               	addwf	fillRectangle@w,w,c
  5331  00167C  6E1D               	movwf	??_fillRectangle& (0+255),c
  5332  00167E  041D               	decf	??_fillRectangle,w,c
  5333  001680  6E15               	movwf	setAddrWindow@x1,c
  5334  001682  5018               	movf	fillRectangle@y,w,c
  5335  001684  241A               	addwf	fillRectangle@h,w,c
  5336  001686  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5337  001688  041E               	decf	??_fillRectangle+1,w,c
  5338  00168A  6E16               	movwf	setAddrWindow@y1,c
  5339  00168C  5023               	movf	fillRectangle@x,w,c
  5340  00168E  EC13  F00F         	call	_setAddrWindow
  5341                           
  5342                           ;ST7735_TFT.c: 514: hi = color >> 8; lo = color;
  5343  001692  501C               	movf	fillRectangle@color+1,w,c
  5344  001694  6E21               	movwf	fillRectangle@hi,c
  5345  001696  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  5346                           
  5347                           ;ST7735_TFT.c: 515: PORTDbits.RD0 = 1;
  5348  00169A  8083               	bsf	3971,0,c	;volatile
  5349                           
  5350                           ;ST7735_TFT.c: 516: PORTDbits.RD1 = 0;
  5351  00169C  9283               	bcf	3971,1,c	;volatile
  5352                           
  5353                           ;ST7735_TFT.c: 518: for(y=h; y>0; y--) {
  5354  00169E  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  5355  0016A2                     l6089:
  5356  0016A2  5018               	movf	fillRectangle@y,w,c
  5357  0016A4  B4D8               	btfsc	status,2,c
  5358  0016A6  D013               	goto	l152
  5359  0016A8  D001               	goto	l151
  5360  0016AA  D011               	goto	l152
  5361  0016AC                     l151:
  5362                           
  5363                           ;ST7735_TFT.c: 519: for(x = w; x > 0; x--) {
  5364  0016AC  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  5365  0016B0                     l6093:
  5366  0016B0  5023               	movf	fillRectangle@x,w,c
  5367  0016B2  B4D8               	btfsc	status,2,c
  5368  0016B4  D00A               	goto	l6103
  5369  0016B6  D001               	goto	l6097
  5370  0016B8  D008               	goto	l6103
  5371  0016BA                     l6097:
  5372                           
  5373                           ;ST7735_TFT.c: 520: spiwrite(hi);
  5374  0016BA  5021               	movf	fillRectangle@hi,w,c
  5375  0016BC  EC5F  F011         	call	_spiwrite
  5376                           
  5377                           ;ST7735_TFT.c: 521: spiwrite(lo);
  5378  0016C0  5022               	movf	fillRectangle@lo,w,c
  5379  0016C2  EC5F  F011         	call	_spiwrite
  5380  0016C6  0623               	decf	fillRectangle@x,f,c
  5381  0016C8  D7F3               	goto	l6093
  5382  0016CA                     l6103:
  5383  0016CA  0618               	decf	fillRectangle@y,f,c
  5384  0016CC  D7EA               	goto	l6089
  5385  0016CE                     l152:
  5386                           
  5387                           ;ST7735_TFT.c: 522: }
  5388                           ;ST7735_TFT.c: 523: }
  5389                           ;ST7735_TFT.c: 524: PORTDbits.RD1 = 1;
  5390  0016CE  8283               	bsf	3971,1,c	;volatile
  5391  0016D0                     l148:
  5392  0016D0  0012               	return		;funcret
  5393  0016D2                     __end_of_fillRectangle:
  5394                           	opt stack 0
  5395                           tblptru	equ	0xFF8
  5396                           tblptrh	equ	0xFF7
  5397                           tblptrl	equ	0xFF6
  5398                           tablat	equ	0xFF5
  5399                           prodh	equ	0xFF4
  5400                           prodl	equ	0xFF3
  5401                           intcon	equ	0xFF2
  5402                           intcon2	equ	0xFF1
  5403                           postinc0	equ	0xFEE
  5404                           wreg	equ	0xFE8
  5405                           postdec1	equ	0xFE5
  5406                           fsr1l	equ	0xFE1
  5407                           indf2	equ	0xFDF
  5408                           postinc2	equ	0xFDE
  5409                           postdec2	equ	0xFDD
  5410                           fsr2h	equ	0xFDA
  5411                           fsr2l	equ	0xFD9
  5412                           status	equ	0xFD8
  5413                           
  5414 ;; *************** function _drawtext *****************
  5415 ;; Defined at:
  5416 ;;		line 475 in file "ST7735_TFT.c"
  5417 ;; Parameters:    Size  Location     Type
  5418 ;;  x               1    wreg     unsigned char 
  5419 ;;  y               1   56[COMRAM] unsigned char 
  5420 ;;  _text           2   57[COMRAM] PTR unsigned char 
  5421 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5422 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5423 ;;		 -> buffer(31), 
  5424 ;;  color           2   59[COMRAM] unsigned int 
  5425 ;;  bg              2   61[COMRAM] unsigned int 
  5426 ;;  size            1   63[COMRAM] unsigned char 
  5427 ;; Auto vars:     Size  Location     Type
  5428 ;;  x               1    0[BANK1 ] unsigned char 
  5429 ;;  i               2    3[BANK1 ] unsigned int 
  5430 ;;  textsize        2    1[BANK1 ] unsigned int 
  5431 ;;  cursor_x        1    6[BANK1 ] unsigned char 
  5432 ;;  cursor_y        1    5[BANK1 ] unsigned char 
  5433 ;; Return value:  Size  Location     Type
  5434 ;;		None               void
  5435 ;; Registers used:
  5436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5437 ;; Tracked objects:
  5438 ;;		On entry : 0/0
  5439 ;;		On exit  : 0/0
  5440 ;;		Unchanged: 0/0
  5441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5442 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5443 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5444 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5445 ;;      Totals:        10       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5446 ;;Total ram usage:       17 bytes
  5447 ;; Hardware stack levels used:    1
  5448 ;; Hardware stack levels required when called:    9
  5449 ;; This function calls:
  5450 ;;		_drawChar
  5451 ;;		_strlen
  5452 ;; This function is called by:
  5453 ;;		_Initialize_Screen
  5454 ;;		_Update_Screen
  5455 ;; This function uses a non-reentrant model
  5456 ;;
  5457                           
  5458                           	psect	text16
  5459  00113A                     __ptext16:
  5460                           	opt stack 0
  5461  00113A                     _drawtext:
  5462                           	opt stack 20
  5463                           
  5464                           ;incstack = 0
  5465                           ;drawtext@x stored from wreg
  5466  00113A  0101               	movlb	1	; () banked
  5467  00113C  6F5E               	movwf	drawtext@x& (0+255),b
  5468                           
  5469                           ; BSR set to: 1
  5470                           ;ST7735_TFT.c: 477: unsigned char cursor_x, cursor_y;
  5471                           ;ST7735_TFT.c: 478: unsigned int textsize, i;
  5472                           ;ST7735_TFT.c: 479: cursor_x = x, cursor_y = y;
  5473  00113E  C15E  F164         	movff	drawtext@x,drawtext@cursor_x
  5474                           
  5475                           ; BSR set to: 1
  5476  001142  C039  F163         	movff	drawtext@y,drawtext@cursor_y
  5477                           
  5478                           ; BSR set to: 1
  5479                           ;ST7735_TFT.c: 480: textsize = strlen(_text);
  5480  001146  C03A  F011         	movff	drawtext@_text,strlen@s
  5481  00114A  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  5482  00114E  ECCE  F00F         	call	_strlen	;wreg free
  5483  001152  C011  F15F         	movff	?_strlen,drawtext@textsize
  5484  001156  C012  F160         	movff	?_strlen+1,drawtext@textsize+1
  5485                           
  5486                           ;ST7735_TFT.c: 481: for(i = 0; i < textsize; i++){
  5487  00115A  0E00               	movlw	0
  5488  00115C  0101               	movlb	1	; () banked
  5489  00115E  6F62               	movwf	(drawtext@i+1)& (0+255),b
  5490  001160  0E00               	movlw	0
  5491  001162  6F61               	movwf	drawtext@i& (0+255),b
  5492  001164  D064               	goto	l6251
  5493  001166                     l6225:
  5494                           
  5495                           ; BSR set to: 1
  5496                           ;ST7735_TFT.c: 482: if(wrap && ((cursor_x + size * 5) > 128)){
  5497  001166  506F               	movf	_wrap,w,c
  5498  001168  B4D8               	btfsc	status,2,c
  5499  00116A  D034               	goto	l6241
  5500                           
  5501                           ; BSR set to: 1
  5502  00116C  5040               	movf	drawtext@size,w,c
  5503  00116E  0D05               	mullw	5
  5504  001170  0101               	movlb	1	; () banked
  5505  001172  5164               	movf	drawtext@cursor_x& (0+255),w,b
  5506  001174  6E41               	movwf	??_drawtext& (0+255),c
  5507  001176  6A42               	clrf	(??_drawtext+1)& (0+255),c
  5508  001178  50F3               	movf	prodl,w,c
  5509  00117A  2641               	addwf	??_drawtext,f,c
  5510  00117C  50F4               	movf	prodh,w,c
  5511  00117E  2242               	addwfc	??_drawtext+1,f,c
  5512  001180  BE42               	btfsc	??_drawtext+1,7,c
  5513  001182  D028               	goto	l6241
  5514  001184  5042               	movf	??_drawtext+1,w,c
  5515  001186  E104               	bnz	u4410
  5516  001188  0E81               	movlw	129
  5517  00118A  5C41               	subwf	??_drawtext,w,c
  5518  00118C  A0D8               	btfss	status,0,c
  5519  00118E  D022               	goto	l6241
  5520  001190                     u4410:
  5521                           
  5522                           ; BSR set to: 1
  5523                           ;ST7735_TFT.c: 483: cursor_x = 0;
  5524  001190  0E00               	movlw	0
  5525  001192  0101               	movlb	1	; () banked
  5526  001194  6F64               	movwf	drawtext@cursor_x& (0+255),b
  5527                           
  5528                           ; BSR set to: 1
  5529                           ;ST7735_TFT.c: 484: cursor_y = cursor_y + size * 7 + 3 ;
  5530  001196  5040               	movf	drawtext@size,w,c
  5531  001198  0D07               	mullw	7
  5532  00119A  50F3               	movf	prodl,w,c
  5533  00119C  0101               	movlb	1	; () banked
  5534  00119E  2563               	addwf	drawtext@cursor_y& (0+255),w,b
  5535  0011A0  0F03               	addlw	3
  5536  0011A2  0101               	movlb	1	; () banked
  5537  0011A4  6F63               	movwf	drawtext@cursor_y& (0+255),b
  5538                           
  5539                           ; BSR set to: 1
  5540                           ;ST7735_TFT.c: 485: if(cursor_y > 160) cursor_y = 160;
  5541  0011A6  0EA0               	movlw	160
  5542  0011A8  0101               	movlb	1	; () banked
  5543  0011AA  6563               	cpfsgt	drawtext@cursor_y& (0+255),b
  5544  0011AC  D004               	goto	l6237
  5545                           
  5546                           ; BSR set to: 1
  5547  0011AE  0EA0               	movlw	160
  5548  0011B0  0101               	movlb	1	; () banked
  5549  0011B2  6F63               	movwf	drawtext@cursor_y& (0+255),b
  5550  0011B4  D000               	goto	l6237
  5551  0011B6                     l6237:
  5552                           
  5553                           ; BSR set to: 1
  5554                           ;ST7735_TFT.c: 486: if(_text[i] == 0x20) goto _skip; }
  5555  0011B6  0101               	movlb	1	; () banked
  5556  0011B8  5161               	movf	drawtext@i& (0+255),w,b
  5557  0011BA  243A               	addwf	drawtext@_text,w,c
  5558  0011BC  6ED9               	movwf	fsr2l,c
  5559  0011BE  0101               	movlb	1	; () banked
  5560  0011C0  5162               	movf	(drawtext@i+1)& (0+255),w,b
  5561  0011C2  203B               	addwfc	drawtext@_text+1,w,c
  5562  0011C4  6EDA               	movwf	fsr2h,c
  5563  0011C6  0E20               	movlw	32
  5564  0011C8  18DE               	xorwf	postinc2,w,c
  5565  0011CA  B4D8               	btfsc	status,2,c
  5566  0011CC  D02C               	goto	l6249
  5567  0011CE  D002               	goto	l6241
  5568                           
  5569                           ; BSR set to: 1
  5570  0011D0  D02A               	goto	l6249
  5571                           
  5572                           ; BSR set to: 1
  5573  0011D2  D000               	goto	l6241
  5574  0011D4                     l6241:
  5575                           
  5576                           ; BSR set to: 1
  5577                           ;ST7735_TFT.c: 487: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  5578  0011D4  C163  F02E         	movff	drawtext@cursor_y,drawChar@y
  5579  0011D8  0101               	movlb	1	; () banked
  5580  0011DA  5161               	movf	drawtext@i& (0+255),w,b
  5581  0011DC  243A               	addwf	drawtext@_text,w,c
  5582  0011DE  6ED9               	movwf	fsr2l,c
  5583  0011E0  0101               	movlb	1	; () banked
  5584  0011E2  5162               	movf	(drawtext@i+1)& (0+255),w,b
  5585  0011E4  203B               	addwfc	drawtext@_text+1,w,c
  5586  0011E6  6EDA               	movwf	fsr2h,c
  5587  0011E8  50DF               	movf	indf2,w,c
  5588  0011EA  6E2F               	movwf	drawChar@c,c
  5589  0011EC  C03C  F030         	movff	drawtext@color,drawChar@color
  5590  0011F0  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  5591  0011F4  C03E  F032         	movff	drawtext@bg,drawChar@bg
  5592  0011F8  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  5593  0011FC  C040  F034         	movff	drawtext@size,drawChar@size
  5594  001200  0101               	movlb	1	; () banked
  5595  001202  5164               	movf	drawtext@cursor_x& (0+255),w,b
  5596  001204  EC6A  F007         	call	_drawChar
  5597                           
  5598                           ;ST7735_TFT.c: 488: cursor_x = cursor_x + size * 6;
  5599  001208  5040               	movf	drawtext@size,w,c
  5600  00120A  0D06               	mullw	6
  5601  00120C  50F3               	movf	prodl,w,c
  5602  00120E  0101               	movlb	1	; () banked
  5603  001210  2564               	addwf	drawtext@cursor_x& (0+255),w,b
  5604  001212  0101               	movlb	1	; () banked
  5605  001214  6F64               	movwf	drawtext@cursor_x& (0+255),b
  5606                           
  5607                           ; BSR set to: 1
  5608                           ;ST7735_TFT.c: 489: if(cursor_x > 128) cursor_x = 128;
  5609  001216  0E80               	movlw	128
  5610  001218  0101               	movlb	1	; () banked
  5611  00121A  6564               	cpfsgt	drawtext@cursor_x& (0+255),b
  5612  00121C  D004               	goto	l6249
  5613                           
  5614                           ; BSR set to: 1
  5615  00121E  0E80               	movlw	128
  5616  001220  0101               	movlb	1	; () banked
  5617  001222  6F64               	movwf	drawtext@cursor_x& (0+255),b
  5618                           
  5619                           ; BSR set to: 1
  5620  001224  D000               	goto	l6249
  5621  001226                     l6249:
  5622                           
  5623                           ; BSR set to: 1
  5624  001226  0101               	movlb	1	; () banked
  5625  001228  4B61               	infsnz	drawtext@i& (0+255),f,b
  5626  00122A  2B62               	incf	(drawtext@i+1)& (0+255),f,b
  5627  00122C  D000               	goto	l6251
  5628  00122E                     l6251:
  5629                           
  5630                           ; BSR set to: 1
  5631  00122E  0101               	movlb	1	; () banked
  5632  001230  515F               	movf	drawtext@textsize& (0+255),w,b
  5633  001232  0101               	movlb	1	; () banked
  5634  001234  5D61               	subwf	drawtext@i& (0+255),w,b
  5635  001236  0101               	movlb	1	; () banked
  5636  001238  5160               	movf	(drawtext@textsize+1)& (0+255),w,b
  5637  00123A  0101               	movlb	1	; () banked
  5638  00123C  5962               	subwfb	(drawtext@i+1)& (0+255),w,b
  5639  00123E  A0D8               	btfss	status,0,c
  5640  001240  D792               	goto	l6225
  5641                           
  5642                           ; BSR set to: 1
  5643                           
  5644                           ; BSR set to: 1
  5645  001242  0012               	return		;funcret
  5646  001244                     __end_of_drawtext:
  5647                           	opt stack 0
  5648                           tblptru	equ	0xFF8
  5649                           tblptrh	equ	0xFF7
  5650                           tblptrl	equ	0xFF6
  5651                           tablat	equ	0xFF5
  5652                           prodh	equ	0xFF4
  5653                           prodl	equ	0xFF3
  5654                           intcon	equ	0xFF2
  5655                           intcon2	equ	0xFF1
  5656                           postinc0	equ	0xFEE
  5657                           wreg	equ	0xFE8
  5658                           postdec1	equ	0xFE5
  5659                           fsr1l	equ	0xFE1
  5660                           indf2	equ	0xFDF
  5661                           postinc2	equ	0xFDE
  5662                           postdec2	equ	0xFDD
  5663                           fsr2h	equ	0xFDA
  5664                           fsr2l	equ	0xFD9
  5665                           status	equ	0xFD8
  5666                           
  5667 ;; *************** function _strlen *****************
  5668 ;; Defined at:
  5669 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  5670 ;; Parameters:    Size  Location     Type
  5671 ;;  s               2   16[COMRAM] PTR const unsigned char 
  5672 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5673 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5674 ;;		 -> buffer(31), 
  5675 ;; Auto vars:     Size  Location     Type
  5676 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  5677 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5678 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5679 ;;		 -> buffer(31), 
  5680 ;; Return value:  Size  Location     Type
  5681 ;;                  2   16[COMRAM] unsigned int 
  5682 ;; Registers used:
  5683 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5684 ;; Tracked objects:
  5685 ;;		On entry : 0/0
  5686 ;;		On exit  : 0/0
  5687 ;;		Unchanged: 0/0
  5688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5689 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5690 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5691 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5692 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5693 ;;Total ram usage:        6 bytes
  5694 ;; Hardware stack levels used:    1
  5695 ;; Hardware stack levels required when called:    3
  5696 ;; This function calls:
  5697 ;;		Nothing
  5698 ;; This function is called by:
  5699 ;;		_drawtext
  5700 ;; This function uses a non-reentrant model
  5701 ;;
  5702                           
  5703                           	psect	text17
  5704  001F9C                     __ptext17:
  5705                           	opt stack 0
  5706  001F9C                     _strlen:
  5707                           	opt stack 25
  5708                           
  5709                           ; BSR set to: 1
  5710                           ;incstack = 0
  5711  001F9C  C011  F015         	movff	strlen@s,strlen@cp
  5712  001FA0  C012  F016         	movff	strlen@s+1,strlen@cp+1
  5713  001FA4  D003               	goto	l6061
  5714  001FA6                     l6059:
  5715  001FA6  4A15               	infsnz	strlen@cp,f,c
  5716  001FA8  2A16               	incf	strlen@cp+1,f,c
  5717  001FAA  D000               	goto	l6061
  5718  001FAC                     l6061:
  5719  001FAC  C015  FFD9         	movff	strlen@cp,fsr2l
  5720  001FB0  C016  FFDA         	movff	strlen@cp+1,fsr2h
  5721  001FB4  50DF               	movf	indf2,w,c
  5722  001FB6  A4D8               	btfss	status,2,c
  5723  001FB8  D7F6               	goto	l6059
  5724  001FBA  C011  F013         	movff	strlen@s,??_strlen
  5725  001FBE  C012  F014         	movff	strlen@s+1,??_strlen+1
  5726  001FC2  1E13               	comf	??_strlen,f,c
  5727  001FC4  1E14               	comf	??_strlen+1,f,c
  5728  001FC6  4A13               	infsnz	??_strlen,f,c
  5729  001FC8  2A14               	incf	??_strlen+1,f,c
  5730  001FCA  5015               	movf	strlen@cp,w,c
  5731  001FCC  2413               	addwf	??_strlen,w,c
  5732  001FCE  6E11               	movwf	?_strlen,c
  5733  001FD0  5016               	movf	strlen@cp+1,w,c
  5734  001FD2  2014               	addwfc	??_strlen+1,w,c
  5735  001FD4  6E12               	movwf	?_strlen+1,c
  5736  001FD6  D000               	goto	l1573
  5737  001FD8                     l1573:
  5738  001FD8  0012               	return		;funcret
  5739  001FDA                     __end_of_strlen:
  5740                           	opt stack 0
  5741                           tblptru	equ	0xFF8
  5742                           tblptrh	equ	0xFF7
  5743                           tblptrl	equ	0xFF6
  5744                           tablat	equ	0xFF5
  5745                           prodh	equ	0xFF4
  5746                           prodl	equ	0xFF3
  5747                           intcon	equ	0xFF2
  5748                           intcon2	equ	0xFF1
  5749                           postinc0	equ	0xFEE
  5750                           wreg	equ	0xFE8
  5751                           postdec1	equ	0xFE5
  5752                           fsr1l	equ	0xFE1
  5753                           indf2	equ	0xFDF
  5754                           postinc2	equ	0xFDE
  5755                           postdec2	equ	0xFDD
  5756                           fsr2h	equ	0xFDA
  5757                           fsr2l	equ	0xFD9
  5758                           status	equ	0xFD8
  5759                           
  5760 ;; *************** function _drawChar *****************
  5761 ;; Defined at:
  5762 ;;		line 448 in file "ST7735_TFT.c"
  5763 ;; Parameters:    Size  Location     Type
  5764 ;;  x               1    wreg     unsigned char 
  5765 ;;  y               1   45[COMRAM] unsigned char 
  5766 ;;  c               1   46[COMRAM] unsigned char 
  5767 ;;  color           2   47[COMRAM] unsigned int 
  5768 ;;  bg              2   49[COMRAM] unsigned int 
  5769 ;;  size            1   51[COMRAM] unsigned char 
  5770 ;; Auto vars:     Size  Location     Type
  5771 ;;  x               1   53[COMRAM] unsigned char 
  5772 ;;  line            1   52[COMRAM] unsigned char 
  5773 ;;  i               1   55[COMRAM] unsigned char 
  5774 ;;  j               1   54[COMRAM] unsigned char 
  5775 ;; Return value:  Size  Location     Type
  5776 ;;		None               void
  5777 ;; Registers used:
  5778 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5779 ;; Tracked objects:
  5780 ;;		On entry : 0/0
  5781 ;;		On exit  : 0/0
  5782 ;;		Unchanged: 0/0
  5783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5784 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5785 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5787 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5788 ;;Total ram usage:       11 bytes
  5789 ;; Hardware stack levels used:    1
  5790 ;; Hardware stack levels required when called:    8
  5791 ;; This function calls:
  5792 ;;		___wmul
  5793 ;;		_drawPixel
  5794 ;;		_fillRect
  5795 ;; This function is called by:
  5796 ;;		_drawtext
  5797 ;; This function uses a non-reentrant model
  5798 ;;
  5799                           
  5800                           	psect	text18
  5801  000ED4                     __ptext18:
  5802                           	opt stack 0
  5803  000ED4                     _drawChar:
  5804                           	opt stack 20
  5805                           
  5806                           ;incstack = 0
  5807                           ;drawChar@x stored from wreg
  5808  000ED4  6E36               	movwf	drawChar@x,c
  5809                           
  5810                           ;ST7735_TFT.c: 450: char i, j;
  5811                           ;ST7735_TFT.c: 451: if((x >= 128) || (y >= 160))
  5812  000ED6  0E80               	movlw	128
  5813  000ED8  6036               	cpfslt	drawChar@x,c
  5814  000EDA  D0A6               	goto	l111
  5815  000EDC  0E9F               	movlw	159
  5816  000EDE  642E               	cpfsgt	drawChar@y,c
  5817  000EE0  D001               	goto	l6007
  5818                           
  5819                           ;ST7735_TFT.c: 452: return;
  5820  000EE2  D0A2               	goto	l111
  5821  000EE4                     l6007:
  5822                           
  5823                           ;ST7735_TFT.c: 453: if(size < 1) size = 1;
  5824  000EE4  5034               	movf	drawChar@size,w,c
  5825  000EE6  A4D8               	btfss	status,2,c
  5826  000EE8  D003               	goto	l6011
  5827  000EEA  0E01               	movlw	1
  5828  000EEC  6E34               	movwf	drawChar@size,c
  5829  000EEE  D000               	goto	l6011
  5830  000EF0                     l6011:
  5831                           
  5832                           ;ST7735_TFT.c: 454: if((c < ' ') || (c > '~'))
  5833  000EF0  0E1F               	movlw	31
  5834  000EF2  642F               	cpfsgt	drawChar@c,c
  5835  000EF4  D004               	goto	l6015
  5836  000EF6  0E7E               	movlw	126
  5837  000EF8  642F               	cpfsgt	drawChar@c,c
  5838  000EFA  D003               	goto	l113
  5839  000EFC  D000               	goto	l6015
  5840  000EFE                     l6015:
  5841                           
  5842                           ;ST7735_TFT.c: 455: c = '?';
  5843  000EFE  0E3F               	movlw	63
  5844  000F00  6E2F               	movwf	drawChar@c,c
  5845  000F02                     l113:
  5846                           
  5847                           ;ST7735_TFT.c: 456: for(i=0; i<5; i++ ) {
  5848  000F02  0E00               	movlw	0
  5849  000F04  6E38               	movwf	drawChar@i,c
  5850  000F06                     l6017:
  5851  000F06  0E04               	movlw	4
  5852  000F08  6438               	cpfsgt	drawChar@i,c
  5853  000F0A  D001               	goto	l6021
  5854  000F0C  D08D               	goto	l111
  5855  000F0E                     l6021:
  5856                           
  5857                           ;ST7735_TFT.c: 457: unsigned char line;
  5858                           ;ST7735_TFT.c: 458: if(c < 'S')
  5859  000F0E  0E53               	movlw	83
  5860  000F10  602F               	cpfslt	drawChar@c,c
  5861  000F12  D015               	goto	l6025
  5862                           
  5863                           ;ST7735_TFT.c: 459: line = font[(c - 32)*5 + i];
  5864  000F14  0EE0               	movlw	224
  5865  000F16  242F               	addwf	drawChar@c,w,c
  5866  000F18  6E11               	movwf	___wmul@multiplier,c
  5867  000F1A  6A12               	clrf	___wmul@multiplier+1,c
  5868  000F1C  0EFF               	movlw	255
  5869  000F1E  2212               	addwfc	___wmul@multiplier+1,f,c
  5870  000F20  0E00               	movlw	0
  5871  000F22  6E14               	movwf	___wmul@multiplicand+1,c
  5872  000F24  0E05               	movlw	5
  5873  000F26  6E13               	movwf	___wmul@multiplicand,c
  5874  000F28  EC8F  F010         	call	___wmul	;wreg free
  5875  000F2C  5038               	movf	drawChar@i,w,c
  5876  000F2E  2611               	addwf	?___wmul,f,c
  5877  000F30  0E00               	movlw	0
  5878  000F32  2212               	addwfc	?___wmul+1,f,c
  5879  000F34  0E39               	movlw	low _font
  5880  000F36  2411               	addwf	?___wmul,w,c
  5881  000F38  6EF6               	movwf	tblptrl,c
  5882  000F3A  0EFD               	movlw	high _font
  5883  000F3C  D014               	goto	L3
  5884  000F3E                     l6025:
  5885                           
  5886                           ;ST7735_TFT.c: 460: else
  5887                           ;ST7735_TFT.c: 461: line = font2[(c - 'S')*5 + i];
  5888  000F3E  0EAD               	movlw	173
  5889  000F40  242F               	addwf	drawChar@c,w,c
  5890  000F42  6E11               	movwf	___wmul@multiplier,c
  5891  000F44  6A12               	clrf	___wmul@multiplier+1,c
  5892  000F46  0EFF               	movlw	255
  5893  000F48  2212               	addwfc	___wmul@multiplier+1,f,c
  5894  000F4A  0E00               	movlw	0
  5895  000F4C  6E14               	movwf	___wmul@multiplicand+1,c
  5896  000F4E  0E05               	movlw	5
  5897  000F50  6E13               	movwf	___wmul@multiplicand,c
  5898  000F52  EC8F  F010         	call	___wmul	;wreg free
  5899  000F56  5038               	movf	drawChar@i,w,c
  5900  000F58  2611               	addwf	?___wmul,f,c
  5901  000F5A  0E00               	movlw	0
  5902  000F5C  2212               	addwfc	?___wmul+1,f,c
  5903  000F5E  0E38               	movlw	low _font2
  5904  000F60  2411               	addwf	?___wmul,w,c
  5905  000F62  6EF6               	movwf	tblptrl,c
  5906  000F64  0EFE               	movlw	high _font2
  5907  000F66                     L3:
  5908  000F66  2012               	addwfc	?___wmul+1,w,c
  5909  000F68  6EF7               	movwf	tblptrh,c
  5910  000F6A                     	if	0	;There are less than 3 active tblptr bytes
  5911  000F6A                     	endif
  5912  000F6A  0008               	tblrd		*
  5913  000F6C  CFF5 F035          	movff	tablat,drawChar@line
  5914  000F70  D000               	goto	l6027
  5915  000F72                     l6027:
  5916                           
  5917                           ;ST7735_TFT.c: 462: for(j=0; j<7; j++, line >>= 1) {
  5918  000F72  0E00               	movlw	0
  5919  000F74  6E37               	movwf	drawChar@j,c
  5920  000F76                     l6029:
  5921  000F76  0E06               	movlw	6
  5922  000F78  6437               	cpfsgt	drawChar@j,c
  5923  000F7A  D001               	goto	l120
  5924  000F7C  D053               	goto	l6053
  5925  000F7E                     l120:
  5926                           
  5927                           ;ST7735_TFT.c: 463: if(line & 0x01) {
  5928  000F7E  A035               	btfss	drawChar@line,0,c
  5929  000F80  D023               	goto	l6039
  5930                           
  5931                           ;ST7735_TFT.c: 464: if(size == 1) drawPixel(x+i, y+j, color);
  5932  000F82  0434               	decf	drawChar@size,w,c
  5933  000F84  A4D8               	btfss	status,2,c
  5934  000F86  D00C               	goto	l6037
  5935  000F88  502E               	movf	drawChar@y,w,c
  5936  000F8A  2437               	addwf	drawChar@j,w,c
  5937  000F8C  6E18               	movwf	drawPixel@y,c
  5938  000F8E  C030  F019         	movff	drawChar@color,drawPixel@color
  5939  000F92  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  5940  000F96  5036               	movf	drawChar@x,w,c
  5941  000F98  2438               	addwf	drawChar@i,w,c
  5942  000F9A  EC62  F010         	call	_drawPixel
  5943  000F9E  D03E               	goto	l6047
  5944  000FA0                     l6037:
  5945                           
  5946                           ;ST7735_TFT.c: 465: else fillRect(x+(i*size), y+(j*size), size, size, color);
  5947  000FA0  5037               	movf	drawChar@j,w,c
  5948  000FA2  0234               	mulwf	drawChar@size,c
  5949  000FA4  50F3               	movf	prodl,w,c
  5950  000FA6  242E               	addwf	drawChar@y,w,c
  5951  000FA8  6E23               	movwf	fillRect@y,c
  5952  000FAA  C034  F024         	movff	drawChar@size,fillRect@w
  5953  000FAE  C034  F025         	movff	drawChar@size,fillRect@h
  5954  000FB2  C030  F026         	movff	drawChar@color,fillRect@color
  5955  000FB6  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  5956  000FBA  5038               	movf	drawChar@i,w,c
  5957  000FBC  0234               	mulwf	drawChar@size,c
  5958  000FBE  50F3               	movf	prodl,w,c
  5959  000FC0  2436               	addwf	drawChar@x,w,c
  5960  000FC2  EC85  F00F         	call	_fillRect
  5961                           
  5962                           ;ST7735_TFT.c: 466: }
  5963  000FC6  D02A               	goto	l6047
  5964  000FC8                     l6039:
  5965                           
  5966                           ;ST7735_TFT.c: 467: else if(bg != color) {
  5967  000FC8  5030               	movf	drawChar@color,w,c
  5968  000FCA  1832               	xorwf	drawChar@bg,w,c
  5969  000FCC  E104               	bnz	u4150
  5970  000FCE  5031               	movf	drawChar@color+1,w,c
  5971  000FD0  1833               	xorwf	drawChar@bg+1,w,c
  5972  000FD2  B4D8               	btfsc	status,2,c
  5973  000FD4  D023               	goto	l6047
  5974  000FD6                     u4150:
  5975                           
  5976                           ;ST7735_TFT.c: 468: if(size == 1) drawPixel(x+i, y+j, bg);
  5977  000FD6  0434               	decf	drawChar@size,w,c
  5978  000FD8  A4D8               	btfss	status,2,c
  5979  000FDA  D00C               	goto	l6045
  5980  000FDC  502E               	movf	drawChar@y,w,c
  5981  000FDE  2437               	addwf	drawChar@j,w,c
  5982  000FE0  6E18               	movwf	drawPixel@y,c
  5983  000FE2  C032  F019         	movff	drawChar@bg,drawPixel@color
  5984  000FE6  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  5985  000FEA  5036               	movf	drawChar@x,w,c
  5986  000FEC  2438               	addwf	drawChar@i,w,c
  5987  000FEE  EC62  F010         	call	_drawPixel
  5988  000FF2  D014               	goto	l6047
  5989  000FF4                     l6045:
  5990                           
  5991                           ;ST7735_TFT.c: 469: else fillRect(x+i*size, y+j*size, size, size, bg);
  5992  000FF4  5037               	movf	drawChar@j,w,c
  5993  000FF6  0234               	mulwf	drawChar@size,c
  5994  000FF8  50F3               	movf	prodl,w,c
  5995  000FFA  242E               	addwf	drawChar@y,w,c
  5996  000FFC  6E23               	movwf	fillRect@y,c
  5997  000FFE  C034  F024         	movff	drawChar@size,fillRect@w
  5998  001002  C034  F025         	movff	drawChar@size,fillRect@h
  5999  001006  C032  F026         	movff	drawChar@bg,fillRect@color
  6000  00100A  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  6001  00100E  5038               	movf	drawChar@i,w,c
  6002  001010  0234               	mulwf	drawChar@size,c
  6003  001012  50F3               	movf	prodl,w,c
  6004  001014  2436               	addwf	drawChar@x,w,c
  6005  001016  EC85  F00F         	call	_fillRect
  6006  00101A  D000               	goto	l6047
  6007  00101C                     l6047:
  6008  00101C  2A37               	incf	drawChar@j,f,c
  6009  00101E  90D8               	bcf	status,0,c
  6010  001020  3235               	rrcf	drawChar@line,f,c
  6011  001022  D7A9               	goto	l6029
  6012  001024                     l6053:
  6013  001024  2A38               	incf	drawChar@i,f,c
  6014  001026  D76F               	goto	l6017
  6015  001028                     l111:
  6016  001028  0012               	return		;funcret
  6017  00102A                     __end_of_drawChar:
  6018                           	opt stack 0
  6019                           tblptru	equ	0xFF8
  6020                           tblptrh	equ	0xFF7
  6021                           tblptrl	equ	0xFF6
  6022                           tablat	equ	0xFF5
  6023                           prodh	equ	0xFF4
  6024                           prodl	equ	0xFF3
  6025                           intcon	equ	0xFF2
  6026                           intcon2	equ	0xFF1
  6027                           postinc0	equ	0xFEE
  6028                           wreg	equ	0xFE8
  6029                           postdec1	equ	0xFE5
  6030                           fsr1l	equ	0xFE1
  6031                           indf2	equ	0xFDF
  6032                           postinc2	equ	0xFDE
  6033                           postdec2	equ	0xFDD
  6034                           fsr2h	equ	0xFDA
  6035                           fsr2l	equ	0xFD9
  6036                           status	equ	0xFD8
  6037                           
  6038 ;; *************** function _fillRect *****************
  6039 ;; Defined at:
  6040 ;;		line 438 in file "ST7735_TFT.c"
  6041 ;; Parameters:    Size  Location     Type
  6042 ;;  x               1    wreg     unsigned char 
  6043 ;;  y               1   34[COMRAM] unsigned char 
  6044 ;;  w               1   35[COMRAM] unsigned char 
  6045 ;;  h               1   36[COMRAM] unsigned char 
  6046 ;;  color           2   37[COMRAM] unsigned int 
  6047 ;; Auto vars:     Size  Location     Type
  6048 ;;  x               1   42[COMRAM] unsigned char 
  6049 ;;  i               2   43[COMRAM] int 
  6050 ;; Return value:  Size  Location     Type
  6051 ;;		None               void
  6052 ;; Registers used:
  6053 ;;		wreg, status,2, status,0, cstack
  6054 ;; Tracked objects:
  6055 ;;		On entry : 0/0
  6056 ;;		On exit  : 0/0
  6057 ;;		Unchanged: 0/0
  6058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6059 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6060 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6061 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6062 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6063 ;;Total ram usage:       11 bytes
  6064 ;; Hardware stack levels used:    1
  6065 ;; Hardware stack levels required when called:    7
  6066 ;; This function calls:
  6067 ;;		_drawFastVLine
  6068 ;; This function is called by:
  6069 ;;		_drawChar
  6070 ;; This function uses a non-reentrant model
  6071 ;;
  6072                           
  6073                           	psect	text19
  6074  001F0A                     __ptext19:
  6075                           	opt stack 0
  6076  001F0A                     _fillRect:
  6077                           	opt stack 20
  6078                           
  6079                           ;incstack = 0
  6080                           ;fillRect@x stored from wreg
  6081  001F0A  6E2B               	movwf	fillRect@x,c
  6082                           
  6083                           ;ST7735_TFT.c: 440: signed int i;
  6084                           ;ST7735_TFT.c: 442: for (i = x; i < x + w; i++)
  6085  001F0C  C02B  F02C         	movff	fillRect@x,fillRect@i
  6086  001F10  6A2D               	clrf	fillRect@i+1,c
  6087  001F12  D00E               	goto	l5725
  6088  001F14                     l5721:
  6089                           
  6090                           ;ST7735_TFT.c: 443: {
  6091                           ;ST7735_TFT.c: 444: drawFastVLine(i, y, h, color);
  6092  001F14  C023  F018         	movff	fillRect@y,drawFastVLine@y
  6093  001F18  C025  F019         	movff	fillRect@h,drawFastVLine@h
  6094  001F1C  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  6095  001F20  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  6096  001F24  502C               	movf	fillRect@i,w,c
  6097  001F26  ECCA  F00C         	call	_drawFastVLine
  6098  001F2A  4A2C               	infsnz	fillRect@i,f,c
  6099  001F2C  2A2D               	incf	fillRect@i+1,f,c
  6100  001F2E  D000               	goto	l5725
  6101  001F30                     l5725:
  6102  001F30  5024               	movf	fillRect@w,w,c
  6103  001F32  C02B  F028         	movff	fillRect@x,??_fillRect
  6104  001F36  6A29               	clrf	(??_fillRect+1)& (0+255),c
  6105  001F38  2628               	addwf	??_fillRect,f,c
  6106  001F3A  0E00               	movlw	0
  6107  001F3C  2229               	addwfc	??_fillRect+1,f,c
  6108  001F3E  5028               	movf	??_fillRect,w,c
  6109  001F40  5C2C               	subwf	fillRect@i,w,c
  6110  001F42  502D               	movf	fillRect@i+1,w,c
  6111  001F44  0A80               	xorlw	128
  6112  001F46  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  6113  001F48  5029               	movf	??_fillRect+1,w,c
  6114  001F4A  0A80               	xorlw	128
  6115  001F4C  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  6116  001F4E  A0D8               	btfss	status,0,c
  6117  001F50  D7E1               	goto	l5721
  6118  001F52  0012               	return		;funcret
  6119  001F54                     __end_of_fillRect:
  6120                           	opt stack 0
  6121                           tblptru	equ	0xFF8
  6122                           tblptrh	equ	0xFF7
  6123                           tblptrl	equ	0xFF6
  6124                           tablat	equ	0xFF5
  6125                           prodh	equ	0xFF4
  6126                           prodl	equ	0xFF3
  6127                           intcon	equ	0xFF2
  6128                           intcon2	equ	0xFF1
  6129                           postinc0	equ	0xFEE
  6130                           wreg	equ	0xFE8
  6131                           postdec1	equ	0xFE5
  6132                           fsr1l	equ	0xFE1
  6133                           indf2	equ	0xFDF
  6134                           postinc2	equ	0xFDE
  6135                           postdec2	equ	0xFDD
  6136                           fsr2h	equ	0xFDA
  6137                           fsr2l	equ	0xFD9
  6138                           status	equ	0xFD8
  6139                           
  6140 ;; *************** function _drawFastVLine *****************
  6141 ;; Defined at:
  6142 ;;		line 417 in file "ST7735_TFT.c"
  6143 ;; Parameters:    Size  Location     Type
  6144 ;;  x               1    wreg     unsigned char 
  6145 ;;  y               1   23[COMRAM] unsigned char 
  6146 ;;  h               1   24[COMRAM] unsigned char 
  6147 ;;  color           2   25[COMRAM] unsigned int 
  6148 ;; Auto vars:     Size  Location     Type
  6149 ;;  x               1   33[COMRAM] unsigned char 
  6150 ;;  lo              1   32[COMRAM] unsigned char 
  6151 ;;  hi              1   31[COMRAM] unsigned char 
  6152 ;; Return value:  Size  Location     Type
  6153 ;;		None               void
  6154 ;; Registers used:
  6155 ;;		wreg, status,2, status,0, cstack
  6156 ;; Tracked objects:
  6157 ;;		On entry : 0/0
  6158 ;;		On exit  : 0/0
  6159 ;;		Unchanged: 0/0
  6160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6161 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6162 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6163 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6164 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6165 ;;Total ram usage:       11 bytes
  6166 ;; Hardware stack levels used:    1
  6167 ;; Hardware stack levels required when called:    6
  6168 ;; This function calls:
  6169 ;;		_setAddrWindow
  6170 ;;		_spiwrite
  6171 ;; This function is called by:
  6172 ;;		_fillRect
  6173 ;;		_fillCircleHelper
  6174 ;;		_fillCircle
  6175 ;;		_drawRect
  6176 ;; This function uses a non-reentrant model
  6177 ;;
  6178                           
  6179                           	psect	text20
  6180  001994                     __ptext20:
  6181                           	opt stack 0
  6182  001994                     _drawFastVLine:
  6183                           	opt stack 20
  6184                           
  6185                           ;incstack = 0
  6186                           ;drawFastVLine@x stored from wreg
  6187  001994  6E22               	movwf	drawFastVLine@x,c
  6188                           
  6189                           ;ST7735_TFT.c: 419: unsigned char hi, lo;
  6190                           ;ST7735_TFT.c: 420: if((x >= 128) || (y >= 160))
  6191  001996  0E80               	movlw	128
  6192  001998  6022               	cpfslt	drawFastVLine@x,c
  6193  00199A  D03F               	goto	l95
  6194  00199C  0E9F               	movlw	159
  6195  00199E  6418               	cpfsgt	drawFastVLine@y,c
  6196  0019A0  D001               	goto	l5625
  6197                           
  6198                           ;ST7735_TFT.c: 421: return;
  6199  0019A2  D03B               	goto	l95
  6200  0019A4                     l5625:
  6201                           
  6202                           ;ST7735_TFT.c: 422: if((y + h - 1) >= 160)
  6203  0019A4  0EFF               	movlw	255
  6204  0019A6  6E1C               	movwf	??_drawFastVLine& (0+255),c
  6205  0019A8  0EFF               	movlw	255
  6206  0019AA  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  6207  0019AC  5019               	movf	drawFastVLine@h,w,c
  6208  0019AE  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  6209  0019B2  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  6210  0019B4  261E               	addwf	??_drawFastVLine+2,f,c
  6211  0019B6  0E00               	movlw	0
  6212  0019B8  221F               	addwfc	??_drawFastVLine+3,f,c
  6213  0019BA  501C               	movf	??_drawFastVLine,w,c
  6214  0019BC  261E               	addwf	??_drawFastVLine+2,f,c
  6215  0019BE  501D               	movf	??_drawFastVLine+1,w,c
  6216  0019C0  221F               	addwfc	??_drawFastVLine+3,f,c
  6217  0019C2  BE1F               	btfsc	??_drawFastVLine+3,7,c
  6218  0019C4  D00B               	goto	l5629
  6219  0019C6  501F               	movf	??_drawFastVLine+3,w,c
  6220  0019C8  E104               	bnz	u3690
  6221  0019CA  0EA0               	movlw	160
  6222  0019CC  5C1E               	subwf	??_drawFastVLine+2,w,c
  6223  0019CE  A0D8               	btfss	status,0,c
  6224  0019D0  D005               	goto	l5629
  6225  0019D2                     u3690:
  6226                           
  6227                           ;ST7735_TFT.c: 423: h = 160 - y;
  6228  0019D2  5018               	movf	drawFastVLine@y,w,c
  6229  0019D4  0800               	sublw	0
  6230  0019D6  0FA0               	addlw	160
  6231  0019D8  6E19               	movwf	drawFastVLine@h,c
  6232  0019DA  D000               	goto	l5629
  6233  0019DC                     l5629:
  6234                           
  6235                           ;ST7735_TFT.c: 424: hi = color >> 8; lo = color;
  6236  0019DC  501B               	movf	drawFastVLine@color+1,w,c
  6237  0019DE  6E20               	movwf	drawFastVLine@hi,c
  6238  0019E0  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  6239                           
  6240                           ;ST7735_TFT.c: 425: setAddrWindow(x, y, x, y + h - 1);
  6241  0019E4  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  6242  0019E8  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  6243  0019EC  5018               	movf	drawFastVLine@y,w,c
  6244  0019EE  2419               	addwf	drawFastVLine@h,w,c
  6245  0019F0  6E1C               	movwf	??_drawFastVLine& (0+255),c
  6246  0019F2  041C               	decf	??_drawFastVLine,w,c
  6247  0019F4  6E16               	movwf	setAddrWindow@y1,c
  6248  0019F6  5022               	movf	drawFastVLine@x,w,c
  6249  0019F8  EC13  F00F         	call	_setAddrWindow
  6250                           
  6251                           ;ST7735_TFT.c: 426: PORTDbits.RD0 = 1;
  6252  0019FC  8083               	bsf	3971,0,c	;volatile
  6253                           
  6254                           ;ST7735_TFT.c: 427: PORTDbits.RD1 = 0;
  6255  0019FE  9283               	bcf	3971,1,c	;volatile
  6256                           
  6257                           ;ST7735_TFT.c: 429: while (h--) {
  6258  001A00  D007               	goto	l5641
  6259  001A02                     l5639:
  6260                           
  6261                           ;ST7735_TFT.c: 430: spiwrite(hi);
  6262  001A02  5020               	movf	drawFastVLine@hi,w,c
  6263  001A04  EC5F  F011         	call	_spiwrite
  6264                           
  6265                           ;ST7735_TFT.c: 431: spiwrite(lo);
  6266  001A08  5021               	movf	drawFastVLine@lo,w,c
  6267  001A0A  EC5F  F011         	call	_spiwrite
  6268  001A0E  D000               	goto	l5641
  6269  001A10                     l5641:
  6270  001A10  0619               	decf	drawFastVLine@h,f,c
  6271  001A12  2819               	incf	drawFastVLine@h,w,c
  6272  001A14  A4D8               	btfss	status,2,c
  6273  001A16  D7F5               	goto	l5639
  6274                           
  6275                           ;ST7735_TFT.c: 432: }
  6276                           ;ST7735_TFT.c: 433: PORTDbits.RD1 = 1;
  6277  001A18  8283               	bsf	3971,1,c	;volatile
  6278  001A1A                     l95:
  6279  001A1A  0012               	return		;funcret
  6280  001A1C                     __end_of_drawFastVLine:
  6281                           	opt stack 0
  6282                           tblptru	equ	0xFF8
  6283                           tblptrh	equ	0xFF7
  6284                           tblptrl	equ	0xFF6
  6285                           tablat	equ	0xFF5
  6286                           prodh	equ	0xFF4
  6287                           prodl	equ	0xFF3
  6288                           intcon	equ	0xFF2
  6289                           intcon2	equ	0xFF1
  6290                           postinc0	equ	0xFEE
  6291                           wreg	equ	0xFE8
  6292                           postdec1	equ	0xFE5
  6293                           fsr1l	equ	0xFE1
  6294                           indf2	equ	0xFDF
  6295                           postinc2	equ	0xFDE
  6296                           postdec2	equ	0xFDD
  6297                           fsr2h	equ	0xFDA
  6298                           fsr2l	equ	0xFD9
  6299                           status	equ	0xFD8
  6300                           
  6301 ;; *************** function _drawCircle *****************
  6302 ;; Defined at:
  6303 ;;		line 529 in file "ST7735_TFT.c"
  6304 ;; Parameters:    Size  Location     Type
  6305 ;;  x0              2   27[COMRAM] int 
  6306 ;;  y0              2   29[COMRAM] int 
  6307 ;;  r               2   31[COMRAM] int 
  6308 ;;  color           2   33[COMRAM] unsigned int 
  6309 ;; Auto vars:     Size  Location     Type
  6310 ;;  y               2   45[COMRAM] int 
  6311 ;;  x               2   43[COMRAM] int 
  6312 ;;  f               2   41[COMRAM] int 
  6313 ;;  ddF_y           2   39[COMRAM] int 
  6314 ;;  ddF_x           2   37[COMRAM] int 
  6315 ;; Return value:  Size  Location     Type
  6316 ;;		None               void
  6317 ;; Registers used:
  6318 ;;		wreg, status,2, status,0, cstack
  6319 ;; Tracked objects:
  6320 ;;		On entry : 0/0
  6321 ;;		On exit  : 0/0
  6322 ;;		Unchanged: 0/0
  6323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6324 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6325 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6326 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6327 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6328 ;;Total ram usage:       20 bytes
  6329 ;; Hardware stack levels used:    1
  6330 ;; Hardware stack levels required when called:    7
  6331 ;; This function calls:
  6332 ;;		_drawPixel
  6333 ;; This function is called by:
  6334 ;;		_Initialize_Screen
  6335 ;; This function uses a non-reentrant model
  6336 ;;
  6337                           
  6338                           	psect	text21
  6339  000BB6                     __ptext21:
  6340                           	opt stack 0
  6341  000BB6                     _drawCircle:
  6342                           	opt stack 22
  6343                           
  6344                           ;ST7735_TFT.c: 531: signed int f, ddF_x, ddF_y, x, y;
  6345                           ;ST7735_TFT.c: 532: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6346                           
  6347                           ;incstack = 0
  6348  000BB6  C020  F024         	movff	drawCircle@r,??_drawCircle
  6349  000BBA  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  6350  000BBE  1E24               	comf	??_drawCircle,f,c
  6351  000BC0  1E25               	comf	??_drawCircle+1,f,c
  6352  000BC2  4A24               	infsnz	??_drawCircle,f,c
  6353  000BC4  2A25               	incf	??_drawCircle+1,f,c
  6354  000BC6  0E01               	movlw	1
  6355  000BC8  2424               	addwf	??_drawCircle,w,c
  6356  000BCA  6E2A               	movwf	drawCircle@f,c
  6357  000BCC  0E00               	movlw	0
  6358  000BCE  2025               	addwfc	??_drawCircle+1,w,c
  6359  000BD0  6E2B               	movwf	drawCircle@f+1,c
  6360  000BD2  0E00               	movlw	0
  6361  000BD4  6E27               	movwf	drawCircle@ddF_x+1,c
  6362  000BD6  0E01               	movlw	1
  6363  000BD8  6E26               	movwf	drawCircle@ddF_x,c
  6364  000BDA  C020  F024         	movff	drawCircle@r,??_drawCircle
  6365  000BDE  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  6366  000BE2  90D8               	bcf	status,0,c
  6367  000BE4  3624               	rlcf	??_drawCircle,f,c
  6368  000BE6  3625               	rlcf	??_drawCircle+1,f,c
  6369  000BE8  1E24               	comf	??_drawCircle,f,c
  6370  000BEA  1E25               	comf	??_drawCircle+1,f,c
  6371  000BEC  4A24               	infsnz	??_drawCircle,f,c
  6372  000BEE  2A25               	incf	??_drawCircle+1,f,c
  6373  000BF0  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  6374  000BF4  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  6375  000BF8  0E00               	movlw	0
  6376  000BFA  6E2D               	movwf	drawCircle@x+1,c
  6377  000BFC  0E00               	movlw	0
  6378  000BFE  6E2C               	movwf	drawCircle@x,c
  6379  000C00  C020  F02E         	movff	drawCircle@r,drawCircle@y
  6380  000C04  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  6381                           
  6382                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 + r, color);
  6383  000C08  501E               	movf	drawCircle@y0,w,c
  6384  000C0A  2420               	addwf	drawCircle@r,w,c
  6385  000C0C  6E18               	movwf	drawPixel@y,c
  6386  000C0E  C022  F019         	movff	drawCircle@color,drawPixel@color
  6387  000C12  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6388  000C16  501C               	movf	drawCircle@x0,w,c
  6389  000C18  EC62  F010         	call	_drawPixel
  6390                           
  6391                           ;ST7735_TFT.c: 534: drawPixel(x0 , y0 - r, color);
  6392  000C1C  5020               	movf	drawCircle@r,w,c
  6393  000C1E  0800               	sublw	0
  6394  000C20  241E               	addwf	drawCircle@y0,w,c
  6395  000C22  6E18               	movwf	drawPixel@y,c
  6396  000C24  C022  F019         	movff	drawCircle@color,drawPixel@color
  6397  000C28  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6398  000C2C  501C               	movf	drawCircle@x0,w,c
  6399  000C2E  EC62  F010         	call	_drawPixel
  6400                           
  6401                           ;ST7735_TFT.c: 535: drawPixel(x0+r, y0 , color);
  6402  000C32  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  6403  000C36  C022  F019         	movff	drawCircle@color,drawPixel@color
  6404  000C3A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6405  000C3E  501C               	movf	drawCircle@x0,w,c
  6406  000C40  2420               	addwf	drawCircle@r,w,c
  6407  000C42  EC62  F010         	call	_drawPixel
  6408                           
  6409                           ;ST7735_TFT.c: 536: drawPixel(x0-r, y0 , color);
  6410  000C46  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  6411  000C4A  C022  F019         	movff	drawCircle@color,drawPixel@color
  6412  000C4E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6413  000C52  5020               	movf	drawCircle@r,w,c
  6414  000C54  0800               	sublw	0
  6415  000C56  241C               	addwf	drawCircle@x0,w,c
  6416  000C58  EC62  F010         	call	_drawPixel
  6417                           
  6418                           ;ST7735_TFT.c: 537: while (x < y) {
  6419  000C5C  D078               	goto	l6299
  6420  000C5E                     l6271:
  6421                           
  6422                           ;ST7735_TFT.c: 538: if (f >= 0) {
  6423  000C5E  BE2B               	btfsc	drawCircle@f+1,7,c
  6424  000C60  D00B               	goto	l159
  6425                           
  6426                           ;ST7735_TFT.c: 539: y--;
  6427  000C62  062E               	decf	drawCircle@y,f,c
  6428  000C64  A0D8               	btfss	status,0,c
  6429  000C66  062F               	decf	drawCircle@y+1,f,c
  6430                           
  6431                           ;ST7735_TFT.c: 540: ddF_y += 2;
  6432  000C68  0E02               	movlw	2
  6433  000C6A  2628               	addwf	drawCircle@ddF_y,f,c
  6434  000C6C  0E00               	movlw	0
  6435  000C6E  2229               	addwfc	drawCircle@ddF_y+1,f,c
  6436                           
  6437                           ;ST7735_TFT.c: 541: f += ddF_y;
  6438  000C70  5028               	movf	drawCircle@ddF_y,w,c
  6439  000C72  262A               	addwf	drawCircle@f,f,c
  6440  000C74  5029               	movf	drawCircle@ddF_y+1,w,c
  6441  000C76  222B               	addwfc	drawCircle@f+1,f,c
  6442  000C78                     l159:
  6443                           
  6444                           ;ST7735_TFT.c: 542: }
  6445                           ;ST7735_TFT.c: 543: x++;
  6446  000C78  4A2C               	infsnz	drawCircle@x,f,c
  6447  000C7A  2A2D               	incf	drawCircle@x+1,f,c
  6448                           
  6449                           ;ST7735_TFT.c: 544: ddF_x += 2;
  6450  000C7C  0E02               	movlw	2
  6451  000C7E  2626               	addwf	drawCircle@ddF_x,f,c
  6452  000C80  0E00               	movlw	0
  6453  000C82  2227               	addwfc	drawCircle@ddF_x+1,f,c
  6454                           
  6455                           ;ST7735_TFT.c: 545: f += ddF_x;
  6456  000C84  5026               	movf	drawCircle@ddF_x,w,c
  6457  000C86  262A               	addwf	drawCircle@f,f,c
  6458  000C88  5027               	movf	drawCircle@ddF_x+1,w,c
  6459  000C8A  222B               	addwfc	drawCircle@f+1,f,c
  6460                           
  6461                           ;ST7735_TFT.c: 546: drawPixel(x0 + x, y0 + y, color);
  6462  000C8C  501E               	movf	drawCircle@y0,w,c
  6463  000C8E  242E               	addwf	drawCircle@y,w,c
  6464  000C90  6E18               	movwf	drawPixel@y,c
  6465  000C92  C022  F019         	movff	drawCircle@color,drawPixel@color
  6466  000C96  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6467  000C9A  501C               	movf	drawCircle@x0,w,c
  6468  000C9C  242C               	addwf	drawCircle@x,w,c
  6469  000C9E  EC62  F010         	call	_drawPixel
  6470                           
  6471                           ;ST7735_TFT.c: 547: drawPixel(x0 - x, y0 + y, color);
  6472  000CA2  501E               	movf	drawCircle@y0,w,c
  6473  000CA4  242E               	addwf	drawCircle@y,w,c
  6474  000CA6  6E18               	movwf	drawPixel@y,c
  6475  000CA8  C022  F019         	movff	drawCircle@color,drawPixel@color
  6476  000CAC  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6477  000CB0  502C               	movf	drawCircle@x,w,c
  6478  000CB2  0800               	sublw	0
  6479  000CB4  241C               	addwf	drawCircle@x0,w,c
  6480  000CB6  EC62  F010         	call	_drawPixel
  6481                           
  6482                           ;ST7735_TFT.c: 548: drawPixel(x0 + x, y0 - y, color);
  6483  000CBA  502E               	movf	drawCircle@y,w,c
  6484  000CBC  0800               	sublw	0
  6485  000CBE  241E               	addwf	drawCircle@y0,w,c
  6486  000CC0  6E18               	movwf	drawPixel@y,c
  6487  000CC2  C022  F019         	movff	drawCircle@color,drawPixel@color
  6488  000CC6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6489  000CCA  501C               	movf	drawCircle@x0,w,c
  6490  000CCC  242C               	addwf	drawCircle@x,w,c
  6491  000CCE  EC62  F010         	call	_drawPixel
  6492                           
  6493                           ;ST7735_TFT.c: 549: drawPixel(x0 - x, y0 - y, color);
  6494  000CD2  502E               	movf	drawCircle@y,w,c
  6495  000CD4  0800               	sublw	0
  6496  000CD6  241E               	addwf	drawCircle@y0,w,c
  6497  000CD8  6E18               	movwf	drawPixel@y,c
  6498  000CDA  C022  F019         	movff	drawCircle@color,drawPixel@color
  6499  000CDE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6500  000CE2  502C               	movf	drawCircle@x,w,c
  6501  000CE4  0800               	sublw	0
  6502  000CE6  241C               	addwf	drawCircle@x0,w,c
  6503  000CE8  EC62  F010         	call	_drawPixel
  6504                           
  6505                           ;ST7735_TFT.c: 550: drawPixel(x0 + y, y0 + x, color);
  6506  000CEC  501E               	movf	drawCircle@y0,w,c
  6507  000CEE  242C               	addwf	drawCircle@x,w,c
  6508  000CF0  6E18               	movwf	drawPixel@y,c
  6509  000CF2  C022  F019         	movff	drawCircle@color,drawPixel@color
  6510  000CF6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6511  000CFA  501C               	movf	drawCircle@x0,w,c
  6512  000CFC  242E               	addwf	drawCircle@y,w,c
  6513  000CFE  EC62  F010         	call	_drawPixel
  6514                           
  6515                           ;ST7735_TFT.c: 551: drawPixel(x0 - y, y0 + x, color);
  6516  000D02  501E               	movf	drawCircle@y0,w,c
  6517  000D04  242C               	addwf	drawCircle@x,w,c
  6518  000D06  6E18               	movwf	drawPixel@y,c
  6519  000D08  C022  F019         	movff	drawCircle@color,drawPixel@color
  6520  000D0C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6521  000D10  502E               	movf	drawCircle@y,w,c
  6522  000D12  0800               	sublw	0
  6523  000D14  241C               	addwf	drawCircle@x0,w,c
  6524  000D16  EC62  F010         	call	_drawPixel
  6525                           
  6526                           ;ST7735_TFT.c: 552: drawPixel(x0 + y, y0 - x, color);
  6527  000D1A  502C               	movf	drawCircle@x,w,c
  6528  000D1C  0800               	sublw	0
  6529  000D1E  241E               	addwf	drawCircle@y0,w,c
  6530  000D20  6E18               	movwf	drawPixel@y,c
  6531  000D22  C022  F019         	movff	drawCircle@color,drawPixel@color
  6532  000D26  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6533  000D2A  501C               	movf	drawCircle@x0,w,c
  6534  000D2C  242E               	addwf	drawCircle@y,w,c
  6535  000D2E  EC62  F010         	call	_drawPixel
  6536                           
  6537                           ;ST7735_TFT.c: 553: drawPixel(x0 - y, y0 - x, color);
  6538  000D32  502C               	movf	drawCircle@x,w,c
  6539  000D34  0800               	sublw	0
  6540  000D36  241E               	addwf	drawCircle@y0,w,c
  6541  000D38  6E18               	movwf	drawPixel@y,c
  6542  000D3A  C022  F019         	movff	drawCircle@color,drawPixel@color
  6543  000D3E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6544  000D42  502E               	movf	drawCircle@y,w,c
  6545  000D44  0800               	sublw	0
  6546  000D46  241C               	addwf	drawCircle@x0,w,c
  6547  000D48  EC62  F010         	call	_drawPixel
  6548  000D4C  D000               	goto	l6299
  6549  000D4E                     l6299:
  6550  000D4E  502E               	movf	drawCircle@y,w,c
  6551  000D50  5C2C               	subwf	drawCircle@x,w,c
  6552  000D52  502D               	movf	drawCircle@x+1,w,c
  6553  000D54  0A80               	xorlw	128
  6554  000D56  6E24               	movwf	??_drawCircle& (0+255),c
  6555  000D58  502F               	movf	drawCircle@y+1,w,c
  6556  000D5A  0A80               	xorlw	128
  6557  000D5C  5824               	subwfb	??_drawCircle& (0+255),w,c
  6558  000D5E  A0D8               	btfss	status,0,c
  6559  000D60  D77E               	goto	l6271
  6560  000D62  0012               	return		;funcret
  6561  000D64                     __end_of_drawCircle:
  6562                           	opt stack 0
  6563                           tblptru	equ	0xFF8
  6564                           tblptrh	equ	0xFF7
  6565                           tblptrl	equ	0xFF6
  6566                           tablat	equ	0xFF5
  6567                           prodh	equ	0xFF4
  6568                           prodl	equ	0xFF3
  6569                           intcon	equ	0xFF2
  6570                           intcon2	equ	0xFF1
  6571                           postinc0	equ	0xFEE
  6572                           wreg	equ	0xFE8
  6573                           postdec1	equ	0xFE5
  6574                           fsr1l	equ	0xFE1
  6575                           indf2	equ	0xFDF
  6576                           postinc2	equ	0xFDE
  6577                           postdec2	equ	0xFDD
  6578                           fsr2h	equ	0xFDA
  6579                           fsr2l	equ	0xFD9
  6580                           status	equ	0xFD8
  6581                           
  6582 ;; *************** function _drawPixel *****************
  6583 ;; Defined at:
  6584 ;;		line 408 in file "ST7735_TFT.c"
  6585 ;; Parameters:    Size  Location     Type
  6586 ;;  x               1    wreg     unsigned char 
  6587 ;;  y               1   23[COMRAM] unsigned char 
  6588 ;;  color           2   24[COMRAM] unsigned int 
  6589 ;; Auto vars:     Size  Location     Type
  6590 ;;  x               1   26[COMRAM] unsigned char 
  6591 ;; Return value:  Size  Location     Type
  6592 ;;		None               void
  6593 ;; Registers used:
  6594 ;;		wreg, status,2, status,0, cstack
  6595 ;; Tracked objects:
  6596 ;;		On entry : 0/0
  6597 ;;		On exit  : 0/0
  6598 ;;		Unchanged: 0/0
  6599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6600 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6601 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6603 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6604 ;;Total ram usage:        4 bytes
  6605 ;; Hardware stack levels used:    1
  6606 ;; Hardware stack levels required when called:    6
  6607 ;; This function calls:
  6608 ;;		_setAddrWindow
  6609 ;;		_write_data
  6610 ;; This function is called by:
  6611 ;;		_drawChar
  6612 ;;		_drawCircle
  6613 ;;		_drawCircleHelper
  6614 ;; This function uses a non-reentrant model
  6615 ;;
  6616                           
  6617                           	psect	text22
  6618  0020C4                     __ptext22:
  6619                           	opt stack 0
  6620  0020C4                     _drawPixel:
  6621                           	opt stack 21
  6622                           
  6623                           ;incstack = 0
  6624                           ;drawPixel@x stored from wreg
  6625  0020C4  6E1B               	movwf	drawPixel@x,c
  6626                           
  6627                           ;ST7735_TFT.c: 410: if((x >= 128) || (y >= 160))
  6628  0020C6  0E80               	movlw	128
  6629  0020C8  601B               	cpfslt	drawPixel@x,c
  6630  0020CA  D013               	goto	l89
  6631  0020CC  0E9F               	movlw	159
  6632  0020CE  6418               	cpfsgt	drawPixel@y,c
  6633  0020D0  D001               	goto	l5713
  6634                           
  6635                           ;ST7735_TFT.c: 411: return;
  6636  0020D2  D00F               	goto	l89
  6637  0020D4                     l5713:
  6638                           
  6639                           ;ST7735_TFT.c: 412: setAddrWindow(x,y,x+1,y+1);
  6640  0020D4  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  6641  0020D8  281B               	incf	drawPixel@x,w,c
  6642  0020DA  6E15               	movwf	setAddrWindow@x1,c
  6643  0020DC  2818               	incf	drawPixel@y,w,c
  6644  0020DE  6E16               	movwf	setAddrWindow@y1,c
  6645  0020E0  501B               	movf	drawPixel@x,w,c
  6646  0020E2  EC13  F00F         	call	_setAddrWindow
  6647                           
  6648                           ;ST7735_TFT.c: 413: write_data(color >> 8);
  6649  0020E6  501A               	movf	drawPixel@color+1,w,c
  6650  0020E8  ECBA  F011         	call	_write_data
  6651                           
  6652                           ;ST7735_TFT.c: 414: write_data(color & 0xFF);
  6653  0020EC  5019               	movf	drawPixel@color,w,c
  6654  0020EE  ECBA  F011         	call	_write_data
  6655  0020F2                     l89:
  6656  0020F2  0012               	return		;funcret
  6657  0020F4                     __end_of_drawPixel:
  6658                           	opt stack 0
  6659                           tblptru	equ	0xFF8
  6660                           tblptrh	equ	0xFF7
  6661                           tblptrl	equ	0xFF6
  6662                           tablat	equ	0xFF5
  6663                           prodh	equ	0xFF4
  6664                           prodl	equ	0xFF3
  6665                           intcon	equ	0xFF2
  6666                           intcon2	equ	0xFF1
  6667                           postinc0	equ	0xFEE
  6668                           wreg	equ	0xFE8
  6669                           postdec1	equ	0xFE5
  6670                           fsr1l	equ	0xFE1
  6671                           indf2	equ	0xFDF
  6672                           postinc2	equ	0xFDE
  6673                           postdec2	equ	0xFDD
  6674                           fsr2h	equ	0xFDA
  6675                           fsr2l	equ	0xFD9
  6676                           status	equ	0xFD8
  6677                           
  6678 ;; *************** function _setAddrWindow *****************
  6679 ;; Defined at:
  6680 ;;		line 393 in file "ST7735_TFT.c"
  6681 ;; Parameters:    Size  Location     Type
  6682 ;;  x0              1    wreg     unsigned char 
  6683 ;;  y0              1   19[COMRAM] unsigned char 
  6684 ;;  x1              1   20[COMRAM] unsigned char 
  6685 ;;  y1              1   21[COMRAM] unsigned char 
  6686 ;; Auto vars:     Size  Location     Type
  6687 ;;  x0              1   22[COMRAM] unsigned char 
  6688 ;; Return value:  Size  Location     Type
  6689 ;;		None               void
  6690 ;; Registers used:
  6691 ;;		wreg, status,2, status,0, cstack
  6692 ;; Tracked objects:
  6693 ;;		On entry : 0/0
  6694 ;;		On exit  : 0/0
  6695 ;;		Unchanged: 0/0
  6696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6697 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6698 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6700 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6701 ;;Total ram usage:        4 bytes
  6702 ;; Hardware stack levels used:    1
  6703 ;; Hardware stack levels required when called:    5
  6704 ;; This function calls:
  6705 ;;		_write_command
  6706 ;;		_write_data
  6707 ;; This function is called by:
  6708 ;;		_drawPixel
  6709 ;;		_drawFastVLine
  6710 ;;		_fillRectangle
  6711 ;;		_drawFastHLine
  6712 ;; This function uses a non-reentrant model
  6713 ;;
  6714                           
  6715                           	psect	text23
  6716  001E26                     __ptext23:
  6717                           	opt stack 0
  6718  001E26                     _setAddrWindow:
  6719                           	opt stack 20
  6720                           
  6721                           ;incstack = 0
  6722                           ;setAddrWindow@x0 stored from wreg
  6723  001E26  6E17               	movwf	setAddrWindow@x0,c
  6724                           
  6725                           ;ST7735_TFT.c: 395: write_command(0x2A);
  6726  001E28  0E2A               	movlw	42
  6727  001E2A  ECC2  F011         	call	_write_command
  6728                           
  6729                           ;ST7735_TFT.c: 396: write_data(0);
  6730  001E2E  0E00               	movlw	0
  6731  001E30  ECBA  F011         	call	_write_data
  6732                           
  6733                           ;ST7735_TFT.c: 397: write_data(x0 + colstart);
  6734  001E34  5017               	movf	setAddrWindow@x0,w,c
  6735  001E36  2459               	addwf	_colstart,w,c
  6736  001E38  ECBA  F011         	call	_write_data
  6737                           
  6738                           ;ST7735_TFT.c: 398: write_data(0);
  6739  001E3C  0E00               	movlw	0
  6740  001E3E  ECBA  F011         	call	_write_data
  6741                           
  6742                           ;ST7735_TFT.c: 399: write_data(x1 + colstart);
  6743  001E42  5015               	movf	setAddrWindow@x1,w,c
  6744  001E44  2459               	addwf	_colstart,w,c
  6745  001E46  ECBA  F011         	call	_write_data
  6746                           
  6747                           ;ST7735_TFT.c: 400: write_command(0x2B);
  6748  001E4A  0E2B               	movlw	43
  6749  001E4C  ECC2  F011         	call	_write_command
  6750                           
  6751                           ;ST7735_TFT.c: 401: write_data(0);
  6752  001E50  0E00               	movlw	0
  6753  001E52  ECBA  F011         	call	_write_data
  6754                           
  6755                           ;ST7735_TFT.c: 402: write_data(y0 + rowstart);
  6756  001E56  5014               	movf	setAddrWindow@y0,w,c
  6757  001E58  2461               	addwf	_rowstart,w,c
  6758  001E5A  ECBA  F011         	call	_write_data
  6759                           
  6760                           ;ST7735_TFT.c: 403: write_data(0);
  6761  001E5E  0E00               	movlw	0
  6762  001E60  ECBA  F011         	call	_write_data
  6763                           
  6764                           ;ST7735_TFT.c: 404: write_data(y1 + rowstart);
  6765  001E64  5016               	movf	setAddrWindow@y1,w,c
  6766  001E66  2461               	addwf	_rowstart,w,c
  6767  001E68  ECBA  F011         	call	_write_data
  6768                           
  6769                           ;ST7735_TFT.c: 405: write_command(0x2C);
  6770  001E6C  0E2C               	movlw	44
  6771  001E6E  ECC2  F011         	call	_write_command
  6772  001E72  0012               	return		;funcret
  6773  001E74                     __end_of_setAddrWindow:
  6774                           	opt stack 0
  6775                           tblptru	equ	0xFF8
  6776                           tblptrh	equ	0xFF7
  6777                           tblptrl	equ	0xFF6
  6778                           tablat	equ	0xFF5
  6779                           prodh	equ	0xFF4
  6780                           prodl	equ	0xFF3
  6781                           intcon	equ	0xFF2
  6782                           intcon2	equ	0xFF1
  6783                           postinc0	equ	0xFEE
  6784                           wreg	equ	0xFE8
  6785                           postdec1	equ	0xFE5
  6786                           fsr1l	equ	0xFE1
  6787                           indf2	equ	0xFDF
  6788                           postinc2	equ	0xFDE
  6789                           postdec2	equ	0xFDD
  6790                           fsr2h	equ	0xFDA
  6791                           fsr2l	equ	0xFD9
  6792                           status	equ	0xFD8
  6793                           
  6794 ;; *************** function _TFT_GreenTab_Initialize *****************
  6795 ;; Defined at:
  6796 ;;		line 645 in file "ST7735_TFT.c"
  6797 ;; Parameters:    Size  Location     Type
  6798 ;;		None
  6799 ;; Auto vars:     Size  Location     Type
  6800 ;;		None
  6801 ;; Return value:  Size  Location     Type
  6802 ;;		None               void
  6803 ;; Registers used:
  6804 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6805 ;; Tracked objects:
  6806 ;;		On entry : 0/0
  6807 ;;		On exit  : 0/0
  6808 ;;		Unchanged: 0/0
  6809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6814 ;;Total ram usage:        0 bytes
  6815 ;; Hardware stack levels used:    1
  6816 ;; Hardware stack levels required when called:    6
  6817 ;; This function calls:
  6818 ;;		_Rcmd1
  6819 ;;		_Rcmd2red
  6820 ;;		_Rcmd3
  6821 ;;		_write_command
  6822 ;;		_write_data
  6823 ;; This function is called by:
  6824 ;;		_Initialize_Screen
  6825 ;; This function uses a non-reentrant model
  6826 ;;
  6827                           
  6828                           	psect	text24
  6829  0020F4                     __ptext24:
  6830                           	opt stack 0
  6831  0020F4                     _TFT_GreenTab_Initialize:
  6832                           	opt stack 23
  6833                           
  6834                           ;ST7735_TFT.c: 647: PORTDbits.RD1 = 1;
  6835                           
  6836                           ;incstack = 0
  6837  0020F4  8283               	bsf	3971,1,c	;volatile
  6838                           
  6839                           ;ST7735_TFT.c: 648: PORTDbits.RD0 = 0;
  6840  0020F6  9083               	bcf	3971,0,c	;volatile
  6841                           
  6842                           ;ST7735_TFT.c: 650: SSPSTAT=0x80;
  6843  0020F8  0E80               	movlw	128
  6844  0020FA  6EC7               	movwf	4039,c	;volatile
  6845                           
  6846                           ;ST7735_TFT.c: 651: SSPCON1=0x30;
  6847  0020FC  0E30               	movlw	48
  6848  0020FE  6EC6               	movwf	4038,c	;volatile
  6849                           
  6850                           ;ST7735_TFT.c: 654: Rcmd1();
  6851  002100  EC15  F008         	call	_Rcmd1	;wreg free
  6852                           
  6853                           ;ST7735_TFT.c: 655: Rcmd2red();
  6854  002104  ECED  F00F         	call	_Rcmd2red	;wreg free
  6855                           
  6856                           ;ST7735_TFT.c: 656: Rcmd3();
  6857  002108  EC9E  F009         	call	_Rcmd3	;wreg free
  6858                           
  6859                           ;ST7735_TFT.c: 657: write_command(0x36);
  6860  00210C  0E36               	movlw	54
  6861  00210E  ECC2  F011         	call	_write_command
  6862                           
  6863                           ;ST7735_TFT.c: 658: write_data(0xC0);
  6864  002112  0EC0               	movlw	192
  6865  002114  ECBA  F011         	call	_write_data
  6866                           
  6867                           ;ST7735_TFT.c: 659: _tft_type = 1;
  6868  002118  0E01               	movlw	1
  6869  00211A  6E53               	movwf	__tft_type,c
  6870  00211C  0012               	return		;funcret
  6871  00211E                     __end_of_TFT_GreenTab_Initialize:
  6872                           	opt stack 0
  6873                           tblptru	equ	0xFF8
  6874                           tblptrh	equ	0xFF7
  6875                           tblptrl	equ	0xFF6
  6876                           tablat	equ	0xFF5
  6877                           prodh	equ	0xFF4
  6878                           prodl	equ	0xFF3
  6879                           intcon	equ	0xFF2
  6880                           intcon2	equ	0xFF1
  6881                           postinc0	equ	0xFEE
  6882                           wreg	equ	0xFE8
  6883                           postdec1	equ	0xFE5
  6884                           fsr1l	equ	0xFE1
  6885                           indf2	equ	0xFDF
  6886                           postinc2	equ	0xFDE
  6887                           postdec2	equ	0xFDD
  6888                           fsr2h	equ	0xFDA
  6889                           fsr2l	equ	0xFD9
  6890                           status	equ	0xFD8
  6891                           
  6892 ;; *************** function _Rcmd3 *****************
  6893 ;; Defined at:
  6894 ;;		line 339 in file "ST7735_TFT.c"
  6895 ;; Parameters:    Size  Location     Type
  6896 ;;		None
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;		None
  6899 ;; Return value:  Size  Location     Type
  6900 ;;		None               void
  6901 ;; Registers used:
  6902 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6903 ;; Tracked objects:
  6904 ;;		On entry : 0/0
  6905 ;;		On exit  : 0/0
  6906 ;;		Unchanged: 0/0
  6907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6912 ;;Total ram usage:        0 bytes
  6913 ;; Hardware stack levels used:    1
  6914 ;; Hardware stack levels required when called:    5
  6915 ;; This function calls:
  6916 ;;		_delay_ms
  6917 ;;		_write_command
  6918 ;;		_write_data
  6919 ;; This function is called by:
  6920 ;;		_TFT_GreenTab_Initialize
  6921 ;;		_TFT_BlackTab_Initialize
  6922 ;; This function uses a non-reentrant model
  6923 ;;
  6924                           
  6925                           	psect	text25
  6926  00133C                     __ptext25:
  6927                           	opt stack 0
  6928  00133C                     _Rcmd3:
  6929                           	opt stack 23
  6930                           
  6931                           ;ST7735_TFT.c: 341: write_command(0xE0);
  6932                           
  6933                           ;incstack = 0
  6934  00133C  0EE0               	movlw	224
  6935  00133E  ECC2  F011         	call	_write_command
  6936                           
  6937                           ;ST7735_TFT.c: 342: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  6938  001342  0E02               	movlw	2
  6939  001344  ECBA  F011         	call	_write_data
  6940  001348  0E1C               	movlw	28
  6941  00134A  ECBA  F011         	call	_write_data
  6942  00134E  0E07               	movlw	7
  6943  001350  ECBA  F011         	call	_write_data
  6944  001354  0E12               	movlw	18
  6945  001356  ECBA  F011         	call	_write_data
  6946                           
  6947                           ;ST7735_TFT.c: 343: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  6948  00135A  0E37               	movlw	55
  6949  00135C  ECBA  F011         	call	_write_data
  6950  001360  0E32               	movlw	50
  6951  001362  ECBA  F011         	call	_write_data
  6952  001366  0E29               	movlw	41
  6953  001368  ECBA  F011         	call	_write_data
  6954  00136C  0E2D               	movlw	45
  6955  00136E  ECBA  F011         	call	_write_data
  6956                           
  6957                           ;ST7735_TFT.c: 344: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  6958  001372  0E29               	movlw	41
  6959  001374  ECBA  F011         	call	_write_data
  6960  001378  0E25               	movlw	37
  6961  00137A  ECBA  F011         	call	_write_data
  6962  00137E  0E2B               	movlw	43
  6963  001380  ECBA  F011         	call	_write_data
  6964  001384  0E39               	movlw	57
  6965  001386  ECBA  F011         	call	_write_data
  6966                           
  6967                           ;ST7735_TFT.c: 345: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  6968  00138A  0E00               	movlw	0
  6969  00138C  ECBA  F011         	call	_write_data
  6970  001390  0E01               	movlw	1
  6971  001392  ECBA  F011         	call	_write_data
  6972  001396  0E03               	movlw	3
  6973  001398  ECBA  F011         	call	_write_data
  6974  00139C  0E10               	movlw	16
  6975  00139E  ECBA  F011         	call	_write_data
  6976                           
  6977                           ;ST7735_TFT.c: 346: write_command(0xE1);
  6978  0013A2  0EE1               	movlw	225
  6979  0013A4  ECC2  F011         	call	_write_command
  6980                           
  6981                           ;ST7735_TFT.c: 347: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  6982  0013A8  0E03               	movlw	3
  6983  0013AA  ECBA  F011         	call	_write_data
  6984  0013AE  0E1D               	movlw	29
  6985  0013B0  ECBA  F011         	call	_write_data
  6986  0013B4  0E07               	movlw	7
  6987  0013B6  ECBA  F011         	call	_write_data
  6988  0013BA  0E06               	movlw	6
  6989  0013BC  ECBA  F011         	call	_write_data
  6990                           
  6991                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  6992  0013C0  0E2E               	movlw	46
  6993  0013C2  ECBA  F011         	call	_write_data
  6994  0013C6  0E2C               	movlw	44
  6995  0013C8  ECBA  F011         	call	_write_data
  6996  0013CC  0E29               	movlw	41
  6997  0013CE  ECBA  F011         	call	_write_data
  6998  0013D2  0E2D               	movlw	45
  6999  0013D4  ECBA  F011         	call	_write_data
  7000                           
  7001                           ;ST7735_TFT.c: 349: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  7002  0013D8  0E2E               	movlw	46
  7003  0013DA  ECBA  F011         	call	_write_data
  7004  0013DE  0E2E               	movlw	46
  7005  0013E0  ECBA  F011         	call	_write_data
  7006  0013E4  0E37               	movlw	55
  7007  0013E6  ECBA  F011         	call	_write_data
  7008  0013EA  0E3F               	movlw	63
  7009  0013EC  ECBA  F011         	call	_write_data
  7010                           
  7011                           ;ST7735_TFT.c: 350: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  7012  0013F0  0E00               	movlw	0
  7013  0013F2  ECBA  F011         	call	_write_data
  7014  0013F6  0E00               	movlw	0
  7015  0013F8  ECBA  F011         	call	_write_data
  7016  0013FC  0E02               	movlw	2
  7017  0013FE  ECBA  F011         	call	_write_data
  7018  001402  0E10               	movlw	16
  7019  001404  ECBA  F011         	call	_write_data
  7020                           
  7021                           ;ST7735_TFT.c: 351: write_command(0x13);
  7022  001408  0E13               	movlw	19
  7023  00140A  ECC2  F011         	call	_write_command
  7024                           
  7025                           ;ST7735_TFT.c: 352: delay_ms(10);
  7026  00140E  0E00               	movlw	0
  7027  001410  6E18               	movwf	delay_ms@ms+1,c
  7028  001412  0E0A               	movlw	10
  7029  001414  6E17               	movwf	delay_ms@ms,c
  7030  001416  ECEA  F00E         	call	_delay_ms	;wreg free
  7031                           
  7032                           ;ST7735_TFT.c: 353: write_command(0x29);
  7033  00141A  0E29               	movlw	41
  7034  00141C  ECC2  F011         	call	_write_command
  7035                           
  7036                           ;ST7735_TFT.c: 354: delay_ms(100);
  7037  001420  0E00               	movlw	0
  7038  001422  6E18               	movwf	delay_ms@ms+1,c
  7039  001424  0E64               	movlw	100
  7040  001426  6E17               	movwf	delay_ms@ms,c
  7041  001428  ECEA  F00E         	call	_delay_ms	;wreg free
  7042  00142C  0012               	return		;funcret
  7043  00142E                     __end_of_Rcmd3:
  7044                           	opt stack 0
  7045                           tblptru	equ	0xFF8
  7046                           tblptrh	equ	0xFF7
  7047                           tblptrl	equ	0xFF6
  7048                           tablat	equ	0xFF5
  7049                           prodh	equ	0xFF4
  7050                           prodl	equ	0xFF3
  7051                           intcon	equ	0xFF2
  7052                           intcon2	equ	0xFF1
  7053                           postinc0	equ	0xFEE
  7054                           wreg	equ	0xFE8
  7055                           postdec1	equ	0xFE5
  7056                           fsr1l	equ	0xFE1
  7057                           indf2	equ	0xFDF
  7058                           postinc2	equ	0xFDE
  7059                           postdec2	equ	0xFDD
  7060                           fsr2h	equ	0xFDA
  7061                           fsr2l	equ	0xFD9
  7062                           status	equ	0xFD8
  7063                           
  7064 ;; *************** function _Rcmd2red *****************
  7065 ;; Defined at:
  7066 ;;		line 329 in file "ST7735_TFT.c"
  7067 ;; Parameters:    Size  Location     Type
  7068 ;;		None
  7069 ;; Auto vars:     Size  Location     Type
  7070 ;;		None
  7071 ;; Return value:  Size  Location     Type
  7072 ;;		None               void
  7073 ;; Registers used:
  7074 ;;		wreg, status,2, cstack
  7075 ;; Tracked objects:
  7076 ;;		On entry : 0/0
  7077 ;;		On exit  : 0/0
  7078 ;;		Unchanged: 0/0
  7079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7084 ;;Total ram usage:        0 bytes
  7085 ;; Hardware stack levels used:    1
  7086 ;; Hardware stack levels required when called:    5
  7087 ;; This function calls:
  7088 ;;		_write_command
  7089 ;;		_write_data
  7090 ;; This function is called by:
  7091 ;;		_TFT_GreenTab_Initialize
  7092 ;; This function uses a non-reentrant model
  7093 ;;
  7094                           
  7095                           	psect	text26
  7096  001FDA                     __ptext26:
  7097                           	opt stack 0
  7098  001FDA                     _Rcmd2red:
  7099                           	opt stack 23
  7100                           
  7101                           ;ST7735_TFT.c: 331: write_command(0x2A);
  7102                           
  7103                           ;incstack = 0
  7104  001FDA  0E2A               	movlw	42
  7105  001FDC  ECC2  F011         	call	_write_command
  7106                           
  7107                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x00);
  7108  001FE0  0E00               	movlw	0
  7109  001FE2  ECBA  F011         	call	_write_data
  7110  001FE6  0E00               	movlw	0
  7111  001FE8  ECBA  F011         	call	_write_data
  7112                           
  7113                           ;ST7735_TFT.c: 333: write_data(0x00); write_data(0x7F);
  7114  001FEC  0E00               	movlw	0
  7115  001FEE  ECBA  F011         	call	_write_data
  7116  001FF2  0E7F               	movlw	127
  7117  001FF4  ECBA  F011         	call	_write_data
  7118                           
  7119                           ;ST7735_TFT.c: 334: write_command(0x2B);
  7120  001FF8  0E2B               	movlw	43
  7121  001FFA  ECC2  F011         	call	_write_command
  7122                           
  7123                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x00);
  7124  001FFE  0E00               	movlw	0
  7125  002000  ECBA  F011         	call	_write_data
  7126  002004  0E00               	movlw	0
  7127  002006  ECBA  F011         	call	_write_data
  7128                           
  7129                           ;ST7735_TFT.c: 336: write_data(0x00); write_data(0x9F);
  7130  00200A  0E00               	movlw	0
  7131  00200C  ECBA  F011         	call	_write_data
  7132  002010  0E9F               	movlw	159
  7133  002012  ECBA  F011         	call	_write_data
  7134  002016  0012               	return		;funcret
  7135  002018                     __end_of_Rcmd2red:
  7136                           	opt stack 0
  7137                           tblptru	equ	0xFF8
  7138                           tblptrh	equ	0xFF7
  7139                           tblptrl	equ	0xFF6
  7140                           tablat	equ	0xFF5
  7141                           prodh	equ	0xFF4
  7142                           prodl	equ	0xFF3
  7143                           intcon	equ	0xFF2
  7144                           intcon2	equ	0xFF1
  7145                           postinc0	equ	0xFEE
  7146                           wreg	equ	0xFE8
  7147                           postdec1	equ	0xFE5
  7148                           fsr1l	equ	0xFE1
  7149                           indf2	equ	0xFDF
  7150                           postinc2	equ	0xFDE
  7151                           postdec2	equ	0xFDD
  7152                           fsr2h	equ	0xFDA
  7153                           fsr2l	equ	0xFD9
  7154                           status	equ	0xFD8
  7155                           
  7156 ;; *************** function _Rcmd1 *****************
  7157 ;; Defined at:
  7158 ;;		line 282 in file "ST7735_TFT.c"
  7159 ;; Parameters:    Size  Location     Type
  7160 ;;		None
  7161 ;; Auto vars:     Size  Location     Type
  7162 ;;		None
  7163 ;; Return value:  Size  Location     Type
  7164 ;;		None               void
  7165 ;; Registers used:
  7166 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7167 ;; Tracked objects:
  7168 ;;		On entry : 0/0
  7169 ;;		On exit  : 0/0
  7170 ;;		Unchanged: 0/0
  7171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7176 ;;Total ram usage:        0 bytes
  7177 ;; Hardware stack levels used:    1
  7178 ;; Hardware stack levels required when called:    5
  7179 ;; This function calls:
  7180 ;;		_delay_ms
  7181 ;;		_write_command
  7182 ;;		_write_data
  7183 ;; This function is called by:
  7184 ;;		_TFT_GreenTab_Initialize
  7185 ;;		_TFT_BlackTab_Initialize
  7186 ;; This function uses a non-reentrant model
  7187 ;;
  7188                           
  7189                           	psect	text27
  7190  00102A                     __ptext27:
  7191                           	opt stack 0
  7192  00102A                     _Rcmd1:
  7193                           	opt stack 23
  7194                           
  7195                           ;ST7735_TFT.c: 284: write_command(0x01);
  7196                           
  7197                           ;incstack = 0
  7198  00102A  0E01               	movlw	1
  7199  00102C  ECC2  F011         	call	_write_command
  7200                           
  7201                           ;ST7735_TFT.c: 285: delay_ms(150);
  7202  001030  0E00               	movlw	0
  7203  001032  6E18               	movwf	delay_ms@ms+1,c
  7204  001034  0E96               	movlw	150
  7205  001036  6E17               	movwf	delay_ms@ms,c
  7206  001038  ECEA  F00E         	call	_delay_ms	;wreg free
  7207                           
  7208                           ;ST7735_TFT.c: 286: write_command(0x11);
  7209  00103C  0E11               	movlw	17
  7210  00103E  ECC2  F011         	call	_write_command
  7211                           
  7212                           ;ST7735_TFT.c: 287: delay_ms(500);
  7213  001042  0E01               	movlw	1
  7214  001044  6E18               	movwf	delay_ms@ms+1,c
  7215  001046  0EF4               	movlw	244
  7216  001048  6E17               	movwf	delay_ms@ms,c
  7217  00104A  ECEA  F00E         	call	_delay_ms	;wreg free
  7218                           
  7219                           ;ST7735_TFT.c: 288: write_command(0xB1);
  7220  00104E  0EB1               	movlw	177
  7221  001050  ECC2  F011         	call	_write_command
  7222                           
  7223                           ;ST7735_TFT.c: 289: write_data(0x01);
  7224  001054  0E01               	movlw	1
  7225  001056  ECBA  F011         	call	_write_data
  7226                           
  7227                           ;ST7735_TFT.c: 290: write_data(0x2C);
  7228  00105A  0E2C               	movlw	44
  7229  00105C  ECBA  F011         	call	_write_data
  7230                           
  7231                           ;ST7735_TFT.c: 291: write_data(0x2D);
  7232  001060  0E2D               	movlw	45
  7233  001062  ECBA  F011         	call	_write_data
  7234                           
  7235                           ;ST7735_TFT.c: 292: write_command(0xB2);
  7236  001066  0EB2               	movlw	178
  7237  001068  ECC2  F011         	call	_write_command
  7238                           
  7239                           ;ST7735_TFT.c: 293: write_data(0x01);
  7240  00106C  0E01               	movlw	1
  7241  00106E  ECBA  F011         	call	_write_data
  7242                           
  7243                           ;ST7735_TFT.c: 294: write_data(0x2C);
  7244  001072  0E2C               	movlw	44
  7245  001074  ECBA  F011         	call	_write_data
  7246                           
  7247                           ;ST7735_TFT.c: 295: write_data(0x2D);
  7248  001078  0E2D               	movlw	45
  7249  00107A  ECBA  F011         	call	_write_data
  7250                           
  7251                           ;ST7735_TFT.c: 296: write_command(0xB3);
  7252  00107E  0EB3               	movlw	179
  7253  001080  ECC2  F011         	call	_write_command
  7254                           
  7255                           ;ST7735_TFT.c: 297: write_data(0x01);
  7256  001084  0E01               	movlw	1
  7257  001086  ECBA  F011         	call	_write_data
  7258                           
  7259                           ;ST7735_TFT.c: 298: write_data(0x2C);
  7260  00108A  0E2C               	movlw	44
  7261  00108C  ECBA  F011         	call	_write_data
  7262                           
  7263                           ;ST7735_TFT.c: 299: write_data(0x2D);
  7264  001090  0E2D               	movlw	45
  7265  001092  ECBA  F011         	call	_write_data
  7266                           
  7267                           ;ST7735_TFT.c: 300: write_data(0x01);
  7268  001096  0E01               	movlw	1
  7269  001098  ECBA  F011         	call	_write_data
  7270                           
  7271                           ;ST7735_TFT.c: 301: write_data(0x2C);
  7272  00109C  0E2C               	movlw	44
  7273  00109E  ECBA  F011         	call	_write_data
  7274                           
  7275                           ;ST7735_TFT.c: 302: write_data(0x2D);
  7276  0010A2  0E2D               	movlw	45
  7277  0010A4  ECBA  F011         	call	_write_data
  7278                           
  7279                           ;ST7735_TFT.c: 303: write_command(0xB4);
  7280  0010A8  0EB4               	movlw	180
  7281  0010AA  ECC2  F011         	call	_write_command
  7282                           
  7283                           ;ST7735_TFT.c: 304: write_data(0x07);
  7284  0010AE  0E07               	movlw	7
  7285  0010B0  ECBA  F011         	call	_write_data
  7286                           
  7287                           ;ST7735_TFT.c: 305: write_command(0xC0);
  7288  0010B4  0EC0               	movlw	192
  7289  0010B6  ECC2  F011         	call	_write_command
  7290                           
  7291                           ;ST7735_TFT.c: 306: write_data(0xA2);
  7292  0010BA  0EA2               	movlw	162
  7293  0010BC  ECBA  F011         	call	_write_data
  7294                           
  7295                           ;ST7735_TFT.c: 307: write_data(0x02);
  7296  0010C0  0E02               	movlw	2
  7297  0010C2  ECBA  F011         	call	_write_data
  7298                           
  7299                           ;ST7735_TFT.c: 308: write_data(0x84);
  7300  0010C6  0E84               	movlw	132
  7301  0010C8  ECBA  F011         	call	_write_data
  7302                           
  7303                           ;ST7735_TFT.c: 309: write_command(0xC1);
  7304  0010CC  0EC1               	movlw	193
  7305  0010CE  ECC2  F011         	call	_write_command
  7306                           
  7307                           ;ST7735_TFT.c: 310: write_data(0xC5);
  7308  0010D2  0EC5               	movlw	197
  7309  0010D4  ECBA  F011         	call	_write_data
  7310                           
  7311                           ;ST7735_TFT.c: 311: write_command(0xC2);
  7312  0010D8  0EC2               	movlw	194
  7313  0010DA  ECC2  F011         	call	_write_command
  7314                           
  7315                           ;ST7735_TFT.c: 312: write_data(0x0A);
  7316  0010DE  0E0A               	movlw	10
  7317  0010E0  ECBA  F011         	call	_write_data
  7318                           
  7319                           ;ST7735_TFT.c: 313: write_data(0x00);
  7320  0010E4  0E00               	movlw	0
  7321  0010E6  ECBA  F011         	call	_write_data
  7322                           
  7323                           ;ST7735_TFT.c: 314: write_command(0xC3);
  7324  0010EA  0EC3               	movlw	195
  7325  0010EC  ECC2  F011         	call	_write_command
  7326                           
  7327                           ;ST7735_TFT.c: 315: write_data(0x8A);
  7328  0010F0  0E8A               	movlw	138
  7329  0010F2  ECBA  F011         	call	_write_data
  7330                           
  7331                           ;ST7735_TFT.c: 316: write_data(0x2A);
  7332  0010F6  0E2A               	movlw	42
  7333  0010F8  ECBA  F011         	call	_write_data
  7334                           
  7335                           ;ST7735_TFT.c: 317: write_command(0xC4);
  7336  0010FC  0EC4               	movlw	196
  7337  0010FE  ECC2  F011         	call	_write_command
  7338                           
  7339                           ;ST7735_TFT.c: 318: write_data(0x8A);
  7340  001102  0E8A               	movlw	138
  7341  001104  ECBA  F011         	call	_write_data
  7342                           
  7343                           ;ST7735_TFT.c: 319: write_data(0xEE);
  7344  001108  0EEE               	movlw	238
  7345  00110A  ECBA  F011         	call	_write_data
  7346                           
  7347                           ;ST7735_TFT.c: 320: write_command(0xC5);
  7348  00110E  0EC5               	movlw	197
  7349  001110  ECC2  F011         	call	_write_command
  7350                           
  7351                           ;ST7735_TFT.c: 321: write_data(0x0E);
  7352  001114  0E0E               	movlw	14
  7353  001116  ECBA  F011         	call	_write_data
  7354                           
  7355                           ;ST7735_TFT.c: 322: write_command(0x20);
  7356  00111A  0E20               	movlw	32
  7357  00111C  ECC2  F011         	call	_write_command
  7358                           
  7359                           ;ST7735_TFT.c: 323: write_command(0x36);
  7360  001120  0E36               	movlw	54
  7361  001122  ECC2  F011         	call	_write_command
  7362                           
  7363                           ;ST7735_TFT.c: 324: write_data(0xC8);
  7364  001126  0EC8               	movlw	200
  7365  001128  ECBA  F011         	call	_write_data
  7366                           
  7367                           ;ST7735_TFT.c: 325: write_command(0x3A);
  7368  00112C  0E3A               	movlw	58
  7369  00112E  ECC2  F011         	call	_write_command
  7370                           
  7371                           ;ST7735_TFT.c: 326: write_data(0x05);
  7372  001132  0E05               	movlw	5
  7373  001134  ECBA  F011         	call	_write_data
  7374  001138  0012               	return		;funcret
  7375  00113A                     __end_of_Rcmd1:
  7376                           	opt stack 0
  7377                           tblptru	equ	0xFF8
  7378                           tblptrh	equ	0xFF7
  7379                           tblptrl	equ	0xFF6
  7380                           tablat	equ	0xFF5
  7381                           prodh	equ	0xFF4
  7382                           prodl	equ	0xFF3
  7383                           intcon	equ	0xFF2
  7384                           intcon2	equ	0xFF1
  7385                           postinc0	equ	0xFEE
  7386                           wreg	equ	0xFE8
  7387                           postdec1	equ	0xFE5
  7388                           fsr1l	equ	0xFE1
  7389                           indf2	equ	0xFDF
  7390                           postinc2	equ	0xFDE
  7391                           postdec2	equ	0xFDD
  7392                           fsr2h	equ	0xFDA
  7393                           fsr2l	equ	0xFD9
  7394                           status	equ	0xFD8
  7395                           
  7396 ;; *************** function _write_data *****************
  7397 ;; Defined at:
  7398 ;;		line 210 in file "ST7735_TFT.c"
  7399 ;; Parameters:    Size  Location     Type
  7400 ;;  data_           1    wreg     unsigned char 
  7401 ;; Auto vars:     Size  Location     Type
  7402 ;;  data_           1   18[COMRAM] unsigned char 
  7403 ;; Return value:  Size  Location     Type
  7404 ;;		None               void
  7405 ;; Registers used:
  7406 ;;		wreg, status,2, cstack
  7407 ;; Tracked objects:
  7408 ;;		On entry : 0/0
  7409 ;;		On exit  : 0/0
  7410 ;;		Unchanged: 0/0
  7411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7413 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7415 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7416 ;;Total ram usage:        1 bytes
  7417 ;; Hardware stack levels used:    1
  7418 ;; Hardware stack levels required when called:    4
  7419 ;; This function calls:
  7420 ;;		_spiwrite
  7421 ;; This function is called by:
  7422 ;;		_Rcmd1
  7423 ;;		_Rcmd2red
  7424 ;;		_Rcmd3
  7425 ;;		_setAddrWindow
  7426 ;;		_drawPixel
  7427 ;;		_TFT_GreenTab_Initialize
  7428 ;;		_Bcmd
  7429 ;;		_setScrollDefinition
  7430 ;;		_Rcmd2green
  7431 ;;		_VerticalScroll
  7432 ;; This function uses a non-reentrant model
  7433 ;;
  7434                           
  7435                           	psect	text28
  7436  002374                     __ptext28:
  7437                           	opt stack 0
  7438  002374                     _write_data:
  7439                           	opt stack 20
  7440                           
  7441                           ;incstack = 0
  7442                           ;write_data@data_ stored from wreg
  7443  002374  6E13               	movwf	write_data@data_,c
  7444                           
  7445                           ;ST7735_TFT.c: 212: PORTDbits.RD1 = 0;
  7446  002376  9283               	bcf	3971,1,c	;volatile
  7447                           
  7448                           ;ST7735_TFT.c: 213: PORTDbits.RD0 = 1;
  7449  002378  8083               	bsf	3971,0,c	;volatile
  7450                           
  7451                           ;ST7735_TFT.c: 214: spiwrite(data_);
  7452  00237A  5013               	movf	write_data@data_,w,c
  7453  00237C  EC5F  F011         	call	_spiwrite
  7454                           
  7455                           ;ST7735_TFT.c: 215: PORTDbits.RD1 = 1;
  7456  002380  8283               	bsf	3971,1,c	;volatile
  7457  002382  0012               	return		;funcret
  7458  002384                     __end_of_write_data:
  7459                           	opt stack 0
  7460                           tblptru	equ	0xFF8
  7461                           tblptrh	equ	0xFF7
  7462                           tblptrl	equ	0xFF6
  7463                           tablat	equ	0xFF5
  7464                           prodh	equ	0xFF4
  7465                           prodl	equ	0xFF3
  7466                           intcon	equ	0xFF2
  7467                           intcon2	equ	0xFF1
  7468                           postinc0	equ	0xFEE
  7469                           wreg	equ	0xFE8
  7470                           postdec1	equ	0xFE5
  7471                           fsr1l	equ	0xFE1
  7472                           indf2	equ	0xFDF
  7473                           postinc2	equ	0xFDE
  7474                           postdec2	equ	0xFDD
  7475                           fsr2h	equ	0xFDA
  7476                           fsr2l	equ	0xFD9
  7477                           status	equ	0xFD8
  7478                           
  7479 ;; *************** function _write_command *****************
  7480 ;; Defined at:
  7481 ;;		line 199 in file "ST7735_TFT.c"
  7482 ;; Parameters:    Size  Location     Type
  7483 ;;  cmd_            1    wreg     unsigned char 
  7484 ;; Auto vars:     Size  Location     Type
  7485 ;;  cmd_            1   18[COMRAM] unsigned char 
  7486 ;; Return value:  Size  Location     Type
  7487 ;;		None               void
  7488 ;; Registers used:
  7489 ;;		wreg, status,2, cstack
  7490 ;; Tracked objects:
  7491 ;;		On entry : 0/0
  7492 ;;		On exit  : 0/0
  7493 ;;		Unchanged: 0/0
  7494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7496 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7498 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7499 ;;Total ram usage:        1 bytes
  7500 ;; Hardware stack levels used:    1
  7501 ;; Hardware stack levels required when called:    4
  7502 ;; This function calls:
  7503 ;;		_spiwrite
  7504 ;; This function is called by:
  7505 ;;		_Rcmd1
  7506 ;;		_Rcmd2red
  7507 ;;		_Rcmd3
  7508 ;;		_setAddrWindow
  7509 ;;		_TFT_GreenTab_Initialize
  7510 ;;		_Bcmd
  7511 ;;		_setScrollDefinition
  7512 ;;		_Rcmd2green
  7513 ;;		_VerticalScroll
  7514 ;; This function uses a non-reentrant model
  7515 ;;
  7516                           
  7517                           	psect	text29
  7518  002384                     __ptext29:
  7519                           	opt stack 0
  7520  002384                     _write_command:
  7521                           	opt stack 20
  7522                           
  7523                           ;incstack = 0
  7524                           ;write_command@cmd_ stored from wreg
  7525  002384  6E13               	movwf	write_command@cmd_,c
  7526                           
  7527                           ;ST7735_TFT.c: 201: PORTDbits.RD1 = 0;
  7528  002386  9283               	bcf	3971,1,c	;volatile
  7529                           
  7530                           ;ST7735_TFT.c: 203: PORTDbits.RD0 = 0;
  7531  002388  9083               	bcf	3971,0,c	;volatile
  7532                           
  7533                           ;ST7735_TFT.c: 204: spiwrite(cmd_);
  7534  00238A  5013               	movf	write_command@cmd_,w,c
  7535  00238C  EC5F  F011         	call	_spiwrite
  7536                           
  7537                           ;ST7735_TFT.c: 206: PORTDbits.RD1 = 1;
  7538  002390  8283               	bsf	3971,1,c	;volatile
  7539  002392  0012               	return		;funcret
  7540  002394                     __end_of_write_command:
  7541                           	opt stack 0
  7542                           tblptru	equ	0xFF8
  7543                           tblptrh	equ	0xFF7
  7544                           tblptrl	equ	0xFF6
  7545                           tablat	equ	0xFF5
  7546                           prodh	equ	0xFF4
  7547                           prodl	equ	0xFF3
  7548                           intcon	equ	0xFF2
  7549                           intcon2	equ	0xFF1
  7550                           postinc0	equ	0xFEE
  7551                           wreg	equ	0xFE8
  7552                           postdec1	equ	0xFE5
  7553                           fsr1l	equ	0xFE1
  7554                           indf2	equ	0xFDF
  7555                           postinc2	equ	0xFDE
  7556                           postdec2	equ	0xFDD
  7557                           fsr2h	equ	0xFDA
  7558                           fsr2l	equ	0xFD9
  7559                           status	equ	0xFD8
  7560                           
  7561 ;; *************** function _spiwrite *****************
  7562 ;; Defined at:
  7563 ;;		line 190 in file "ST7735_TFT.c"
  7564 ;; Parameters:    Size  Location     Type
  7565 ;;  spidata         1    wreg     unsigned char 
  7566 ;; Auto vars:     Size  Location     Type
  7567 ;;  spidata         1   17[COMRAM] unsigned char 
  7568 ;;  x               1   16[COMRAM] unsigned char 
  7569 ;; Return value:  Size  Location     Type
  7570 ;;		None               void
  7571 ;; Registers used:
  7572 ;;		wreg
  7573 ;; Tracked objects:
  7574 ;;		On entry : 0/0
  7575 ;;		On exit  : 0/0
  7576 ;;		Unchanged: 0/0
  7577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7579 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7581 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7582 ;;Total ram usage:        2 bytes
  7583 ;; Hardware stack levels used:    1
  7584 ;; Hardware stack levels required when called:    3
  7585 ;; This function calls:
  7586 ;;		Nothing
  7587 ;; This function is called by:
  7588 ;;		_write_command
  7589 ;;		_write_data
  7590 ;;		_drawFastVLine
  7591 ;;		_fillRectangle
  7592 ;;		_drawFastHLine
  7593 ;; This function uses a non-reentrant model
  7594 ;;
  7595                           
  7596                           	psect	text30
  7597  0022BE                     __ptext30:
  7598                           	opt stack 0
  7599  0022BE                     _spiwrite:
  7600                           	opt stack 22
  7601                           
  7602                           ;incstack = 0
  7603                           ;spiwrite@spidata stored from wreg
  7604  0022BE  6E12               	movwf	spiwrite@spidata,c
  7605                           
  7606                           ;ST7735_TFT.c: 192: char x;
  7607                           ;ST7735_TFT.c: 193: PIR1bits.SSPIF = 0;
  7608  0022C0  969E               	bcf	3998,3,c	;volatile
  7609                           
  7610                           ;ST7735_TFT.c: 194: x = SSPBUF;
  7611  0022C2  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  7612                           
  7613                           ;ST7735_TFT.c: 195: SSPBUF = spidata;
  7614  0022C6  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  7615                           
  7616                           ;ST7735_TFT.c: 196: while (!SSPSTATbits.BF);
  7617  0022CA  D000               	goto	l45
  7618  0022CC                     l45:
  7619  0022CC  A0C7               	btfss	4039,0,c	;volatile
  7620  0022CE  D7FE               	goto	l45
  7621  0022D0  0012               	return		;funcret
  7622  0022D2                     __end_of_spiwrite:
  7623                           	opt stack 0
  7624                           tblptru	equ	0xFF8
  7625                           tblptrh	equ	0xFF7
  7626                           tblptrl	equ	0xFF6
  7627                           tablat	equ	0xFF5
  7628                           prodh	equ	0xFF4
  7629                           prodl	equ	0xFF3
  7630                           intcon	equ	0xFF2
  7631                           intcon2	equ	0xFF1
  7632                           postinc0	equ	0xFEE
  7633                           wreg	equ	0xFE8
  7634                           postdec1	equ	0xFE5
  7635                           fsr1l	equ	0xFE1
  7636                           indf2	equ	0xFDF
  7637                           postinc2	equ	0xFDE
  7638                           postdec2	equ	0xFDD
  7639                           fsr2h	equ	0xFDA
  7640                           fsr2l	equ	0xFD9
  7641                           status	equ	0xFD8
  7642                           
  7643 ;; *************** function _LCD_Reset *****************
  7644 ;; Defined at:
  7645 ;;		line 218 in file "ST7735_TFT.c"
  7646 ;; Parameters:    Size  Location     Type
  7647 ;;		None
  7648 ;; Auto vars:     Size  Location     Type
  7649 ;;		None
  7650 ;; Return value:  Size  Location     Type
  7651 ;;		None               void
  7652 ;; Registers used:
  7653 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7654 ;; Tracked objects:
  7655 ;;		On entry : 0/0
  7656 ;;		On exit  : 0/0
  7657 ;;		Unchanged: 0/0
  7658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7663 ;;Total ram usage:        0 bytes
  7664 ;; Hardware stack levels used:    1
  7665 ;; Hardware stack levels required when called:    5
  7666 ;; This function calls:
  7667 ;;		_delay_ms
  7668 ;; This function is called by:
  7669 ;;		_Initialize_Screen
  7670 ;; This function uses a non-reentrant model
  7671 ;;
  7672                           
  7673                           	psect	text31
  7674  0022E6                     __ptext31:
  7675                           	opt stack 0
  7676  0022E6                     _LCD_Reset:
  7677                           	opt stack 24
  7678                           
  7679                           ;ST7735_TFT.c: 220: PORTDbits.RD2 = 0;
  7680                           
  7681                           ;incstack = 0
  7682  0022E6  9483               	bcf	3971,2,c	;volatile
  7683                           
  7684                           ;ST7735_TFT.c: 221: delay_ms(100);
  7685  0022E8  0E00               	movlw	0
  7686  0022EA  6E18               	movwf	delay_ms@ms+1,c
  7687  0022EC  0E64               	movlw	100
  7688  0022EE  6E17               	movwf	delay_ms@ms,c
  7689  0022F0  ECEA  F00E         	call	_delay_ms	;wreg free
  7690                           
  7691                           ;ST7735_TFT.c: 222: PORTDbits.RD2 = 1;
  7692  0022F4  8483               	bsf	3971,2,c	;volatile
  7693  0022F6  0012               	return		;funcret
  7694  0022F8                     __end_of_LCD_Reset:
  7695                           	opt stack 0
  7696                           tblptru	equ	0xFF8
  7697                           tblptrh	equ	0xFF7
  7698                           tblptrl	equ	0xFF6
  7699                           tablat	equ	0xFF5
  7700                           prodh	equ	0xFF4
  7701                           prodl	equ	0xFF3
  7702                           intcon	equ	0xFF2
  7703                           intcon2	equ	0xFF1
  7704                           postinc0	equ	0xFEE
  7705                           wreg	equ	0xFE8
  7706                           postdec1	equ	0xFE5
  7707                           fsr1l	equ	0xFE1
  7708                           indf2	equ	0xFDF
  7709                           postinc2	equ	0xFDE
  7710                           postdec2	equ	0xFDD
  7711                           fsr2h	equ	0xFDA
  7712                           fsr2l	equ	0xFD9
  7713                           status	equ	0xFD8
  7714                           
  7715 ;; *************** function _delay_ms *****************
  7716 ;; Defined at:
  7717 ;;		line 65 in file "ST7735_TFT.c"
  7718 ;; Parameters:    Size  Location     Type
  7719 ;;  ms              2   22[COMRAM] int 
  7720 ;; Auto vars:     Size  Location     Type
  7721 ;;  count           2   26[COMRAM] int 
  7722 ;; Return value:  Size  Location     Type
  7723 ;;		None               void
  7724 ;; Registers used:
  7725 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7726 ;; Tracked objects:
  7727 ;;		On entry : 0/0
  7728 ;;		On exit  : 0/0
  7729 ;;		Unchanged: 0/0
  7730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7731 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7732 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7733 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7734 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7735 ;;Total ram usage:        6 bytes
  7736 ;; Hardware stack levels used:    1
  7737 ;; Hardware stack levels required when called:    4
  7738 ;; This function calls:
  7739 ;;		___wmul
  7740 ;; This function is called by:
  7741 ;;		_LCD_Reset
  7742 ;;		_Rcmd1
  7743 ;;		_Rcmd3
  7744 ;;		_Bcmd
  7745 ;; This function uses a non-reentrant model
  7746 ;;
  7747                           
  7748                           	psect	text32
  7749  001DD4                     __ptext32:
  7750                           	opt stack 0
  7751  001DD4                     _delay_ms:
  7752                           	opt stack 23
  7753                           
  7754                           ;ST7735_TFT.c: 71: int count;
  7755                           ;ST7735_TFT.c: 72: count = 8000000/4000/16 * ms;
  7756                           
  7757                           ;incstack = 0
  7758  001DD4  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  7759  001DD8  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  7760  001DDC  0E00               	movlw	0
  7761  001DDE  6E14               	movwf	___wmul@multiplicand+1,c
  7762  001DE0  0E7D               	movlw	125
  7763  001DE2  6E13               	movwf	___wmul@multiplicand,c
  7764  001DE4  EC8F  F010         	call	___wmul	;wreg free
  7765  001DE8  C011  F01B         	movff	?___wmul,delay_ms@count
  7766  001DEC  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  7767                           
  7768                           ;ST7735_TFT.c: 73: count = (0xffff - count);
  7769  001DF0  C01B  F019         	movff	delay_ms@count,??_delay_ms
  7770  001DF4  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  7771  001DF8  1E19               	comf	??_delay_ms,f,c
  7772  001DFA  1E1A               	comf	??_delay_ms+1,f,c
  7773  001DFC  4A19               	infsnz	??_delay_ms,f,c
  7774  001DFE  2A1A               	incf	??_delay_ms+1,f,c
  7775  001E00  0EFF               	movlw	255
  7776  001E02  2419               	addwf	??_delay_ms,w,c
  7777  001E04  6E1B               	movwf	delay_ms@count,c
  7778  001E06  0EFF               	movlw	255
  7779  001E08  201A               	addwfc	??_delay_ms+1,w,c
  7780  001E0A  6E1C               	movwf	delay_ms@count+1,c
  7781                           
  7782                           ;ST7735_TFT.c: 75: T0CON = 0x03;
  7783  001E0C  0E03               	movlw	3
  7784  001E0E  6ED5               	movwf	4053,c	;volatile
  7785                           
  7786                           ;ST7735_TFT.c: 77: TMR0L = count & 0x00ff;
  7787  001E10  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
  7788                           
  7789                           ;ST7735_TFT.c: 78: TMR0H = count >> 8;
  7790  001E14  501C               	movf	delay_ms@count+1,w,c
  7791  001E16  6ED7               	movwf	4055,c	;volatile
  7792                           
  7793                           ;ST7735_TFT.c: 80: INTCONbits.TMR0IF = 0;
  7794  001E18  94F2               	bcf	intcon,2,c	;volatile
  7795                           
  7796                           ;ST7735_TFT.c: 81: T0CONbits.TMR0ON = 1;
  7797  001E1A  8ED5               	bsf	4053,7,c	;volatile
  7798                           
  7799                           ;ST7735_TFT.c: 83: while (INTCONbits.TMR0IF == 0);
  7800  001E1C  D000               	goto	l35
  7801  001E1E                     l35:
  7802  001E1E  A4F2               	btfss	intcon,2,c	;volatile
  7803  001E20  D7FE               	goto	l35
  7804                           
  7805                           ;ST7735_TFT.c: 84: T0CONbits.TMR0ON = 0;
  7806  001E22  9ED5               	bcf	4053,7,c	;volatile
  7807  001E24  0012               	return		;funcret
  7808  001E26                     __end_of_delay_ms:
  7809                           	opt stack 0
  7810                           tblptru	equ	0xFF8
  7811                           tblptrh	equ	0xFF7
  7812                           tblptrl	equ	0xFF6
  7813                           tablat	equ	0xFF5
  7814                           prodh	equ	0xFF4
  7815                           prodl	equ	0xFF3
  7816                           intcon	equ	0xFF2
  7817                           intcon2	equ	0xFF1
  7818                           postinc0	equ	0xFEE
  7819                           wreg	equ	0xFE8
  7820                           postdec1	equ	0xFE5
  7821                           fsr1l	equ	0xFE1
  7822                           indf2	equ	0xFDF
  7823                           postinc2	equ	0xFDE
  7824                           postdec2	equ	0xFDD
  7825                           fsr2h	equ	0xFDA
  7826                           fsr2l	equ	0xFD9
  7827                           status	equ	0xFD8
  7828                           
  7829 ;; *************** function ___wmul *****************
  7830 ;; Defined at:
  7831 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  7832 ;; Parameters:    Size  Location     Type
  7833 ;;  multiplier      2   16[COMRAM] unsigned int 
  7834 ;;  multiplicand    2   18[COMRAM] unsigned int 
  7835 ;; Auto vars:     Size  Location     Type
  7836 ;;  product         2   20[COMRAM] unsigned int 
  7837 ;; Return value:  Size  Location     Type
  7838 ;;                  2   16[COMRAM] unsigned int 
  7839 ;; Registers used:
  7840 ;;		wreg, status,2, status,0, prodl, prodh
  7841 ;; Tracked objects:
  7842 ;;		On entry : 0/0
  7843 ;;		On exit  : 0/0
  7844 ;;		Unchanged: 0/0
  7845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7846 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7847 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7849 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7850 ;;Total ram usage:        6 bytes
  7851 ;; Hardware stack levels used:    1
  7852 ;; Hardware stack levels required when called:    3
  7853 ;; This function calls:
  7854 ;;		Nothing
  7855 ;; This function is called by:
  7856 ;;		_delay_ms
  7857 ;;		_drawChar
  7858 ;;		_main
  7859 ;;		_printf
  7860 ;;		_read_volt
  7861 ;; This function uses a non-reentrant model
  7862 ;;
  7863                           
  7864                           	psect	text33
  7865  00211E                     __ptext33:
  7866                           	opt stack 0
  7867  00211E                     ___wmul:
  7868                           	opt stack 26
  7869                           
  7870                           ;incstack = 0
  7871  00211E  5011               	movf	___wmul@multiplier,w,c
  7872  002120  0213               	mulwf	___wmul@multiplicand,c
  7873  002122  CFF3 F015          	movff	prodl,___wmul@product
  7874  002126  CFF4 F016          	movff	prodh,___wmul@product+1
  7875  00212A  5011               	movf	___wmul@multiplier,w,c
  7876  00212C  0214               	mulwf	___wmul@multiplicand+1,c
  7877  00212E  50F3               	movf	prodl,w,c
  7878  002130  2616               	addwf	___wmul@product+1,f,c
  7879  002132  5012               	movf	___wmul@multiplier+1,w,c
  7880  002134  0213               	mulwf	___wmul@multiplicand,c
  7881  002136  50F3               	movf	prodl,w,c
  7882  002138  2616               	addwf	___wmul@product+1,f,c
  7883  00213A  C015  F011         	movff	___wmul@product,?___wmul
  7884  00213E  C016  F012         	movff	___wmul@product+1,?___wmul+1
  7885  002142  D000               	goto	l1011
  7886  002144                     l1011:
  7887  002144  0012               	return		;funcret
  7888  002146                     __end_of___wmul:
  7889                           	opt stack 0
  7890                           tblptru	equ	0xFF8
  7891                           tblptrh	equ	0xFF7
  7892                           tblptrl	equ	0xFF6
  7893                           tablat	equ	0xFF5
  7894                           prodh	equ	0xFF4
  7895                           prodl	equ	0xFF3
  7896                           intcon	equ	0xFF2
  7897                           intcon2	equ	0xFF1
  7898                           postinc0	equ	0xFEE
  7899                           wreg	equ	0xFE8
  7900                           postdec1	equ	0xFE5
  7901                           fsr1l	equ	0xFE1
  7902                           indf2	equ	0xFDF
  7903                           postinc2	equ	0xFDE
  7904                           postdec2	equ	0xFDD
  7905                           fsr2h	equ	0xFDA
  7906                           fsr2l	equ	0xFD9
  7907                           status	equ	0xFD8
  7908                           
  7909 ;; *************** function _Increase_Speed *****************
  7910 ;; Defined at:
  7911 ;;		line 49 in file "Fan_Support.c"
  7912 ;; Parameters:    Size  Location     Type
  7913 ;;		None
  7914 ;; Auto vars:     Size  Location     Type
  7915 ;;		None
  7916 ;; Return value:  Size  Location     Type
  7917 ;;		None               void
  7918 ;; Registers used:
  7919 ;;		wreg, status,2, status,0, cstack
  7920 ;; Tracked objects:
  7921 ;;		On entry : 0/0
  7922 ;;		On exit  : 0/0
  7923 ;;		Unchanged: 0/0
  7924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7929 ;;Total ram usage:        0 bytes
  7930 ;; Hardware stack levels used:    1
  7931 ;; Hardware stack levels required when called:    6
  7932 ;; This function calls:
  7933 ;;		_Do_Beep
  7934 ;;		_do_update_pwm
  7935 ;; This function is called by:
  7936 ;;		_main
  7937 ;;		_INT1_ISR
  7938 ;; This function uses a non-reentrant model
  7939 ;;
  7940                           
  7941                           	psect	text34
  7942  0021D2                     __ptext34:
  7943                           	opt stack 0
  7944  0021D2                     _Increase_Speed:
  7945                           	opt stack 24
  7946                           
  7947                           ;Fan_Support.c: 50: if (duty_cycle >= 100) {
  7948                           
  7949                           ;incstack = 0
  7950  0021D2  0E63               	movlw	99
  7951  0021D4  645C               	cpfsgt	_duty_cycle,c
  7952  0021D6  D005               	goto	l6643
  7953                           
  7954                           ;Fan_Support.c: 51: Do_Beep();
  7955  0021D8  EC85  F011         	call	_Do_Beep	;wreg free
  7956                           
  7957                           ;Fan_Support.c: 52: Do_Beep();
  7958  0021DC  EC85  F011         	call	_Do_Beep	;wreg free
  7959                           
  7960                           ;Fan_Support.c: 53: } else {
  7961  0021E0  D003               	goto	l6645
  7962  0021E2                     l6643:
  7963                           
  7964                           ;Fan_Support.c: 54: duty_cycle += 5;
  7965  0021E2  0E05               	movlw	5
  7966  0021E4  265C               	addwf	_duty_cycle,f,c
  7967  0021E6  D000               	goto	l6645
  7968  0021E8                     l6645:
  7969                           
  7970                           ;Fan_Support.c: 56: }
  7971                           ;Fan_Support.c: 57: do_update_pwm(duty_cycle);
  7972  0021E8  505C               	movf	_duty_cycle,w,c
  7973  0021EA  EC69  F00B         	call	_do_update_pwm
  7974  0021EE  0012               	return		;funcret
  7975  0021F0                     __end_of_Increase_Speed:
  7976                           	opt stack 0
  7977                           tblptru	equ	0xFF8
  7978                           tblptrh	equ	0xFF7
  7979                           tblptrl	equ	0xFF6
  7980                           tablat	equ	0xFF5
  7981                           prodh	equ	0xFF4
  7982                           prodl	equ	0xFF3
  7983                           intcon	equ	0xFF2
  7984                           intcon2	equ	0xFF1
  7985                           postinc0	equ	0xFEE
  7986                           wreg	equ	0xFE8
  7987                           postdec1	equ	0xFE5
  7988                           fsr1l	equ	0xFE1
  7989                           indf2	equ	0xFDF
  7990                           postinc2	equ	0xFDE
  7991                           postdec2	equ	0xFDD
  7992                           fsr2h	equ	0xFDA
  7993                           fsr2l	equ	0xFD9
  7994                           status	equ	0xFD8
  7995                           
  7996 ;; *************** function _Do_Init *****************
  7997 ;; Defined at:
  7998 ;;		line 111 in file "Lab12.c"
  7999 ;; Parameters:    Size  Location     Type
  8000 ;;		None
  8001 ;; Auto vars:     Size  Location     Type
  8002 ;;		None
  8003 ;; Return value:  Size  Location     Type
  8004 ;;		None               void
  8005 ;; Registers used:
  8006 ;;		wreg, status,2, status,0, cstack
  8007 ;; Tracked objects:
  8008 ;;		On entry : 0/0
  8009 ;;		On exit  : 0/0
  8010 ;;		Unchanged: 0/0
  8011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8016 ;;Total ram usage:        0 bytes
  8017 ;; Hardware stack levels used:    1
  8018 ;; Hardware stack levels required when called:    7
  8019 ;; This function calls:
  8020 ;;		_DS1621_Init
  8021 ;;		_I2C_Init
  8022 ;;		_Init_ADC
  8023 ;;		_Turn_Off_Fan
  8024 ;;		_init_INTERRUPT
  8025 ;;		_init_UART
  8026 ;; This function is called by:
  8027 ;;		_main
  8028 ;; This function uses a non-reentrant model
  8029 ;;
  8030                           
  8031                           	psect	text35
  8032  001D7A                     __ptext35:
  8033                           	opt stack 0
  8034  001D7A                     _Do_Init:
  8035                           	opt stack 23
  8036                           
  8037                           ;Lab12.c: 113: init_UART();
  8038                           
  8039                           ;incstack = 0
  8040  001D7A  EC69  F011         	call	_init_UART	;wreg free
  8041                           
  8042                           ;Lab12.c: 114: Init_ADC();
  8043  001D7E  ECD1  F011         	call	_Init_ADC	;wreg free
  8044                           
  8045                           ;Lab12.c: 115: OSCCON=0x70;
  8046  001D82  0E70               	movlw	112
  8047  001D84  6ED3               	movwf	4051,c	;volatile
  8048                           
  8049                           ;Lab12.c: 117: ADCON1=0x0E;
  8050  001D86  0E0E               	movlw	14
  8051  001D88  6EC1               	movwf	4033,c	;volatile
  8052                           
  8053                           ;Lab12.c: 118: TRISA = 0x01;
  8054  001D8A  0E01               	movlw	1
  8055  001D8C  6E92               	movwf	3986,c	;volatile
  8056                           
  8057                           ;Lab12.c: 119: TRISB = 0x07;
  8058  001D8E  0E07               	movlw	7
  8059  001D90  6E93               	movwf	3987,c	;volatile
  8060                           
  8061                           ;Lab12.c: 120: TRISC = 0x01;
  8062  001D92  0E01               	movlw	1
  8063  001D94  6E94               	movwf	3988,c	;volatile
  8064                           
  8065                           ;Lab12.c: 121: TRISD = 0x00;
  8066  001D96  0E00               	movlw	0
  8067  001D98  6E95               	movwf	3989,c	;volatile
  8068                           
  8069                           ;Lab12.c: 122: TRISE = 0x00;
  8070  001D9A  0E00               	movlw	0
  8071  001D9C  6E96               	movwf	3990,c	;volatile
  8072                           
  8073                           ;Lab12.c: 123: FAN = 0;
  8074  001D9E  0E00               	movlw	0
  8075  001DA0  6E4D               	movwf	_FAN,c
  8076                           
  8077                           ;Lab12.c: 124: RBPU=0;
  8078  001DA2  9EF1               	bcf	intcon2,7,c	;volatile
  8079                           
  8080                           ;Lab12.c: 126: TMR3L = 0x00;
  8081  001DA4  0E00               	movlw	0
  8082  001DA6  6EB2               	movwf	4018,c	;volatile
  8083                           
  8084                           ;Lab12.c: 127: T3CON = 0x03;
  8085  001DA8  0E03               	movlw	3
  8086  001DAA  6EB1               	movwf	4017,c	;volatile
  8087                           
  8088                           ;Lab12.c: 128: I2C_Init(100000);
  8089  001DAC  0EA0               	movlw	160
  8090  001DAE  6E11               	movwf	I2C_Init@c,c
  8091  001DB0  0E86               	movlw	134
  8092  001DB2  6E12               	movwf	I2C_Init@c+1,c
  8093  001DB4  0E01               	movlw	1
  8094  001DB6  6E13               	movwf	I2C_Init@c+2,c
  8095  001DB8  0E00               	movlw	0
  8096  001DBA  6E14               	movwf	I2C_Init@c+3,c
  8097  001DBC  ECEA  F011         	call	_I2C_Init	;wreg free
  8098                           
  8099                           ;Lab12.c: 130: DS1621_Init();
  8100  001DC0  ECF8  F010         	call	_DS1621_Init	;wreg free
  8101                           
  8102                           ;Lab12.c: 131: init_INTERRUPT();
  8103  001DC4  ECB6  F010         	call	_init_INTERRUPT	;wreg free
  8104                           
  8105                           ;Lab12.c: 132: Turn_Off_Fan();
  8106  001DC8  ECE5  F011         	call	_Turn_Off_Fan	;wreg free
  8107                           
  8108                           ;Lab12.c: 133: fan_set_temp = 75;
  8109  001DCC  0E4B               	movlw	75
  8110  001DCE  6E6D               	movwf	_fan_set_temp,c
  8111                           
  8112                           ;Lab12.c: 134: PORTAbits.RA3 =0;
  8113  001DD0  9680               	bcf	3968,3,c	;volatile
  8114  001DD2  0012               	return		;funcret
  8115  001DD4                     __end_of_Do_Init:
  8116                           	opt stack 0
  8117                           tblptru	equ	0xFF8
  8118                           tblptrh	equ	0xFF7
  8119                           tblptrl	equ	0xFF6
  8120                           tablat	equ	0xFF5
  8121                           prodh	equ	0xFF4
  8122                           prodl	equ	0xFF3
  8123                           intcon	equ	0xFF2
  8124                           intcon2	equ	0xFF1
  8125                           postinc0	equ	0xFEE
  8126                           wreg	equ	0xFE8
  8127                           postdec1	equ	0xFE5
  8128                           fsr1l	equ	0xFE1
  8129                           indf2	equ	0xFDF
  8130                           postinc2	equ	0xFDE
  8131                           postdec2	equ	0xFDD
  8132                           fsr2h	equ	0xFDA
  8133                           fsr2l	equ	0xFD9
  8134                           status	equ	0xFD8
  8135                           
  8136 ;; *************** function _init_UART *****************
  8137 ;; Defined at:
  8138 ;;		line 103 in file "Lab12.c"
  8139 ;; Parameters:    Size  Location     Type
  8140 ;;		None
  8141 ;; Auto vars:     Size  Location     Type
  8142 ;;		None
  8143 ;; Return value:  Size  Location     Type
  8144 ;;		None               void
  8145 ;; Registers used:
  8146 ;;		wreg, status,2, cstack
  8147 ;; Tracked objects:
  8148 ;;		On entry : 0/0
  8149 ;;		On exit  : 0/0
  8150 ;;		Unchanged: 0/0
  8151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8156 ;;Total ram usage:        0 bytes
  8157 ;; Hardware stack levels used:    1
  8158 ;; Hardware stack levels required when called:    4
  8159 ;; This function calls:
  8160 ;;		_OpenUSART
  8161 ;; This function is called by:
  8162 ;;		_Do_Init
  8163 ;; This function uses a non-reentrant model
  8164 ;;
  8165                           
  8166                           	psect	text36
  8167  0022D2                     __ptext36:
  8168                           	opt stack 0
  8169  0022D2                     _init_UART:
  8170                           	opt stack 25
  8171                           
  8172                           ;Lab12.c: 105: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b11111111
      +                           & 0b11111111, 25);
  8173                           
  8174                           ;incstack = 0
  8175  0022D2  0E00               	movlw	0
  8176  0022D4  6E12               	movwf	OpenUSART@spbrg+1,c
  8177  0022D6  0E19               	movlw	25
  8178  0022D8  6E11               	movwf	OpenUSART@spbrg,c
  8179  0022DA  0E3C               	movlw	60
  8180  0022DC  EC8F  F00D         	call	_OpenUSART
  8181                           
  8182                           ;Lab12.c: 106: OSCCON = 0x70;
  8183  0022E0  0E70               	movlw	112
  8184  0022E2  6ED3               	movwf	4051,c	;volatile
  8185  0022E4  0012               	return		;funcret
  8186  0022E6                     __end_of_init_UART:
  8187                           	opt stack 0
  8188                           tblptru	equ	0xFF8
  8189                           tblptrh	equ	0xFF7
  8190                           tblptrl	equ	0xFF6
  8191                           tablat	equ	0xFF5
  8192                           prodh	equ	0xFF4
  8193                           prodl	equ	0xFF3
  8194                           intcon	equ	0xFF2
  8195                           intcon2	equ	0xFF1
  8196                           postinc0	equ	0xFEE
  8197                           wreg	equ	0xFE8
  8198                           postdec1	equ	0xFE5
  8199                           fsr1l	equ	0xFE1
  8200                           indf2	equ	0xFDF
  8201                           postinc2	equ	0xFDE
  8202                           postdec2	equ	0xFDD
  8203                           fsr2h	equ	0xFDA
  8204                           fsr2l	equ	0xFD9
  8205                           status	equ	0xFD8
  8206                           
  8207 ;; *************** function _OpenUSART *****************
  8208 ;; Defined at:
  8209 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  8210 ;; Parameters:    Size  Location     Type
  8211 ;;  config          1    wreg     unsigned char 
  8212 ;;  spbrg           2   16[COMRAM] unsigned int 
  8213 ;; Auto vars:     Size  Location     Type
  8214 ;;  config          1   18[COMRAM] unsigned char 
  8215 ;; Return value:  Size  Location     Type
  8216 ;;		None               void
  8217 ;; Registers used:
  8218 ;;		wreg, status,2
  8219 ;; Tracked objects:
  8220 ;;		On entry : 0/0
  8221 ;;		On exit  : 0/0
  8222 ;;		Unchanged: 0/0
  8223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8224 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8225 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8227 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8228 ;;Total ram usage:        3 bytes
  8229 ;; Hardware stack levels used:    1
  8230 ;; Hardware stack levels required when called:    3
  8231 ;; This function calls:
  8232 ;;		Nothing
  8233 ;; This function is called by:
  8234 ;;		_init_UART
  8235 ;; This function uses a non-reentrant model
  8236 ;;
  8237                           
  8238                           	psect	text37
  8239  001B1E                     __ptext37:
  8240                           	opt stack 0
  8241  001B1E                     _OpenUSART:
  8242                           	opt stack 25
  8243                           
  8244                           ;incstack = 0
  8245                           ;OpenUSART@config stored from wreg
  8246  001B1E  6E13               	movwf	OpenUSART@config,c
  8247  001B20  0E00               	movlw	0
  8248  001B22  6EAC               	movwf	4012,c	;volatile
  8249  001B24  0E00               	movlw	0
  8250  001B26  6EAB               	movwf	4011,c	;volatile
  8251  001B28  A013               	btfss	OpenUSART@config,0,c
  8252  001B2A  D002               	goto	l6167
  8253  001B2C  88AC               	bsf	4012,4,c	;volatile
  8254  001B2E  D000               	goto	l6167
  8255  001B30                     l6167:
  8256  001B30  A213               	btfss	OpenUSART@config,1,c
  8257  001B32  D003               	goto	l6171
  8258  001B34  8CAC               	bsf	4012,6,c	;volatile
  8259  001B36  8CAB               	bsf	4011,6,c	;volatile
  8260  001B38  D000               	goto	l6171
  8261  001B3A                     l6171:
  8262  001B3A  A413               	btfss	OpenUSART@config,2,c
  8263  001B3C  D002               	goto	l6175
  8264  001B3E  8EAC               	bsf	4012,7,c	;volatile
  8265  001B40  D000               	goto	l6175
  8266  001B42                     l6175:
  8267  001B42  A613               	btfss	OpenUSART@config,3,c
  8268  001B44  D002               	goto	l999
  8269  001B46  88AB               	bsf	4011,4,c	;volatile
  8270  001B48  D002               	goto	l6179
  8271  001B4A                     l999:
  8272  001B4A  8AAB               	bsf	4011,5,c	;volatile
  8273  001B4C  D000               	goto	l6179
  8274  001B4E                     l6179:
  8275  001B4E  B813               	btfsc	OpenUSART@config,4,c
  8276  001B50  84AC               	bsf	4012,2,c	;volatile
  8277  001B52  989E               	bcf	3998,4,c	;volatile
  8278  001B54  AA13               	btfss	OpenUSART@config,5,c
  8279  001B56  D002               	goto	l6187
  8280  001B58  86AB               	bsf	4011,3,c	;volatile
  8281  001B5A  D000               	goto	l6187
  8282  001B5C                     l6187:
  8283  001B5C  AC13               	btfss	OpenUSART@config,6,c
  8284  001B5E  D002               	goto	l1003
  8285  001B60  8A9D               	bsf	3997,5,c	;volatile
  8286  001B62  D001               	goto	l1004
  8287  001B64                     l1003:
  8288  001B64  9A9D               	bcf	3997,5,c	;volatile
  8289  001B66                     l1004:
  8290  001B66  9A9E               	bcf	3998,5,c	;volatile
  8291  001B68  AE13               	btfss	OpenUSART@config,7,c
  8292  001B6A  D002               	goto	l1005
  8293  001B6C  889D               	bsf	3997,4,c	;volatile
  8294  001B6E  D001               	goto	l1006
  8295  001B70                     l1005:
  8296  001B70  989D               	bcf	3997,4,c	;volatile
  8297  001B72                     l1006:
  8298  001B72  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  8299  001B76  5012               	movf	OpenUSART@spbrg+1,w,c
  8300  001B78  6EB0               	movwf	4016,c	;volatile
  8301  001B7A  8AAC               	bsf	4012,5,c	;volatile
  8302  001B7C  8EAB               	bsf	4011,7,c	;volatile
  8303  001B7E  9C94               	bcf	3988,6,c	;volatile
  8304  001B80  8E94               	bsf	3988,7,c	;volatile
  8305  001B82  B8AC               	btfsc	4012,4,c	;volatile
  8306  001B84  BEAC               	btfsc	4012,7,c	;volatile
  8307  001B86  D002               	goto	l1008
  8308  001B88  8C94               	bsf	3988,6,c	;volatile
  8309  001B8A  D000               	goto	l1008
  8310  001B8C                     l1008:
  8311  001B8C  0012               	return		;funcret
  8312  001B8E                     __end_of_OpenUSART:
  8313                           	opt stack 0
  8314                           tblptru	equ	0xFF8
  8315                           tblptrh	equ	0xFF7
  8316                           tblptrl	equ	0xFF6
  8317                           tablat	equ	0xFF5
  8318                           prodh	equ	0xFF4
  8319                           prodl	equ	0xFF3
  8320                           intcon	equ	0xFF2
  8321                           intcon2	equ	0xFF1
  8322                           postinc0	equ	0xFEE
  8323                           wreg	equ	0xFE8
  8324                           postdec1	equ	0xFE5
  8325                           fsr1l	equ	0xFE1
  8326                           indf2	equ	0xFDF
  8327                           postinc2	equ	0xFDE
  8328                           postdec2	equ	0xFDD
  8329                           fsr2h	equ	0xFDA
  8330                           fsr2l	equ	0xFD9
  8331                           status	equ	0xFD8
  8332                           
  8333 ;; *************** function _init_INTERRUPT *****************
  8334 ;; Defined at:
  8335 ;;		line 18 in file "Interrupt2.c"
  8336 ;; Parameters:    Size  Location     Type
  8337 ;;		None
  8338 ;; Auto vars:     Size  Location     Type
  8339 ;;		None
  8340 ;; Return value:  Size  Location     Type
  8341 ;;		None               void
  8342 ;; Registers used:
  8343 ;;		wreg, status,2
  8344 ;; Tracked objects:
  8345 ;;		On entry : 0/0
  8346 ;;		On exit  : 0/0
  8347 ;;		Unchanged: 0/0
  8348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8353 ;;Total ram usage:        0 bytes
  8354 ;; Hardware stack levels used:    1
  8355 ;; Hardware stack levels required when called:    3
  8356 ;; This function calls:
  8357 ;;		Nothing
  8358 ;; This function is called by:
  8359 ;;		_Do_Init
  8360 ;; This function uses a non-reentrant model
  8361 ;;
  8362                           
  8363                           	psect	text38
  8364  00216C                     __ptext38:
  8365                           	opt stack 0
  8366  00216C                     _init_INTERRUPT:
  8367                           	opt stack 26
  8368                           
  8369                           ;Interrupt2.c: 20: TMR1H = 0;
  8370                           
  8371                           ;incstack = 0
  8372  00216C  0E00               	movlw	0
  8373  00216E  6ECF               	movwf	4047,c	;volatile
  8374                           
  8375                           ;Interrupt2.c: 21: TMR1L = 0;
  8376  002170  0E00               	movlw	0
  8377  002172  6ECE               	movwf	4046,c	;volatile
  8378                           
  8379                           ;Interrupt2.c: 22: PIR1bits.TMR1IF = 0;
  8380  002174  909E               	bcf	3998,0,c	;volatile
  8381                           
  8382                           ;Interrupt2.c: 23: PIE1bits.TMR1IE = 1;
  8383  002176  809D               	bsf	3997,0,c	;volatile
  8384                           
  8385                           ;Interrupt2.c: 25: INTCON2bits.INTEDG0=0 ;
  8386  002178  9CF1               	bcf	intcon2,6,c	;volatile
  8387                           
  8388                           ;Interrupt2.c: 26: INTCON2bits.INTEDG1=0;
  8389  00217A  9AF1               	bcf	intcon2,5,c	;volatile
  8390                           
  8391                           ;Interrupt2.c: 27: INTCON2bits.INTEDG2=0;
  8392  00217C  98F1               	bcf	intcon2,4,c	;volatile
  8393                           
  8394                           ;Interrupt2.c: 28: INTCONbits.INT0IF = 0 ;
  8395  00217E  92F2               	bcf	intcon,1,c	;volatile
  8396                           
  8397                           ;Interrupt2.c: 29: INTCON3bits.INT1IF = 0;
  8398  002180  90F0               	bcf	intcon3,0,c	;volatile
  8399                           
  8400                           ;Interrupt2.c: 30: INTCON3bits.INT2IF =0;
  8401  002182  92F0               	bcf	intcon3,1,c	;volatile
  8402                           
  8403                           ;Interrupt2.c: 33: INTCONbits.INT0IE =1;
  8404  002184  88F2               	bsf	intcon,4,c	;volatile
  8405                           
  8406                           ;Interrupt2.c: 34: INTCON3bits.INT1IE=1;
  8407  002186  86F0               	bsf	intcon3,3,c	;volatile
  8408                           
  8409                           ;Interrupt2.c: 35: INTCON3bits.INT2IE=1;
  8410  002188  88F0               	bsf	intcon3,4,c	;volatile
  8411                           
  8412                           ;Interrupt2.c: 37: INTCONbits.PEIE = 1;
  8413  00218A  8CF2               	bsf	intcon,6,c	;volatile
  8414                           
  8415                           ;Interrupt2.c: 38: INTCONbits.GIE = 1;
  8416  00218C  8EF2               	bsf	intcon,7,c	;volatile
  8417  00218E  0012               	return		;funcret
  8418  002190                     __end_of_init_INTERRUPT:
  8419                           	opt stack 0
  8420                           tblptru	equ	0xFF8
  8421                           tblptrh	equ	0xFF7
  8422                           tblptrl	equ	0xFF6
  8423                           tablat	equ	0xFF5
  8424                           prodh	equ	0xFF4
  8425                           prodl	equ	0xFF3
  8426                           intcon	equ	0xFF2
  8427                           intcon2	equ	0xFF1
  8428                           intcon3	equ	0xFF0
  8429                           postinc0	equ	0xFEE
  8430                           wreg	equ	0xFE8
  8431                           postdec1	equ	0xFE5
  8432                           fsr1l	equ	0xFE1
  8433                           indf2	equ	0xFDF
  8434                           postinc2	equ	0xFDE
  8435                           postdec2	equ	0xFDD
  8436                           fsr2h	equ	0xFDA
  8437                           fsr2l	equ	0xFD9
  8438                           status	equ	0xFD8
  8439                           
  8440 ;; *************** function _Turn_Off_Fan *****************
  8441 ;; Defined at:
  8442 ;;		line 36 in file "Fan_Support.c"
  8443 ;; Parameters:    Size  Location     Type
  8444 ;;		None
  8445 ;; Auto vars:     Size  Location     Type
  8446 ;;		None
  8447 ;; Return value:  Size  Location     Type
  8448 ;;		None               void
  8449 ;; Registers used:
  8450 ;;		wreg, status,2
  8451 ;; Tracked objects:
  8452 ;;		On entry : 0/0
  8453 ;;		On exit  : 0/0
  8454 ;;		Unchanged: 0/0
  8455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8460 ;;Total ram usage:        0 bytes
  8461 ;; Hardware stack levels used:    1
  8462 ;; Hardware stack levels required when called:    3
  8463 ;; This function calls:
  8464 ;;		Nothing
  8465 ;; This function is called by:
  8466 ;;		_Toggle_Fan
  8467 ;;		_Do_Init
  8468 ;; This function uses a non-reentrant model
  8469 ;;
  8470                           
  8471                           	psect	text39
  8472  0023CA                     __ptext39:
  8473                           	opt stack 0
  8474  0023CA                     _Turn_Off_Fan:
  8475                           	opt stack 26
  8476                           
  8477                           ;Fan_Support.c: 37: FAN = 0;
  8478                           
  8479                           ;incstack = 0
  8480  0023CA  0E00               	movlw	0
  8481  0023CC  6E4D               	movwf	_FAN,c
  8482                           
  8483                           ;Fan_Support.c: 38: PORTAbits.RA5 = 0;
  8484  0023CE  9A80               	bcf	3968,5,c	;volatile
  8485                           
  8486                           ;Fan_Support.c: 39: PORTAbits.RA4 = 0;
  8487  0023D0  9880               	bcf	3968,4,c	;volatile
  8488  0023D2  0012               	return		;funcret
  8489  0023D4                     __end_of_Turn_Off_Fan:
  8490                           	opt stack 0
  8491                           tblptru	equ	0xFF8
  8492                           tblptrh	equ	0xFF7
  8493                           tblptrl	equ	0xFF6
  8494                           tablat	equ	0xFF5
  8495                           prodh	equ	0xFF4
  8496                           prodl	equ	0xFF3
  8497                           intcon	equ	0xFF2
  8498                           intcon2	equ	0xFF1
  8499                           intcon3	equ	0xFF0
  8500                           postinc0	equ	0xFEE
  8501                           wreg	equ	0xFE8
  8502                           postdec1	equ	0xFE5
  8503                           fsr1l	equ	0xFE1
  8504                           indf2	equ	0xFDF
  8505                           postinc2	equ	0xFDE
  8506                           postdec2	equ	0xFDD
  8507                           fsr2h	equ	0xFDA
  8508                           fsr2l	equ	0xFD9
  8509                           status	equ	0xFD8
  8510                           
  8511 ;; *************** function _Init_ADC *****************
  8512 ;; Defined at:
  8513 ;;		line 160 in file "utils.c"
  8514 ;; Parameters:    Size  Location     Type
  8515 ;;		None
  8516 ;; Auto vars:     Size  Location     Type
  8517 ;;		None
  8518 ;; Return value:  Size  Location     Type
  8519 ;;		None               void
  8520 ;; Registers used:
  8521 ;;		wreg, status,2
  8522 ;; Tracked objects:
  8523 ;;		On entry : 0/0
  8524 ;;		On exit  : 0/0
  8525 ;;		Unchanged: 0/0
  8526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8531 ;;Total ram usage:        0 bytes
  8532 ;; Hardware stack levels used:    1
  8533 ;; Hardware stack levels required when called:    3
  8534 ;; This function calls:
  8535 ;;		Nothing
  8536 ;; This function is called by:
  8537 ;;		_Do_Init
  8538 ;; This function uses a non-reentrant model
  8539 ;;
  8540                           
  8541                           	psect	text40
  8542  0023A2                     __ptext40:
  8543                           	opt stack 0
  8544  0023A2                     _Init_ADC:
  8545                           	opt stack 26
  8546                           
  8547                           ;utils.c: 162: ADCON0 = 0x01;
  8548                           
  8549                           ;incstack = 0
  8550  0023A2  0E01               	movlw	1
  8551  0023A4  6EC2               	movwf	4034,c	;volatile
  8552                           
  8553                           ;utils.c: 163: ADCON1 = 0x0E;
  8554  0023A6  0E0E               	movlw	14
  8555  0023A8  6EC1               	movwf	4033,c	;volatile
  8556                           
  8557                           ;utils.c: 164: ADCON2 = 0xA9;
  8558  0023AA  0EA9               	movlw	169
  8559  0023AC  6EC0               	movwf	4032,c	;volatile
  8560  0023AE  0012               	return		;funcret
  8561  0023B0                     __end_of_Init_ADC:
  8562                           	opt stack 0
  8563                           tblptru	equ	0xFF8
  8564                           tblptrh	equ	0xFF7
  8565                           tblptrl	equ	0xFF6
  8566                           tablat	equ	0xFF5
  8567                           prodh	equ	0xFF4
  8568                           prodl	equ	0xFF3
  8569                           intcon	equ	0xFF2
  8570                           intcon2	equ	0xFF1
  8571                           intcon3	equ	0xFF0
  8572                           postinc0	equ	0xFEE
  8573                           wreg	equ	0xFE8
  8574                           postdec1	equ	0xFE5
  8575                           fsr1l	equ	0xFE1
  8576                           indf2	equ	0xFDF
  8577                           postinc2	equ	0xFDE
  8578                           postdec2	equ	0xFDD
  8579                           fsr2h	equ	0xFDA
  8580                           fsr2l	equ	0xFD9
  8581                           status	equ	0xFD8
  8582                           
  8583 ;; *************** function _I2C_Init *****************
  8584 ;; Defined at:
  8585 ;;		line 9 in file "I2C_Soft.c"
  8586 ;; Parameters:    Size  Location     Type
  8587 ;;  c               4   16[COMRAM] unsigned long 
  8588 ;; Auto vars:     Size  Location     Type
  8589 ;;		None
  8590 ;; Return value:  Size  Location     Type
  8591 ;;		None               void
  8592 ;; Registers used:
  8593 ;;		wreg, cstack
  8594 ;; Tracked objects:
  8595 ;;		On entry : 0/0
  8596 ;;		On exit  : 0/0
  8597 ;;		Unchanged: 0/0
  8598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8599 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8602 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8603 ;;Total ram usage:        4 bytes
  8604 ;; Hardware stack levels used:    1
  8605 ;; Hardware stack levels required when called:    4
  8606 ;; This function calls:
  8607 ;;		_i2cHighScl
  8608 ;;		_i2cHighSda
  8609 ;; This function is called by:
  8610 ;;		_Do_Init
  8611 ;; This function uses a non-reentrant model
  8612 ;;
  8613                           
  8614                           	psect	text41
  8615  0023D4                     __ptext41:
  8616                           	opt stack 0
  8617  0023D4                     _I2C_Init:
  8618                           	opt stack 25
  8619                           
  8620                           ;I2C_Soft.c: 10: i2cHighScl();
  8621                           
  8622                           ;incstack = 0
  8623  0023D4  ECDF  F011         	call	_i2cHighScl	;wreg free
  8624                           
  8625                           ;I2C_Soft.c: 11: i2cHighSda();
  8626  0023D8  EC10  F012         	call	_i2cHighSda	;wreg free
  8627  0023DC  0012               	return		;funcret
  8628  0023DE                     __end_of_I2C_Init:
  8629                           	opt stack 0
  8630                           tblptru	equ	0xFF8
  8631                           tblptrh	equ	0xFF7
  8632                           tblptrl	equ	0xFF6
  8633                           tablat	equ	0xFF5
  8634                           prodh	equ	0xFF4
  8635                           prodl	equ	0xFF3
  8636                           intcon	equ	0xFF2
  8637                           intcon2	equ	0xFF1
  8638                           intcon3	equ	0xFF0
  8639                           postinc0	equ	0xFEE
  8640                           wreg	equ	0xFE8
  8641                           postdec1	equ	0xFE5
  8642                           fsr1l	equ	0xFE1
  8643                           indf2	equ	0xFDF
  8644                           postinc2	equ	0xFDE
  8645                           postdec2	equ	0xFDD
  8646                           fsr2h	equ	0xFDA
  8647                           fsr2l	equ	0xFD9
  8648                           status	equ	0xFD8
  8649                           
  8650 ;; *************** function _DS1621_Init *****************
  8651 ;; Defined at:
  8652 ;;		line 44 in file "I2C_Support.c"
  8653 ;; Parameters:    Size  Location     Type
  8654 ;;		None
  8655 ;; Auto vars:     Size  Location     Type
  8656 ;;  Device          1   21[COMRAM] unsigned char 
  8657 ;; Return value:  Size  Location     Type
  8658 ;;		None               void
  8659 ;; Registers used:
  8660 ;;		wreg, status,2, status,0, cstack
  8661 ;; Tracked objects:
  8662 ;;		On entry : 0/0
  8663 ;;		On exit  : 0/0
  8664 ;;		Unchanged: 0/0
  8665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8667 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8669 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8670 ;;Total ram usage:        1 bytes
  8671 ;; Hardware stack levels used:    1
  8672 ;; Hardware stack levels required when called:    6
  8673 ;; This function calls:
  8674 ;;		_I2C_Write_Cmd_Only
  8675 ;;		_I2C_Write_Cmd_Write_Data
  8676 ;; This function is called by:
  8677 ;;		_Do_Init
  8678 ;; This function uses a non-reentrant model
  8679 ;;
  8680                           
  8681                           	psect	text42
  8682  0021F0                     __ptext42:
  8683                           	opt stack 0
  8684  0021F0                     _DS1621_Init:
  8685                           	opt stack 23
  8686                           
  8687                           ;I2C_Support.c: 45: char Device = 0x48;
  8688                           
  8689                           ;incstack = 0
  8690  0021F0  0E48               	movlw	72
  8691  0021F2  6E16               	movwf	DS1621_Init@Device,c
  8692                           
  8693                           ;I2C_Support.c: 46: I2C_Write_Cmd_Write_Data(Device, 0xAC, 0x02);
  8694  0021F4  0EAC               	movlw	172
  8695  0021F6  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  8696  0021F8  0E02               	movlw	2
  8697  0021FA  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  8698  0021FC  5016               	movf	DS1621_Init@Device,w,c
  8699  0021FE  ECD9  F010         	call	_I2C_Write_Cmd_Write_Data
  8700                           
  8701                           ;I2C_Support.c: 47: I2C_Write_Cmd_Only(Device, 0xEE);
  8702  002202  0EEE               	movlw	238
  8703  002204  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  8704  002206  5016               	movf	DS1621_Init@Device,w,c
  8705  002208  EC24  F011         	call	_I2C_Write_Cmd_Only
  8706  00220C  0012               	return		;funcret
  8707  00220E                     __end_of_DS1621_Init:
  8708                           	opt stack 0
  8709                           tblptru	equ	0xFF8
  8710                           tblptrh	equ	0xFF7
  8711                           tblptrl	equ	0xFF6
  8712                           tablat	equ	0xFF5
  8713                           prodh	equ	0xFF4
  8714                           prodl	equ	0xFF3
  8715                           intcon	equ	0xFF2
  8716                           intcon2	equ	0xFF1
  8717                           intcon3	equ	0xFF0
  8718                           postinc0	equ	0xFEE
  8719                           wreg	equ	0xFE8
  8720                           postdec1	equ	0xFE5
  8721                           fsr1l	equ	0xFE1
  8722                           indf2	equ	0xFDF
  8723                           postinc2	equ	0xFDE
  8724                           postdec2	equ	0xFDD
  8725                           fsr2h	equ	0xFDA
  8726                           fsr2l	equ	0xFD9
  8727                           status	equ	0xFD8
  8728                           
  8729 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  8730 ;; Defined at:
  8731 ;;		line 129 in file "I2C_Soft.c"
  8732 ;; Parameters:    Size  Location     Type
  8733 ;;  Device          1    wreg     unsigned char 
  8734 ;;  Cmd             1   18[COMRAM] unsigned char 
  8735 ;;  Data_Out        1   19[COMRAM] unsigned char 
  8736 ;; Auto vars:     Size  Location     Type
  8737 ;;  Device          1   20[COMRAM] unsigned char 
  8738 ;; Return value:  Size  Location     Type
  8739 ;;		None               void
  8740 ;; Registers used:
  8741 ;;		wreg, status,2, status,0, cstack
  8742 ;; Tracked objects:
  8743 ;;		On entry : 0/0
  8744 ;;		On exit  : 0/0
  8745 ;;		Unchanged: 0/0
  8746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8747 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8748 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8750 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8751 ;;Total ram usage:        3 bytes
  8752 ;; Hardware stack levels used:    1
  8753 ;; Hardware stack levels required when called:    5
  8754 ;; This function calls:
  8755 ;;		_I2C_Start
  8756 ;;		_I2C_Stop
  8757 ;;		_I2C_Write
  8758 ;; This function is called by:
  8759 ;;		_DS1621_Init
  8760 ;; This function uses a non-reentrant model
  8761 ;;
  8762                           
  8763                           	psect	text43
  8764  0021B2                     __ptext43:
  8765                           	opt stack 0
  8766  0021B2                     _I2C_Write_Cmd_Write_Data:
  8767                           	opt stack 23
  8768                           
  8769                           ;incstack = 0
  8770                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  8771  0021B2  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  8772                           
  8773                           ;I2C_Soft.c: 130: I2C_Start();
  8774  0021B4  ECA0  F011         	call	_I2C_Start	;wreg free
  8775                           
  8776                           ;I2C_Soft.c: 131: I2C_Write((Device << 1) | 0);
  8777  0021B8  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  8778  0021BA  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  8779  0021BC  EC0C  F010         	call	_I2C_Write
  8780                           
  8781                           ;I2C_Soft.c: 132: I2C_Write(Cmd);
  8782  0021C0  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  8783  0021C2  EC0C  F010         	call	_I2C_Write
  8784                           
  8785                           ;I2C_Soft.c: 133: I2C_Write(Data_Out);
  8786  0021C6  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  8787  0021C8  EC0C  F010         	call	_I2C_Write
  8788                           
  8789                           ;I2C_Soft.c: 134: I2C_Stop();
  8790  0021CC  EC97  F011         	call	_I2C_Stop	;wreg free
  8791  0021D0  0012               	return		;funcret
  8792  0021D2                     __end_of_I2C_Write_Cmd_Write_Data:
  8793                           	opt stack 0
  8794                           tblptru	equ	0xFF8
  8795                           tblptrh	equ	0xFF7
  8796                           tblptrl	equ	0xFF6
  8797                           tablat	equ	0xFF5
  8798                           prodh	equ	0xFF4
  8799                           prodl	equ	0xFF3
  8800                           intcon	equ	0xFF2
  8801                           intcon2	equ	0xFF1
  8802                           intcon3	equ	0xFF0
  8803                           postinc0	equ	0xFEE
  8804                           wreg	equ	0xFE8
  8805                           postdec1	equ	0xFE5
  8806                           fsr1l	equ	0xFE1
  8807                           indf2	equ	0xFDF
  8808                           postinc2	equ	0xFDE
  8809                           postdec2	equ	0xFDD
  8810                           fsr2h	equ	0xFDA
  8811                           fsr2l	equ	0xFD9
  8812                           status	equ	0xFD8
  8813                           
  8814 ;; *************** function _I2C_Write_Cmd_Only *****************
  8815 ;; Defined at:
  8816 ;;		line 122 in file "I2C_Soft.c"
  8817 ;; Parameters:    Size  Location     Type
  8818 ;;  Device          1    wreg     unsigned char 
  8819 ;;  Cmd             1   18[COMRAM] unsigned char 
  8820 ;; Auto vars:     Size  Location     Type
  8821 ;;  Device          1   19[COMRAM] unsigned char 
  8822 ;; Return value:  Size  Location     Type
  8823 ;;		None               void
  8824 ;; Registers used:
  8825 ;;		wreg, status,2, status,0, cstack
  8826 ;; Tracked objects:
  8827 ;;		On entry : 0/0
  8828 ;;		On exit  : 0/0
  8829 ;;		Unchanged: 0/0
  8830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8831 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8832 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8834 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8835 ;;Total ram usage:        2 bytes
  8836 ;; Hardware stack levels used:    1
  8837 ;; Hardware stack levels required when called:    5
  8838 ;; This function calls:
  8839 ;;		_I2C_Start
  8840 ;;		_I2C_Stop
  8841 ;;		_I2C_Write
  8842 ;; This function is called by:
  8843 ;;		_DS1621_Init
  8844 ;; This function uses a non-reentrant model
  8845 ;;
  8846                           
  8847                           	psect	text44
  8848  002248                     __ptext44:
  8849                           	opt stack 0
  8850  002248                     _I2C_Write_Cmd_Only:
  8851                           	opt stack 23
  8852                           
  8853                           ;incstack = 0
  8854                           ;I2C_Write_Cmd_Only@Device stored from wreg
  8855  002248  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  8856                           
  8857                           ;I2C_Soft.c: 123: I2C_Start();
  8858  00224A  ECA0  F011         	call	_I2C_Start	;wreg free
  8859                           
  8860                           ;I2C_Soft.c: 124: I2C_Write((Device << 1) | 0);
  8861  00224E  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  8862  002250  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  8863  002252  EC0C  F010         	call	_I2C_Write
  8864                           
  8865                           ;I2C_Soft.c: 125: I2C_Write(Cmd);
  8866  002256  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  8867  002258  EC0C  F010         	call	_I2C_Write
  8868                           
  8869                           ;I2C_Soft.c: 126: I2C_Stop();
  8870  00225C  EC97  F011         	call	_I2C_Stop	;wreg free
  8871  002260  0012               	return		;funcret
  8872  002262                     __end_of_I2C_Write_Cmd_Only:
  8873                           	opt stack 0
  8874                           tblptru	equ	0xFF8
  8875                           tblptrh	equ	0xFF7
  8876                           tblptrl	equ	0xFF6
  8877                           tablat	equ	0xFF5
  8878                           prodh	equ	0xFF4
  8879                           prodl	equ	0xFF3
  8880                           intcon	equ	0xFF2
  8881                           intcon2	equ	0xFF1
  8882                           intcon3	equ	0xFF0
  8883                           postinc0	equ	0xFEE
  8884                           wreg	equ	0xFE8
  8885                           postdec1	equ	0xFE5
  8886                           fsr1l	equ	0xFE1
  8887                           indf2	equ	0xFDF
  8888                           postinc2	equ	0xFDE
  8889                           postdec2	equ	0xFDD
  8890                           fsr2h	equ	0xFDA
  8891                           fsr2l	equ	0xFD9
  8892                           status	equ	0xFD8
  8893                           
  8894 ;; *************** function _Do_Beep_Bad *****************
  8895 ;; Defined at:
  8896 ;;		line 79 in file "utils.c"
  8897 ;; Parameters:    Size  Location     Type
  8898 ;;		None
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;		None
  8901 ;; Return value:  Size  Location     Type
  8902 ;;		None               void
  8903 ;; Registers used:
  8904 ;;		wreg, status,2, status,0, cstack
  8905 ;; Tracked objects:
  8906 ;;		On entry : 0/0
  8907 ;;		On exit  : 0/0
  8908 ;;		Unchanged: 0/0
  8909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8914 ;;Total ram usage:        0 bytes
  8915 ;; Hardware stack levels used:    1
  8916 ;; Hardware stack levels required when called:    6
  8917 ;; This function calls:
  8918 ;;		_Activate_Buzzer_500Hz
  8919 ;;		_Deactivate_Buzzer
  8920 ;;		_Wait_One_Second
  8921 ;;		_do_update_pwm
  8922 ;; This function is called by:
  8923 ;;		_main
  8924 ;; This function uses a non-reentrant model
  8925 ;;
  8926                           
  8927                           	psect	text45
  8928  00227C                     __ptext45:
  8929                           	opt stack 0
  8930  00227C                     _Do_Beep_Bad:
  8931                           	opt stack 24
  8932                           
  8933                           ;utils.c: 81: Activate_Buzzer_500Hz();
  8934                           
  8935                           ;incstack = 0
  8936  00227C  EC7C  F011         	call	_Activate_Buzzer_500Hz	;wreg free
  8937                           
  8938                           ;utils.c: 82: Wait_One_Second();
  8939  002280  ECEF  F011         	call	_Wait_One_Second	;wreg free
  8940                           
  8941                           ;utils.c: 83: Deactivate_Buzzer();
  8942  002284  EC08  F012         	call	_Deactivate_Buzzer	;wreg free
  8943                           
  8944                           ;utils.c: 84: Wait_One_Second();
  8945  002288  ECEF  F011         	call	_Wait_One_Second	;wreg free
  8946                           
  8947                           ;utils.c: 85: do_update_pwm(duty_cycle);
  8948  00228C  505C               	movf	_duty_cycle,w,c
  8949  00228E  EC69  F00B         	call	_do_update_pwm
  8950  002292  0012               	return		;funcret
  8951  002294                     __end_of_Do_Beep_Bad:
  8952                           	opt stack 0
  8953                           tblptru	equ	0xFF8
  8954                           tblptrh	equ	0xFF7
  8955                           tblptrl	equ	0xFF6
  8956                           tablat	equ	0xFF5
  8957                           prodh	equ	0xFF4
  8958                           prodl	equ	0xFF3
  8959                           intcon	equ	0xFF2
  8960                           intcon2	equ	0xFF1
  8961                           intcon3	equ	0xFF0
  8962                           postinc0	equ	0xFEE
  8963                           wreg	equ	0xFE8
  8964                           postdec1	equ	0xFE5
  8965                           fsr1l	equ	0xFE1
  8966                           indf2	equ	0xFDF
  8967                           postinc2	equ	0xFDE
  8968                           postdec2	equ	0xFDD
  8969                           fsr2h	equ	0xFDA
  8970                           fsr2l	equ	0xFD9
  8971                           status	equ	0xFD8
  8972                           
  8973 ;; *************** function _Wait_One_Second *****************
  8974 ;; Defined at:
  8975 ;;		line 88 in file "utils.c"
  8976 ;; Parameters:    Size  Location     Type
  8977 ;;		None
  8978 ;; Auto vars:     Size  Location     Type
  8979 ;;		None
  8980 ;; Return value:  Size  Location     Type
  8981 ;;                  2  215[None  ] int 
  8982 ;; Registers used:
  8983 ;;		wreg, status,2, cstack
  8984 ;; Tracked objects:
  8985 ;;		On entry : 0/0
  8986 ;;		On exit  : 0/0
  8987 ;;		Unchanged: 0/0
  8988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8993 ;;Total ram usage:        0 bytes
  8994 ;; Hardware stack levels used:    1
  8995 ;; Hardware stack levels required when called:    4
  8996 ;; This function calls:
  8997 ;;		_Wait_Half_Second
  8998 ;; This function is called by:
  8999 ;;		_get_RPM
  9000 ;;		_Do_Beep_Bad
  9001 ;;		_main
  9002 ;;		_Do_Beep_Good
  9003 ;; This function uses a non-reentrant model
  9004 ;;
  9005                           
  9006                           	psect	text46
  9007  0023DE                     __ptext46:
  9008                           	opt stack 0
  9009  0023DE                     _Wait_One_Second:
  9010                           	opt stack 25
  9011                           
  9012                           ;utils.c: 90: Wait_Half_Second();
  9013                           
  9014                           ;incstack = 0
  9015  0023DE  EC31  F011         	call	_Wait_Half_Second	;wreg free
  9016                           
  9017                           ;utils.c: 91: Wait_Half_Second();
  9018  0023E2  EC31  F011         	call	_Wait_Half_Second	;wreg free
  9019  0023E6  0012               	return		;funcret
  9020  0023E8                     __end_of_Wait_One_Second:
  9021                           	opt stack 0
  9022                           tblptru	equ	0xFF8
  9023                           tblptrh	equ	0xFF7
  9024                           tblptrl	equ	0xFF6
  9025                           tablat	equ	0xFF5
  9026                           prodh	equ	0xFF4
  9027                           prodl	equ	0xFF3
  9028                           intcon	equ	0xFF2
  9029                           intcon2	equ	0xFF1
  9030                           intcon3	equ	0xFF0
  9031                           postinc0	equ	0xFEE
  9032                           wreg	equ	0xFE8
  9033                           postdec1	equ	0xFE5
  9034                           fsr1l	equ	0xFE1
  9035                           indf2	equ	0xFDF
  9036                           postinc2	equ	0xFDE
  9037                           postdec2	equ	0xFDD
  9038                           fsr2h	equ	0xFDA
  9039                           fsr2l	equ	0xFD9
  9040                           status	equ	0xFD8
  9041                           
  9042 ;; *************** function _Activate_Buzzer_500Hz *****************
  9043 ;; Defined at:
  9044 ;;		line 113 in file "utils.c"
  9045 ;; Parameters:    Size  Location     Type
  9046 ;;		None
  9047 ;; Auto vars:     Size  Location     Type
  9048 ;;		None
  9049 ;; Return value:  Size  Location     Type
  9050 ;;		None               void
  9051 ;; Registers used:
  9052 ;;		wreg, status,2
  9053 ;; Tracked objects:
  9054 ;;		On entry : 0/0
  9055 ;;		On exit  : 0/0
  9056 ;;		Unchanged: 0/0
  9057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9062 ;;Total ram usage:        0 bytes
  9063 ;; Hardware stack levels used:    1
  9064 ;; Hardware stack levels required when called:    3
  9065 ;; This function calls:
  9066 ;;		Nothing
  9067 ;; This function is called by:
  9068 ;;		_Do_Beep_Bad
  9069 ;; This function uses a non-reentrant model
  9070 ;;
  9071                           
  9072                           	psect	text47
  9073  0022F8                     __ptext47:
  9074                           	opt stack 0
  9075  0022F8                     _Activate_Buzzer_500Hz:
  9076                           	opt stack 26
  9077                           
  9078                           ;utils.c: 115: PR2 = 0b11111001 ;
  9079                           
  9080                           ;incstack = 0
  9081  0022F8  0EF9               	movlw	249
  9082  0022FA  6ECB               	movwf	4043,c	;volatile
  9083                           
  9084                           ;utils.c: 116: T2CON = 0b00000111 ;
  9085  0022FC  0E07               	movlw	7
  9086  0022FE  6ECA               	movwf	4042,c	;volatile
  9087                           
  9088                           ;utils.c: 117: CCPR2L = 0b01111100 ;
  9089  002300  0E7C               	movlw	124
  9090  002302  6EBB               	movwf	4027,c	;volatile
  9091                           
  9092                           ;utils.c: 118: CCP2CON = 0b00111100 ;
  9093  002304  0E3C               	movlw	60
  9094  002306  6EBA               	movwf	4026,c	;volatile
  9095  002308  0012               	return		;funcret
  9096  00230A                     __end_of_Activate_Buzzer_500Hz:
  9097                           	opt stack 0
  9098                           tblptru	equ	0xFF8
  9099                           tblptrh	equ	0xFF7
  9100                           tblptrl	equ	0xFF6
  9101                           tablat	equ	0xFF5
  9102                           prodh	equ	0xFF4
  9103                           prodl	equ	0xFF3
  9104                           intcon	equ	0xFF2
  9105                           intcon2	equ	0xFF1
  9106                           intcon3	equ	0xFF0
  9107                           postinc0	equ	0xFEE
  9108                           wreg	equ	0xFE8
  9109                           postdec1	equ	0xFE5
  9110                           fsr1l	equ	0xFE1
  9111                           indf2	equ	0xFDF
  9112                           postinc2	equ	0xFDE
  9113                           postdec2	equ	0xFDD
  9114                           fsr2h	equ	0xFDA
  9115                           fsr2l	equ	0xFD9
  9116                           status	equ	0xFD8
  9117                           
  9118 ;; *************** function _Decrease_Speed *****************
  9119 ;; Defined at:
  9120 ;;		line 60 in file "Fan_Support.c"
  9121 ;; Parameters:    Size  Location     Type
  9122 ;;		None
  9123 ;; Auto vars:     Size  Location     Type
  9124 ;;		None
  9125 ;; Return value:  Size  Location     Type
  9126 ;;		None               void
  9127 ;; Registers used:
  9128 ;;		wreg, status,2, status,0, cstack
  9129 ;; Tracked objects:
  9130 ;;		On entry : 0/0
  9131 ;;		On exit  : 0/0
  9132 ;;		Unchanged: 0/0
  9133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9137 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9138 ;;Total ram usage:        0 bytes
  9139 ;; Hardware stack levels used:    1
  9140 ;; Hardware stack levels required when called:    6
  9141 ;; This function calls:
  9142 ;;		_Do_Beep
  9143 ;;		_do_update_pwm
  9144 ;; This function is called by:
  9145 ;;		_main
  9146 ;;		_INT2_ISR
  9147 ;; This function uses a non-reentrant model
  9148 ;;
  9149                           
  9150                           	psect	text48
  9151  00220E                     __ptext48:
  9152                           	opt stack 0
  9153  00220E                     _Decrease_Speed:
  9154                           	opt stack 24
  9155                           
  9156                           ;Fan_Support.c: 61: if (duty_cycle <= 0) {
  9157                           
  9158                           ;incstack = 0
  9159  00220E  505C               	movf	_duty_cycle,w,c
  9160  002210  A4D8               	btfss	status,2,c
  9161  002212  D005               	goto	l6651
  9162                           
  9163                           ;Fan_Support.c: 62: Do_Beep();
  9164  002214  EC85  F011         	call	_Do_Beep	;wreg free
  9165                           
  9166                           ;Fan_Support.c: 63: Do_Beep();
  9167  002218  EC85  F011         	call	_Do_Beep	;wreg free
  9168                           
  9169                           ;Fan_Support.c: 64: } else {
  9170  00221C  D006               	goto	l267
  9171  00221E                     l6651:
  9172                           
  9173                           ;Fan_Support.c: 65: duty_cycle -= 5;
  9174  00221E  0E05               	movlw	5
  9175  002220  5E5C               	subwf	_duty_cycle,f,c
  9176                           
  9177                           ;Fan_Support.c: 66: do_update_pwm(duty_cycle);
  9178  002222  505C               	movf	_duty_cycle,w,c
  9179  002224  EC69  F00B         	call	_do_update_pwm
  9180  002228  D000               	goto	l267
  9181  00222A                     l267:
  9182  00222A  0012               	return		;funcret
  9183  00222C                     __end_of_Decrease_Speed:
  9184                           	opt stack 0
  9185                           tblptru	equ	0xFF8
  9186                           tblptrh	equ	0xFF7
  9187                           tblptrl	equ	0xFF6
  9188                           tablat	equ	0xFF5
  9189                           prodh	equ	0xFF4
  9190                           prodl	equ	0xFF3
  9191                           intcon	equ	0xFF2
  9192                           intcon2	equ	0xFF1
  9193                           intcon3	equ	0xFF0
  9194                           postinc0	equ	0xFEE
  9195                           wreg	equ	0xFE8
  9196                           postdec1	equ	0xFE5
  9197                           fsr1l	equ	0xFE1
  9198                           indf2	equ	0xFDF
  9199                           postinc2	equ	0xFDE
  9200                           postdec2	equ	0xFDD
  9201                           fsr2h	equ	0xFDA
  9202                           fsr2l	equ	0xFD9
  9203                           status	equ	0xFD8
  9204                           
  9205 ;; *************** function _do_update_pwm *****************
  9206 ;; Defined at:
  9207 ;;		line 71 in file "Fan_Support.c"
  9208 ;; Parameters:    Size  Location     Type
  9209 ;;  duty_cycle      1    wreg     unsigned char 
  9210 ;; Auto vars:     Size  Location     Type
  9211 ;;  duty_cycle      1    3[BANK1 ] unsigned char 
  9212 ;;  dc_f            3    0[BANK1 ] float 
  9213 ;;  dc_I            2    4[BANK1 ] int 
  9214 ;; Return value:  Size  Location     Type
  9215 ;;		None               void
  9216 ;; Registers used:
  9217 ;;		wreg, status,2, status,0, cstack
  9218 ;; Tracked objects:
  9219 ;;		On entry : 0/0
  9220 ;;		On exit  : 0/0
  9221 ;;		Unchanged: 0/0
  9222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9224 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9225 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9226 ;;      Totals:         0       3       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9227 ;;Total ram usage:        9 bytes
  9228 ;; Hardware stack levels used:    1
  9229 ;; Hardware stack levels required when called:    5
  9230 ;; This function calls:
  9231 ;;		___ftdiv
  9232 ;;		___ftmul
  9233 ;;		___fttol
  9234 ;;		___lbtoft
  9235 ;; This function is called by:
  9236 ;;		_Turn_On_Fan
  9237 ;;		_Increase_Speed
  9238 ;;		_Decrease_Speed
  9239 ;;		_Do_Beep_Bad
  9240 ;;		_Do_Beep_Good
  9241 ;; This function uses a non-reentrant model
  9242 ;;
  9243                           
  9244                           	psect	text49
  9245  0016D2                     __ptext49:
  9246                           	opt stack 0
  9247  0016D2                     _do_update_pwm:
  9248                           	opt stack 23
  9249                           
  9250                           ;incstack = 0
  9251                           ;do_update_pwm@duty_cycle stored from wreg
  9252  0016D2  0101               	movlb	1	; () banked
  9253  0016D4  6F61               	movwf	do_update_pwm@duty_cycle& (0+255),b
  9254                           
  9255                           ; BSR set to: 1
  9256                           ;Fan_Support.c: 72: float dc_f;
  9257                           ;Fan_Support.c: 73: int dc_I;
  9258                           ;Fan_Support.c: 74: PR2 = 0b00000100;
  9259  0016D6  0E04               	movlw	4
  9260  0016D8  6ECB               	movwf	4043,c	;volatile
  9261                           
  9262                           ;Fan_Support.c: 75: T2CON = 0b00000111;
  9263  0016DA  0E07               	movlw	7
  9264  0016DC  6ECA               	movwf	4042,c	;volatile
  9265                           
  9266                           ; BSR set to: 1
  9267                           ;Fan_Support.c: 76: dc_f = (4.0 * duty_cycle / 20.0);
  9268  0016DE  0E00               	movlw	0
  9269  0016E0  6E20               	movwf	___ftmul@f2,c
  9270  0016E2  0E80               	movlw	128
  9271  0016E4  6E21               	movwf	___ftmul@f2+1,c
  9272  0016E6  0E40               	movlw	64
  9273  0016E8  6E22               	movwf	___ftmul@f2+2,c
  9274  0016EA  0101               	movlb	1	; () banked
  9275  0016EC  5161               	movf	do_update_pwm@duty_cycle& (0+255),w,b
  9276  0016EE  ECA3  F010         	call	___lbtoft
  9277  0016F2  C019  F01D         	movff	?___lbtoft,___ftmul@f1
  9278  0016F6  C01A  F01E         	movff	?___lbtoft+1,___ftmul@f1+1
  9279  0016FA  C01B  F01F         	movff	?___lbtoft+2,___ftmul@f1+2
  9280  0016FE  EC22  F009         	call	___ftmul	;wreg free
  9281  001702  C01D  F02C         	movff	?___ftmul,___ftdiv@f1
  9282  001706  C01E  F02D         	movff	?___ftmul+1,___ftdiv@f1+1
  9283  00170A  C01F  F02E         	movff	?___ftmul+2,___ftdiv@f1+2
  9284  00170E  0E00               	movlw	0
  9285  001710  6E2F               	movwf	___ftdiv@f2,c
  9286  001712  0EA0               	movlw	160
  9287  001714  6E30               	movwf	___ftdiv@f2+1,c
  9288  001716  0E41               	movlw	65
  9289  001718  6E31               	movwf	___ftdiv@f2+2,c
  9290  00171A  EC8A  F00A         	call	___ftdiv	;wreg free
  9291  00171E  C02C  F15E         	movff	?___ftdiv,do_update_pwm@dc_f
  9292  001722  C02D  F15F         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
  9293  001726  C02E  F160         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
  9294                           
  9295                           ;Fan_Support.c: 77: dc_I = (int) dc_f;
  9296  00172A  C15E  F032         	movff	do_update_pwm@dc_f,___fttol@f1
  9297  00172E  C15F  F033         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
  9298  001732  C160  F034         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
  9299  001736  EC17  F00A         	call	___fttol	;wreg free
  9300  00173A  C032  F162         	movff	?___fttol,do_update_pwm@dc_I
  9301  00173E  C033  F163         	movff	?___fttol+1,do_update_pwm@dc_I+1
  9302                           
  9303                           ;Fan_Support.c: 78: if (dc_I > duty_cycle) dc_I++;
  9304  001742  0101               	movlb	1	; () banked
  9305  001744  5161               	movf	do_update_pwm@duty_cycle& (0+255),w,b
  9306  001746  0100               	movlb	0	; () banked
  9307  001748  6FFD               	movwf	??_do_update_pwm& (0+255),b
  9308  00174A  6BFE               	clrf	(??_do_update_pwm+1)& (0+255),b
  9309  00174C  0101               	movlb	1	; () banked
  9310  00174E  5162               	movf	do_update_pwm@dc_I& (0+255),w,b
  9311  001750  0100               	movlb	0	; () banked
  9312  001752  5DFD               	subwf	??_do_update_pwm& (0+255),w,b
  9313  001754  0100               	movlb	0	; () banked
  9314  001756  51FE               	movf	(??_do_update_pwm+1)& (0+255),w,b
  9315  001758  0A80               	xorlw	128
  9316  00175A  0100               	movlb	0	; () banked
  9317  00175C  6FFF               	movwf	(??_do_update_pwm+2)& (0+255),b
  9318  00175E  0101               	movlb	1	; () banked
  9319  001760  5163               	movf	(do_update_pwm@dc_I+1)& (0+255),w,b
  9320  001762  0A80               	xorlw	128
  9321  001764  0100               	movlb	0	; () banked
  9322  001766  59FF               	subwfb	(??_do_update_pwm+2)& (0+255),w,b
  9323  001768  B0D8               	btfsc	status,0,c
  9324  00176A  D004               	goto	l6117
  9325                           
  9326                           ; BSR set to: 0
  9327  00176C  0101               	movlb	1	; () banked
  9328  00176E  4B62               	infsnz	do_update_pwm@dc_I& (0+255),f,b
  9329  001770  2B63               	incf	(do_update_pwm@dc_I+1)& (0+255),f,b
  9330  001772  D000               	goto	l6117
  9331  001774                     l6117:
  9332                           
  9333                           ;Fan_Support.c: 79: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
  9334  001774  C162  F0FD         	movff	do_update_pwm@dc_I,??_do_update_pwm
  9335  001778  0E03               	movlw	3
  9336  00177A  0100               	movlb	0	; () banked
  9337  00177C  17FD               	andwf	??_do_update_pwm& (0+255),f,b
  9338  00177E  0100               	movlb	0	; () banked
  9339  001780  39FD               	swapf	??_do_update_pwm& (0+255),w,b
  9340  001782  0BF0               	andlw	240
  9341  001784  090C               	iorlw	12
  9342  001786  6EBD               	movwf	4029,c	;volatile
  9343                           
  9344                           ; BSR set to: 0
  9345                           ;Fan_Support.c: 80: CCPR1L = (dc_I) >> 2;
  9346  001788  C162  F0FD         	movff	do_update_pwm@dc_I,??_do_update_pwm
  9347  00178C  C163  F0FE         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
  9348  001790  0100               	movlb	0	; () banked
  9349  001792  35FE               	rlcf	(??_do_update_pwm+1)& (0+255),w,b
  9350  001794  33FE               	rrcf	(??_do_update_pwm+1)& (0+255),f,b
  9351  001796  33FD               	rrcf	??_do_update_pwm& (0+255),f,b
  9352  001798  0100               	movlb	0	; () banked
  9353  00179A  35FE               	rlcf	(??_do_update_pwm+1)& (0+255),w,b
  9354  00179C  33FE               	rrcf	(??_do_update_pwm+1)& (0+255),f,b
  9355  00179E  33FD               	rrcf	??_do_update_pwm& (0+255),f,b
  9356  0017A0  0100               	movlb	0	; () banked
  9357  0017A2  51FD               	movf	??_do_update_pwm& (0+255),w,b
  9358  0017A4  6EBE               	movwf	4030,c	;volatile
  9359                           
  9360                           ; BSR set to: 0
  9361  0017A6  0012               	return		;funcret
  9362  0017A8                     __end_of_do_update_pwm:
  9363                           	opt stack 0
  9364                           tblptru	equ	0xFF8
  9365                           tblptrh	equ	0xFF7
  9366                           tblptrl	equ	0xFF6
  9367                           tablat	equ	0xFF5
  9368                           prodh	equ	0xFF4
  9369                           prodl	equ	0xFF3
  9370                           intcon	equ	0xFF2
  9371                           intcon2	equ	0xFF1
  9372                           intcon3	equ	0xFF0
  9373                           postinc0	equ	0xFEE
  9374                           wreg	equ	0xFE8
  9375                           postdec1	equ	0xFE5
  9376                           fsr1l	equ	0xFE1
  9377                           indf2	equ	0xFDF
  9378                           postinc2	equ	0xFDE
  9379                           postdec2	equ	0xFDD
  9380                           fsr2h	equ	0xFDA
  9381                           fsr2l	equ	0xFD9
  9382                           status	equ	0xFD8
  9383                           
  9384 ;; *************** function ___lbtoft *****************
  9385 ;; Defined at:
  9386 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  9387 ;; Parameters:    Size  Location     Type
  9388 ;;  c               1    wreg     unsigned char 
  9389 ;; Auto vars:     Size  Location     Type
  9390 ;;  c               1   27[COMRAM] unsigned char 
  9391 ;; Return value:  Size  Location     Type
  9392 ;;                  3   24[COMRAM] float 
  9393 ;; Registers used:
  9394 ;;		wreg, status,2, status,0, cstack
  9395 ;; Tracked objects:
  9396 ;;		On entry : 0/0
  9397 ;;		On exit  : 0/0
  9398 ;;		Unchanged: 0/0
  9399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9400 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9401 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9403 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9404 ;;Total ram usage:        4 bytes
  9405 ;; Hardware stack levels used:    1
  9406 ;; Hardware stack levels required when called:    4
  9407 ;; This function calls:
  9408 ;;		___ftpack
  9409 ;; This function is called by:
  9410 ;;		_get_RPM
  9411 ;;		_do_update_pwm
  9412 ;; This function uses a non-reentrant model
  9413 ;;
  9414                           
  9415                           	psect	text50
  9416  002146                     __ptext50:
  9417                           	opt stack 0
  9418  002146                     ___lbtoft:
  9419                           	opt stack 25
  9420                           
  9421                           ; BSR set to: 0
  9422                           ;incstack = 0
  9423                           ;___lbtoft@c stored from wreg
  9424  002146  6E1C               	movwf	___lbtoft@c,c
  9425  002148  501C               	movf	___lbtoft@c,w,c
  9426  00214A  6E11               	movwf	___ftpack@arg,c
  9427  00214C  6A12               	clrf	___ftpack@arg+1,c
  9428  00214E  6A13               	clrf	___ftpack@arg+2,c
  9429  002150  0E8E               	movlw	142
  9430  002152  6E14               	movwf	___ftpack@exp,c
  9431  002154  0E00               	movlw	0
  9432  002156  6E15               	movwf	___ftpack@sign,c
  9433  002158  ECD4  F00B         	call	___ftpack	;wreg free
  9434  00215C  C011  F019         	movff	?___ftpack,?___lbtoft
  9435  002160  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
  9436  002164  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
  9437  002168  D000               	goto	l1468
  9438  00216A                     l1468:
  9439  00216A  0012               	return		;funcret
  9440  00216C                     __end_of___lbtoft:
  9441                           	opt stack 0
  9442                           tblptru	equ	0xFF8
  9443                           tblptrh	equ	0xFF7
  9444                           tblptrl	equ	0xFF6
  9445                           tablat	equ	0xFF5
  9446                           prodh	equ	0xFF4
  9447                           prodl	equ	0xFF3
  9448                           intcon	equ	0xFF2
  9449                           intcon2	equ	0xFF1
  9450                           intcon3	equ	0xFF0
  9451                           postinc0	equ	0xFEE
  9452                           wreg	equ	0xFE8
  9453                           postdec1	equ	0xFE5
  9454                           fsr1l	equ	0xFE1
  9455                           indf2	equ	0xFDF
  9456                           postinc2	equ	0xFDE
  9457                           postdec2	equ	0xFDD
  9458                           fsr2h	equ	0xFDA
  9459                           fsr2l	equ	0xFD9
  9460                           status	equ	0xFD8
  9461                           
  9462 ;; *************** function ___fttol *****************
  9463 ;; Defined at:
  9464 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  9465 ;; Parameters:    Size  Location     Type
  9466 ;;  f1              3   49[COMRAM] float 
  9467 ;; Auto vars:     Size  Location     Type
  9468 ;;  lval            4   59[COMRAM] unsigned long 
  9469 ;;  exp1            1   63[COMRAM] unsigned char 
  9470 ;;  sign1           1   58[COMRAM] unsigned char 
  9471 ;; Return value:  Size  Location     Type
  9472 ;;                  4   49[COMRAM] long 
  9473 ;; Registers used:
  9474 ;;		wreg, status,2, status,0
  9475 ;; Tracked objects:
  9476 ;;		On entry : 0/0
  9477 ;;		On exit  : 0/0
  9478 ;;		Unchanged: 0/0
  9479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9480 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9481 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9482 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9483 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9484 ;;Total ram usage:       15 bytes
  9485 ;; Hardware stack levels used:    1
  9486 ;; Hardware stack levels required when called:    3
  9487 ;; This function calls:
  9488 ;;		Nothing
  9489 ;; This function is called by:
  9490 ;;		_do_update_pwm
  9491 ;;		_main
  9492 ;; This function uses a non-reentrant model
  9493 ;;
  9494                           
  9495                           	psect	text51
  9496  00142E                     __ptext51:
  9497                           	opt stack 0
  9498  00142E                     ___fttol:
  9499                           	opt stack 27
  9500                           
  9501                           ;incstack = 0
  9502  00142E  C034  F036         	movff	___fttol@f1+2,??___fttol
  9503  001432  6A37               	clrf	(??___fttol+1)& (0+255),c
  9504  001434  6A38               	clrf	(??___fttol+2)& (0+255),c
  9505  001436  3433               	rlcf	___fttol@f1+1,w,c
  9506  001438  3636               	rlcf	??___fttol& (0+255),f,c
  9507  00143A  E301               	bnc	u3971
  9508  00143C  8037               	bsf	(??___fttol+1)& (0+255),0,c
  9509  00143E                     u3971:
  9510  00143E  5036               	movf	??___fttol,w,c
  9511  001440  6E40               	movwf	___fttol@exp1,c
  9512  001442  5040               	movf	___fttol@exp1,w,c
  9513  001444  A4D8               	btfss	status,2,c
  9514  001446  D002               	goto	l5867
  9515  001448  D039               	goto	l5891
  9516  00144A  D063               	goto	l1427
  9517  00144C                     l5867:
  9518  00144C  0E17               	movlw	23
  9519  00144E  6E36               	movwf	??___fttol& (0+255),c
  9520  001450  C032  F037         	movff	___fttol@f1,??___fttol+1
  9521  001454  C033  F038         	movff	___fttol@f1+1,??___fttol+2
  9522  001458  C034  F039         	movff	___fttol@f1+2,??___fttol+3
  9523  00145C  2836               	incf	??___fttol,w,c
  9524  00145E  6E3A               	movwf	(??___fttol+4)& (0+255),c
  9525  001460  D004               	goto	u3990
  9526  001462                     u3995:
  9527  001462  90D8               	bcf	status,0,c
  9528  001464  3239               	rrcf	??___fttol+3,f,c
  9529  001466  3238               	rrcf	??___fttol+2,f,c
  9530  001468  3237               	rrcf	??___fttol+1,f,c
  9531  00146A                     u3990:
  9532  00146A  2E3A               	decfsz	(??___fttol+4)& (0+255),f,c
  9533  00146C  D7FA               	goto	u3995
  9534  00146E  5037               	movf	??___fttol+1,w,c
  9535  001470  6E3B               	movwf	___fttol@sign1,c
  9536  001472  8E33               	bsf	___fttol@f1+1,7,c
  9537  001474  0EFF               	movlw	255
  9538  001476  1632               	andwf	___fttol@f1,f,c
  9539  001478  0EFF               	movlw	255
  9540  00147A  1633               	andwf	___fttol@f1+1,f,c
  9541  00147C  0E00               	movlw	0
  9542  00147E  1634               	andwf	___fttol@f1+2,f,c
  9543  001480  5032               	movf	___fttol@f1,w,c
  9544  001482  6E3C               	movwf	___fttol@lval,c
  9545  001484  5033               	movf	___fttol@f1+1,w,c
  9546  001486  6E3D               	movwf	___fttol@lval+1,c
  9547  001488  5034               	movf	___fttol@f1+2,w,c
  9548  00148A  6E3E               	movwf	___fttol@lval+2,c
  9549  00148C  6A3F               	clrf	___fttol@lval+3,c
  9550  00148E  0E8E               	movlw	142
  9551  001490  5E40               	subwf	___fttol@exp1,f,c
  9552  001492  AE40               	btfss	___fttol@exp1,7,c
  9553  001494  D010               	goto	l5889
  9554  001496  5040               	movf	___fttol@exp1,w,c
  9555  001498  0A80               	xorlw	128
  9556  00149A  0F8F               	addlw	143
  9557  00149C  B0D8               	btfsc	status,0,c
  9558  00149E  D003               	goto	l5885
  9559  0014A0  D00D               	goto	l5891
  9560  0014A2  D037               	goto	l1427
  9561  0014A4  D000               	goto	l5885
  9562  0014A6                     l5885:
  9563  0014A6  90D8               	bcf	status,0,c
  9564  0014A8  323F               	rrcf	___fttol@lval+3,f,c
  9565  0014AA  323E               	rrcf	___fttol@lval+2,f,c
  9566  0014AC  323D               	rrcf	___fttol@lval+1,f,c
  9567  0014AE  323C               	rrcf	___fttol@lval,f,c
  9568  0014B0  3E40               	incfsz	___fttol@exp1,f,c
  9569  0014B2  D7F9               	goto	l5885
  9570  0014B4  D019               	goto	l5899
  9571  0014B6                     l5889:
  9572  0014B6  0E17               	movlw	23
  9573  0014B8  6440               	cpfsgt	___fttol@exp1,c
  9574  0014BA  D011               	goto	l5897
  9575  0014BC                     l5891:
  9576  0014BC  0E00               	movlw	0
  9577  0014BE  6E32               	movwf	?___fttol,c
  9578  0014C0  0E00               	movlw	0
  9579  0014C2  6E33               	movwf	?___fttol+1,c
  9580  0014C4  0E00               	movlw	0
  9581  0014C6  6E34               	movwf	?___fttol+2,c
  9582  0014C8  0E00               	movlw	0
  9583  0014CA  6E35               	movwf	?___fttol+3,c
  9584  0014CC  D022               	goto	l1427
  9585  0014CE  D007               	goto	l5897
  9586  0014D0                     l5895:
  9587  0014D0  90D8               	bcf	status,0,c
  9588  0014D2  363C               	rlcf	___fttol@lval,f,c
  9589  0014D4  363D               	rlcf	___fttol@lval+1,f,c
  9590  0014D6  363E               	rlcf	___fttol@lval+2,f,c
  9591  0014D8  363F               	rlcf	___fttol@lval+3,f,c
  9592  0014DA  0640               	decf	___fttol@exp1,f,c
  9593  0014DC  D000               	goto	l5897
  9594  0014DE                     l5897:
  9595  0014DE  5040               	movf	___fttol@exp1,w,c
  9596  0014E0  B4D8               	btfsc	status,2,c
  9597  0014E2  D002               	goto	l5899
  9598  0014E4  D7F5               	goto	l5895
  9599  0014E6  D000               	goto	l5899
  9600  0014E8                     l5899:
  9601  0014E8  503B               	movf	___fttol@sign1,w,c
  9602  0014EA  B4D8               	btfsc	status,2,c
  9603  0014EC  D009               	goto	l5903
  9604  0014EE  1E3F               	comf	___fttol@lval+3,f,c
  9605  0014F0  1E3E               	comf	___fttol@lval+2,f,c
  9606  0014F2  1E3D               	comf	___fttol@lval+1,f,c
  9607  0014F4  6C3C               	negf	___fttol@lval,c
  9608  0014F6  0E00               	movlw	0
  9609  0014F8  223D               	addwfc	___fttol@lval+1,f,c
  9610  0014FA  223E               	addwfc	___fttol@lval+2,f,c
  9611  0014FC  223F               	addwfc	___fttol@lval+3,f,c
  9612  0014FE  D000               	goto	l5903
  9613  001500                     l5903:
  9614  001500  C03C  F032         	movff	___fttol@lval,?___fttol
  9615  001504  C03D  F033         	movff	___fttol@lval+1,?___fttol+1
  9616  001508  C03E  F034         	movff	___fttol@lval+2,?___fttol+2
  9617  00150C  C03F  F035         	movff	___fttol@lval+3,?___fttol+3
  9618  001510  D000               	goto	l1427
  9619  001512                     l1427:
  9620  001512  0012               	return		;funcret
  9621  001514                     __end_of___fttol:
  9622                           	opt stack 0
  9623                           tblptru	equ	0xFF8
  9624                           tblptrh	equ	0xFF7
  9625                           tblptrl	equ	0xFF6
  9626                           tablat	equ	0xFF5
  9627                           prodh	equ	0xFF4
  9628                           prodl	equ	0xFF3
  9629                           intcon	equ	0xFF2
  9630                           intcon2	equ	0xFF1
  9631                           intcon3	equ	0xFF0
  9632                           postinc0	equ	0xFEE
  9633                           wreg	equ	0xFE8
  9634                           postdec1	equ	0xFE5
  9635                           fsr1l	equ	0xFE1
  9636                           indf2	equ	0xFDF
  9637                           postinc2	equ	0xFDE
  9638                           postdec2	equ	0xFDD
  9639                           fsr2h	equ	0xFDA
  9640                           fsr2l	equ	0xFD9
  9641                           status	equ	0xFD8
  9642                           
  9643 ;; *************** function ___ftmul *****************
  9644 ;; Defined at:
  9645 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  9646 ;; Parameters:    Size  Location     Type
  9647 ;;  f1              3   28[COMRAM] float 
  9648 ;;  f2              3   31[COMRAM] float 
  9649 ;; Auto vars:     Size  Location     Type
  9650 ;;  f3_as_produc    3   38[COMRAM] unsigned um
  9651 ;;  sign            1   42[COMRAM] unsigned char 
  9652 ;;  cntr            1   41[COMRAM] unsigned char 
  9653 ;;  exp             1   37[COMRAM] unsigned char 
  9654 ;; Return value:  Size  Location     Type
  9655 ;;                  3   28[COMRAM] float 
  9656 ;; Registers used:
  9657 ;;		wreg, status,2, status,0, cstack
  9658 ;; Tracked objects:
  9659 ;;		On entry : 0/0
  9660 ;;		On exit  : 0/0
  9661 ;;		Unchanged: 0/0
  9662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9663 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9664 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9665 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9666 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9667 ;;Total ram usage:       15 bytes
  9668 ;; Hardware stack levels used:    1
  9669 ;; Hardware stack levels required when called:    4
  9670 ;; This function calls:
  9671 ;;		___ftpack
  9672 ;; This function is called by:
  9673 ;;		_get_RPM
  9674 ;;		_do_update_pwm
  9675 ;; This function uses a non-reentrant model
  9676 ;;
  9677                           
  9678                           	psect	text52
  9679  001244                     __ptext52:
  9680                           	opt stack 0
  9681  001244                     ___ftmul:
  9682                           	opt stack 25
  9683                           
  9684                           ;incstack = 0
  9685  001244  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
  9686  001248  6A24               	clrf	(??___ftmul+1)& (0+255),c
  9687  00124A  6A25               	clrf	(??___ftmul+2)& (0+255),c
  9688  00124C  341E               	rlcf	___ftmul@f1+1,w,c
  9689  00124E  3623               	rlcf	??___ftmul& (0+255),f,c
  9690  001250  E301               	bnc	u3911
  9691  001252  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  9692  001254                     u3911:
  9693  001254  5023               	movf	??___ftmul,w,c
  9694  001256  6E26               	movwf	___ftmul@exp,c
  9695  001258  5026               	movf	___ftmul@exp,w,c
  9696  00125A  A4D8               	btfss	status,2,c
  9697  00125C  D002               	goto	l5819
  9698  00125E  D00E               	goto	l5821
  9699  001260  D06C               	goto	l1406
  9700  001262                     l5819:
  9701  001262  C022  F023         	movff	___ftmul@f2+2,??___ftmul
  9702  001266  6A24               	clrf	(??___ftmul+1)& (0+255),c
  9703  001268  6A25               	clrf	(??___ftmul+2)& (0+255),c
  9704  00126A  3421               	rlcf	___ftmul@f2+1,w,c
  9705  00126C  3623               	rlcf	??___ftmul& (0+255),f,c
  9706  00126E  E301               	bnc	u3931
  9707  001270  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  9708  001272                     u3931:
  9709  001272  5023               	movf	??___ftmul,w,c
  9710  001274  6E2B               	movwf	___ftmul@sign,c
  9711  001276  502B               	movf	___ftmul@sign,w,c
  9712  001278  A4D8               	btfss	status,2,c
  9713  00127A  D007               	goto	l5825
  9714  00127C                     l5821:
  9715  00127C  0E00               	movlw	0
  9716  00127E  6E1D               	movwf	?___ftmul,c
  9717  001280  0E00               	movlw	0
  9718  001282  6E1E               	movwf	?___ftmul+1,c
  9719  001284  0E00               	movlw	0
  9720  001286  6E1F               	movwf	?___ftmul+2,c
  9721  001288  D058               	goto	l1406
  9722  00128A                     l5825:
  9723  00128A  502B               	movf	___ftmul@sign,w,c
  9724  00128C  0F7B               	addlw	123
  9725  00128E  2626               	addwf	___ftmul@exp,f,c
  9726  001290  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
  9727  001294  5022               	movf	___ftmul@f2+2,w,c
  9728  001296  1A2B               	xorwf	___ftmul@sign,f,c
  9729  001298  0E80               	movlw	128
  9730  00129A  162B               	andwf	___ftmul@sign,f,c
  9731  00129C  8E1E               	bsf	___ftmul@f1+1,7,c
  9732  00129E  8E21               	bsf	___ftmul@f2+1,7,c
  9733  0012A0  0EFF               	movlw	255
  9734  0012A2  1620               	andwf	___ftmul@f2,f,c
  9735  0012A4  0EFF               	movlw	255
  9736  0012A6  1621               	andwf	___ftmul@f2+1,f,c
  9737  0012A8  0E00               	movlw	0
  9738  0012AA  1622               	andwf	___ftmul@f2+2,f,c
  9739  0012AC  0E00               	movlw	0
  9740  0012AE  6E27               	movwf	___ftmul@f3_as_product,c
  9741  0012B0  0E00               	movlw	0
  9742  0012B2  6E28               	movwf	___ftmul@f3_as_product+1,c
  9743  0012B4  0E00               	movlw	0
  9744  0012B6  6E29               	movwf	___ftmul@f3_as_product+2,c
  9745  0012B8  0E07               	movlw	7
  9746  0012BA  6E2A               	movwf	___ftmul@cntr,c
  9747  0012BC  D000               	goto	l5839
  9748  0012BE                     l5839:
  9749  0012BE  A01D               	btfss	___ftmul@f1,0,c
  9750  0012C0  D007               	goto	l5843
  9751  0012C2  5020               	movf	___ftmul@f2,w,c
  9752  0012C4  2627               	addwf	___ftmul@f3_as_product,f,c
  9753  0012C6  5021               	movf	___ftmul@f2+1,w,c
  9754  0012C8  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  9755  0012CA  5022               	movf	___ftmul@f2+2,w,c
  9756  0012CC  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  9757  0012CE  D000               	goto	l5843
  9758  0012D0                     l5843:
  9759  0012D0  90D8               	bcf	status,0,c
  9760  0012D2  321F               	rrcf	___ftmul@f1+2,f,c
  9761  0012D4  321E               	rrcf	___ftmul@f1+1,f,c
  9762  0012D6  321D               	rrcf	___ftmul@f1,f,c
  9763  0012D8  90D8               	bcf	status,0,c
  9764  0012DA  3620               	rlcf	___ftmul@f2,f,c
  9765  0012DC  3621               	rlcf	___ftmul@f2+1,f,c
  9766  0012DE  3622               	rlcf	___ftmul@f2+2,f,c
  9767  0012E0  2E2A               	decfsz	___ftmul@cntr,f,c
  9768  0012E2  D7ED               	goto	l5839
  9769  0012E4  D000               	goto	l5847
  9770  0012E6                     l5847:
  9771  0012E6  0E09               	movlw	9
  9772  0012E8  6E2A               	movwf	___ftmul@cntr,c
  9773  0012EA  D000               	goto	l5849
  9774  0012EC                     l5849:
  9775  0012EC  A01D               	btfss	___ftmul@f1,0,c
  9776  0012EE  D007               	goto	l5853
  9777  0012F0  5020               	movf	___ftmul@f2,w,c
  9778  0012F2  2627               	addwf	___ftmul@f3_as_product,f,c
  9779  0012F4  5021               	movf	___ftmul@f2+1,w,c
  9780  0012F6  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  9781  0012F8  5022               	movf	___ftmul@f2+2,w,c
  9782  0012FA  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  9783  0012FC  D000               	goto	l5853
  9784  0012FE                     l5853:
  9785  0012FE  90D8               	bcf	status,0,c
  9786  001300  321F               	rrcf	___ftmul@f1+2,f,c
  9787  001302  321E               	rrcf	___ftmul@f1+1,f,c
  9788  001304  321D               	rrcf	___ftmul@f1,f,c
  9789  001306  90D8               	bcf	status,0,c
  9790  001308  3229               	rrcf	___ftmul@f3_as_product+2,f,c
  9791  00130A  3228               	rrcf	___ftmul@f3_as_product+1,f,c
  9792  00130C  3227               	rrcf	___ftmul@f3_as_product,f,c
  9793  00130E  2E2A               	decfsz	___ftmul@cntr,f,c
  9794  001310  D7ED               	goto	l5849
  9795  001312  D000               	goto	l5857
  9796  001314                     l5857:
  9797  001314  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
  9798  001318  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9799  00131C  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9800  001320  C026  F014         	movff	___ftmul@exp,___ftpack@exp
  9801  001324  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
  9802  001328  ECD4  F00B         	call	___ftpack	;wreg free
  9803  00132C  C011  F01D         	movff	?___ftpack,?___ftmul
  9804  001330  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
  9805  001334  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
  9806  001338  D000               	goto	l1406
  9807  00133A                     l1406:
  9808  00133A  0012               	return		;funcret
  9809  00133C                     __end_of___ftmul:
  9810                           	opt stack 0
  9811                           tblptru	equ	0xFF8
  9812                           tblptrh	equ	0xFF7
  9813                           tblptrl	equ	0xFF6
  9814                           tablat	equ	0xFF5
  9815                           prodh	equ	0xFF4
  9816                           prodl	equ	0xFF3
  9817                           intcon	equ	0xFF2
  9818                           intcon2	equ	0xFF1
  9819                           intcon3	equ	0xFF0
  9820                           postinc0	equ	0xFEE
  9821                           wreg	equ	0xFE8
  9822                           postdec1	equ	0xFE5
  9823                           fsr1l	equ	0xFE1
  9824                           indf2	equ	0xFDF
  9825                           postinc2	equ	0xFDE
  9826                           postdec2	equ	0xFDD
  9827                           fsr2h	equ	0xFDA
  9828                           fsr2l	equ	0xFD9
  9829                           status	equ	0xFD8
  9830                           
  9831 ;; *************** function ___ftdiv *****************
  9832 ;; Defined at:
  9833 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  9834 ;; Parameters:    Size  Location     Type
  9835 ;;  f1              3   43[COMRAM] float 
  9836 ;;  f2              3   46[COMRAM] float 
  9837 ;; Auto vars:     Size  Location     Type
  9838 ;;  f3              3   53[COMRAM] float 
  9839 ;;  sign            1   57[COMRAM] unsigned char 
  9840 ;;  exp             1   56[COMRAM] unsigned char 
  9841 ;;  cntr            1   52[COMRAM] unsigned char 
  9842 ;; Return value:  Size  Location     Type
  9843 ;;                  3   43[COMRAM] float 
  9844 ;; Registers used:
  9845 ;;		wreg, status,2, status,0, cstack
  9846 ;; Tracked objects:
  9847 ;;		On entry : 0/0
  9848 ;;		On exit  : 0/0
  9849 ;;		Unchanged: 0/0
  9850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9851 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9852 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9853 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9854 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9855 ;;Total ram usage:       15 bytes
  9856 ;; Hardware stack levels used:    1
  9857 ;; Hardware stack levels required when called:    4
  9858 ;; This function calls:
  9859 ;;		___ftpack
  9860 ;; This function is called by:
  9861 ;;		_do_update_pwm
  9862 ;;		_read_volt
  9863 ;; This function uses a non-reentrant model
  9864 ;;
  9865                           
  9866                           	psect	text53
  9867  001514                     __ptext53:
  9868                           	opt stack 0
  9869  001514                     ___ftdiv:
  9870                           	opt stack 23
  9871                           
  9872                           ;incstack = 0
  9873  001514  C02E  F032         	movff	___ftdiv@f1+2,??___ftdiv
  9874  001518  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  9875  00151A  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  9876  00151C  342D               	rlcf	___ftdiv@f1+1,w,c
  9877  00151E  3632               	rlcf	??___ftdiv& (0+255),f,c
  9878  001520  E301               	bnc	u3861
  9879  001522  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  9880  001524                     u3861:
  9881  001524  5032               	movf	??___ftdiv,w,c
  9882  001526  6E39               	movwf	___ftdiv@exp,c
  9883  001528  5039               	movf	___ftdiv@exp,w,c
  9884  00152A  A4D8               	btfss	status,2,c
  9885  00152C  D002               	goto	l5773
  9886  00152E  D00E               	goto	l5775
  9887  001530  D061               	goto	l1391
  9888  001532                     l5773:
  9889  001532  C031  F032         	movff	___ftdiv@f2+2,??___ftdiv
  9890  001536  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  9891  001538  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  9892  00153A  3430               	rlcf	___ftdiv@f2+1,w,c
  9893  00153C  3632               	rlcf	??___ftdiv& (0+255),f,c
  9894  00153E  E301               	bnc	u3881
  9895  001540  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  9896  001542                     u3881:
  9897  001542  5032               	movf	??___ftdiv,w,c
  9898  001544  6E3A               	movwf	___ftdiv@sign,c
  9899  001546  503A               	movf	___ftdiv@sign,w,c
  9900  001548  A4D8               	btfss	status,2,c
  9901  00154A  D007               	goto	l5779
  9902  00154C                     l5775:
  9903  00154C  0E00               	movlw	0
  9904  00154E  6E2C               	movwf	?___ftdiv,c
  9905  001550  0E00               	movlw	0
  9906  001552  6E2D               	movwf	?___ftdiv+1,c
  9907  001554  0E00               	movlw	0
  9908  001556  6E2E               	movwf	?___ftdiv+2,c
  9909  001558  D04D               	goto	l1391
  9910  00155A                     l5779:
  9911  00155A  0E00               	movlw	0
  9912  00155C  6E36               	movwf	___ftdiv@f3,c
  9913  00155E  0E00               	movlw	0
  9914  001560  6E37               	movwf	___ftdiv@f3+1,c
  9915  001562  0E00               	movlw	0
  9916  001564  6E38               	movwf	___ftdiv@f3+2,c
  9917  001566  503A               	movf	___ftdiv@sign,w,c
  9918  001568  0F89               	addlw	137
  9919  00156A  5E39               	subwf	___ftdiv@exp,f,c
  9920  00156C  C02E  F03A         	movff	___ftdiv@f1+2,___ftdiv@sign
  9921  001570  5031               	movf	___ftdiv@f2+2,w,c
  9922  001572  1A3A               	xorwf	___ftdiv@sign,f,c
  9923  001574  0E80               	movlw	128
  9924  001576  163A               	andwf	___ftdiv@sign,f,c
  9925  001578  8E2D               	bsf	___ftdiv@f1+1,7,c
  9926  00157A  0EFF               	movlw	255
  9927  00157C  162C               	andwf	___ftdiv@f1,f,c
  9928  00157E  0EFF               	movlw	255
  9929  001580  162D               	andwf	___ftdiv@f1+1,f,c
  9930  001582  0E00               	movlw	0
  9931  001584  162E               	andwf	___ftdiv@f1+2,f,c
  9932  001586  8E30               	bsf	___ftdiv@f2+1,7,c
  9933  001588  0EFF               	movlw	255
  9934  00158A  162F               	andwf	___ftdiv@f2,f,c
  9935  00158C  0EFF               	movlw	255
  9936  00158E  1630               	andwf	___ftdiv@f2+1,f,c
  9937  001590  0E00               	movlw	0
  9938  001592  1631               	andwf	___ftdiv@f2+2,f,c
  9939  001594  0E18               	movlw	24
  9940  001596  6E35               	movwf	___ftdiv@cntr,c
  9941  001598  D000               	goto	l5799
  9942  00159A                     l5799:
  9943  00159A  90D8               	bcf	status,0,c
  9944  00159C  3636               	rlcf	___ftdiv@f3,f,c
  9945  00159E  3637               	rlcf	___ftdiv@f3+1,f,c
  9946  0015A0  3638               	rlcf	___ftdiv@f3+2,f,c
  9947  0015A2  502F               	movf	___ftdiv@f2,w,c
  9948  0015A4  5C2C               	subwf	___ftdiv@f1,w,c
  9949  0015A6  5030               	movf	___ftdiv@f2+1,w,c
  9950  0015A8  582D               	subwfb	___ftdiv@f1+1,w,c
  9951  0015AA  5031               	movf	___ftdiv@f2+2,w,c
  9952  0015AC  582E               	subwfb	___ftdiv@f1+2,w,c
  9953  0015AE  A0D8               	btfss	status,0,c
  9954  0015B0  D007               	goto	l1394
  9955  0015B2  502F               	movf	___ftdiv@f2,w,c
  9956  0015B4  5E2C               	subwf	___ftdiv@f1,f,c
  9957  0015B6  5030               	movf	___ftdiv@f2+1,w,c
  9958  0015B8  5A2D               	subwfb	___ftdiv@f1+1,f,c
  9959  0015BA  5031               	movf	___ftdiv@f2+2,w,c
  9960  0015BC  5A2E               	subwfb	___ftdiv@f1+2,f,c
  9961  0015BE  8036               	bsf	___ftdiv@f3,0,c
  9962  0015C0                     l1394:
  9963  0015C0  90D8               	bcf	status,0,c
  9964  0015C2  362C               	rlcf	___ftdiv@f1,f,c
  9965  0015C4  362D               	rlcf	___ftdiv@f1+1,f,c
  9966  0015C6  362E               	rlcf	___ftdiv@f1+2,f,c
  9967  0015C8  2E35               	decfsz	___ftdiv@cntr,f,c
  9968  0015CA  D7E7               	goto	l5799
  9969  0015CC  D000               	goto	l5809
  9970  0015CE                     l5809:
  9971  0015CE  C036  F011         	movff	___ftdiv@f3,___ftpack@arg
  9972  0015D2  C037  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9973  0015D6  C038  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9974  0015DA  C039  F014         	movff	___ftdiv@exp,___ftpack@exp
  9975  0015DE  C03A  F015         	movff	___ftdiv@sign,___ftpack@sign
  9976  0015E2  ECD4  F00B         	call	___ftpack	;wreg free
  9977  0015E6  C011  F02C         	movff	?___ftpack,?___ftdiv
  9978  0015EA  C012  F02D         	movff	?___ftpack+1,?___ftdiv+1
  9979  0015EE  C013  F02E         	movff	?___ftpack+2,?___ftdiv+2
  9980  0015F2  D000               	goto	l1391
  9981  0015F4                     l1391:
  9982  0015F4  0012               	return		;funcret
  9983  0015F6                     __end_of___ftdiv:
  9984                           	opt stack 0
  9985                           tblptru	equ	0xFF8
  9986                           tblptrh	equ	0xFF7
  9987                           tblptrl	equ	0xFF6
  9988                           tablat	equ	0xFF5
  9989                           prodh	equ	0xFF4
  9990                           prodl	equ	0xFF3
  9991                           intcon	equ	0xFF2
  9992                           intcon2	equ	0xFF1
  9993                           intcon3	equ	0xFF0
  9994                           postinc0	equ	0xFEE
  9995                           wreg	equ	0xFE8
  9996                           postdec1	equ	0xFE5
  9997                           fsr1l	equ	0xFE1
  9998                           indf2	equ	0xFDF
  9999                           postinc2	equ	0xFDE
 10000                           postdec2	equ	0xFDD
 10001                           fsr2h	equ	0xFDA
 10002                           fsr2l	equ	0xFD9
 10003                           status	equ	0xFD8
 10004                           
 10005 ;; *************** function ___ftpack *****************
 10006 ;; Defined at:
 10007 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 10008 ;; Parameters:    Size  Location     Type
 10009 ;;  arg             3   16[COMRAM] unsigned um
 10010 ;;  exp             1   19[COMRAM] unsigned char 
 10011 ;;  sign            1   20[COMRAM] unsigned char 
 10012 ;; Auto vars:     Size  Location     Type
 10013 ;;		None
 10014 ;; Return value:  Size  Location     Type
 10015 ;;                  3   16[COMRAM] float 
 10016 ;; Registers used:
 10017 ;;		wreg, status,2, status,0
 10018 ;; Tracked objects:
 10019 ;;		On entry : 0/0
 10020 ;;		On exit  : 0/0
 10021 ;;		Unchanged: 0/0
 10022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10023 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10025 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10026 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10027 ;;Total ram usage:        8 bytes
 10028 ;; Hardware stack levels used:    1
 10029 ;; Hardware stack levels required when called:    3
 10030 ;; This function calls:
 10031 ;;		Nothing
 10032 ;; This function is called by:
 10033 ;;		___ftdiv
 10034 ;;		___ftmul
 10035 ;;		___lbtoft
 10036 ;; This function uses a non-reentrant model
 10037 ;;
 10038                           
 10039                           	psect	text54
 10040  0017A8                     __ptext54:
 10041                           	opt stack 0
 10042  0017A8                     ___ftpack:
 10043                           	opt stack 25
 10044                           
 10045                           ;incstack = 0
 10046  0017A8  5014               	movf	___ftpack@exp,w,c
 10047  0017AA  B4D8               	btfsc	status,2,c
 10048  0017AC  D005               	goto	l5663
 10049  0017AE  5011               	movf	___ftpack@arg,w,c
 10050  0017B0  1012               	iorwf	___ftpack@arg+1,w,c
 10051  0017B2  1013               	iorwf	___ftpack@arg+2,w,c
 10052  0017B4  A4D8               	btfss	status,2,c
 10053  0017B6  D00E               	goto	l5669
 10054  0017B8                     l5663:
 10055  0017B8  0E00               	movlw	0
 10056  0017BA  6E11               	movwf	?___ftpack,c
 10057  0017BC  0E00               	movlw	0
 10058  0017BE  6E12               	movwf	?___ftpack+1,c
 10059  0017C0  0E00               	movlw	0
 10060  0017C2  6E13               	movwf	?___ftpack+2,c
 10061  0017C4  D053               	goto	l1319
 10062  0017C6  D006               	goto	l5669
 10063  0017C8                     l5667:
 10064  0017C8  2A14               	incf	___ftpack@exp,f,c
 10065  0017CA  90D8               	bcf	status,0,c
 10066  0017CC  3213               	rrcf	___ftpack@arg+2,f,c
 10067  0017CE  3212               	rrcf	___ftpack@arg+1,f,c
 10068  0017D0  3211               	rrcf	___ftpack@arg,f,c
 10069  0017D2  D000               	goto	l5669
 10070  0017D4                     l5669:
 10071  0017D4  0E00               	movlw	0
 10072  0017D6  1411               	andwf	___ftpack@arg,w,c
 10073  0017D8  6E16               	movwf	??___ftpack& (0+255),c
 10074  0017DA  0E00               	movlw	0
 10075  0017DC  1412               	andwf	___ftpack@arg+1,w,c
 10076  0017DE  6E17               	movwf	(??___ftpack+1)& (0+255),c
 10077  0017E0  0EFE               	movlw	254
 10078  0017E2  1413               	andwf	___ftpack@arg+2,w,c
 10079  0017E4  6E18               	movwf	(??___ftpack+2)& (0+255),c
 10080  0017E6  5016               	movf	??___ftpack,w,c
 10081  0017E8  1017               	iorwf	??___ftpack+1,w,c
 10082  0017EA  1018               	iorwf	??___ftpack+2,w,c
 10083  0017EC  B4D8               	btfsc	status,2,c
 10084  0017EE  D00E               	goto	l5675
 10085  0017F0  D7EB               	goto	l5667
 10086  0017F2  D00C               	goto	l5675
 10087  0017F4                     l5671:
 10088  0017F4  2A14               	incf	___ftpack@exp,f,c
 10089  0017F6  0E01               	movlw	1
 10090  0017F8  2611               	addwf	___ftpack@arg,f,c
 10091  0017FA  0E00               	movlw	0
 10092  0017FC  2212               	addwfc	___ftpack@arg+1,f,c
 10093  0017FE  0E00               	movlw	0
 10094  001800  2213               	addwfc	___ftpack@arg+2,f,c
 10095  001802  90D8               	bcf	status,0,c
 10096  001804  3213               	rrcf	___ftpack@arg+2,f,c
 10097  001806  3212               	rrcf	___ftpack@arg+1,f,c
 10098  001808  3211               	rrcf	___ftpack@arg,f,c
 10099  00180A  D000               	goto	l5675
 10100  00180C                     l5675:
 10101  00180C  0E00               	movlw	0
 10102  00180E  1411               	andwf	___ftpack@arg,w,c
 10103  001810  6E16               	movwf	??___ftpack& (0+255),c
 10104  001812  0E00               	movlw	0
 10105  001814  1412               	andwf	___ftpack@arg+1,w,c
 10106  001816  6E17               	movwf	(??___ftpack+1)& (0+255),c
 10107  001818  0EFF               	movlw	255
 10108  00181A  1413               	andwf	___ftpack@arg+2,w,c
 10109  00181C  6E18               	movwf	(??___ftpack+2)& (0+255),c
 10110  00181E  5016               	movf	??___ftpack,w,c
 10111  001820  1017               	iorwf	??___ftpack+1,w,c
 10112  001822  1018               	iorwf	??___ftpack+2,w,c
 10113  001824  B4D8               	btfsc	status,2,c
 10114  001826  D008               	goto	l5679
 10115  001828  D7E5               	goto	l5671
 10116  00182A  D006               	goto	l5679
 10117  00182C                     l5677:
 10118  00182C  0614               	decf	___ftpack@exp,f,c
 10119  00182E  90D8               	bcf	status,0,c
 10120  001830  3611               	rlcf	___ftpack@arg,f,c
 10121  001832  3612               	rlcf	___ftpack@arg+1,f,c
 10122  001834  3613               	rlcf	___ftpack@arg+2,f,c
 10123  001836  D000               	goto	l5679
 10124  001838                     l5679:
 10125  001838  BE12               	btfsc	___ftpack@arg+1,7,c
 10126  00183A  D004               	goto	l1330
 10127  00183C  0E02               	movlw	2
 10128  00183E  6014               	cpfslt	___ftpack@exp,c
 10129  001840  D7F5               	goto	l5677
 10130  001842  D000               	goto	l1330
 10131  001844                     l1330:
 10132  001844  B014               	btfsc	___ftpack@exp,0,c
 10133  001846  D002               	goto	l5685
 10134  001848  9E12               	bcf	___ftpack@arg+1,7,c
 10135  00184A  D000               	goto	l5685
 10136  00184C                     l5685:
 10137  00184C  90D8               	bcf	status,0,c
 10138  00184E  3214               	rrcf	___ftpack@exp,f,c
 10139  001850  5014               	movf	___ftpack@exp,w,c
 10140  001852  1213               	iorwf	___ftpack@arg+2,f,c
 10141  001854  5015               	movf	___ftpack@sign,w,c
 10142  001856  B4D8               	btfsc	status,2,c
 10143  001858  D002               	goto	l5691
 10144  00185A  8E13               	bsf	___ftpack@arg+2,7,c
 10145  00185C  D000               	goto	l5691
 10146  00185E                     l5691:
 10147  00185E  C011  F011         	movff	___ftpack@arg,?___ftpack
 10148  001862  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
 10149  001866  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
 10150  00186A  D000               	goto	l1319
 10151  00186C                     l1319:
 10152  00186C  0012               	return		;funcret
 10153  00186E                     __end_of___ftpack:
 10154                           	opt stack 0
 10155                           tblptru	equ	0xFF8
 10156                           tblptrh	equ	0xFF7
 10157                           tblptrl	equ	0xFF6
 10158                           tablat	equ	0xFF5
 10159                           prodh	equ	0xFF4
 10160                           prodl	equ	0xFF3
 10161                           intcon	equ	0xFF2
 10162                           intcon2	equ	0xFF1
 10163                           intcon3	equ	0xFF0
 10164                           postinc0	equ	0xFEE
 10165                           wreg	equ	0xFE8
 10166                           postdec1	equ	0xFE5
 10167                           fsr1l	equ	0xFE1
 10168                           indf2	equ	0xFDF
 10169                           postinc2	equ	0xFDE
 10170                           postdec2	equ	0xFDD
 10171                           fsr2h	equ	0xFDA
 10172                           fsr2l	equ	0xFD9
 10173                           status	equ	0xFD8
 10174                           
 10175 ;; *************** function _Do_Beep *****************
 10176 ;; Defined at:
 10177 ;;		line 62 in file "utils.c"
 10178 ;; Parameters:    Size  Location     Type
 10179 ;;		None
 10180 ;; Auto vars:     Size  Location     Type
 10181 ;;		None
 10182 ;; Return value:  Size  Location     Type
 10183 ;;                  2  229[None  ] int 
 10184 ;; Registers used:
 10185 ;;		wreg, status,2, cstack
 10186 ;; Tracked objects:
 10187 ;;		On entry : 0/0
 10188 ;;		On exit  : 0/0
 10189 ;;		Unchanged: 0/0
 10190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10195 ;;Total ram usage:        0 bytes
 10196 ;; Hardware stack levels used:    1
 10197 ;; Hardware stack levels required when called:    4
 10198 ;; This function calls:
 10199 ;;		_Activate_Buzzer
 10200 ;;		_Deactivate_Buzzer
 10201 ;;		_Wait_Half_Second
 10202 ;; This function is called by:
 10203 ;;		_Increase_Speed
 10204 ;;		_Decrease_Speed
 10205 ;; This function uses a non-reentrant model
 10206 ;;
 10207                           
 10208                           	psect	text55
 10209  00230A                     __ptext55:
 10210                           	opt stack 0
 10211  00230A                     _Do_Beep:
 10212                           	opt stack 25
 10213                           
 10214                           ;utils.c: 64: Activate_Buzzer();
 10215                           
 10216                           ;incstack = 0
 10217  00230A  EC8E  F011         	call	_Activate_Buzzer	;wreg free
 10218                           
 10219                           ;utils.c: 65: Wait_Half_Second();
 10220  00230E  EC31  F011         	call	_Wait_Half_Second	;wreg free
 10221                           
 10222                           ;utils.c: 66: Deactivate_Buzzer();
 10223  002312  EC08  F012         	call	_Deactivate_Buzzer	;wreg free
 10224                           
 10225                           ;utils.c: 67: Wait_Half_Second();
 10226  002316  EC31  F011         	call	_Wait_Half_Second	;wreg free
 10227  00231A  0012               	return		;funcret
 10228  00231C                     __end_of_Do_Beep:
 10229                           	opt stack 0
 10230                           tblptru	equ	0xFF8
 10231                           tblptrh	equ	0xFF7
 10232                           tblptrl	equ	0xFF6
 10233                           tablat	equ	0xFF5
 10234                           prodh	equ	0xFF4
 10235                           prodl	equ	0xFF3
 10236                           intcon	equ	0xFF2
 10237                           intcon2	equ	0xFF1
 10238                           intcon3	equ	0xFF0
 10239                           postinc0	equ	0xFEE
 10240                           wreg	equ	0xFE8
 10241                           postdec1	equ	0xFE5
 10242                           fsr1l	equ	0xFE1
 10243                           indf2	equ	0xFDF
 10244                           postinc2	equ	0xFDE
 10245                           postdec2	equ	0xFDD
 10246                           fsr2h	equ	0xFDA
 10247                           fsr2l	equ	0xFD9
 10248                           status	equ	0xFD8
 10249                           
 10250 ;; *************** function _Wait_Half_Second *****************
 10251 ;; Defined at:
 10252 ;;		line 94 in file "utils.c"
 10253 ;; Parameters:    Size  Location     Type
 10254 ;;		None
 10255 ;; Auto vars:     Size  Location     Type
 10256 ;;		None
 10257 ;; Return value:  Size  Location     Type
 10258 ;;		None               void
 10259 ;; Registers used:
 10260 ;;		wreg, status,2
 10261 ;; Tracked objects:
 10262 ;;		On entry : 0/0
 10263 ;;		On exit  : 0/0
 10264 ;;		Unchanged: 0/0
 10265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10270 ;;Total ram usage:        0 bytes
 10271 ;; Hardware stack levels used:    1
 10272 ;; Hardware stack levels required when called:    3
 10273 ;; This function calls:
 10274 ;;		Nothing
 10275 ;; This function is called by:
 10276 ;;		_Do_Beep
 10277 ;;		_Wait_One_Second
 10278 ;; This function uses a non-reentrant model
 10279 ;;
 10280                           
 10281                           	psect	text56
 10282  002262                     __ptext56:
 10283                           	opt stack 0
 10284  002262                     _Wait_Half_Second:
 10285                           	opt stack 25
 10286                           
 10287                           ;utils.c: 96: T0CON = 0x02;
 10288                           
 10289                           ;incstack = 0
 10290  002262  0E02               	movlw	2
 10291  002264  6ED5               	movwf	4053,c	;volatile
 10292                           
 10293                           ;utils.c: 97: TMR0L = 0xDB;
 10294  002266  0EDB               	movlw	219
 10295  002268  6ED6               	movwf	4054,c	;volatile
 10296                           
 10297                           ;utils.c: 98: TMR0H = 0x0B;
 10298  00226A  0E0B               	movlw	11
 10299  00226C  6ED7               	movwf	4055,c	;volatile
 10300                           
 10301                           ;utils.c: 99: INTCONbits.TMR0IF = 0;
 10302  00226E  94F2               	bcf	intcon,2,c	;volatile
 10303                           
 10304                           ;utils.c: 100: T0CONbits.TMR0ON = 1;
 10305  002270  8ED5               	bsf	4053,7,c	;volatile
 10306                           
 10307                           ;utils.c: 101: while (INTCONbits.TMR0IF == 0);
 10308  002272  D000               	goto	l561
 10309  002274                     l561:
 10310  002274  A4F2               	btfss	intcon,2,c	;volatile
 10311  002276  D7FE               	goto	l561
 10312                           
 10313                           ;utils.c: 102: T0CONbits.TMR0ON = 0;
 10314  002278  9ED5               	bcf	4053,7,c	;volatile
 10315  00227A  0012               	return		;funcret
 10316  00227C                     __end_of_Wait_Half_Second:
 10317                           	opt stack 0
 10318                           tblptru	equ	0xFF8
 10319                           tblptrh	equ	0xFF7
 10320                           tblptrl	equ	0xFF6
 10321                           tablat	equ	0xFF5
 10322                           prodh	equ	0xFF4
 10323                           prodl	equ	0xFF3
 10324                           intcon	equ	0xFF2
 10325                           intcon2	equ	0xFF1
 10326                           intcon3	equ	0xFF0
 10327                           postinc0	equ	0xFEE
 10328                           wreg	equ	0xFE8
 10329                           postdec1	equ	0xFE5
 10330                           fsr1l	equ	0xFE1
 10331                           indf2	equ	0xFDF
 10332                           postinc2	equ	0xFDE
 10333                           postdec2	equ	0xFDD
 10334                           fsr2h	equ	0xFDA
 10335                           fsr2l	equ	0xFD9
 10336                           status	equ	0xFD8
 10337                           
 10338 ;; *************** function _Deactivate_Buzzer *****************
 10339 ;; Defined at:
 10340 ;;		line 137 in file "utils.c"
 10341 ;; Parameters:    Size  Location     Type
 10342 ;;		None
 10343 ;; Auto vars:     Size  Location     Type
 10344 ;;		None
 10345 ;; Return value:  Size  Location     Type
 10346 ;;		None               void
 10347 ;; Registers used:
 10348 ;;		wreg, status,2
 10349 ;; Tracked objects:
 10350 ;;		On entry : 0/0
 10351 ;;		On exit  : 0/0
 10352 ;;		Unchanged: 0/0
 10353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10358 ;;Total ram usage:        0 bytes
 10359 ;; Hardware stack levels used:    1
 10360 ;; Hardware stack levels required when called:    3
 10361 ;; This function calls:
 10362 ;;		Nothing
 10363 ;; This function is called by:
 10364 ;;		_Do_Beep
 10365 ;;		_Do_Beep_Bad
 10366 ;;		_main
 10367 ;;		_Do_Beep_Good
 10368 ;; This function uses a non-reentrant model
 10369 ;;
 10370                           
 10371                           	psect	text57
 10372  002410                     __ptext57:
 10373                           	opt stack 0
 10374  002410                     _Deactivate_Buzzer:
 10375                           	opt stack 25
 10376                           
 10377                           ;utils.c: 139: CCP2CON = 0x0;
 10378                           
 10379                           ;incstack = 0
 10380  002410  0E00               	movlw	0
 10381  002412  6EBA               	movwf	4026,c	;volatile
 10382                           
 10383                           ;utils.c: 140: PORTCbits.RC1 = 0;
 10384  002414  9282               	bcf	3970,1,c	;volatile
 10385  002416  0012               	return		;funcret
 10386  002418                     __end_of_Deactivate_Buzzer:
 10387                           	opt stack 0
 10388                           tblptru	equ	0xFF8
 10389                           tblptrh	equ	0xFF7
 10390                           tblptrl	equ	0xFF6
 10391                           tablat	equ	0xFF5
 10392                           prodh	equ	0xFF4
 10393                           prodl	equ	0xFF3
 10394                           intcon	equ	0xFF2
 10395                           intcon2	equ	0xFF1
 10396                           intcon3	equ	0xFF0
 10397                           postinc0	equ	0xFEE
 10398                           wreg	equ	0xFE8
 10399                           postdec1	equ	0xFE5
 10400                           fsr1l	equ	0xFE1
 10401                           indf2	equ	0xFDF
 10402                           postinc2	equ	0xFDE
 10403                           postdec2	equ	0xFDD
 10404                           fsr2h	equ	0xFDA
 10405                           fsr2l	equ	0xFD9
 10406                           status	equ	0xFD8
 10407                           
 10408 ;; *************** function _Activate_Buzzer *****************
 10409 ;; Defined at:
 10410 ;;		line 105 in file "utils.c"
 10411 ;; Parameters:    Size  Location     Type
 10412 ;;		None
 10413 ;; Auto vars:     Size  Location     Type
 10414 ;;		None
 10415 ;; Return value:  Size  Location     Type
 10416 ;;		None               void
 10417 ;; Registers used:
 10418 ;;		wreg, status,2
 10419 ;; Tracked objects:
 10420 ;;		On entry : 0/0
 10421 ;;		On exit  : 0/0
 10422 ;;		Unchanged: 0/0
 10423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10428 ;;Total ram usage:        0 bytes
 10429 ;; Hardware stack levels used:    1
 10430 ;; Hardware stack levels required when called:    3
 10431 ;; This function calls:
 10432 ;;		Nothing
 10433 ;; This function is called by:
 10434 ;;		_Do_Beep
 10435 ;;		_main
 10436 ;; This function uses a non-reentrant model
 10437 ;;
 10438                           
 10439                           	psect	text58
 10440  00231C                     __ptext58:
 10441                           	opt stack 0
 10442  00231C                     _Activate_Buzzer:
 10443                           	opt stack 25
 10444                           
 10445                           ;utils.c: 107: PR2 = 0b11111001 ;
 10446                           
 10447                           ;incstack = 0
 10448  00231C  0EF9               	movlw	249
 10449  00231E  6ECB               	movwf	4043,c	;volatile
 10450                           
 10451                           ;utils.c: 108: T2CON = 0b00000101 ;
 10452  002320  0E05               	movlw	5
 10453  002322  6ECA               	movwf	4042,c	;volatile
 10454                           
 10455                           ;utils.c: 109: CCPR2L = 0b01001010 ;
 10456  002324  0E4A               	movlw	74
 10457  002326  6EBB               	movwf	4027,c	;volatile
 10458                           
 10459                           ;utils.c: 110: CCP2CON = 0b00111100 ;
 10460  002328  0E3C               	movlw	60
 10461  00232A  6EBA               	movwf	4026,c	;volatile
 10462  00232C  0012               	return		;funcret
 10463  00232E                     __end_of_Activate_Buzzer:
 10464                           	opt stack 0
 10465                           tblptru	equ	0xFF8
 10466                           tblptrh	equ	0xFF7
 10467                           tblptrl	equ	0xFF6
 10468                           tablat	equ	0xFF5
 10469                           prodh	equ	0xFF4
 10470                           prodl	equ	0xFF3
 10471                           intcon	equ	0xFF2
 10472                           intcon2	equ	0xFF1
 10473                           intcon3	equ	0xFF0
 10474                           postinc0	equ	0xFEE
 10475                           wreg	equ	0xFE8
 10476                           postdec1	equ	0xFE5
 10477                           fsr1l	equ	0xFE1
 10478                           indf2	equ	0xFDF
 10479                           postinc2	equ	0xFDE
 10480                           postdec2	equ	0xFDD
 10481                           fsr2h	equ	0xFDA
 10482                           fsr2l	equ	0xFD9
 10483                           status	equ	0xFD8
 10484                           
 10485 ;; *************** function _DS3231_Setup_Time *****************
 10486 ;; Defined at:
 10487 ;;		line 86 in file "I2C_Support.c"
 10488 ;; Parameters:    Size  Location     Type
 10489 ;;		None
 10490 ;; Auto vars:     Size  Location     Type
 10491 ;;  Address         1   19[COMRAM] unsigned char 
 10492 ;;  Device          1   18[COMRAM] unsigned char 
 10493 ;; Return value:  Size  Location     Type
 10494 ;;		None               void
 10495 ;; Registers used:
 10496 ;;		wreg, status,2, status,0, cstack
 10497 ;; Tracked objects:
 10498 ;;		On entry : 0/0
 10499 ;;		On exit  : 0/0
 10500 ;;		Unchanged: 0/0
 10501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10503 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10505 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10506 ;;Total ram usage:        2 bytes
 10507 ;; Hardware stack levels used:    1
 10508 ;; Hardware stack levels required when called:    5
 10509 ;; This function calls:
 10510 ;;		_I2C_Start
 10511 ;;		_I2C_Stop
 10512 ;;		_I2C_Write
 10513 ;; This function is called by:
 10514 ;;		_main
 10515 ;; This function uses a non-reentrant model
 10516 ;;
 10517                           
 10518                           	psect	text59
 10519  001BF6                     __ptext59:
 10520                           	opt stack 0
 10521  001BF6                     _DS3231_Setup_Time:
 10522                           	opt stack 25
 10523                           
 10524                           ;I2C_Support.c: 87: char Device = 0x68;
 10525                           
 10526                           ;incstack = 0
 10527  001BF6  0E68               	movlw	104
 10528  001BF8  6E13               	movwf	DS3231_Setup_Time@Device,c
 10529                           
 10530                           ;I2C_Support.c: 88: char Address = 0x00;
 10531  001BFA  0E00               	movlw	0
 10532  001BFC  6E14               	movwf	DS3231_Setup_Time@Address,c
 10533                           
 10534                           ;I2C_Support.c: 89: second = 0x00;
 10535  001BFE  0E00               	movlw	0
 10536  001C00  6E62               	movwf	_second,c
 10537                           
 10538                           ;I2C_Support.c: 90: minute = 0x40;
 10539  001C02  0E40               	movlw	64
 10540  001C04  6E5F               	movwf	_minute,c
 10541                           
 10542                           ;I2C_Support.c: 91: hour = 0x14;
 10543  001C06  0E14               	movlw	20
 10544  001C08  6E5E               	movwf	_hour,c
 10545                           
 10546                           ;I2C_Support.c: 92: dow = 0x05;
 10547  001C0A  0E05               	movlw	5
 10548  001C0C  6E5B               	movwf	_dow,c
 10549                           
 10550                           ;I2C_Support.c: 93: day = 0x09;
 10551  001C0E  0E09               	movlw	9
 10552  001C10  6E5A               	movwf	_day,c
 10553                           
 10554                           ;I2C_Support.c: 94: month = 0x11;
 10555  001C12  0E11               	movlw	17
 10556  001C14  6E60               	movwf	_month,c
 10557                           
 10558                           ;I2C_Support.c: 95: year = 0x23;
 10559  001C16  0E23               	movlw	35
 10560  001C18  6E6C               	movwf	_year,c
 10561                           
 10562                           ;I2C_Support.c: 96: I2C_Start();
 10563  001C1A  ECA0  F011         	call	_I2C_Start	;wreg free
 10564                           
 10565                           ;I2C_Support.c: 97: I2C_Write((Device << 1) | 0);
 10566  001C1E  5013               	movf	DS3231_Setup_Time@Device,w,c
 10567  001C20  2413               	addwf	DS3231_Setup_Time@Device,w,c
 10568  001C22  EC0C  F010         	call	_I2C_Write
 10569                           
 10570                           ;I2C_Support.c: 98: I2C_Write(Address);
 10571  001C26  5014               	movf	DS3231_Setup_Time@Address,w,c
 10572  001C28  EC0C  F010         	call	_I2C_Write
 10573                           
 10574                           ;I2C_Support.c: 99: I2C_Write(second);
 10575  001C2C  5062               	movf	_second,w,c
 10576  001C2E  EC0C  F010         	call	_I2C_Write
 10577                           
 10578                           ;I2C_Support.c: 100: I2C_Write(minute);
 10579  001C32  505F               	movf	_minute,w,c
 10580  001C34  EC0C  F010         	call	_I2C_Write
 10581                           
 10582                           ;I2C_Support.c: 101: I2C_Write(hour);
 10583  001C38  505E               	movf	_hour,w,c
 10584  001C3A  EC0C  F010         	call	_I2C_Write
 10585                           
 10586                           ;I2C_Support.c: 102: I2C_Write(dow);
 10587  001C3E  505B               	movf	_dow,w,c
 10588  001C40  EC0C  F010         	call	_I2C_Write
 10589                           
 10590                           ;I2C_Support.c: 103: I2C_Write(day);
 10591  001C44  505A               	movf	_day,w,c
 10592  001C46  EC0C  F010         	call	_I2C_Write
 10593                           
 10594                           ;I2C_Support.c: 104: I2C_Write(month);
 10595  001C4A  5060               	movf	_month,w,c
 10596  001C4C  EC0C  F010         	call	_I2C_Write
 10597                           
 10598                           ;I2C_Support.c: 105: I2C_Write(year);
 10599  001C50  506C               	movf	_year,w,c
 10600  001C52  EC0C  F010         	call	_I2C_Write
 10601                           
 10602                           ;I2C_Support.c: 106: I2C_Stop();
 10603  001C56  EC97  F011         	call	_I2C_Stop	;wreg free
 10604  001C5A  0012               	return		;funcret
 10605  001C5C                     __end_of_DS3231_Setup_Time:
 10606                           	opt stack 0
 10607                           tblptru	equ	0xFF8
 10608                           tblptrh	equ	0xFF7
 10609                           tblptrl	equ	0xFF6
 10610                           tablat	equ	0xFF5
 10611                           prodh	equ	0xFF4
 10612                           prodl	equ	0xFF3
 10613                           intcon	equ	0xFF2
 10614                           intcon2	equ	0xFF1
 10615                           intcon3	equ	0xFF0
 10616                           postinc0	equ	0xFEE
 10617                           wreg	equ	0xFE8
 10618                           postdec1	equ	0xFE5
 10619                           fsr1l	equ	0xFE1
 10620                           indf2	equ	0xFDF
 10621                           postinc2	equ	0xFDE
 10622                           postdec2	equ	0xFDD
 10623                           fsr2h	equ	0xFDA
 10624                           fsr2l	equ	0xFD9
 10625                           status	equ	0xFD8
 10626                           
 10627 ;; *************** function _DS3231_Read_Time *****************
 10628 ;; Defined at:
 10629 ;;		line 50 in file "I2C_Support.c"
 10630 ;; Parameters:    Size  Location     Type
 10631 ;;		None
 10632 ;; Auto vars:     Size  Location     Type
 10633 ;;  Device          1   20[COMRAM] unsigned char 
 10634 ;;  Address         1   19[COMRAM] unsigned char 
 10635 ;;  Data_Ret        1    0        unsigned char 
 10636 ;; Return value:  Size  Location     Type
 10637 ;;		None               void
 10638 ;; Registers used:
 10639 ;;		wreg, status,2, status,0, cstack
 10640 ;; Tracked objects:
 10641 ;;		On entry : 0/0
 10642 ;;		On exit  : 0/0
 10643 ;;		Unchanged: 0/0
 10644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10646 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10648 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10649 ;;Total ram usage:        2 bytes
 10650 ;; Hardware stack levels used:    1
 10651 ;; Hardware stack levels required when called:    6
 10652 ;; This function calls:
 10653 ;;		_I2C_ReStart
 10654 ;;		_I2C_Read
 10655 ;;		_I2C_Start
 10656 ;;		_I2C_Stop
 10657 ;;		_I2C_Write
 10658 ;; This function is called by:
 10659 ;;		_main
 10660 ;; This function uses a non-reentrant model
 10661 ;;
 10662                           
 10663                           	psect	text60
 10664  001C5C                     __ptext60:
 10665                           	opt stack 0
 10666  001C5C                     _DS3231_Read_Time:
 10667                           	opt stack 24
 10668                           
 10669                           ;I2C_Support.c: 51: char Device = 0x68;
 10670                           
 10671                           ;incstack = 0
 10672  001C5C  0E68               	movlw	104
 10673  001C5E  6E15               	movwf	DS3231_Read_Time@Device,c
 10674                           
 10675                           ;I2C_Support.c: 52: char Address = 0x00;
 10676  001C60  0E00               	movlw	0
 10677  001C62  6E14               	movwf	DS3231_Read_Time@Address,c
 10678                           
 10679                           ;I2C_Support.c: 53: char Data_Ret;
 10680                           ;I2C_Support.c: 54: I2C_Start();
 10681  001C64  ECA0  F011         	call	_I2C_Start	;wreg free
 10682                           
 10683                           ;I2C_Support.c: 55: I2C_Write((Device << 1) | 0);
 10684  001C68  5015               	movf	DS3231_Read_Time@Device,w,c
 10685  001C6A  2415               	addwf	DS3231_Read_Time@Device,w,c
 10686  001C6C  EC0C  F010         	call	_I2C_Write
 10687                           
 10688                           ;I2C_Support.c: 56: I2C_Write(Address);
 10689  001C70  5014               	movf	DS3231_Read_Time@Address,w,c
 10690  001C72  EC0C  F010         	call	_I2C_Write
 10691                           
 10692                           ;I2C_Support.c: 57: I2C_ReStart();
 10693  001C76  EC4A  F011         	call	_I2C_ReStart	;wreg free
 10694                           
 10695                           ;I2C_Support.c: 58: I2C_Write((Device << 1) | 1);
 10696  001C7A  80D8               	bsf	status,0,c
 10697  001C7C  3415               	rlcf	DS3231_Read_Time@Device,w,c
 10698  001C7E  EC0C  F010         	call	_I2C_Write
 10699                           
 10700                           ;I2C_Support.c: 60: second = I2C_Read(1);
 10701  001C82  0E01               	movlw	1
 10702  001C84  ECAA  F00F         	call	_I2C_Read
 10703  001C88  6E62               	movwf	_second,c
 10704                           
 10705                           ;I2C_Support.c: 61: minute = I2C_Read(1);
 10706  001C8A  0E01               	movlw	1
 10707  001C8C  ECAA  F00F         	call	_I2C_Read
 10708  001C90  6E5F               	movwf	_minute,c
 10709                           
 10710                           ;I2C_Support.c: 62: hour = I2C_Read(1);
 10711  001C92  0E01               	movlw	1
 10712  001C94  ECAA  F00F         	call	_I2C_Read
 10713  001C98  6E5E               	movwf	_hour,c
 10714                           
 10715                           ;I2C_Support.c: 63: dow = I2C_Read(1);
 10716  001C9A  0E01               	movlw	1
 10717  001C9C  ECAA  F00F         	call	_I2C_Read
 10718  001CA0  6E5B               	movwf	_dow,c
 10719                           
 10720                           ;I2C_Support.c: 64: day = I2C_Read(1);
 10721  001CA2  0E01               	movlw	1
 10722  001CA4  ECAA  F00F         	call	_I2C_Read
 10723  001CA8  6E5A               	movwf	_day,c
 10724                           
 10725                           ;I2C_Support.c: 65: month = I2C_Read(1);
 10726  001CAA  0E01               	movlw	1
 10727  001CAC  ECAA  F00F         	call	_I2C_Read
 10728  001CB0  6E60               	movwf	_month,c
 10729                           
 10730                           ;I2C_Support.c: 66: year = I2C_Read(0);
 10731  001CB2  0E00               	movlw	0
 10732  001CB4  ECAA  F00F         	call	_I2C_Read
 10733  001CB8  6E6C               	movwf	_year,c
 10734                           
 10735                           ;I2C_Support.c: 67: I2C_Stop();
 10736  001CBA  EC97  F011         	call	_I2C_Stop	;wreg free
 10737  001CBE  0012               	return		;funcret
 10738  001CC0                     __end_of_DS3231_Read_Time:
 10739                           	opt stack 0
 10740                           tblptru	equ	0xFF8
 10741                           tblptrh	equ	0xFF7
 10742                           tblptrl	equ	0xFF6
 10743                           tablat	equ	0xFF5
 10744                           prodh	equ	0xFF4
 10745                           prodl	equ	0xFF3
 10746                           intcon	equ	0xFF2
 10747                           intcon2	equ	0xFF1
 10748                           intcon3	equ	0xFF0
 10749                           postinc0	equ	0xFEE
 10750                           wreg	equ	0xFE8
 10751                           postdec1	equ	0xFE5
 10752                           fsr1l	equ	0xFE1
 10753                           indf2	equ	0xFDF
 10754                           postinc2	equ	0xFDE
 10755                           postdec2	equ	0xFDD
 10756                           fsr2h	equ	0xFDA
 10757                           fsr2l	equ	0xFD9
 10758                           status	equ	0xFD8
 10759                           
 10760 ;; *************** function _DS1621_Read_Temp *****************
 10761 ;; Defined at:
 10762 ;;		line 19 in file "I2C_Support.c"
 10763 ;; Parameters:    Size  Location     Type
 10764 ;;		None
 10765 ;; Auto vars:     Size  Location     Type
 10766 ;;  Device          1   23[COMRAM] unsigned char 
 10767 ;;  Cmd             1   22[COMRAM] unsigned char 
 10768 ;;  Data_Ret        1   21[COMRAM] unsigned char 
 10769 ;; Return value:  Size  Location     Type
 10770 ;;                  2   19[COMRAM] int 
 10771 ;; Registers used:
 10772 ;;		wreg, status,2, status,0, cstack
 10773 ;; Tracked objects:
 10774 ;;		On entry : 0/0
 10775 ;;		On exit  : 0/0
 10776 ;;		Unchanged: 0/0
 10777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10778 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10779 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10781 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10782 ;;Total ram usage:        5 bytes
 10783 ;; Hardware stack levels used:    1
 10784 ;; Hardware stack levels required when called:    6
 10785 ;; This function calls:
 10786 ;;		_I2C_ReStart
 10787 ;;		_I2C_Read
 10788 ;;		_I2C_Start
 10789 ;;		_I2C_Stop
 10790 ;;		_I2C_Write
 10791 ;; This function is called by:
 10792 ;;		_main
 10793 ;; This function uses a non-reentrant model
 10794 ;;
 10795                           
 10796                           	psect	text61
 10797  002056                     __ptext61:
 10798                           	opt stack 0
 10799  002056                     _DS1621_Read_Temp:
 10800                           	opt stack 24
 10801                           
 10802                           ;I2C_Support.c: 20: char Device = 0x48;
 10803                           
 10804                           ;incstack = 0
 10805  002056  0E48               	movlw	72
 10806  002058  6E18               	movwf	DS1621_Read_Temp@Device,c
 10807                           
 10808                           ;I2C_Support.c: 21: char Data_Ret;
 10809                           ;I2C_Support.c: 22: char Cmd = 0xAA;
 10810  00205A  0EAA               	movlw	170
 10811  00205C  6E17               	movwf	DS1621_Read_Temp@Cmd,c
 10812                           
 10813                           ;I2C_Support.c: 23: I2C_Start();
 10814  00205E  ECA0  F011         	call	_I2C_Start	;wreg free
 10815                           
 10816                           ;I2C_Support.c: 24: I2C_Write((Device << 1) | 0);
 10817  002062  5018               	movf	DS1621_Read_Temp@Device,w,c
 10818  002064  2418               	addwf	DS1621_Read_Temp@Device,w,c
 10819  002066  EC0C  F010         	call	_I2C_Write
 10820                           
 10821                           ;I2C_Support.c: 25: I2C_Write(Cmd);
 10822  00206A  5017               	movf	DS1621_Read_Temp@Cmd,w,c
 10823  00206C  EC0C  F010         	call	_I2C_Write
 10824                           
 10825                           ;I2C_Support.c: 26: I2C_ReStart();
 10826  002070  EC4A  F011         	call	_I2C_ReStart	;wreg free
 10827                           
 10828                           ;I2C_Support.c: 27: I2C_Write((Device << 1) | 1);
 10829  002074  80D8               	bsf	status,0,c
 10830  002076  3418               	rlcf	DS1621_Read_Temp@Device,w,c
 10831  002078  EC0C  F010         	call	_I2C_Write
 10832                           
 10833                           ;I2C_Support.c: 28: Data_Ret = I2C_Read(0);
 10834  00207C  0E00               	movlw	0
 10835  00207E  ECAA  F00F         	call	_I2C_Read
 10836  002082  6E16               	movwf	DS1621_Read_Temp@Data_Ret,c
 10837                           
 10838                           ;I2C_Support.c: 29: I2C_Stop();
 10839  002084  EC97  F011         	call	_I2C_Stop	;wreg free
 10840                           
 10841                           ;I2C_Support.c: 30: return Data_Ret;
 10842  002088  C016  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 10843  00208C  6A15               	clrf	?_DS1621_Read_Temp+1,c
 10844  00208E  D000               	goto	l392
 10845  002090                     l392:
 10846  002090  0012               	return		;funcret
 10847  002092                     __end_of_DS1621_Read_Temp:
 10848                           	opt stack 0
 10849                           tblptru	equ	0xFF8
 10850                           tblptrh	equ	0xFF7
 10851                           tblptrl	equ	0xFF6
 10852                           tablat	equ	0xFF5
 10853                           prodh	equ	0xFF4
 10854                           prodl	equ	0xFF3
 10855                           intcon	equ	0xFF2
 10856                           intcon2	equ	0xFF1
 10857                           intcon3	equ	0xFF0
 10858                           postinc0	equ	0xFEE
 10859                           wreg	equ	0xFE8
 10860                           postdec1	equ	0xFE5
 10861                           fsr1l	equ	0xFE1
 10862                           indf2	equ	0xFDF
 10863                           postinc2	equ	0xFDE
 10864                           postdec2	equ	0xFDD
 10865                           fsr2h	equ	0xFDA
 10866                           fsr2l	equ	0xFD9
 10867                           status	equ	0xFD8
 10868                           
 10869 ;; *************** function _I2C_Write *****************
 10870 ;; Defined at:
 10871 ;;		line 32 in file "I2C_Soft.c"
 10872 ;; Parameters:    Size  Location     Type
 10873 ;;  outByte         1    wreg     unsigned char 
 10874 ;; Auto vars:     Size  Location     Type
 10875 ;;  outByte         1   16[COMRAM] unsigned char 
 10876 ;;  n               1   17[COMRAM] unsigned char 
 10877 ;; Return value:  Size  Location     Type
 10878 ;;		None               void
 10879 ;; Registers used:
 10880 ;;		wreg, status,2, status,0, cstack
 10881 ;; Tracked objects:
 10882 ;;		On entry : 0/0
 10883 ;;		On exit  : 0/0
 10884 ;;		Unchanged: 0/0
 10885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10887 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10889 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10890 ;;Total ram usage:        2 bytes
 10891 ;; Hardware stack levels used:    1
 10892 ;; Hardware stack levels required when called:    4
 10893 ;; This function calls:
 10894 ;;		_i2cHighScl
 10895 ;;		_i2cHighSda
 10896 ;;		_i2cLowScl
 10897 ;;		_i2cLowSda
 10898 ;; This function is called by:
 10899 ;;		_I2C_Write_Cmd_Only
 10900 ;;		_I2C_Write_Cmd_Write_Data
 10901 ;;		_DS1621_Read_Temp
 10902 ;;		_DS3231_Read_Time
 10903 ;;		_DS3231_Setup_Time
 10904 ;;		_I2C_Write_Address_Read_One_Byte
 10905 ;;		_I2C_Write_Address_Write_One_Byte
 10906 ;;		_I2C_Write_Cmd_Read_One_Byte
 10907 ;; This function uses a non-reentrant model
 10908 ;;
 10909                           
 10910                           	psect	text62
 10911  002018                     __ptext62:
 10912                           	opt stack 0
 10913  002018                     _I2C_Write:
 10914                           	opt stack 23
 10915                           
 10916                           ;incstack = 0
 10917                           ;I2C_Write@outByte stored from wreg
 10918  002018  6E11               	movwf	I2C_Write@outByte,c
 10919                           
 10920                           ;I2C_Soft.c: 33: unsigned char n;
 10921                           ;I2C_Soft.c: 34: for (n = 0; n < 8; n++){
 10922  00201A  0E00               	movlw	0
 10923  00201C  6E12               	movwf	I2C_Write@n,c
 10924  00201E                     l5729:
 10925  00201E  0E07               	movlw	7
 10926  002020  6412               	cpfsgt	I2C_Write@n,c
 10927  002022  D001               	goto	l315
 10928  002024  D011               	goto	l5747
 10929  002026                     l315:
 10930                           
 10931                           ;I2C_Soft.c: 35: if (outByte & 0x80) i2cHighSda();
 10932  002026  AE11               	btfss	I2C_Write@outByte,7,c
 10933  002028  D003               	goto	l5735
 10934  00202A  EC10  F012         	call	_i2cHighSda	;wreg free
 10935  00202E  D003               	goto	l5737
 10936  002030                     l5735:
 10937                           
 10938                           ;I2C_Soft.c: 36: else i2cLowSda();
 10939  002030  ECF9  F011         	call	_i2cLowSda	;wreg free
 10940  002034  D000               	goto	l5737
 10941  002036                     l5737:
 10942                           
 10943                           ;I2C_Soft.c: 37: i2cHighScl();
 10944  002036  ECDF  F011         	call	_i2cHighScl	;wreg free
 10945                           
 10946                           ;I2C_Soft.c: 38: i2cLowScl();
 10947  00203A  EC0C  F012         	call	_i2cLowScl	;wreg free
 10948                           
 10949                           ;I2C_Soft.c: 39: outByte = outByte << 1;
 10950  00203E  5011               	movf	I2C_Write@outByte,w,c
 10951  002040  2411               	addwf	I2C_Write@outByte,w,c
 10952  002042  6E11               	movwf	I2C_Write@outByte,c
 10953  002044  2A12               	incf	I2C_Write@n,f,c
 10954  002046  D7EB               	goto	l5729
 10955  002048                     l5747:
 10956                           
 10957                           ;I2C_Soft.c: 40: }
 10958                           ;I2C_Soft.c: 41: i2cHighSda();
 10959  002048  EC10  F012         	call	_i2cHighSda	;wreg free
 10960                           
 10961                           ;I2C_Soft.c: 42: i2cHighScl();
 10962  00204C  ECDF  F011         	call	_i2cHighScl	;wreg free
 10963                           
 10964                           ;I2C_Soft.c: 43: i2cLowScl();
 10965  002050  EC0C  F012         	call	_i2cLowScl	;wreg free
 10966  002054  0012               	return		;funcret
 10967  002056                     __end_of_I2C_Write:
 10968                           	opt stack 0
 10969                           tblptru	equ	0xFF8
 10970                           tblptrh	equ	0xFF7
 10971                           tblptrl	equ	0xFF6
 10972                           tablat	equ	0xFF5
 10973                           prodh	equ	0xFF4
 10974                           prodl	equ	0xFF3
 10975                           intcon	equ	0xFF2
 10976                           intcon2	equ	0xFF1
 10977                           intcon3	equ	0xFF0
 10978                           postinc0	equ	0xFEE
 10979                           wreg	equ	0xFE8
 10980                           postdec1	equ	0xFE5
 10981                           fsr1l	equ	0xFE1
 10982                           indf2	equ	0xFDF
 10983                           postinc2	equ	0xFDE
 10984                           postdec2	equ	0xFDD
 10985                           fsr2h	equ	0xFDA
 10986                           fsr2l	equ	0xFD9
 10987                           status	equ	0xFD8
 10988                           
 10989 ;; *************** function _I2C_Stop *****************
 10990 ;; Defined at:
 10991 ;;		line 73 in file "I2C_Soft.c"
 10992 ;; Parameters:    Size  Location     Type
 10993 ;;		None
 10994 ;; Auto vars:     Size  Location     Type
 10995 ;;		None
 10996 ;; Return value:  Size  Location     Type
 10997 ;;		None               void
 10998 ;; Registers used:
 10999 ;;		wreg, cstack
 11000 ;; Tracked objects:
 11001 ;;		On entry : 0/0
 11002 ;;		On exit  : 0/0
 11003 ;;		Unchanged: 0/0
 11004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11009 ;;Total ram usage:        0 bytes
 11010 ;; Hardware stack levels used:    1
 11011 ;; Hardware stack levels required when called:    4
 11012 ;; This function calls:
 11013 ;;		_i2cHighScl
 11014 ;;		_i2cHighSda
 11015 ;;		_i2cLowScl
 11016 ;;		_i2cLowSda
 11017 ;; This function is called by:
 11018 ;;		_I2C_Write_Cmd_Only
 11019 ;;		_I2C_Write_Cmd_Write_Data
 11020 ;;		_DS1621_Read_Temp
 11021 ;;		_DS3231_Read_Time
 11022 ;;		_DS3231_Setup_Time
 11023 ;;		_I2C_Write_Address_Read_One_Byte
 11024 ;;		_I2C_Write_Address_Write_One_Byte
 11025 ;;		_I2C_Write_Cmd_Read_One_Byte
 11026 ;; This function uses a non-reentrant model
 11027 ;;
 11028                           
 11029                           	psect	text63
 11030  00232E                     __ptext63:
 11031                           	opt stack 0
 11032  00232E                     _I2C_Stop:
 11033                           	opt stack 23
 11034                           
 11035                           ;I2C_Soft.c: 74: i2cLowScl();
 11036                           
 11037                           ;incstack = 0
 11038  00232E  EC0C  F012         	call	_i2cLowScl	;wreg free
 11039                           
 11040                           ;I2C_Soft.c: 75: i2cLowSda();
 11041  002332  ECF9  F011         	call	_i2cLowSda	;wreg free
 11042                           
 11043                           ;I2C_Soft.c: 76: i2cHighScl();
 11044  002336  ECDF  F011         	call	_i2cHighScl	;wreg free
 11045                           
 11046                           ;I2C_Soft.c: 77: i2cHighSda();
 11047  00233A  EC10  F012         	call	_i2cHighSda	;wreg free
 11048  00233E  0012               	return		;funcret
 11049  002340                     __end_of_I2C_Stop:
 11050                           	opt stack 0
 11051                           tblptru	equ	0xFF8
 11052                           tblptrh	equ	0xFF7
 11053                           tblptrl	equ	0xFF6
 11054                           tablat	equ	0xFF5
 11055                           prodh	equ	0xFF4
 11056                           prodl	equ	0xFF3
 11057                           intcon	equ	0xFF2
 11058                           intcon2	equ	0xFF1
 11059                           intcon3	equ	0xFF0
 11060                           postinc0	equ	0xFEE
 11061                           wreg	equ	0xFE8
 11062                           postdec1	equ	0xFE5
 11063                           fsr1l	equ	0xFE1
 11064                           indf2	equ	0xFDF
 11065                           postinc2	equ	0xFDE
 11066                           postdec2	equ	0xFDD
 11067                           fsr2h	equ	0xFDA
 11068                           fsr2l	equ	0xFD9
 11069                           status	equ	0xFD8
 11070                           
 11071 ;; *************** function _I2C_Start *****************
 11072 ;; Defined at:
 11073 ;;		line 58 in file "I2C_Soft.c"
 11074 ;; Parameters:    Size  Location     Type
 11075 ;;		None
 11076 ;; Auto vars:     Size  Location     Type
 11077 ;;		None
 11078 ;; Return value:  Size  Location     Type
 11079 ;;		None               void
 11080 ;; Registers used:
 11081 ;;		wreg, cstack
 11082 ;; Tracked objects:
 11083 ;;		On entry : 0/0
 11084 ;;		On exit  : 0/0
 11085 ;;		Unchanged: 0/0
 11086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11090 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11091 ;;Total ram usage:        0 bytes
 11092 ;; Hardware stack levels used:    1
 11093 ;; Hardware stack levels required when called:    4
 11094 ;; This function calls:
 11095 ;;		_i2cHighScl
 11096 ;;		_i2cHighSda
 11097 ;;		_i2cLowScl
 11098 ;;		_i2cLowSda
 11099 ;; This function is called by:
 11100 ;;		_I2C_Write_Cmd_Only
 11101 ;;		_I2C_Write_Cmd_Write_Data
 11102 ;;		_DS1621_Read_Temp
 11103 ;;		_DS3231_Read_Time
 11104 ;;		_DS3231_Setup_Time
 11105 ;;		_I2C_Write_Address_Read_One_Byte
 11106 ;;		_I2C_Write_Address_Write_One_Byte
 11107 ;;		_I2C_Write_Cmd_Read_One_Byte
 11108 ;; This function uses a non-reentrant model
 11109 ;;
 11110                           
 11111                           	psect	text64
 11112  002340                     __ptext64:
 11113                           	opt stack 0
 11114  002340                     _I2C_Start:
 11115                           	opt stack 23
 11116                           
 11117                           ;I2C_Soft.c: 59: i2cHighSda();
 11118                           
 11119                           ;incstack = 0
 11120  002340  EC10  F012         	call	_i2cHighSda	;wreg free
 11121                           
 11122                           ;I2C_Soft.c: 60: i2cHighScl();
 11123  002344  ECDF  F011         	call	_i2cHighScl	;wreg free
 11124                           
 11125                           ;I2C_Soft.c: 61: i2cLowSda();
 11126  002348  ECF9  F011         	call	_i2cLowSda	;wreg free
 11127                           
 11128                           ;I2C_Soft.c: 62: i2cLowScl();
 11129  00234C  EC0C  F012         	call	_i2cLowScl	;wreg free
 11130  002350  0012               	return		;funcret
 11131  002352                     __end_of_I2C_Start:
 11132                           	opt stack 0
 11133                           tblptru	equ	0xFF8
 11134                           tblptrh	equ	0xFF7
 11135                           tblptrl	equ	0xFF6
 11136                           tablat	equ	0xFF5
 11137                           prodh	equ	0xFF4
 11138                           prodl	equ	0xFF3
 11139                           intcon	equ	0xFF2
 11140                           intcon2	equ	0xFF1
 11141                           intcon3	equ	0xFF0
 11142                           postinc0	equ	0xFEE
 11143                           wreg	equ	0xFE8
 11144                           postdec1	equ	0xFE5
 11145                           fsr1l	equ	0xFE1
 11146                           indf2	equ	0xFDF
 11147                           postinc2	equ	0xFDE
 11148                           postdec2	equ	0xFDD
 11149                           fsr2h	equ	0xFDA
 11150                           fsr2l	equ	0xFD9
 11151                           status	equ	0xFD8
 11152                           
 11153 ;; *************** function _I2C_Read *****************
 11154 ;; Defined at:
 11155 ;;		line 14 in file "I2C_Soft.c"
 11156 ;; Parameters:    Size  Location     Type
 11157 ;;  ack             1    wreg     unsigned char 
 11158 ;; Auto vars:     Size  Location     Type
 11159 ;;  ack             1   16[COMRAM] unsigned char 
 11160 ;;  inByte          1   18[COMRAM] unsigned char 
 11161 ;;  n               1   17[COMRAM] unsigned char 
 11162 ;; Return value:  Size  Location     Type
 11163 ;;                  1    wreg      unsigned char 
 11164 ;; Registers used:
 11165 ;;		wreg, status,2, status,0, cstack
 11166 ;; Tracked objects:
 11167 ;;		On entry : 0/0
 11168 ;;		On exit  : 0/0
 11169 ;;		Unchanged: 0/0
 11170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11172 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11174 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11175 ;;Total ram usage:        3 bytes
 11176 ;; Hardware stack levels used:    1
 11177 ;; Hardware stack levels required when called:    5
 11178 ;; This function calls:
 11179 ;;		_i2cAck
 11180 ;;		_i2cHighScl
 11181 ;;		_i2cHighSda
 11182 ;;		_i2cLowScl
 11183 ;;		_i2cNack
 11184 ;; This function is called by:
 11185 ;;		_DS1621_Read_Temp
 11186 ;;		_DS3231_Read_Time
 11187 ;;		_I2C_Write_Address_Read_One_Byte
 11188 ;;		_I2C_Write_Cmd_Read_One_Byte
 11189 ;; This function uses a non-reentrant model
 11190 ;;
 11191                           
 11192                           	psect	text65
 11193  001F54                     __ptext65:
 11194                           	opt stack 0
 11195  001F54                     _I2C_Read:
 11196                           	opt stack 24
 11197                           
 11198                           ;incstack = 0
 11199                           ;I2C_Read@ack stored from wreg
 11200  001F54  6E11               	movwf	I2C_Read@ack,c
 11201                           
 11202                           ;I2C_Soft.c: 15: unsigned char inByte, n;
 11203                           ;I2C_Soft.c: 16: i2cHighSda();
 11204  001F56  EC10  F012         	call	_i2cHighSda	;wreg free
 11205                           
 11206                           ;I2C_Soft.c: 17: for (n = 0; n < 8; n++){
 11207  001F5A  0E00               	movlw	0
 11208  001F5C  6E12               	movwf	I2C_Read@n,c
 11209  001F5E                     l6345:
 11210  001F5E  0E07               	movlw	7
 11211  001F60  6412               	cpfsgt	I2C_Read@n,c
 11212  001F62  D001               	goto	l6349
 11213  001F64  D00F               	goto	l6363
 11214  001F66                     l6349:
 11215                           
 11216                           ;I2C_Soft.c: 18: i2cHighScl();
 11217  001F66  ECDF  F011         	call	_i2cHighScl	;wreg free
 11218                           
 11219                           ;I2C_Soft.c: 20: if (PORTDbits.RD7)
 11220  001F6A  AE83               	btfss	3971,7,c	;volatile
 11221  001F6C  D003               	goto	l6355
 11222                           
 11223                           ;I2C_Soft.c: 21: inByte = (inByte << 1) | 0x01;
 11224  001F6E  80D8               	bsf	status,0,c
 11225  001F70  3613               	rlcf	I2C_Read@inByte,f,c
 11226  001F72  D004               	goto	l6357
 11227  001F74                     l6355:
 11228                           
 11229                           ;I2C_Soft.c: 22: else
 11230                           ;I2C_Soft.c: 23: inByte = inByte << 1;
 11231  001F74  5013               	movf	I2C_Read@inByte,w,c
 11232  001F76  2413               	addwf	I2C_Read@inByte,w,c
 11233  001F78  6E13               	movwf	I2C_Read@inByte,c
 11234  001F7A  D000               	goto	l6357
 11235  001F7C                     l6357:
 11236                           
 11237                           ;I2C_Soft.c: 24: i2cLowScl();
 11238  001F7C  EC0C  F012         	call	_i2cLowScl	;wreg free
 11239  001F80  2A12               	incf	I2C_Read@n,f,c
 11240  001F82  D7ED               	goto	l6345
 11241  001F84                     l6363:
 11242                           
 11243                           ;I2C_Soft.c: 25: }
 11244                           ;I2C_Soft.c: 26: if (ack) i2cAck();
 11245  001F84  5011               	movf	I2C_Read@ack,w,c
 11246  001F86  B4D8               	btfsc	status,2,c
 11247  001F88  D003               	goto	l6367
 11248  001F8A  ECA9  F011         	call	_i2cAck	;wreg free
 11249  001F8E  D003               	goto	l6369
 11250  001F90                     l6367:
 11251                           
 11252                           ;I2C_Soft.c: 27: else i2cNack();
 11253  001F90  ECF4  F011         	call	_i2cNack	;wreg free
 11254  001F94  D000               	goto	l6369
 11255  001F96                     l6369:
 11256                           
 11257                           ;I2C_Soft.c: 29: return (inByte);
 11258  001F96  5013               	movf	I2C_Read@inByte,w,c
 11259  001F98  D000               	goto	l312
 11260  001F9A                     l312:
 11261  001F9A  0012               	return		;funcret
 11262  001F9C                     __end_of_I2C_Read:
 11263                           	opt stack 0
 11264                           tblptru	equ	0xFF8
 11265                           tblptrh	equ	0xFF7
 11266                           tblptrl	equ	0xFF6
 11267                           tablat	equ	0xFF5
 11268                           prodh	equ	0xFF4
 11269                           prodl	equ	0xFF3
 11270                           intcon	equ	0xFF2
 11271                           intcon2	equ	0xFF1
 11272                           intcon3	equ	0xFF0
 11273                           postinc0	equ	0xFEE
 11274                           wreg	equ	0xFE8
 11275                           postdec1	equ	0xFE5
 11276                           fsr1l	equ	0xFE1
 11277                           indf2	equ	0xFDF
 11278                           postinc2	equ	0xFDE
 11279                           postdec2	equ	0xFDD
 11280                           fsr2h	equ	0xFDA
 11281                           fsr2l	equ	0xFD9
 11282                           status	equ	0xFD8
 11283                           
 11284 ;; *************** function _i2cNack *****************
 11285 ;; Defined at:
 11286 ;;		line 46 in file "I2C_Soft.c"
 11287 ;; Parameters:    Size  Location     Type
 11288 ;;		None
 11289 ;; Auto vars:     Size  Location     Type
 11290 ;;		None
 11291 ;; Return value:  Size  Location     Type
 11292 ;;		None               void
 11293 ;; Registers used:
 11294 ;;		wreg, cstack
 11295 ;; Tracked objects:
 11296 ;;		On entry : 0/0
 11297 ;;		On exit  : 0/0
 11298 ;;		Unchanged: 0/0
 11299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11304 ;;Total ram usage:        0 bytes
 11305 ;; Hardware stack levels used:    1
 11306 ;; Hardware stack levels required when called:    4
 11307 ;; This function calls:
 11308 ;;		_i2cHighScl
 11309 ;;		_i2cLowScl
 11310 ;; This function is called by:
 11311 ;;		_I2C_Read
 11312 ;; This function uses a non-reentrant model
 11313 ;;
 11314                           
 11315                           	psect	text66
 11316  0023E8                     __ptext66:
 11317                           	opt stack 0
 11318  0023E8                     _i2cNack:
 11319                           	opt stack 24
 11320                           
 11321                           ;I2C_Soft.c: 47: i2cHighScl();
 11322                           
 11323                           ;incstack = 0
 11324  0023E8  ECDF  F011         	call	_i2cHighScl	;wreg free
 11325                           
 11326                           ;I2C_Soft.c: 48: i2cLowScl();
 11327  0023EC  EC0C  F012         	call	_i2cLowScl	;wreg free
 11328  0023F0  0012               	return		;funcret
 11329  0023F2                     __end_of_i2cNack:
 11330                           	opt stack 0
 11331                           tblptru	equ	0xFF8
 11332                           tblptrh	equ	0xFF7
 11333                           tblptrl	equ	0xFF6
 11334                           tablat	equ	0xFF5
 11335                           prodh	equ	0xFF4
 11336                           prodl	equ	0xFF3
 11337                           intcon	equ	0xFF2
 11338                           intcon2	equ	0xFF1
 11339                           intcon3	equ	0xFF0
 11340                           postinc0	equ	0xFEE
 11341                           wreg	equ	0xFE8
 11342                           postdec1	equ	0xFE5
 11343                           fsr1l	equ	0xFE1
 11344                           indf2	equ	0xFDF
 11345                           postinc2	equ	0xFDE
 11346                           postdec2	equ	0xFDD
 11347                           fsr2h	equ	0xFDA
 11348                           fsr2l	equ	0xFD9
 11349                           status	equ	0xFD8
 11350                           
 11351 ;; *************** function _i2cAck *****************
 11352 ;; Defined at:
 11353 ;;		line 51 in file "I2C_Soft.c"
 11354 ;; Parameters:    Size  Location     Type
 11355 ;;		None
 11356 ;; Auto vars:     Size  Location     Type
 11357 ;;		None
 11358 ;; Return value:  Size  Location     Type
 11359 ;;		None               void
 11360 ;; Registers used:
 11361 ;;		wreg, cstack
 11362 ;; Tracked objects:
 11363 ;;		On entry : 0/0
 11364 ;;		On exit  : 0/0
 11365 ;;		Unchanged: 0/0
 11366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11371 ;;Total ram usage:        0 bytes
 11372 ;; Hardware stack levels used:    1
 11373 ;; Hardware stack levels required when called:    4
 11374 ;; This function calls:
 11375 ;;		_i2cHighScl
 11376 ;;		_i2cHighSda
 11377 ;;		_i2cLowScl
 11378 ;;		_i2cLowSda
 11379 ;; This function is called by:
 11380 ;;		_I2C_Read
 11381 ;; This function uses a non-reentrant model
 11382 ;;
 11383                           
 11384                           	psect	text67
 11385  002352                     __ptext67:
 11386                           	opt stack 0
 11387  002352                     _i2cAck:
 11388                           	opt stack 24
 11389                           
 11390                           ;I2C_Soft.c: 52: i2cLowSda();
 11391                           
 11392                           ;incstack = 0
 11393  002352  ECF9  F011         	call	_i2cLowSda	;wreg free
 11394                           
 11395                           ;I2C_Soft.c: 53: i2cHighScl();
 11396  002356  ECDF  F011         	call	_i2cHighScl	;wreg free
 11397                           
 11398                           ;I2C_Soft.c: 54: i2cLowScl();
 11399  00235A  EC0C  F012         	call	_i2cLowScl	;wreg free
 11400                           
 11401                           ;I2C_Soft.c: 55: i2cHighSda();
 11402  00235E  EC10  F012         	call	_i2cHighSda	;wreg free
 11403  002362  0012               	return		;funcret
 11404  002364                     __end_of_i2cAck:
 11405                           	opt stack 0
 11406                           tblptru	equ	0xFF8
 11407                           tblptrh	equ	0xFF7
 11408                           tblptrl	equ	0xFF6
 11409                           tablat	equ	0xFF5
 11410                           prodh	equ	0xFF4
 11411                           prodl	equ	0xFF3
 11412                           intcon	equ	0xFF2
 11413                           intcon2	equ	0xFF1
 11414                           intcon3	equ	0xFF0
 11415                           postinc0	equ	0xFEE
 11416                           wreg	equ	0xFE8
 11417                           postdec1	equ	0xFE5
 11418                           fsr1l	equ	0xFE1
 11419                           indf2	equ	0xFDF
 11420                           postinc2	equ	0xFDE
 11421                           postdec2	equ	0xFDD
 11422                           fsr2h	equ	0xFDA
 11423                           fsr2l	equ	0xFD9
 11424                           status	equ	0xFD8
 11425                           
 11426 ;; *************** function _I2C_ReStart *****************
 11427 ;; Defined at:
 11428 ;;		line 65 in file "I2C_Soft.c"
 11429 ;; Parameters:    Size  Location     Type
 11430 ;;		None
 11431 ;; Auto vars:     Size  Location     Type
 11432 ;;		None
 11433 ;; Return value:  Size  Location     Type
 11434 ;;		None               void
 11435 ;; Registers used:
 11436 ;;		wreg, cstack
 11437 ;; Tracked objects:
 11438 ;;		On entry : 0/0
 11439 ;;		On exit  : 0/0
 11440 ;;		Unchanged: 0/0
 11441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11445 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11446 ;;Total ram usage:        0 bytes
 11447 ;; Hardware stack levels used:    1
 11448 ;; Hardware stack levels required when called:    4
 11449 ;; This function calls:
 11450 ;;		_i2cHighScl
 11451 ;;		_i2cHighSda
 11452 ;;		_i2cLowScl
 11453 ;;		_i2cLowSda
 11454 ;; This function is called by:
 11455 ;;		_DS1621_Read_Temp
 11456 ;;		_DS3231_Read_Time
 11457 ;;		_I2C_Write_Address_Read_One_Byte
 11458 ;;		_I2C_Write_Cmd_Read_One_Byte
 11459 ;; This function uses a non-reentrant model
 11460 ;;
 11461                           
 11462                           	psect	text68
 11463  002294                     __ptext68:
 11464                           	opt stack 0
 11465  002294                     _I2C_ReStart:
 11466                           	opt stack 25
 11467                           
 11468                           ;I2C_Soft.c: 66: i2cLowScl();
 11469                           
 11470                           ;incstack = 0
 11471  002294  EC0C  F012         	call	_i2cLowScl	;wreg free
 11472                           
 11473                           ;I2C_Soft.c: 67: i2cHighSda();
 11474  002298  EC10  F012         	call	_i2cHighSda	;wreg free
 11475                           
 11476                           ;I2C_Soft.c: 68: i2cHighScl();
 11477  00229C  ECDF  F011         	call	_i2cHighScl	;wreg free
 11478                           
 11479                           ;I2C_Soft.c: 69: i2cLowSda();
 11480  0022A0  ECF9  F011         	call	_i2cLowSda	;wreg free
 11481                           
 11482                           ;I2C_Soft.c: 70: i2cLowScl();
 11483  0022A4  EC0C  F012         	call	_i2cLowScl	;wreg free
 11484  0022A8  0012               	return		;funcret
 11485  0022AA                     __end_of_I2C_ReStart:
 11486                           	opt stack 0
 11487                           tblptru	equ	0xFF8
 11488                           tblptrh	equ	0xFF7
 11489                           tblptrl	equ	0xFF6
 11490                           tablat	equ	0xFF5
 11491                           prodh	equ	0xFF4
 11492                           prodl	equ	0xFF3
 11493                           intcon	equ	0xFF2
 11494                           intcon2	equ	0xFF1
 11495                           intcon3	equ	0xFF0
 11496                           postinc0	equ	0xFEE
 11497                           wreg	equ	0xFE8
 11498                           postdec1	equ	0xFE5
 11499                           fsr1l	equ	0xFE1
 11500                           indf2	equ	0xFDF
 11501                           postinc2	equ	0xFDE
 11502                           postdec2	equ	0xFDD
 11503                           fsr2h	equ	0xFDA
 11504                           fsr2l	equ	0xFD9
 11505                           status	equ	0xFD8
 11506                           
 11507 ;; *************** function _i2cLowSda *****************
 11508 ;; Defined at:
 11509 ;;		line 85 in file "I2C_Soft.c"
 11510 ;; Parameters:    Size  Location     Type
 11511 ;;		None
 11512 ;; Auto vars:     Size  Location     Type
 11513 ;;		None
 11514 ;; Return value:  Size  Location     Type
 11515 ;;		None               void
 11516 ;; Registers used:
 11517 ;;		None
 11518 ;; Tracked objects:
 11519 ;;		On entry : 0/0
 11520 ;;		On exit  : 0/0
 11521 ;;		Unchanged: 0/0
 11522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11527 ;;Total ram usage:        0 bytes
 11528 ;; Hardware stack levels used:    1
 11529 ;; Hardware stack levels required when called:    3
 11530 ;; This function calls:
 11531 ;;		Nothing
 11532 ;; This function is called by:
 11533 ;;		_I2C_Write
 11534 ;;		_i2cAck
 11535 ;;		_I2C_Start
 11536 ;;		_I2C_ReStart
 11537 ;;		_I2C_Stop
 11538 ;; This function uses a non-reentrant model
 11539 ;;
 11540                           
 11541                           	psect	text69
 11542  0023F2                     __ptext69:
 11543                           	opt stack 0
 11544  0023F2                     _i2cLowSda:
 11545                           	opt stack 23
 11546                           
 11547                           ;I2C_Soft.c: 86: PORTDbits.RD7 = 0;
 11548                           
 11549                           ;incstack = 0
 11550  0023F2  9E83               	bcf	3971,7,c	;volatile
 11551                           
 11552                           ;I2C_Soft.c: 87: TRISDbits.RD7 = 0;
 11553  0023F4  9E95               	bcf	3989,7,c	;volatile
 11554                           
 11555                           ;I2C_Soft.c: 88: _delay((unsigned long)((2)*(8000000/4000000.0)));
 11556  0023F6  D000               	nop2		;2 cycle nop
 11557  0023F8  D000               	nop2		;2 cycle nop
 11558  0023FA  0012               	return		;funcret
 11559  0023FC                     __end_of_i2cLowSda:
 11560                           	opt stack 0
 11561                           tblptru	equ	0xFF8
 11562                           tblptrh	equ	0xFF7
 11563                           tblptrl	equ	0xFF6
 11564                           tablat	equ	0xFF5
 11565                           prodh	equ	0xFF4
 11566                           prodl	equ	0xFF3
 11567                           intcon	equ	0xFF2
 11568                           intcon2	equ	0xFF1
 11569                           intcon3	equ	0xFF0
 11570                           postinc0	equ	0xFEE
 11571                           wreg	equ	0xFE8
 11572                           postdec1	equ	0xFE5
 11573                           fsr1l	equ	0xFE1
 11574                           indf2	equ	0xFDF
 11575                           postinc2	equ	0xFDE
 11576                           postdec2	equ	0xFDD
 11577                           fsr2h	equ	0xFDA
 11578                           fsr2l	equ	0xFD9
 11579                           status	equ	0xFD8
 11580                           
 11581 ;; *************** function _i2cLowScl *****************
 11582 ;; Defined at:
 11583 ;;		line 96 in file "I2C_Soft.c"
 11584 ;; Parameters:    Size  Location     Type
 11585 ;;		None
 11586 ;; Auto vars:     Size  Location     Type
 11587 ;;		None
 11588 ;; Return value:  Size  Location     Type
 11589 ;;		None               void
 11590 ;; Registers used:
 11591 ;;		None
 11592 ;; Tracked objects:
 11593 ;;		On entry : 0/0
 11594 ;;		On exit  : 0/0
 11595 ;;		Unchanged: 0/0
 11596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11601 ;;Total ram usage:        0 bytes
 11602 ;; Hardware stack levels used:    1
 11603 ;; Hardware stack levels required when called:    3
 11604 ;; This function calls:
 11605 ;;		Nothing
 11606 ;; This function is called by:
 11607 ;;		_I2C_Read
 11608 ;;		_I2C_Write
 11609 ;;		_i2cNack
 11610 ;;		_i2cAck
 11611 ;;		_I2C_Start
 11612 ;;		_I2C_ReStart
 11613 ;;		_I2C_Stop
 11614 ;; This function uses a non-reentrant model
 11615 ;;
 11616                           
 11617                           	psect	text70
 11618  002418                     __ptext70:
 11619                           	opt stack 0
 11620  002418                     _i2cLowScl:
 11621                           	opt stack 23
 11622                           
 11623                           ;I2C_Soft.c: 97: PORTDbits.RD6 = 0;
 11624                           
 11625                           ;incstack = 0
 11626  002418  9C83               	bcf	3971,6,c	;volatile
 11627                           
 11628                           ;I2C_Soft.c: 98: TRISDbits.RD6 = 0;
 11629  00241A  9C95               	bcf	3989,6,c	;volatile
 11630                           
 11631                           ;I2C_Soft.c: 99: _delay((unsigned long)((1)*(8000000/4000000.0)));
 11632  00241C  D000               	nop2		;2 cycle nop
 11633  00241E  0012               	return		;funcret
 11634  002420                     __end_of_i2cLowScl:
 11635                           	opt stack 0
 11636                           tblptru	equ	0xFF8
 11637                           tblptrh	equ	0xFF7
 11638                           tblptrl	equ	0xFF6
 11639                           tablat	equ	0xFF5
 11640                           prodh	equ	0xFF4
 11641                           prodl	equ	0xFF3
 11642                           intcon	equ	0xFF2
 11643                           intcon2	equ	0xFF1
 11644                           intcon3	equ	0xFF0
 11645                           postinc0	equ	0xFEE
 11646                           wreg	equ	0xFE8
 11647                           postdec1	equ	0xFE5
 11648                           fsr1l	equ	0xFE1
 11649                           indf2	equ	0xFDF
 11650                           postinc2	equ	0xFDE
 11651                           postdec2	equ	0xFDD
 11652                           fsr2h	equ	0xFDA
 11653                           fsr2l	equ	0xFD9
 11654                           status	equ	0xFD8
 11655                           
 11656 ;; *************** function _i2cHighSda *****************
 11657 ;; Defined at:
 11658 ;;		line 80 in file "I2C_Soft.c"
 11659 ;; Parameters:    Size  Location     Type
 11660 ;;		None
 11661 ;; Auto vars:     Size  Location     Type
 11662 ;;		None
 11663 ;; Return value:  Size  Location     Type
 11664 ;;		None               void
 11665 ;; Registers used:
 11666 ;;		None
 11667 ;; Tracked objects:
 11668 ;;		On entry : 0/0
 11669 ;;		On exit  : 0/0
 11670 ;;		Unchanged: 0/0
 11671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11676 ;;Total ram usage:        0 bytes
 11677 ;; Hardware stack levels used:    1
 11678 ;; Hardware stack levels required when called:    3
 11679 ;; This function calls:
 11680 ;;		Nothing
 11681 ;; This function is called by:
 11682 ;;		_I2C_Init
 11683 ;;		_I2C_Read
 11684 ;;		_I2C_Write
 11685 ;;		_i2cAck
 11686 ;;		_I2C_Start
 11687 ;;		_I2C_ReStart
 11688 ;;		_I2C_Stop
 11689 ;; This function uses a non-reentrant model
 11690 ;;
 11691                           
 11692                           	psect	text71
 11693  002420                     __ptext71:
 11694                           	opt stack 0
 11695  002420                     _i2cHighSda:
 11696                           	opt stack 25
 11697                           
 11698                           ;I2C_Soft.c: 81: TRISDbits.RD7 = 1;
 11699                           
 11700                           ;incstack = 0
 11701  002420  8E95               	bsf	3989,7,c	;volatile
 11702                           
 11703                           ;I2C_Soft.c: 82: _delay((unsigned long)((2)*(8000000/4000000.0)));
 11704  002422  D000               	nop2		;2 cycle nop
 11705  002424  D000               	nop2		;2 cycle nop
 11706  002426  0012               	return		;funcret
 11707  002428                     __end_of_i2cHighSda:
 11708                           	opt stack 0
 11709                           tblptru	equ	0xFF8
 11710                           tblptrh	equ	0xFF7
 11711                           tblptrl	equ	0xFF6
 11712                           tablat	equ	0xFF5
 11713                           prodh	equ	0xFF4
 11714                           prodl	equ	0xFF3
 11715                           intcon	equ	0xFF2
 11716                           intcon2	equ	0xFF1
 11717                           intcon3	equ	0xFF0
 11718                           postinc0	equ	0xFEE
 11719                           wreg	equ	0xFE8
 11720                           postdec1	equ	0xFE5
 11721                           fsr1l	equ	0xFE1
 11722                           indf2	equ	0xFDF
 11723                           postinc2	equ	0xFDE
 11724                           postdec2	equ	0xFDD
 11725                           fsr2h	equ	0xFDA
 11726                           fsr2l	equ	0xFD9
 11727                           status	equ	0xFD8
 11728                           
 11729 ;; *************** function _i2cHighScl *****************
 11730 ;; Defined at:
 11731 ;;		line 91 in file "I2C_Soft.c"
 11732 ;; Parameters:    Size  Location     Type
 11733 ;;		None
 11734 ;; Auto vars:     Size  Location     Type
 11735 ;;		None
 11736 ;; Return value:  Size  Location     Type
 11737 ;;		None               void
 11738 ;; Registers used:
 11739 ;;		wreg
 11740 ;; Tracked objects:
 11741 ;;		On entry : 0/0
 11742 ;;		On exit  : 0/0
 11743 ;;		Unchanged: 0/0
 11744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11748 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11749 ;;Total ram usage:        0 bytes
 11750 ;; Hardware stack levels used:    1
 11751 ;; Hardware stack levels required when called:    3
 11752 ;; This function calls:
 11753 ;;		Nothing
 11754 ;; This function is called by:
 11755 ;;		_I2C_Init
 11756 ;;		_I2C_Read
 11757 ;;		_I2C_Write
 11758 ;;		_i2cNack
 11759 ;;		_i2cAck
 11760 ;;		_I2C_Start
 11761 ;;		_I2C_ReStart
 11762 ;;		_I2C_Stop
 11763 ;; This function uses a non-reentrant model
 11764 ;;
 11765                           
 11766                           	psect	text72
 11767  0023BE                     __ptext72:
 11768                           	opt stack 0
 11769  0023BE                     _i2cHighScl:
 11770                           	opt stack 25
 11771                           
 11772                           ;I2C_Soft.c: 92: TRISDbits.RD6 = 1;
 11773                           
 11774                           ;incstack = 0
 11775  0023BE  8C95               	bsf	3989,6,c	;volatile
 11776                           
 11777                           ;I2C_Soft.c: 93: _delay((unsigned long)((10)*(8000000/4000000.0)));
 11778  0023C0  0E06               	movlw	6
 11779  0023C2                     u5337:
 11780  0023C2  2EE8               	decfsz	wreg,f,c
 11781  0023C4  D7FE               	goto	u5337
 11782  0023C6  D000               	nop2		;nop
 11783  0023C8  0012               	return		;funcret
 11784  0023CA                     __end_of_i2cHighScl:
 11785                           	opt stack 0
 11786                           tblptru	equ	0xFF8
 11787                           tblptrh	equ	0xFF7
 11788                           tblptrl	equ	0xFF6
 11789                           tablat	equ	0xFF5
 11790                           prodh	equ	0xFF4
 11791                           prodl	equ	0xFF3
 11792                           intcon	equ	0xFF2
 11793                           intcon2	equ	0xFF1
 11794                           intcon3	equ	0xFF0
 11795                           postinc0	equ	0xFEE
 11796                           wreg	equ	0xFE8
 11797                           postdec1	equ	0xFE5
 11798                           fsr1l	equ	0xFE1
 11799                           indf2	equ	0xFDF
 11800                           postinc2	equ	0xFDE
 11801                           postdec2	equ	0xFDD
 11802                           fsr2h	equ	0xFDA
 11803                           fsr2l	equ	0xFD9
 11804                           status	equ	0xFD8
 11805                           
 11806 ;; *************** function _chkisr *****************
 11807 ;; Defined at:
 11808 ;;		line 42 in file "Interrupt2.c"
 11809 ;; Parameters:    Size  Location     Type
 11810 ;;		None
 11811 ;; Auto vars:     Size  Location     Type
 11812 ;;		None
 11813 ;; Return value:  Size  Location     Type
 11814 ;;		None               void
 11815 ;; Registers used:
 11816 ;;		wreg, status,2, status,0, cstack
 11817 ;; Tracked objects:
 11818 ;;		On entry : 0/0
 11819 ;;		On exit  : 0/0
 11820 ;;		Unchanged: 0/0
 11821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11824 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11825 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11826 ;;Total ram usage:       14 bytes
 11827 ;; Hardware stack levels used:    1
 11828 ;; Hardware stack levels required when called:    2
 11829 ;; This function calls:
 11830 ;;		_INT0_isr
 11831 ;;		_INT1_isr
 11832 ;;		_INT2_isr
 11833 ;;		_TIMER1_isr
 11834 ;; This function is called by:
 11835 ;;		Interrupt level 2
 11836 ;; This function uses a non-reentrant model
 11837 ;;
 11838                           
 11839                           	psect	intcode
 11840  000008                     __pintcode:
 11841                           	opt stack 0
 11842  000008                     _chkisr:
 11843                           	opt stack 20
 11844                           
 11845                           ;incstack = 0
 11846  000008  CFFA F003          	movff	pclath,??_chkisr
 11847  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 11848  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 11849  000014  ED82  F00C         	call	int_func,f	;refresh shadow registers
 11850                           pclatu	equ	0xFFB
 11851                           pclath	equ	0xFFA
 11852                           tblptru	equ	0xFF8
 11853                           tblptrh	equ	0xFF7
 11854                           tblptrl	equ	0xFF6
 11855                           tablat	equ	0xFF5
 11856                           prodh	equ	0xFF4
 11857                           prodl	equ	0xFF3
 11858                           intcon	equ	0xFF2
 11859                           intcon2	equ	0xFF1
 11860                           intcon3	equ	0xFF0
 11861                           postinc0	equ	0xFEE
 11862                           fsr0l	equ	0xFE9
 11863                           wreg	equ	0xFE8
 11864                           postdec1	equ	0xFE5
 11865                           fsr1l	equ	0xFE1
 11866                           indf2	equ	0xFDF
 11867                           postinc2	equ	0xFDE
 11868                           postdec2	equ	0xFDD
 11869                           fsr2h	equ	0xFDA
 11870                           fsr2l	equ	0xFD9
 11871                           status	equ	0xFD8
 11872                           
 11873                           	psect	intcode_body
 11874  001904                     __pintcode_body:
 11875                           	opt stack 20
 11876  001904                     int_func:
 11877                           	opt stack 20
 11878  001904  0006               	pop		; remove dummy address from shadow register refresh
 11879  001906  CFEA F006          	movff	fsr0h,??_chkisr+3
 11880  00190A  CFE1 F007          	movff	fsr1l,??_chkisr+4
 11881  00190E  CFE2 F008          	movff	fsr1h,??_chkisr+5
 11882  001912  CFD9 F009          	movff	fsr2l,??_chkisr+6
 11883  001916  CFDA F00A          	movff	fsr2h,??_chkisr+7
 11884  00191A  CFF3 F00B          	movff	prodl,??_chkisr+8
 11885  00191E  CFF4 F00C          	movff	prodh,??_chkisr+9
 11886  001922  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 11887  001926  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 11888  00192A  CFF8 F00F          	movff	tblptru,??_chkisr+12
 11889  00192E  CFF5 F010          	movff	tablat,??_chkisr+13
 11890                           
 11891                           ;Interrupt2.c: 44: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 11892  001932  A09E               	btfss	3998,0,c	;volatile
 11893  001934  D003               	goto	i2l5579
 11894  001936  ECD8  F011         	call	_TIMER1_isr	;wreg free
 11895  00193A  D000               	goto	i2l5579
 11896  00193C                     i2l5579:
 11897                           
 11898                           ;Interrupt2.c: 45: if (INTCONbits.INT0IF == 1) INT0_isr();
 11899  00193C  A2F2               	btfss	intcon,1,c	;volatile
 11900  00193E  D003               	goto	i2l5583
 11901  001940  ECB2  F006         	call	_INT0_isr	;wreg free
 11902  001944  D000               	goto	i2l5583
 11903  001946                     i2l5583:
 11904                           
 11905                           ;Interrupt2.c: 46: if (INTCON3bits.INT1IF == 1) INT1_isr();
 11906  001946  A0F0               	btfss	intcon3,0,c	;volatile
 11907  001948  D003               	goto	i2l5587
 11908  00194A  EC03  F012         	call	_INT1_isr	;wreg free
 11909  00194E  D000               	goto	i2l5587
 11910  001950                     i2l5587:
 11911                           
 11912                           ;Interrupt2.c: 47: if (INTCON3bits.INT2IF == 1) INT2_isr();
 11913  001950  A2F0               	btfss	intcon3,1,c	;volatile
 11914  001952  D003               	goto	i2l869
 11915  001954  ECFE  F011         	call	_INT2_isr	;wreg free
 11916  001958  D000               	goto	i2l869
 11917  00195A                     i2l869:
 11918  00195A  C010  FFF5         	movff	??_chkisr+13,tablat
 11919  00195E  C00F  FFF8         	movff	??_chkisr+12,tblptru
 11920  001962  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 11921  001966  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 11922  00196A  C00C  FFF4         	movff	??_chkisr+9,prodh
 11923  00196E  C00B  FFF3         	movff	??_chkisr+8,prodl
 11924  001972  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 11925  001976  C009  FFD9         	movff	??_chkisr+6,fsr2l
 11926  00197A  C008  FFE2         	movff	??_chkisr+5,fsr1h
 11927  00197E  C007  FFE1         	movff	??_chkisr+4,fsr1l
 11928  001982  C006  FFEA         	movff	??_chkisr+3,fsr0h
 11929  001986  C005  FFE9         	movff	??_chkisr+2,fsr0l
 11930  00198A  C004  FFFB         	movff	??_chkisr+1,pclatu
 11931  00198E  C003  FFFA         	movff	??_chkisr,pclath
 11932  001992  0011               	retfie		f
 11933  001994                     __end_of_chkisr:
 11934                           	opt stack 0
 11935                           pclatu	equ	0xFFB
 11936                           pclath	equ	0xFFA
 11937                           tblptru	equ	0xFF8
 11938                           tblptrh	equ	0xFF7
 11939                           tblptrl	equ	0xFF6
 11940                           tablat	equ	0xFF5
 11941                           prodh	equ	0xFF4
 11942                           prodl	equ	0xFF3
 11943                           intcon	equ	0xFF2
 11944                           intcon2	equ	0xFF1
 11945                           intcon3	equ	0xFF0
 11946                           postinc0	equ	0xFEE
 11947                           fsr0h	equ	0xFEA
 11948                           fsr0l	equ	0xFE9
 11949                           wreg	equ	0xFE8
 11950                           postdec1	equ	0xFE5
 11951                           fsr1h	equ	0xFE2
 11952                           fsr1l	equ	0xFE1
 11953                           indf2	equ	0xFDF
 11954                           postinc2	equ	0xFDE
 11955                           postdec2	equ	0xFDD
 11956                           fsr2h	equ	0xFDA
 11957                           fsr2l	equ	0xFD9
 11958                           status	equ	0xFD8
 11959                           
 11960 ;; *************** function _TIMER1_isr *****************
 11961 ;; Defined at:
 11962 ;;		line 73 in file "Interrupt2.c"
 11963 ;; Parameters:    Size  Location     Type
 11964 ;;		None
 11965 ;; Auto vars:     Size  Location     Type
 11966 ;;		None
 11967 ;; Return value:  Size  Location     Type
 11968 ;;                  2  833[None  ] int 
 11969 ;; Registers used:
 11970 ;;		wreg, status,2
 11971 ;; Tracked objects:
 11972 ;;		On entry : 0/0
 11973 ;;		On exit  : 0/0
 11974 ;;		Unchanged: 0/0
 11975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11980 ;;Total ram usage:        0 bytes
 11981 ;; Hardware stack levels used:    1
 11982 ;; This function calls:
 11983 ;;		Nothing
 11984 ;; This function is called by:
 11985 ;;		_chkisr
 11986 ;; This function uses a non-reentrant model
 11987 ;;
 11988                           
 11989                           	psect	text74
 11990  0023B0                     __ptext74:
 11991                           	opt stack 0
 11992  0023B0                     _TIMER1_isr:
 11993                           	opt stack 21
 11994                           
 11995                           ;Interrupt2.c: 75: Nec_State = 0;
 11996                           
 11997                           ;incstack = 0
 11998  0023B0  0E00               	movlw	0
 11999  0023B2  6E51               	movwf	_Nec_State,c
 12000                           
 12001                           ;Interrupt2.c: 76: INTCON2bits.INTEDG0 = 0;
 12002  0023B4  9CF1               	bcf	intcon2,6,c	;volatile
 12003                           
 12004                           ;Interrupt2.c: 77: T1CONbits.TMR1ON = 0;
 12005  0023B6  90CD               	bcf	4045,0,c	;volatile
 12006                           
 12007                           ;Interrupt2.c: 78: PIR1bits.TMR1IF = 0;
 12008  0023B8  909E               	bcf	3998,0,c	;volatile
 12009  0023BA  D000               	goto	i2l881
 12010  0023BC                     i2l881:
 12011  0023BC  0012               	return		;funcret
 12012  0023BE                     __end_of_TIMER1_isr:
 12013                           	opt stack 0
 12014                           pclatu	equ	0xFFB
 12015                           pclath	equ	0xFFA
 12016                           tblptru	equ	0xFF8
 12017                           tblptrh	equ	0xFF7
 12018                           tblptrl	equ	0xFF6
 12019                           tablat	equ	0xFF5
 12020                           prodh	equ	0xFF4
 12021                           prodl	equ	0xFF3
 12022                           intcon	equ	0xFF2
 12023                           intcon2	equ	0xFF1
 12024                           intcon3	equ	0xFF0
 12025                           postinc0	equ	0xFEE
 12026                           fsr0h	equ	0xFEA
 12027                           fsr0l	equ	0xFE9
 12028                           wreg	equ	0xFE8
 12029                           postdec1	equ	0xFE5
 12030                           fsr1h	equ	0xFE2
 12031                           fsr1l	equ	0xFE1
 12032                           indf2	equ	0xFDF
 12033                           postinc2	equ	0xFDE
 12034                           postdec2	equ	0xFDD
 12035                           fsr2h	equ	0xFDA
 12036                           fsr2l	equ	0xFD9
 12037                           status	equ	0xFD8
 12038                           
 12039 ;; *************** function _INT2_isr *****************
 12040 ;; Defined at:
 12041 ;;		line 59 in file "Interrupt2.c"
 12042 ;; Parameters:    Size  Location     Type
 12043 ;;		None
 12044 ;; Auto vars:     Size  Location     Type
 12045 ;;		None
 12046 ;; Return value:  Size  Location     Type
 12047 ;;                  2  839[None  ] int 
 12048 ;; Registers used:
 12049 ;;		wreg, status,2
 12050 ;; Tracked objects:
 12051 ;;		On entry : 0/0
 12052 ;;		On exit  : 0/0
 12053 ;;		Unchanged: 0/0
 12054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12059 ;;Total ram usage:        0 bytes
 12060 ;; Hardware stack levels used:    1
 12061 ;; This function calls:
 12062 ;;		Nothing
 12063 ;; This function is called by:
 12064 ;;		_chkisr
 12065 ;; This function uses a non-reentrant model
 12066 ;;
 12067                           
 12068                           	psect	text75
 12069  0023FC                     __ptext75:
 12070                           	opt stack 0
 12071  0023FC                     _INT2_isr:
 12072                           	opt stack 21
 12073                           
 12074                           ;Interrupt2.c: 61: INTCON3bits.INT2IF=0;
 12075                           
 12076                           ;incstack = 0
 12077  0023FC  92F0               	bcf	intcon3,1,c	;volatile
 12078                           
 12079                           ;Interrupt2.c: 62: INT2_flag = 1;
 12080  0023FE  0E01               	movlw	1
 12081  002400  6E50               	movwf	_INT2_flag,c
 12082  002402  D000               	goto	i2l875
 12083  002404                     i2l875:
 12084  002404  0012               	return		;funcret
 12085  002406                     __end_of_INT2_isr:
 12086                           	opt stack 0
 12087                           pclatu	equ	0xFFB
 12088                           pclath	equ	0xFFA
 12089                           tblptru	equ	0xFF8
 12090                           tblptrh	equ	0xFF7
 12091                           tblptrl	equ	0xFF6
 12092                           tablat	equ	0xFF5
 12093                           prodh	equ	0xFF4
 12094                           prodl	equ	0xFF3
 12095                           intcon	equ	0xFF2
 12096                           intcon2	equ	0xFF1
 12097                           intcon3	equ	0xFF0
 12098                           postinc0	equ	0xFEE
 12099                           fsr0h	equ	0xFEA
 12100                           fsr0l	equ	0xFE9
 12101                           wreg	equ	0xFE8
 12102                           postdec1	equ	0xFE5
 12103                           fsr1h	equ	0xFE2
 12104                           fsr1l	equ	0xFE1
 12105                           indf2	equ	0xFDF
 12106                           postinc2	equ	0xFDE
 12107                           postdec2	equ	0xFDD
 12108                           fsr2h	equ	0xFDA
 12109                           fsr2l	equ	0xFD9
 12110                           status	equ	0xFD8
 12111                           
 12112 ;; *************** function _INT1_isr *****************
 12113 ;; Defined at:
 12114 ;;		line 52 in file "Interrupt2.c"
 12115 ;; Parameters:    Size  Location     Type
 12116 ;;		None
 12117 ;; Auto vars:     Size  Location     Type
 12118 ;;		None
 12119 ;; Return value:  Size  Location     Type
 12120 ;;                  2  837[None  ] int 
 12121 ;; Registers used:
 12122 ;;		wreg, status,2
 12123 ;; Tracked objects:
 12124 ;;		On entry : 0/0
 12125 ;;		On exit  : 0/0
 12126 ;;		Unchanged: 0/0
 12127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12132 ;;Total ram usage:        0 bytes
 12133 ;; Hardware stack levels used:    1
 12134 ;; This function calls:
 12135 ;;		Nothing
 12136 ;; This function is called by:
 12137 ;;		_chkisr
 12138 ;; This function uses a non-reentrant model
 12139 ;;
 12140                           
 12141                           	psect	text76
 12142  002406                     __ptext76:
 12143                           	opt stack 0
 12144  002406                     _INT1_isr:
 12145                           	opt stack 21
 12146                           
 12147                           ;Interrupt2.c: 54: INTCON3bits.INT1IF=0;
 12148                           
 12149                           ;incstack = 0
 12150  002406  90F0               	bcf	intcon3,0,c	;volatile
 12151                           
 12152                           ;Interrupt2.c: 55: INT1_flag = 1;
 12153  002408  0E01               	movlw	1
 12154  00240A  6E4F               	movwf	_INT1_flag,c
 12155  00240C  D000               	goto	i2l872
 12156  00240E                     i2l872:
 12157  00240E  0012               	return		;funcret
 12158  002410                     __end_of_INT1_isr:
 12159                           	opt stack 0
 12160                           pclatu	equ	0xFFB
 12161                           pclath	equ	0xFFA
 12162                           tblptru	equ	0xFF8
 12163                           tblptrh	equ	0xFF7
 12164                           tblptrl	equ	0xFF6
 12165                           tablat	equ	0xFF5
 12166                           prodh	equ	0xFF4
 12167                           prodl	equ	0xFF3
 12168                           intcon	equ	0xFF2
 12169                           intcon2	equ	0xFF1
 12170                           intcon3	equ	0xFF0
 12171                           postinc0	equ	0xFEE
 12172                           fsr0h	equ	0xFEA
 12173                           fsr0l	equ	0xFE9
 12174                           wreg	equ	0xFE8
 12175                           postdec1	equ	0xFE5
 12176                           fsr1h	equ	0xFE2
 12177                           fsr1l	equ	0xFE1
 12178                           indf2	equ	0xFDF
 12179                           postinc2	equ	0xFDE
 12180                           postdec2	equ	0xFDD
 12181                           fsr2h	equ	0xFDA
 12182                           fsr2l	equ	0xFD9
 12183                           status	equ	0xFD8
 12184                           
 12185 ;; *************** function _INT0_isr *****************
 12186 ;; Defined at:
 12187 ;;		line 88 in file "Interrupt2.c"
 12188 ;; Parameters:    Size  Location     Type
 12189 ;;		None
 12190 ;; Auto vars:     Size  Location     Type
 12191 ;;		None
 12192 ;; Return value:  Size  Location     Type
 12193 ;;                  2  835[None  ] int 
 12194 ;; Registers used:
 12195 ;;		wreg, status,2, status,0, cstack
 12196 ;; Tracked objects:
 12197 ;;		On entry : 0/0
 12198 ;;		On exit  : 0/0
 12199 ;;		Unchanged: 0/0
 12200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12203 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12204 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12205 ;;Total ram usage:        2 bytes
 12206 ;; Hardware stack levels used:    1
 12207 ;; Hardware stack levels required when called:    1
 12208 ;; This function calls:
 12209 ;;		_Reset_Nec_State
 12210 ;; This function is called by:
 12211 ;;		_chkisr
 12212 ;; This function uses a non-reentrant model
 12213 ;;
 12214                           
 12215                           	psect	text77
 12216  000D64                     __ptext77:
 12217                           	opt stack 0
 12218  000D64                     _INT0_isr:
 12219                           	opt stack 20
 12220                           
 12221                           ;Interrupt2.c: 90: INTCONbits.INT0IF = 0;
 12222                           
 12223                           ;incstack = 0
 12224  000D64  92F2               	bcf	intcon,1,c	;volatile
 12225                           
 12226                           ;Interrupt2.c: 91: if (Nec_State != 0)
 12227  000D66  5051               	movf	_Nec_State,w,c
 12228  000D68  B4D8               	btfsc	status,2,c
 12229  000D6A  D0A2               	goto	i2l5147
 12230                           
 12231                           ;Interrupt2.c: 92: {
 12232                           ;Interrupt2.c: 93: Time_Elapsed = (TMR1H << 8) | TMR1L;
 12233  000D6C  50CE               	movf	4046,w,c	;volatile
 12234  000D6E  CFCF F001          	movff	4047,??_INT0_isr	;volatile
 12235  000D72  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
 12236  000D74  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
 12237  000D78  6A01               	clrf	??_INT0_isr,c
 12238  000D7A  1001               	iorwf	??_INT0_isr,w,c
 12239  000D7C  6E47               	movwf	_Time_Elapsed,c
 12240  000D7E  5002               	movf	??_INT0_isr+1,w,c
 12241  000D80  6E48               	movwf	_Time_Elapsed+1,c
 12242                           
 12243                           ;Interrupt2.c: 94: TMR1H = 0;
 12244  000D82  0E00               	movlw	0
 12245  000D84  6ECF               	movwf	4047,c	;volatile
 12246                           
 12247                           ;Interrupt2.c: 95: TMR1L = 0;
 12248  000D86  0E00               	movlw	0
 12249  000D88  6ECE               	movwf	4046,c	;volatile
 12250                           
 12251                           ;Interrupt2.c: 96: }
 12252                           ;Interrupt2.c: 98: switch(Nec_State)
 12253  000D8A  D092               	goto	i2l5147
 12254  000D8C                     i2l5077:
 12255                           
 12256                           ;Interrupt2.c: 101: {
 12257                           ;Interrupt2.c: 103: TMR1H = 0;
 12258  000D8C  0E00               	movlw	0
 12259  000D8E  6ECF               	movwf	4047,c	;volatile
 12260                           
 12261                           ;Interrupt2.c: 104: TMR1L = 0;
 12262  000D90  0E00               	movlw	0
 12263  000D92  6ECE               	movwf	4046,c	;volatile
 12264                           
 12265                           ;Interrupt2.c: 105: PIR1bits.TMR1IF = 0;
 12266  000D94  909E               	bcf	3998,0,c	;volatile
 12267                           
 12268                           ;Interrupt2.c: 106: T1CON= 0x90;
 12269  000D96  0E90               	movlw	144
 12270  000D98  6ECD               	movwf	4045,c	;volatile
 12271                           
 12272                           ;Interrupt2.c: 107: T1CONbits.TMR1ON = 1;
 12273  000D9A  80CD               	bsf	4045,0,c	;volatile
 12274                           
 12275                           ;Interrupt2.c: 108: bit_count = 0;
 12276  000D9C  0E00               	movlw	0
 12277  000D9E  6E58               	movwf	_bit_count,c
 12278                           
 12279                           ;Interrupt2.c: 109: Nec_code = 0;
 12280  000DA0  0E00               	movlw	0
 12281  000DA2  0100               	movlb	0	; () banked
 12282  000DA4  6FE8               	movwf	_Nec_code& (0+255),b
 12283  000DA6  0E00               	movlw	0
 12284  000DA8  6FE9               	movwf	(_Nec_code+1)& (0+255),b
 12285  000DAA  0E00               	movlw	0
 12286  000DAC  6FEA               	movwf	(_Nec_code+2)& (0+255),b
 12287  000DAE  0E00               	movlw	0
 12288  000DB0  6FEB               	movwf	(_Nec_code+3)& (0+255),b
 12289                           
 12290                           ;Interrupt2.c: 110: Nec_State = 1;
 12291  000DB2  0E01               	movlw	1
 12292  000DB4  6E51               	movwf	_Nec_State,c
 12293  000DB6  D07A               	goto	i2l5145
 12294                           
 12295                           ; BSR set to: 0
 12296                           ;Interrupt2.c: 112: return;
 12297                           
 12298                           ; BSR set to: 0
 12299                           ;Interrupt2.c: 111: INTCON2bits.INTEDG0 = 1;
 12300  000DB8  D08C               	goto	i2l890
 12301  000DBA                     i2l5087:
 12302                           
 12303                           ;Interrupt2.c: 116: {
 12304                           ;Interrupt2.c: 117: if(Time_Elapsed > 8500 && Time_Elapsed < 9500)
 12305  000DBA  0E35               	movlw	53
 12306  000DBC  5C47               	subwf	_Time_Elapsed,w,c
 12307  000DBE  0E21               	movlw	33
 12308  000DC0  5848               	subwfb	_Time_Elapsed+1,w,c
 12309  000DC2  A0D8               	btfss	status,0,c
 12310  000DC4  D009               	goto	i2l5093
 12311  000DC6  0E1C               	movlw	28
 12312  000DC8  5C47               	subwf	_Time_Elapsed,w,c
 12313  000DCA  0E25               	movlw	37
 12314  000DCC  5848               	subwfb	_Time_Elapsed+1,w,c
 12315  000DCE  B0D8               	btfsc	status,0,c
 12316  000DD0  D003               	goto	i2l5093
 12317                           
 12318                           ;Interrupt2.c: 118: {
 12319                           ;Interrupt2.c: 119: Nec_State = 2;
 12320  000DD2  0E02               	movlw	2
 12321  000DD4  6E51               	movwf	_Nec_State,c
 12322                           
 12323                           ;Interrupt2.c: 120: }
 12324  000DD6  D029               	goto	i2l5119
 12325  000DD8                     i2l5093:
 12326                           
 12327                           ;Interrupt2.c: 121: else Reset_Nec_State();
 12328  000DD8  EC14  F012         	call	_Reset_Nec_State	;wreg free
 12329  000DDC  D026               	goto	i2l5119
 12330  000DDE  D025               	goto	i2l5119
 12331                           
 12332                           ;Interrupt2.c: 124: return;
 12333                           
 12334                           ;Interrupt2.c: 123: INTCON2bits.INTEDG0 = 0;
 12335  000DE0  D078               	goto	i2l890
 12336  000DE2                     i2l5099:
 12337                           
 12338                           ;Interrupt2.c: 128: {
 12339                           ;Interrupt2.c: 129: if(Time_Elapsed > 4000 && Time_Elapsed < 5000)
 12340  000DE2  0EA1               	movlw	161
 12341  000DE4  5C47               	subwf	_Time_Elapsed,w,c
 12342  000DE6  0E0F               	movlw	15
 12343  000DE8  5848               	subwfb	_Time_Elapsed+1,w,c
 12344  000DEA  A0D8               	btfss	status,0,c
 12345  000DEC  D008               	goto	i2l5105
 12346  000DEE  0E88               	movlw	136
 12347  000DF0  5C47               	subwf	_Time_Elapsed,w,c
 12348  000DF2  0E13               	movlw	19
 12349  000DF4  5848               	subwfb	_Time_Elapsed+1,w,c
 12350  000DF6  B0D8               	btfsc	status,0,c
 12351  000DF8  D002               	goto	i2l5105
 12352  000DFA                     
 12353                           ;Interrupt2.c: 130: {
 12354                           ;Interrupt2.c: 131: Nec_State = 3;
 12355  000DFA  0E03               	movlw	3
 12356  000DFC  D052               	goto	L4
 12357  000DFE                     i2l5105:
 12358                           
 12359                           ;Interrupt2.c: 133: else Reset_Nec_State();
 12360  000DFE  EC14  F012         	call	_Reset_Nec_State	;wreg free
 12361  000E02  D054               	goto	i2l5145
 12362  000E04  D053               	goto	i2l5145
 12363                           
 12364                           ;Interrupt2.c: 135: return;
 12365                           
 12366                           ;Interrupt2.c: 134: INTCON2bits.INTEDG0 = 1;
 12367  000E06  D065               	goto	i2l890
 12368  000E08                     i2l5111:
 12369                           
 12370                           ;Interrupt2.c: 139: {
 12371                           ;Interrupt2.c: 140: if(Time_Elapsed > 400 && Time_Elapsed < 700)
 12372  000E08  0E91               	movlw	145
 12373  000E0A  5C47               	subwf	_Time_Elapsed,w,c
 12374  000E0C  0E01               	movlw	1
 12375  000E0E  5848               	subwfb	_Time_Elapsed+1,w,c
 12376  000E10  A0D8               	btfss	status,0,c
 12377  000E12  D008               	goto	i2l5117
 12378  000E14  0EBC               	movlw	188
 12379  000E16  5C47               	subwf	_Time_Elapsed,w,c
 12380  000E18  0E02               	movlw	2
 12381  000E1A  5848               	subwfb	_Time_Elapsed+1,w,c
 12382  000E1C  B0D8               	btfsc	status,0,c
 12383  000E1E  D002               	goto	i2l5117
 12384                           
 12385                           ;Interrupt2.c: 141: {
 12386                           ;Interrupt2.c: 142: Nec_State = 4;
 12387  000E20  0E04               	movlw	4
 12388  000E22  D7D8               	goto	L5
 12389  000E24                     i2l5117:
 12390                           
 12391                           ;Interrupt2.c: 144: else Reset_Nec_State();
 12392  000E24  EC14  F012         	call	_Reset_Nec_State	;wreg free
 12393  000E28  D000               	goto	i2l5119
 12394  000E2A                     i2l5119:
 12395                           
 12396                           ;Interrupt2.c: 145: INTCON2bits.INTEDG0 = 0;
 12397  000E2A  9CF1               	bcf	intcon2,6,c	;volatile
 12398                           
 12399                           ;Interrupt2.c: 146: return;
 12400  000E2C  D052               	goto	i2l890
 12401  000E2E                     i2l5123:
 12402                           
 12403                           ;Interrupt2.c: 150: {
 12404                           ;Interrupt2.c: 151: if(Time_Elapsed > 400 && Time_Elapsed < 1800)
 12405  000E2E  0E91               	movlw	145
 12406  000E30  5C47               	subwf	_Time_Elapsed,w,c
 12407  000E32  0E01               	movlw	1
 12408  000E34  5848               	subwfb	_Time_Elapsed+1,w,c
 12409  000E36  A0D8               	btfss	status,0,c
 12410  000E38  D036               	goto	i2l5143
 12411  000E3A  0E08               	movlw	8
 12412  000E3C  5C47               	subwf	_Time_Elapsed,w,c
 12413  000E3E  0E07               	movlw	7
 12414  000E40  5848               	subwfb	_Time_Elapsed+1,w,c
 12415  000E42  B0D8               	btfsc	status,0,c
 12416  000E44  D030               	goto	i2l5143
 12417                           
 12418                           ;Interrupt2.c: 152: {
 12419                           ;Interrupt2.c: 153: Nec_code = Nec_code << 1;
 12420  000E46  90D8               	bcf	status,0,c
 12421  000E48  0100               	movlb	0	; () banked
 12422  000E4A  35E8               	rlcf	_Nec_code& (0+255),w,b
 12423  000E4C  0100               	movlb	0	; () banked
 12424  000E4E  6FE8               	movwf	_Nec_code& (0+255),b
 12425  000E50  0100               	movlb	0	; () banked
 12426  000E52  35E9               	rlcf	(_Nec_code+1)& (0+255),w,b
 12427  000E54  0100               	movlb	0	; () banked
 12428  000E56  6FE9               	movwf	(_Nec_code+1)& (0+255),b
 12429  000E58  0100               	movlb	0	; () banked
 12430  000E5A  35EA               	rlcf	(_Nec_code+2)& (0+255),w,b
 12431  000E5C  0100               	movlb	0	; () banked
 12432  000E5E  6FEA               	movwf	(_Nec_code+2)& (0+255),b
 12433  000E60  0100               	movlb	0	; () banked
 12434  000E62  35EB               	rlcf	(_Nec_code+3)& (0+255),w,b
 12435  000E64  0100               	movlb	0	; () banked
 12436  000E66  6FEB               	movwf	(_Nec_code+3)& (0+255),b
 12437                           
 12438                           ;Interrupt2.c: 154: if(Time_Elapsed > 1000)
 12439  000E68  0EE9               	movlw	233
 12440  000E6A  5C47               	subwf	_Time_Elapsed,w,c
 12441  000E6C  0E03               	movlw	3
 12442  000E6E  5848               	subwfb	_Time_Elapsed+1,w,c
 12443  000E70  A0D8               	btfss	status,0,c
 12444  000E72  D008               	goto	i2l5131
 12445                           
 12446                           ; BSR set to: 0
 12447                           ;Interrupt2.c: 155: {
 12448                           ;Interrupt2.c: 156: Nec_code++;
 12449  000E74  0E01               	movlw	1
 12450  000E76  0100               	movlb	0	; () banked
 12451  000E78  27E8               	addwf	_Nec_code& (0+255),f,b
 12452  000E7A  0E00               	movlw	0
 12453  000E7C  23E9               	addwfc	(_Nec_code+1)& (0+255),f,b
 12454  000E7E  23EA               	addwfc	(_Nec_code+2)& (0+255),f,b
 12455  000E80  23EB               	addwfc	(_Nec_code+3)& (0+255),f,b
 12456  000E82  D000               	goto	i2l5131
 12457  000E84                     i2l5131:
 12458                           
 12459                           ; BSR set to: 0
 12460                           ;Interrupt2.c: 158: }
 12461                           ;Interrupt2.c: 159: bit_count++;
 12462  000E84  2A58               	incf	_bit_count,f,c
 12463                           
 12464                           ; BSR set to: 0
 12465                           ;Interrupt2.c: 160: if(bit_count > 31)
 12466  000E86  0E1F               	movlw	31
 12467  000E88  6458               	cpfsgt	_bit_count,c
 12468  000E8A  D7B7               	goto	L6
 12469                           
 12470                           ; BSR set to: 0
 12471                           ;Interrupt2.c: 161: {
 12472                           ;Interrupt2.c: 162: Nec_ok = 1;
 12473  000E8C  0E00               	movlw	0
 12474  000E8E  0100               	movlb	0	; () banked
 12475  000E90  6FF4               	movwf	(_Nec_ok+1)& (0+255),b
 12476  000E92  0E01               	movlw	1
 12477  000E94  6FF3               	movwf	_Nec_ok& (0+255),b
 12478                           
 12479                           ; BSR set to: 0
 12480                           ;Interrupt2.c: 163: INTCONbits.INT0IE = 0;
 12481  000E96  98F2               	bcf	intcon,4,c	;volatile
 12482                           
 12483                           ; BSR set to: 0
 12484                           ;Interrupt2.c: 164: Nec_button = Nec_code >> 8;
 12485  000E98  C0E9  F052         	movff	_Nec_code+1,_Nec_button
 12486                           
 12487                           ;Interrupt2.c: 165: Nec_State = 0;
 12488  000E9C  0E00               	movlw	0
 12489  000E9E  D001               	goto	L4
 12490                           
 12491                           ; BSR set to: 0
 12492                           
 12493                           ;Interrupt2.c: 166: }
 12494  000EA0  D7AC               	goto	L6
 12495  000EA2                     L4:
 12496  000EA2  6E51               	movwf	_Nec_State,c
 12497                           
 12498                           ; BSR set to: 0
 12499                           ;Interrupt2.c: 169: }
 12500  000EA4  D003               	goto	i2l5145
 12501  000EA6                     i2l5143:
 12502                           
 12503                           ;Interrupt2.c: 170: else Reset_Nec_State();
 12504  000EA6  EC14  F012         	call	_Reset_Nec_State	;wreg free
 12505  000EAA  D000               	goto	i2l5145
 12506  000EAC                     i2l5145:
 12507                           
 12508                           ;Interrupt2.c: 171: INTCON2bits.INTEDG0 = 1;
 12509  000EAC  8CF1               	bsf	intcon2,6,c	;volatile
 12510                           
 12511                           ;Interrupt2.c: 173: }
 12512                           ;Interrupt2.c: 174: }
 12513  000EAE  D011               	goto	i2l890
 12514  000EB0                     i2l5147:
 12515  000EB0  5051               	movf	_Nec_State,w,c
 12516                           
 12517                           ; Switch size 1, requested type "space"
 12518                           ; Number of cases is 5, Range of values is 0 to 4
 12519                           ; switch strategies available:
 12520                           ; Name         Instructions Cycles
 12521                           ; simple_byte           16     9 (average)
 12522                           ;	Chosen strategy is simple_byte
 12523  000EB2  0A00               	xorlw	0	; case 0
 12524  000EB4  B4D8               	btfsc	status,2,c
 12525  000EB6  D76A               	goto	i2l5077
 12526  000EB8  0A01               	xorlw	1	; case 1
 12527  000EBA  B4D8               	btfsc	status,2,c
 12528  000EBC  D77E               	goto	i2l5087
 12529  000EBE  0A03               	xorlw	3	; case 2
 12530  000EC0  B4D8               	btfsc	status,2,c
 12531  000EC2  D78F               	goto	i2l5099
 12532  000EC4  0A01               	xorlw	1	; case 3
 12533  000EC6  B4D8               	btfsc	status,2,c
 12534  000EC8  D79F               	goto	i2l5111
 12535  000ECA  0A07               	xorlw	7	; case 4
 12536  000ECC  B4D8               	btfsc	status,2,c
 12537  000ECE  D7AF               	goto	i2l5123
 12538  000ED0  D000               	goto	i2l890
 12539  000ED2                     i2l890:
 12540  000ED2  0012               	return		;funcret
 12541  000ED4                     __end_of_INT0_isr:
 12542                           	opt stack 0
 12543                           pclatu	equ	0xFFB
 12544                           pclath	equ	0xFFA
 12545                           tblptru	equ	0xFF8
 12546                           tblptrh	equ	0xFF7
 12547                           tblptrl	equ	0xFF6
 12548                           tablat	equ	0xFF5
 12549                           prodh	equ	0xFF4
 12550                           prodl	equ	0xFF3
 12551                           intcon	equ	0xFF2
 12552                           intcon2	equ	0xFF1
 12553                           intcon3	equ	0xFF0
 12554                           postinc0	equ	0xFEE
 12555                           fsr0h	equ	0xFEA
 12556                           fsr0l	equ	0xFE9
 12557                           wreg	equ	0xFE8
 12558                           postdec1	equ	0xFE5
 12559                           fsr1h	equ	0xFE2
 12560                           fsr1l	equ	0xFE1
 12561                           indf2	equ	0xFDF
 12562                           postinc2	equ	0xFDE
 12563                           postdec2	equ	0xFDD
 12564                           fsr2h	equ	0xFDA
 12565                           fsr2l	equ	0xFD9
 12566                           status	equ	0xFD8
 12567                           
 12568 ;; *************** function _Reset_Nec_State *****************
 12569 ;; Defined at:
 12570 ;;		line 82 in file "Interrupt2.c"
 12571 ;; Parameters:    Size  Location     Type
 12572 ;;		None
 12573 ;; Auto vars:     Size  Location     Type
 12574 ;;		None
 12575 ;; Return value:  Size  Location     Type
 12576 ;;		None               void
 12577 ;; Registers used:
 12578 ;;		wreg, status,2
 12579 ;; Tracked objects:
 12580 ;;		On entry : 0/0
 12581 ;;		On exit  : 0/0
 12582 ;;		Unchanged: 0/0
 12583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12588 ;;Total ram usage:        0 bytes
 12589 ;; Hardware stack levels used:    1
 12590 ;; This function calls:
 12591 ;;		Nothing
 12592 ;; This function is called by:
 12593 ;;		_INT0_isr
 12594 ;; This function uses a non-reentrant model
 12595 ;;
 12596                           
 12597                           	psect	text78
 12598  002428                     __ptext78:
 12599                           	opt stack 0
 12600  002428                     _Reset_Nec_State:
 12601                           	opt stack 20
 12602                           
 12603                           ;Interrupt2.c: 84: Nec_State=0;
 12604                           
 12605                           ;incstack = 0
 12606  002428  0E00               	movlw	0
 12607  00242A  6E51               	movwf	_Nec_State,c
 12608                           
 12609                           ;Interrupt2.c: 85: T1CONbits.TMR1ON = 0;
 12610  00242C  90CD               	bcf	4045,0,c	;volatile
 12611  00242E  0012               	return		;funcret
 12612  002430                     __end_of_Reset_Nec_State:
 12613                           	opt stack 0
 12614                           pclatu	equ	0xFFB
 12615                           pclath	equ	0xFFA
 12616                           tblptru	equ	0xFF8
 12617                           tblptrh	equ	0xFF7
 12618                           tblptrl	equ	0xFF6
 12619                           tablat	equ	0xFF5
 12620                           prodh	equ	0xFF4
 12621                           prodl	equ	0xFF3
 12622                           intcon	equ	0xFF2
 12623                           intcon2	equ	0xFF1
 12624                           intcon3	equ	0xFF0
 12625                           postinc0	equ	0xFEE
 12626                           fsr0h	equ	0xFEA
 12627                           fsr0l	equ	0xFE9
 12628                           wreg	equ	0xFE8
 12629                           postdec1	equ	0xFE5
 12630                           fsr1h	equ	0xFE2
 12631                           fsr1l	equ	0xFE1
 12632                           indf2	equ	0xFDF
 12633                           postinc2	equ	0xFDE
 12634                           postdec2	equ	0xFDD
 12635                           fsr2h	equ	0xFDA
 12636                           fsr2l	equ	0xFD9
 12637                           status	equ	0xFD8
 12638                           pclatu	equ	0xFFB
 12639                           pclath	equ	0xFFA
 12640                           tblptru	equ	0xFF8
 12641                           tblptrh	equ	0xFF7
 12642                           tblptrl	equ	0xFF6
 12643                           tablat	equ	0xFF5
 12644                           prodh	equ	0xFF4
 12645                           prodl	equ	0xFF3
 12646                           intcon	equ	0xFF2
 12647                           intcon2	equ	0xFF1
 12648                           intcon3	equ	0xFF0
 12649                           postinc0	equ	0xFEE
 12650                           fsr0h	equ	0xFEA
 12651                           fsr0l	equ	0xFE9
 12652                           wreg	equ	0xFE8
 12653                           postdec1	equ	0xFE5
 12654                           fsr1h	equ	0xFE2
 12655                           fsr1l	equ	0xFE1
 12656                           indf2	equ	0xFDF
 12657                           postinc2	equ	0xFDE
 12658                           postdec2	equ	0xFDD
 12659                           fsr2h	equ	0xFDA
 12660                           fsr2l	equ	0xFD9
 12661                           status	equ	0xFD8
 12662                           
 12663                           	psect	rparam
 12664  0000                     pclatu	equ	0xFFB
 12665                           pclath	equ	0xFFA
 12666                           tblptru	equ	0xFF8
 12667                           tblptrh	equ	0xFF7
 12668                           tblptrl	equ	0xFF6
 12669                           tablat	equ	0xFF5
 12670                           prodh	equ	0xFF4
 12671                           prodl	equ	0xFF3
 12672                           intcon	equ	0xFF2
 12673                           intcon2	equ	0xFF1
 12674                           intcon3	equ	0xFF0
 12675                           postinc0	equ	0xFEE
 12676                           fsr0h	equ	0xFEA
 12677                           fsr0l	equ	0xFE9
 12678                           wreg	equ	0xFE8
 12679                           postdec1	equ	0xFE5
 12680                           fsr1h	equ	0xFE2
 12681                           fsr1l	equ	0xFE1
 12682                           indf2	equ	0xFDF
 12683                           postinc2	equ	0xFDE
 12684                           postdec2	equ	0xFDD
 12685                           fsr2h	equ	0xFDA
 12686                           fsr2l	equ	0xFD9
 12687                           status	equ	0xFD8


Data Sizes:
    Strings     217
    Constant    493
    Data        201
    BSS         63
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     66     111
    BANK0           128      3     128
    BANK1           256     14     108
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), STR_8(CODE[3]), 
		 -> STR_7(CODE[6]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[2]), 
		 -> STR_3(CODE[3]), STR_2(CODE[13]), STR_1(CODE[19]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_17(CODE[23]), STR_16(CODE[22]), STR_15(CODE[18]), STR_14(CODE[20]), 
		 -> STR_13(CODE[21]), STR_12(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK1[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[31]), 


Critical Paths under _main in COMRAM

    _printf->___lwmod
    ___lwmod->___lwdiv
    _get_RPM->___ftmul
    _Update_Screen->_drawtext
    ___awmod->___awdiv
    ___awdiv->___wmul
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawCircle->_drawPixel
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _do_update_pwm->___fttol
    ___lbtoft->___ftpack
    ___fttol->_get_RPM
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _Turn_On_Fan->_do_update_pwm
    _Increase_Speed->_do_update_pwm
    _Do_Beep_Bad->_do_update_pwm
    _Decrease_Speed->_do_update_pwm

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Update_Screen
    _Update_Screen->_drawtext
    _Turn_On_Fan->_do_update_pwm
    _Initialize_Screen->_drawtext
    _Increase_Speed->_do_update_pwm
    _Do_Beep_Bad->_do_update_pwm
    _Decrease_Speed->_do_update_pwm

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0  104877
                                              9 BANK1      5     5      0
                    _Activate_Buzzer
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                  _Deactivate_Buzzer
                     _Decrease_Speed
                        _Do_Beep_Bad
                            _Do_Init
                     _Increase_Speed
                  _Initialize_Screen
                         _Toggle_Fan
                      _Update_Screen
                    _Wait_One_Second
                            ___awdiv
                            ___fttol
                             ___wmul
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3846
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              6     3      3    4919
                                             43 COMRAM     6     3      3
                    _Wait_One_Second
                            ___ftmul
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        4     4      0   22483
                                              0 BANK0      2     2      0
                                              7 BANK1      2     2      0
                            ___awdiv
                            ___awmod
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1733
                                             30 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4    2135
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Toggle_Fan                                           0     0      0    8359
                       _Turn_Off_Fan
                        _Turn_On_Fan
 ---------------------------------------------------------------------------------
 (2) _Turn_On_Fan                                          0     0      0    8359
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   34162
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    1539
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   17011
                                             56 COMRAM    10     2      8
                                              0 BANK1      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   10904
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    6744
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4624
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2052
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2052
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1012
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Increase_Speed                                       0     0      0    8359
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1121
                        _DS1621_Init
                           _I2C_Init
                           _Init_ADC
                       _Turn_Off_Fan
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Turn_Off_Fan                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Do_Beep_Bad                                          0     0      0    8359
              _Activate_Buzzer_500Hz
                  _Deactivate_Buzzer
                    _Wait_One_Second
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _Wait_One_Second                                      0     0      0       0
                   _Wait_Half_Second
 ---------------------------------------------------------------------------------
 (2) _Activate_Buzzer_500Hz                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Decrease_Speed                                       0     0      0    8359
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _do_update_pwm                                        9     9      0    8359
                                              0 BANK0      3     3      0
                                              0 BANK1      6     6      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2039
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             15    11      4     501
                                             49 COMRAM    15    11      4
                            _get_RPM (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2846
                                             28 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    2778
                                             43 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2008
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _Do_Beep                                              0     0      0       0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                   _Wait_Half_Second
 ---------------------------------------------------------------------------------
 (3) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    2     2      0     201
                                             18 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     3     3      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                           _INT1_isr
                           _INT2_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT2_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT1_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                    _Reset_Nec_State
 ---------------------------------------------------------------------------------
 (11) _Reset_Nec_State                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Activate_Buzzer
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Deactivate_Buzzer
   _Decrease_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_Half_Second
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         _get_RPM (ARG)
           _Wait_One_Second
             _Wait_Half_Second
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft
             ___ftpack
       ___lbtoft
         ___ftpack
   _Do_Beep_Bad
     _Activate_Buzzer_500Hz
     _Deactivate_Buzzer
     _Wait_One_Second
       _Wait_Half_Second
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         _get_RPM (ARG)
           _Wait_One_Second
             _Wait_Half_Second
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft
             ___ftpack
       ___lbtoft
         ___ftpack
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Init_ADC
     _Turn_Off_Fan
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Increase_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_Half_Second
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         _get_RPM (ARG)
           _Wait_One_Second
             _Wait_Half_Second
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft
             ___ftpack
       ___lbtoft
         ___ftpack
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Toggle_Fan
     _Turn_Off_Fan
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           _get_RPM (ARG)
             _Wait_One_Second
               _Wait_Half_Second
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___lbtoft
               ___ftpack
         ___lbtoft
           ___ftpack
   _Update_Screen
     ___awdiv
       ___wmul (ARG)
     ___awmod
       ___awdiv (ARG)
         ___wmul (ARG)
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   _Wait_One_Second
     _Wait_Half_Second
   ___awdiv
     ___wmul (ARG)
   ___fttol
     _get_RPM (ARG)
       _Wait_One_Second
         _Wait_Half_Second
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft
         ___ftpack
   ___wmul
   _get_RPM
     _Wait_One_Second
       _Wait_Half_Second
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___lbtoft
       ___ftpack
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _Reset_Nec_State
   _INT1_isr
   _INT2_isr
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      E      6C       7       42.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      3      80       5      100.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     42      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     15B      34        0.0%
DATA                 0      0     15B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Nov 21 18:33:58 2023

                      drawCircle@f 002A                        drawCircle@r 0020  
                      drawCircle@x 002C                        drawCircle@y 002E  
               __size_of_I2C_Start 0012                        _SSPSTATbits 000FC7  
               __size_of_I2C_Write 003E                       drawCircle@x0 001C  
                     drawCircle@y0 001E                                 _D2 00A4  
                               l35 1E1E                                 l45 22CC  
                               l95 1A1A                                 l89 20F2  
                     ___awdiv@sign 001C               __size_of_Turn_On_Fan 0010  
              ___wmul@multiplicand 0013                    ??_Update_Screen 00FD  
                              l111 1028                                l120 0F7E  
                              l113 0F02                                l151 16AC  
                              l312 1F9A                                l152 16CE  
                              l315 2026                                l251 22BC  
                              l148 16D0                                l149 163C  
                              l246 1F08                                l159 0C78  
                              l267 222A                                l392 2090  
                              l561 2274                                _FAN 004D  
                              l938 04DC                                l788 2398  
                              l975 0734                                l999 1B4A  
                ?_Wait_Half_Second 0001                                _PR2 000FCB  
                              _day 005A                  _Deactivate_Buzzer 2410  
             __size_of_I2C_ReStart 0016                                _dow 005B  
                              _nbr 00F9                                _rpm 0049  
            __size_of_Turn_Off_Fan 000A                                _rps 00FB  
                              _txt 004B                       ___awmod@sign 0024  
                              prod 000FF3                                wreg 000FE8  
               ??_Wait_Half_Second 0011                 ?_Deactivate_Buzzer 0001  
                       _Fan_SW_Txt 00DC                    ??_fillRectangle 001D  
                     __CFG_LVP$OFF 000000            _TFT_GreenTab_Initialize 20F4  
                     ___ftdiv@cntr 0035                       ___ftdiv@sign 003A  
                     __CFG_WDT$OFF 000000                               l1003 1B64  
                             l1011 2144                               l1004 1B66  
                             l1005 1B70                               l1006 1B72  
                             l1008 1B8C                               l1204 1902  
                   drawFastVLine@h 0019                               l1217 1A9C  
                             l1330 1844                               l1406 133A  
                             l1319 186C                               l1442 21B0  
                             l1427 1512                     drawFastVLine@x 0022  
                   drawFastVLine@y 0018                               l1534 1D70  
                             l1391 15F4                               l1544 1EB6  
                             l1394 15C0                               l1468 216A  
                             l1573 1FD8                               l6011 0EF0  
                             l6021 0F0E                               l6015 0EFE  
                             l6007 0EE4                               l6103 16CA  
                             l6025 0F3E                               l6017 0F06  
                             l7001 062C                               l6027 0F72  
                             l7003 0634                               l7011 0660  
                             l6117 1774                               l6045 0FF4  
                             l6037 0FA0                               l6053 1024  
                             l6029 0F76                               l6061 1FAC  
                             l7013 0668                               l7021 06F2  
                             l6047 101C                               l6039 0FC8  
                             l6071 1606                               l7015 06AC  
                             l7023 0704                               l7007 064C  
                             l6241 11D4                               l6225 1166  
                             l7025 070C                               l6171 1B3A  
                             l6059 1FA6                               l6251 122E  
                             l7027 0718                               l6237 11B6  
                             l6093 16B0                               l6077 1674  
                             l6501 1A40     I2C_Write_Cmd_Write_Data@Device 0015  
                             l6175 1B42                               l6167 1B30  
                             l6271 0C5E                               l6345 1F5E  
                             l5713 20D4                               l5641 1A10  
                             l5625 19A4                               l5721 1F14  
                             l6249 1226                               l6097 16BA  
                             l6089 16A2                               l6521 1A92  
                             l6513 1A76                               l6505 1A4E  
                             l6441 21A8                               l6355 1F74  
                             l6363 1F84                               l6187 1B5C  
                             l6179 1B4E                               l6507 1A58  
                             l6531 1D34                               l6357 1F7C  
                             l6349 1F66                               l5821 127C  
                             l5629 19DC                               l5725 1F30  
                             l6453 1884                               l6509 1A60  
                             l6517 1A82                               l6533 1D3E  
                             l7405 0AFE                               l6367 1F90  
                             l5735 2030                               l5671 17F4  
                             l5663 17B8                               l5903 1500  
                             l5639 1A02                               l6391 20A6  
                             l6543 1D64                               l6535 1D46  
                             l6551 1E82                               l6369 1F96  
                             l5737 2036                               l5729 201E  
                             l5809 15CE                               l5825 128A  
                             l6465 18AC                               l6481 18E8  
                             l6553 1E8C                               l7441 0B80  
                             l7417 0B20                               l7409 0B08  
                             l5747 2048                               l5691 185E  
                             l5675 180C                               l5667 17C8  
                             l5843 12D0                               l5819 1262  
                             l6651 221E                               l6643 21E2  
                             l6299 0D4E                               l6467 18B6  
                             l6459 1896                               l6803 012E  
                             l6555 1E94                               l7435 0B6E  
                             l7363 09AC                               l5685 184C  
                             l5677 182C                               l5669 17D4  
                             l5773 1532                               l5853 12FE  
                             l6645 21E8                               l6389 209C  
                             l6637 22B6                               l6485 18F8  
                             l6477 18DC                               l6469 18BE  
                             l6901 03E6                               l7437 0B74  
                             l7453 0B94                               l7381 0A84  
                             l5679 1838                               l5775 154C  
                             l5847 12E6                               l5839 12BE  
                             l6831 01C2                               l6559 1EAA  
                             l6911 040E                               l7439 0B7A  
                             l5857 1314                               l5849 12EC  
                             l6497 1A32                               l6833 01D8  
                             l6913 0424                               l6905 03F6  
                             l7449 0B8E                               l5779 155A  
                             l5891 14BC                               l5867 144C  
                             l6907 0404                               l7395 0ABC  
                             l5885 14A6                               l6781 0058  
                             l6941 050A                               l6925 04A6  
                             l6917 0442                               l5799 159A  
                             l5895 14D0                               l6951 0534  
                             l7399 0AD6                               l5897 14DE  
                             l5889 14B6                               l6961 0562  
                             l6945 0524                               l6929 04AE  
                             l5899 14E8                               l6787 0098  
                             l6955 0558                               l6947 0528  
                             l6797 00EE                               l6965 056E  
                             l6983 05C6                               l6959 055E  
                             l6975 0598                               l6969 0592  
                             l6977 05AA                               l6995 060C  
                             l6987 05EA                               l6997 0614  
                             l6989 05F4                               STR_1 FF9A  
                             STR_2 FFD0                               STR_3 FFF9  
                             STR_4 FFF3                               STR_5 FFE3  
                             STR_6 FFE8                               STR_7 FFDD  
                             STR_8 FFFC                               STR_9 FFF5  
                             u4220 1634                               u4150 0FD6  
                             u4230 166A                               u4410 1190  
                             u3911 1254                               u5337 23C2  
                             u3690 19D2                               u3931 1272  
                             u3861 1524                               u3881 1542  
                             u3971 143E                               u3990 146A  
                             u3995 1462                               _RBPU 007F8F  
                             _TRMT 007D61                       _DS1621_tempC 0043  
                     _DS1621_tempF 0045                ??_Deactivate_Buzzer 0011  
                             _date 00C1                               _main 09A0  
                             _font FD39                       ___ftpack@arg 0011  
                             _hour 005E                       ___ftpack@exp 0014  
                 __end_of_I2C_Init 23DE                   __end_of_I2C_Read 1F9C  
                             _time 00CA                               _year 006C  
                             fsr0h 000FEA                               fsr1h 000FE2  
                             fsr0l 000FE9                               fsr2h 000FDA  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                               _wrap 006F  
                             _volt 00EC                   __end_of_I2C_Stop 2340  
                             pclat 000FFA                 __size_of_LCD_Reset 0012  
                             prodh 000FF4                               prodl 000FF3  
                  __end_of_Do_Beep 231C                               start 0018  
      __size_of_I2C_Write_Cmd_Only 001A                    __end_of_Do_Init 1DD4  
                   _Increase_Speed 21D2                        _Do_Beep_Bad 227C  
                  ??_drawFastVLine 001C                       ___ftmul@cntr 002A  
                  __end_of_i2cNack 23F2                       ___param_bank 000010  
                     ___ftmul@sign 002B                    _Reset_Nec_State 2428  
                     ___fttol@exp1 0040                       _Turn_Off_Fan 23CA  
                     ___fttol@lval 003C                        ?_TIMER1_isr 0001  
                 __end_of_INT0_isr 0ED4                   __end_of_INT1_isr 2410  
                 __end_of_INT2_isr 2406     __size_of_Activate_Buzzer_500Hz 0012  
        __end_of_Deactivate_Buzzer 2418                    ??_do_update_pwm 00FD  
                  drawFastVLine@hi 0020                    drawFastVLine@lo 0021  
    __end_of_Activate_Buzzer_500Hz 230A                              ?_main 0001  
                  __end_of___awdiv 1904                    drawCircle@ddF_x 0026  
                            STR_10 FFED                    drawCircle@ddF_y 0028  
                            STR_11 FFF1                              STR_12 FF26  
                            STR_13 FF71                              STR_14 FF86  
                            STR_15 FFAD                              STR_16 FF5B  
                            STR_17 FF44                              STR_18 FFBF  
                  __end_of___awmod 1A9E                    __end_of___ftdiv 15F6  
                  __end_of___ftmul 133C                              _T0CON 000FD5  
                  ___awdiv@divisor 0019                              _T1CON 000FCD  
                  __end_of___fttol 1514                              _T2CON 000FCA  
                            _T3CON 000FB1                    __end_of___lwdiv 1D7A  
                  __end_of___lwmod 1EC0                              i2l872 240E  
                            i2l881 23BC                              i2l890 0ED2  
                            i2l875 2404                    ___awdiv@counter 001B  
                            i2l869 195A                    drawCircle@color 0022  
                            _RCSTA 000FAB                              _TMR0H 000FD7  
                            _TMR1H 000FCF                              _TMR0L 000FD6  
                            _TMR1L 000FCE                              _TMR3L 000FB2  
                            _SPBRG 000FAF                              _PORTB 000F81  
                            _PORTE 000F84                              _TRISA 000F92  
                            _TRISB 000F93                              _TRISC 000F94  
                            _TRISD 000F95                              _TRISE 000F96  
                            _TXREG 000FAD                              _TXSTA 000FAC  
                  __end_of_get_RPM 1F0A                              _Rcmd1 102A  
                            _Rcmd3 133C                         _i2cHighSda 2420  
                       _i2cHighScl 23BE                    __end_of_dpowers FF1E  
                            _color 00F7                              _font2 FE38  
                ??_Wait_One_Second 0011                              _found 005D  
                  __end_of_isdigit 21B2                              _tempC 00E0  
                            _tempF 00E4                              _month 0060  
                    ___ftpack@sign 0015                              _putch 2394  
                            main@i 0168                              main@j 016A  
                __end_of_I2C_Start 2352                  __end_of_I2C_Write 2056  
                   __CFG_BOREN$OFF 000000                              tablat 000FF5  
                       _Nec_button 0052                              status 000FD8  
           __end_of_Increase_Speed 21F0                  ?_DS1621_Read_Temp 0014  
                  write_data@data_ 0013                 ??_DS1621_Read_Temp 0016  
                  __initialization 1A9E                       __end_of_main 0BB6  
                     __end_of_font FE38                   __end_of_Init_ADC 23B0  
                 __end_of_Rcmd2red 2018                   ??_Decrease_Speed 0041  
                           ??_main 0167                      ___fttol@sign1 003B  
                    __activetblptr 000002                  ?_DS3231_Read_Time 0001  
                __end_of_LCD_Reset 22F8          ??_TFT_GreenTab_Initialize 001D  
               ??_DS3231_Read_Time 0014                             ?_Rcmd1 0001  
                           ?_Rcmd3 0001            __size_of_init_INTERRUPT 0024  
                        I2C_Init@c 0011                          I2C_Read@n 0012  
                           _ADCON0 000FC2                             _ADCON1 000FC1  
                           _ADCON2 000FC0                DS1621_Read_Temp@Cmd 0017  
                           _ADRESH 000FC4                             _ADRESL 000FC3  
                           _CCPR1L 000FBE                             _CCPR2L 000FBB  
                 ___awdiv@dividend 0017                 __size_of_i2cLowSda 000A  
               __size_of_i2cLowScl 0008                             ?_putch 0001  
                 __end_of___ftpack 186E                   __end_of___lbtoft 216C  
                        ??_Do_Beep 0011                             _DC_Txt 00D8  
                           i2l5111 0E08                             i2l5105 0DFE  
                           i2l5131 0E84                             i2l5123 0E2E  
                           i2l5117 0E24                             i2l5143 0EA6  
                           i2l5119 0E2A                             i2l5145 0EAC  
                        ??_Do_Init 0017                             i2l5147 0EB0  
                           i2l5093 0DD8                             i2l5077 0D8C  
                           i2l5087 0DBA                             i2l5099 0DE2  
                           i2l5583 1946                             i2l5587 1950  
                           i2l5579 193C                             _OSCCON 000FD3  
              __size_of_TIMER1_isr 000E                             _SPBRGH 000FB0  
          __end_of_Reset_Nec_State 2430                             _SSPBUF 000FC9  
                  ?_Increase_Speed 0001                          ??_i2cNack 0011  
                     _Alarm_SW_Txt 00BB                   __end_of_delay_ms 1E26  
                           _i2cAck 2352                             _Nec_ok 00F3  
                 __end_of_fillRect 1F54                   __end_of_drawChar 102A  
               __size_of_OpenUSART 0070           __size_of_Activate_Buzzer 0012  
                           ___wmul 211E                          ??___awdiv 001B  
                 __end_of_drawtext 1244                          ??___awmod 0023  
                        ??___ftdiv 0032                          ??___ftmul 0023  
                        ??___fttol 0036                             _chkisr 0008  
                        ??___lwdiv 0015                             _array1 012A  
                           _array2 0100                          ??___lwmod 001C  
                           _buffer 013F                             clear_0 1AA4  
                           clear_1 1AB0                   ___awdiv@quotient 001D  
                           _minute 005F                             _second 0062  
          DS3231_Setup_Time@Device 0013                    ___awmod@divisor 0021  
                        ??_get_RPM 002F         __size_of_Deactivate_Buzzer 0008  
                  ___awmod@counter 0023                             _printf 03DC  
                     drawtext@size 0040                             _strcpy 2092  
                           _strlen 1F9C              ___ftmul@f3_as_product 0027  
                       _Toggle_Fan 22AA                       __pdataCOMRAM 006D  
                        ??_isdigit 0011                          ?_I2C_Init 0011  
                        ?_I2C_Read 0001                          ?_I2C_Stop 0001  
                     __mediumconst FD38                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
 __end_of_I2C_Write_Cmd_Write_Data 21D2                        ?_i2cHighSda 0001  
                      ?_i2cHighScl 0001                             putch@c 0011  
                 __end_of_spiwrite 22D2                         __accesstop 0080  
          __end_of__initialization 1B14                          ?_INT0_isr 0001  
                        ?_INT1_isr 0001                          ?_INT2_isr 0001  
               _setup_alarm_minute 0064                 _setup_alarm_second 0065  
                    ___rparam_used 000001                         ___ftdiv@f1 002C  
                       ___ftdiv@f2 002F                         ___ftdiv@f3 0036  
                       ___lbtoft@c 001C                         ___ftmul@f1 001D  
                       ___ftmul@f2 0020                         ___fttol@f1 0032  
                    __end_of_Rcmd1 113A                      __end_of_Rcmd3 142E  
                   __pcstackCOMRAM 0001                       __pidataBANK0 1B8E  
                     __pidataBANK1 1CC0                      __end_of_font2 FF14  
                __end_of_i2cLowSda 23FC                  __end_of_i2cLowScl 2420  
                    __end_of_putch 23A2                     drawPixel@color 0019  
               _setup_fan_set_text 00B6             __size_of_write_command 0010  
                       ??_I2C_Init 0015                         ??_I2C_Read 0011  
                     _alarm_minute 0056                       _alarm_second 0057  
                       ??_I2C_Stop 0011                            ??_Rcmd1 001D  
                          ??_Rcmd3 001D                 __size_of_drawPixel 0030  
                __end_of_OpenUSART 1B8E                            ??_putch 0011  
                       __pbssBANK0 00E8                   _setup_alarm_hour 0063  
                        ?_Init_ADC 0001                   _setup_alarm_time 0089  
                    ??_DS1621_Init 0016                          ?_Rcmd2red 0001  
               __size_of_init_UART 0014          __size_of_Wait_Half_Second 001A  
                  spiwrite@spidata 0012                         _alarm_date 0054  
                 ?_Reset_Nec_State 0001                         ??_INT0_isr 0001  
                       ??_INT1_isr 0001                         ??_INT2_isr 0001  
                       _alarm_mode 00F5                         _alarm_hour 0055  
                       _alarm_time 0080                       _fan_set_temp 006D  
                          ?_i2cAck 0001                       ?_Do_Beep_Bad 0001  
                    ??_Turn_On_Fan 0041                     I2C_Read@inByte 0013  
                          ?___wmul 0011                __size_of_i2cHighSda 0008  
              __size_of_i2cHighScl 000C                            ?_chkisr 0001  
           __size_of_setAddrWindow 004E                            _CCP1CON 000FBD  
 I2C_Write_Cmd_Write_Data@Data_Out 0014                            _CCP2CON 000FBA  
                     ??_TIMER1_isr 0001                      ??_I2C_ReStart 0011  
                          _ALARMEN 00EF                          ?___ftpack 0011  
                        ?___lbtoft 0019                    _Wait_One_Second 23DE  
                       I2C_Write@n 0012                            ?_printf 001D  
                          ?_strcpy 0011                            ?_strlen 0011  
                      ?_Toggle_Fan 0001                  ??_Activate_Buzzer 0011  
                       _fillScreen 222C                            _MATCHED 00F1  
            __end_of_Update_Screen 03DC                         _drawCircle 0BB6  
                   _init_INTERRUPT 216C                          ?_delay_ms 0017  
                        ?_fillRect 0023                          ?_drawChar 002E  
                          _SSPCON1 000FC6                            _SSPSTAT 000FC7  
                          _RPM_Txt 00D3              __end_of_fillRectangle 16D2  
                          _Do_Beep 230A                          ?_drawtext 0039  
                _DS3231_Setup_Time 1BF6                         ??_Init_ADC 0011  
                          _Do_Init 1D7A           _I2C_Write_Cmd_Write_Data 21B2  
       __end_of_I2C_Write_Cmd_Only 2262                         ??_Rcmd2red 0014  
           DS1621_Read_Temp@Device 0018                            _i2cNack 23E8  
               __end_of_TIMER1_isr 23BE                 ?_DS3231_Setup_Time 0001  
                    _write_command 2384                          _I2C_Start 2340  
                        _I2C_Write 2018                    __size_of_i2cAck 0012  
                          __Hparam 0000                            __Lparam 0000  
              __end_of_DS1621_Init 220E                  __end_of_drawPixel 20F4  
              ??_DS3231_Setup_Time 0013              __end_of_drawFastVLine 1A1C  
                          ___awdiv 186E                            ___awmod 1A1C  
                          ___ftdiv 1514                    __size_of___wmul 0028  
                          ___ftmul 1244                            ___fttol 142E  
                          ___lwdiv 1D1E                            ___lwmod 1E74  
                  __size_of_chkisr 198C                          ?_spiwrite 0001  
                          __pcinit 1A9E                         ??___ftpack 0016  
                       ??___lbtoft 001C                            __ramtop 1000  
                          _get_RPM 1EC0                            __ptext0 09A0  
                          __ptext1 03DC                            __ptext2 2394  
                          __ptext3 2190                            __ptext4 1E74  
                          __ptext5 1D1E          __size_of_DS1621_Read_Temp 003C  
                          __ptext6 1EC0                            __ptext7 001C  
                          __ptext8 1A1C                            __ptext9 186E  
                  __size_of_printf 035A                  __end_of_init_UART 22E6  
              __end_of_Turn_On_Fan 2374             __end_of_init_INTERRUPT 2190  
                        _T0CONbits 000FD5                    __size_of_strcpy 0032  
                  __size_of_strlen 003E                  __end_of_hexpowers FF26  
                        _T1CONbits 000FCD           DS3231_Setup_Time@Address 0014  
                          _dpowers FF14              __end_of_do_update_pwm 17A8  
                          _isdigit 2190                          _T3CONbits 000FB1  
            _Activate_Buzzer_500Hz 22F8                   ___awmod@dividend 001F  
                       _duty_cycle 005C                         ??_delay_ms 0019  
              __end_of_I2C_ReStart 22AA                      drawtext@_text 003A  
                    drawtext@color 003C                         ??_fillRect 0028  
        __end_of_DS3231_Setup_Time 1C5C                   ??_Increase_Speed 0041  
                       ??_drawChar 0035                          _LCD_Reset 22E6  
                    _setAddrWindow 1E26                     __pintcode_body 1904  
                       delay_ms@ms 0017               end_of_initialization 1B14  
                        _INT0_flag 004E                          _INT1_flag 004F  
                        _INT2_flag 0050                         ??_drawtext 0041  
                   ?_write_command 0001                      __Lmediumconst FD38  
        __size_of_DS3231_Read_Time 0064                            int_func 1904  
          DS3231_Read_Time@Address 0014                         ?_I2C_Start 0001  
                       ?_I2C_Write 0001                         get_RPM@RPS 002F  
              __size_of_Toggle_Fan 0014                         _tempSecond 006E  
          __end_of_Wait_One_Second 23E8                          _RCSTAbits 000FAB  
                          printf@c 0038                            printf@f 001D  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                       ??_spiwrite 0011                            strlen@s 0011  
      I2C_Write_Cmd_Write_Data@Cmd 0013                          _PORTAbits 000F80  
                 drawtext@cursor_x 0164                   drawtext@cursor_y 0163  
                        _PORTCbits 000F82                          _PORTDbits 000F83  
                        _PORTEbits 000F84                   I2C_Write@outByte 0011  
                  ?_init_INTERRUPT 0001                         _setup_date 0092  
                      ?_fillScreen 0024                         _setup_hour 0067  
                       _setup_time 009B                         _setup_year 006B  
                      ?_drawCircle 001C                         drawChar@bg 0032  
                        _TRISCbits 000F94                          _TRISDbits 000F95  
                     ??_i2cHighSda 0011                       ??_i2cHighScl 0011  
                __size_of_I2C_Init 000A                  __size_of_I2C_Read 0048  
                __size_of_I2C_Stop 0012                     ?_setAddrWindow 0014  
                       ?_LCD_Reset 0001                   drawtext@textsize 015F  
                       drawPixel@x 001B                         drawPixel@y 0018  
                 _Wait_Half_Second 2262                        _DS1621_Init 21F0  
                      ___ftdiv@exp 0039                        printf@width 0036  
                        _TXSTAbits 000FAC                  __size_of_INT0_isr 0170  
                __size_of_INT1_isr 000A                  __size_of_INT2_isr 000A  
                   __end_of_i2cAck 2364                        ___ftmul@exp 0026  
             __size_of_Do_Beep_Bad 0018           DS1621_Read_Temp@Data_Ret 0016  
                      _Turn_On_Fan 2364                 __end_of_i2cHighSda 2428  
               __end_of_i2cHighScl 23CA                     __end_of___wmul 2146  
                    delay_ms@count 001B                         _write_data 2374  
                    __pidataCOMRAM 2430                     __end_of_chkisr 1994  
         ?_TFT_GreenTab_Initialize 0001                        _I2C_ReStart 2294  
                        _Nec_State 0051                         drawtext@bg 003E  
           ?_Activate_Buzzer_500Hz 0001                          _i2cLowSda 23F2  
                        _i2cLowScl 2418                     __end_of_printf 0736  
                   __end_of_strcpy 20C4                     __end_of_strlen 1FDA  
              start_initialization 1A9E             Update_Screen@neg_tempF 0165  
       __size_of_DS3231_Setup_Time 0066            __size_of_Decrease_Speed 001E  
                  ??_write_command 0013                          _OpenUSART 1B1E  
                 __CFG_OSC$INTIO67 000000                        ??_I2C_Start 0011  
                __size_of_Init_ADC 000E                        ??_I2C_Write 0011  
                         ??_i2cAck 0011                  __size_of_Rcmd2red 003E  
              __size_of_fillScreen 001C                __size_of_drawCircle 01AE  
                  _Activate_Buzzer 231C                   ?_Wait_One_Second 0001  
                         ??___wmul 0015                      ?_Turn_Off_Fan 0001  
                         ??_chkisr 0003                        __pdataBANK0 0080  
                      __pdataBANK1 0100                    setAddrWindow@x0 0017  
                  setAddrWindow@x1 0015                    setAddrWindow@y0 0014  
                  setAddrWindow@y1 0016                           ??_printf 002B  
                 _DS1621_Read_Temp 2056                           ??_strcpy 0015  
                         ??_strlen 0013                       ??_Toggle_Fan 0041  
                       ?_i2cLowSda 0001                         ?_i2cLowScl 0001  
                __size_of___ftpack 00C6                  __size_of___lbtoft 0026  
                      __pbssCOMRAM 0043         ??_I2C_Write_Cmd_Write_Data 0015  
                  ??_setAddrWindow 0017                      __pcstackBANK0 00FD  
                    __pcstackBANK1 015E                        ??_LCD_Reset 001D  
                     _isdigit$2717 0012                  __size_of_delay_ms 0052  
                         ?_Do_Beep 0001                           ?_Do_Init 0001  
                __size_of_fillRect 004A                  __size_of_drawChar 0156  
                       ?_OpenUSART 0011                   _DS3231_Read_Time 1C5C  
                         ?_i2cNack 0001                  __size_of_drawtext 010A  
                 ___lwdiv@dividend 0011                 __end_of_Toggle_Fan 22BE  
                      I2C_Read@ack 0011                          _bit_count 0058  
                        __pintcode 0008    __end_of_TFT_GreenTab_Initialize 211E  
                   ??_Turn_Off_Fan 0011                      __pmediumconst FD38  
                         ?___awdiv 0017                           ?___awmod 001F  
                         ?___ftdiv 002C           __size_of_Reset_Nec_State 0008  
                         ?___ftmul 001D                           ?___fttol 0032  
                        __tft_type 0053                           ?___lwdiv 0011  
               _I2C_Write_Cmd_Only 2248                           ?___lwmod 0018  
               drawFastVLine@color 001A                        ?_write_data 0001  
                        _drawPixel 20C4                           ?_get_RPM 002C  
                __size_of_spiwrite 0014                ?_I2C_Write_Cmd_Only 0013  
                         ?_isdigit 0001                           _I2C_Init 23D4  
                         _I2C_Read 1F54                           _I2C_Stop 232E  
                _Initialize_Screen 0736                     __size_of_Rcmd1 0110  
                   __size_of_Rcmd3 00F2                          _init_UART 22D2  
         I2C_Write_Cmd_Only@Device 0014                          _hexpowers FF1E  
               ?_Initialize_Screen 0001                   ___lwdiv@quotient 0016  
                   __size_of_putch 000E            __end_of_Activate_Buzzer 232E  
                   ___wmul@product 0015                ??_Initialize_Screen 0043  
                         _INT0_isr 0D64                           _INT1_isr 2406  
                         _INT2_isr 23FC               ??_I2C_Write_Cmd_Only 0014  
                         _PIE1bits 000F9D             __size_of_Update_Screen 03C0  
           DS3231_Read_Time@Device 0015                           _PIR1bits 000F9E  
                 _Fan_Set_Temp_Txt 00B1                   ??_init_INTERRUPT 0011  
                        _setup_day 0066                  DS1621_Init@Device 0016  
                        fillRect@h 0025                          fillRect@i 002C  
                        fillRect@w 0024                          fillRect@x 002B  
                        fillRect@y 0023                          drawChar@c 002F  
                        drawChar@i 0038                          drawChar@j 0037  
                        drawChar@x 0036                          drawChar@y 002E  
                       ?_drawPixel 0018             __size_of_fillRectangle 00DC  
                       _ADCON0bits 000FC2           __end_of_Wait_Half_Second 227C  
                ___wmul@multiplier 0011          __end_of_Initialize_Screen 09A0  
                      ??_i2cLowSda 0011                        ??_i2cLowScl 0011  
                     ??_fillScreen 0026                       ??_drawCircle 0024  
                       printf@flag 0035                         printf@prec 0032  
                       ?_init_UART 0001                     _Decrease_Speed 220E  
                      _INTCON2bits 000FF1                        _INTCON3bits 000FF0  
                        copy_data0 1ACA                          copy_data1 1AEA  
                        drawtext@i 0161             __size_of_drawFastVLine 0088  
                        drawtext@x 015E                          drawtext@y 0039  
                         _Nec_code 00E8                           _Init_ADC 23A2  
                write_command@cmd_ 0013                        ??_OpenUSART 0013  
                 __size_of_Do_Beep 0012                       ?_DS1621_Init 0001  
                         _Rcmd2red 1FDA                   __size_of_Do_Init 005A  
              __size_of_write_data 0010                    OpenUSART@config 0013  
                     _Time_Elapsed 0047                   __size_of_i2cNack 000A  
                    _RTC_ALARM_Txt 00BF                           __Hrparam 0000  
           __size_of_do_update_pwm 00D6                 __end_of_fillScreen 2248  
                         __Lrparam 0000                 __end_of_drawCircle 0D64  
                     ?_Turn_On_Fan 0001            ??_Activate_Buzzer_500Hz 0011  
                 __size_of___awdiv 0096                   __size_of___awmod 0082  
                 __size_of___ftdiv 00E2                   __size_of___ftmul 00F8  
                 __size_of___fttol 00E6                   __size_of___lwdiv 005C  
                         _Volt_Txt 00AB                   __size_of___lwmod 004C  
                         ___ftpack 17A8                           ___lbtoft 2146  
                     ?_I2C_ReStart 0001                   __size_of_get_RPM 004A  
                ??_Reset_Nec_State 0001                      _Update_Screen 001C  
                 __size_of_isdigit 0022                           _delay_ms 1DD4  
           __end_of_Decrease_Speed 222C                    ___lwdiv@divisor 0013  
                  ___lwdiv@counter 0015                           __ptext10 22AA  
                         __ptext11 2364                           __ptext20 1994  
                         __ptext12 0736                           __ptext21 0BB6  
                         __ptext13 2092                           __ptext30 22BE  
                         __ptext22 20C4                           __ptext14 222C  
                         __ptext31 22E6                           __ptext23 1E26  
                         __ptext15 15F6                           __ptext40 23A2  
                         __ptext32 1DD4                           __ptext24 20F4  
                         __ptext16 113A                           __ptext41 23D4  
                         __ptext33 211E                           __ptext25 133C  
                         __ptext17 1F9C                           __ptext50 2146  
                         __ptext42 21F0                           __ptext34 21D2  
                         __ptext26 1FDA                           __ptext18 0ED4  
                         __ptext51 142E                           __ptext43 21B2  
                         __ptext35 1D7A                           __ptext27 102A  
                         __ptext19 1F0A                           __ptext60 1C5C  
                         __ptext52 1244                           __ptext44 2248  
                         __ptext36 22D2                           __ptext28 2374  
                         __ptext61 2056                           __ptext53 1514  
                         __ptext45 227C                           __ptext37 1B1E  
                         __ptext29 2384                           __ptext70 2418  
                         __ptext62 2018                           __ptext54 17A8  
                         __ptext46 23DE                           __ptext38 216C  
                         __ptext71 2420                           __ptext63 232E  
                         __ptext55 230A                           __ptext47 22F8  
                         __ptext39 23CA                           __ptext72 23BE  
                         __ptext64 2340                           __ptext56 2262  
                         __ptext48 220E                           __ptext65 1F54  
                         __ptext57 2410                           __ptext49 16D2  
                         __ptext74 23B0                           __ptext66 23E8  
                         __ptext58 231C                           __ptext75 23FC  
                         __ptext67 2352                           __ptext59 1BF6  
                         __ptext76 2406                           __ptext68 2294  
                         __ptext77 0D64                           __ptext69 23F2  
                         __ptext78 2428                           _fillRect 1F0A  
                         _drawChar 0ED4               __end_of_Turn_Off_Fan 23D4  
 __size_of_TFT_GreenTab_Initialize 002A                           _colstart 0059  
                         _drawtext 113A                         strcpy@from 0013  
                    _fillRectangle 15F6           __end_of_DS1621_Read_Temp 2092  
                 ?_Activate_Buzzer 0001                      __size_of_main 0216  
                    ??_Do_Beep_Bad 0041            __size_of_Increase_Speed 001E  
                  fillRectangle@hi 0021                    fillRectangle@lo 0022  
                    _drawFastVLine 1994                          printf@idx 002F  
                         _spiwrite 22BE                          printf@val 0033  
                      ??_drawPixel 001B                           _rowstart 0061  
         __end_of_DS3231_Read_Time 1CC0         __size_of_Initialize_Screen 026A  
                   ?_Update_Screen 0001                         _INTCONbits 000FF2  
                    _do_update_pwm 16D2                     OpenUSART@spbrg 0011  
                      ??_init_UART 0014                    ?_Decrease_Speed 0001  
                         isdigit@c 0013                          spiwrite@x 0011  
                         intlevel2 0000                     ?_fillRectangle 0018  
                 ___lwmod@dividend 0018              __end_of_write_command 2394  
                  fillScreen@color 0024            do_update_pwm@duty_cycle 0161  
                   fillRectangle@h 001A                     fillRectangle@w 0019  
                   fillRectangle@x 0023                     fillRectangle@y 0018  
                   ?_drawFastVLine 0018                           printf@ap 0030  
              __end_of_Do_Beep_Bad 2294                       ??_write_data 0013  
                       _TIMER1_isr 23B0                      fillRect@color 0026  
         __size_of_Wait_One_Second 000A                     ?_do_update_pwm 0001  
                  ___lwmod@divisor 001A                           strcpy@cp 0015  
                         strlen@cp 0015                           strcpy@to 0011  
            I2C_Write_Cmd_Only@Cmd 0013                    ___lwmod@counter 001C  
                     _setup_minute 0068                       _setup_second 006A  
            __end_of_setAddrWindow 1E74                 fillRectangle@color 001B  
                do_update_pwm@dc_I 0162                  do_update_pwm@dc_f 015E  
                    drawChar@color 0030                        _setup_month 0069  
               __end_of_write_data 2384                       drawChar@line 0035  
                     drawChar@size 0034  __size_of_I2C_Write_Cmd_Write_Data 0020  
             __size_of_DS1621_Init 001E          ?_I2C_Write_Cmd_Write_Data 0013  
