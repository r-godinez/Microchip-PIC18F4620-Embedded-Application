

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Nov 30 21:50:52 2023

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	text81,global,reloc=2,class=CODE,delta=1
   100                           	psect	text82,global,reloc=2,class=CODE,delta=1
   101                           	psect	text83,global,reloc=2,class=CODE,delta=1
   102                           	psect	text84,global,reloc=2,class=CODE,delta=1
   103                           	psect	text85,global,reloc=2,class=CODE,delta=1
   104                           	psect	text86,global,reloc=2,class=CODE,delta=1
   105                           	psect	text87,global,reloc=2,class=CODE,delta=1
   106                           	psect	text88,global,reloc=2,class=CODE,delta=1
   107                           	psect	text89,global,reloc=2,class=CODE,delta=1
   108                           	psect	text90,global,reloc=2,class=CODE,delta=1
   109                           	psect	text91,global,reloc=2,class=CODE,delta=1
   110                           	psect	text92,global,reloc=2,class=CODE,delta=1
   111                           	psect	text93,global,reloc=2,class=CODE,delta=1
   112                           	psect	text94,global,reloc=2,class=CODE,delta=1
   113                           	psect	text95,global,reloc=2,class=CODE,delta=1
   114                           	psect	text96,global,reloc=2,class=CODE,delta=1
   115                           	psect	text97,global,reloc=2,class=CODE,delta=1
   116                           	psect	text98,global,reloc=2,class=CODE,delta=1
   117                           	psect	text99,global,reloc=2,class=CODE,delta=1
   118                           	psect	text100,global,reloc=2,class=CODE,delta=1
   119                           	psect	text101,global,reloc=2,class=CODE,delta=1
   120                           	psect	text102,global,reloc=2,class=CODE,delta=1
   121                           	psect	text103,global,reloc=2,class=CODE,delta=1
   122                           	psect	text104,global,reloc=2,class=CODE,delta=1
   123                           	psect	text105,global,reloc=2,class=CODE,delta=1
   124                           	psect	text106,global,reloc=2,class=CODE,delta=1
   125                           	psect	text107,global,reloc=2,class=CODE,delta=1
   126                           	psect	text108,global,reloc=2,class=CODE,delta=1
   127                           	psect	text109,global,reloc=2,class=CODE,delta=1
   128                           	psect	text110,global,reloc=2,class=CODE,delta=1
   129                           	psect	text111,global,reloc=2,class=CODE,delta=1
   130                           	psect	text112,global,reloc=2,class=CODE,delta=1
   131                           	psect	text113,global,reloc=2,class=CODE,delta=1
   132                           	psect	text114,global,reloc=2,class=CODE,delta=1
   133                           	psect	text115,global,reloc=2,class=CODE,delta=1
   134                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   135                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   136                           	psect	text117,global,reloc=2,class=CODE,delta=1
   137                           	psect	text118,global,reloc=2,class=CODE,delta=1
   138                           	psect	text119,global,reloc=2,class=CODE,delta=1
   139                           	psect	text120,global,reloc=2,class=CODE,delta=1
   140                           	psect	text121,global,reloc=2,class=CODE,delta=1
   141                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   142                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   143  0000                     
   144                           	psect	idataCOMRAM
   145  003EA8                     __pidataCOMRAM:
   146                           	opt stack 0
   147                           
   148                           ;initializer for _fan_set_temp
   149  003EA8  4B                 	db	75
   150                           
   151                           	psect	idataBANK0
   152  0033A0                     __pidataBANK0:
   153                           	opt stack 0
   154                           
   155                           ;initializer for _tempSecond
   156  0033A0  FF                 	db	255
   157                           
   158                           ;initializer for _wrap
   159  0033A1  01                 	db	1
   160                           
   161                           ;initializer for _alarm_time
   162  0033A2  30                 	db	48
   163  0033A3  30                 	db	48
   164  0033A4  3A                 	db	58
   165  0033A5  30                 	db	48
   166  0033A6  30                 	db	48
   167  0033A7  3A                 	db	58
   168  0033A8  30                 	db	48
   169  0033A9  30                 	db	48
   170  0033AA  00                 	db	0
   171                           
   172                           ;initializer for _date
   173  0033AB  30                 	db	48
   174  0033AC  30                 	db	48
   175  0033AD  2F                 	db	47
   176  0033AE  30                 	db	48
   177  0033AF  30                 	db	48
   178  0033B0  2F                 	db	47
   179  0033B1  30                 	db	48
   180  0033B2  30                 	db	48
   181  0033B3  00                 	db	0
   182                           
   183                           ;initializer for _setup_date
   184  0033B4  30                 	db	48
   185  0033B5  31                 	db	49
   186  0033B6  2F                 	db	47
   187  0033B7  30                 	db	48
   188  0033B8  31                 	db	49
   189  0033B9  2F                 	db	47
   190  0033BA  30                 	db	48
   191  0033BB  30                 	db	48
   192  0033BC  00                 	db	0
   193                           
   194                           ;initializer for _setup_time
   195  0033BD  30                 	db	48
   196  0033BE  30                 	db	48
   197  0033BF  3A                 	db	58
   198  0033C0  30                 	db	48
   199  0033C1  30                 	db	48
   200  0033C2  3A                 	db	58
   201  0033C3  30                 	db	48
   202  0033C4  30                 	db	48
   203  0033C5  00                 	db	0
   204                           
   205                           ;initializer for _time
   206  0033C6  30                 	db	48
   207  0033C7  30                 	db	48
   208  0033C8  3A                 	db	58
   209  0033C9  30                 	db	48
   210  0033CA  30                 	db	48
   211  0033CB  3A                 	db	58
   212  0033CC  30                 	db	48
   213  0033CD  30                 	db	48
   214  0033CE  00                 	db	0
   215                           
   216                           ;initializer for _Volt_Txt
   217  0033CF  30                 	db	48
   218  0033D0  2E                 	db	46
   219  0033D1  30                 	db	48
   220  0033D2  30                 	db	48
   221  0033D3  56                 	db	86
   222  0033D4  00                 	db	0
   223                           
   224                           ;initializer for _Fan_Set_Temp_Txt
   225  0033D5  30                 	db	48
   226  0033D6  37                 	db	55
   227  0033D7  35                 	db	53
   228  0033D8  46                 	db	70
   229  0033D9  00                 	db	0
   230                           
   231                           ;initializer for _RPM_Txt
   232  0033DA  30                 	db	48
   233  0033DB  30                 	db	48
   234  0033DC  30                 	db	48
   235  0033DD  30                 	db	48
   236  0033DE  00                 	db	0
   237                           
   238                           ;initializer for _setup_fan_set_text
   239  0033DF  30                 	db	48
   240  0033E0  37                 	db	55
   241  0033E1  35                 	db	53
   242  0033E2  46                 	db	70
   243  0033E3  00                 	db	0
   244                           
   245                           ;initializer for _Alarm_SW_Txt
   246  0033E4  4F                 	db	79
   247  0033E5  46                 	db	70
   248  0033E6  46                 	db	70
   249  0033E7  00                 	db	0
   250                           
   251                           ;initializer for _DC_Txt
   252  0033E8  30                 	db	48
   253  0033E9  30                 	db	48
   254  0033EA  30                 	db	48
   255  0033EB  00                 	db	0
   256                           
   257                           ;initializer for _Fan_SW_Txt
   258  0033EC  4F                 	db	79
   259  0033ED  46                 	db	70
   260  0033EE  46                 	db	70
   261  0033EF  00                 	db	0
   262                           
   263                           ;initializer for _tempC
   264  0033F0  2B                 	db	43
   265  0033F1  32                 	db	50
   266  0033F2  35                 	db	53
   267  0033F3  00                 	db	0
   268                           
   269                           ;initializer for _tempF
   270  0033F4  2B                 	db	43
   271  0033F5  37                 	db	55
   272  0033F6  37                 	db	55
   273  0033F7  00                 	db	0
   274                           
   275                           ;initializer for _RTC_ALARM_Txt
   276  0033F8  30                 	db	48
   277  0033F9  00                 	db	0
   278                           
   279                           	psect	idataBANK1
   280  003806                     __pidataBANK1:
   281                           	opt stack 0
   282                           
   283                           ;initializer for _buffer
   284  003806  20                 	db	32
   285  003807  45                 	db	69
   286  003808  43                 	db	67
   287  003809  45                 	db	69
   288  00380A  33                 	db	51
   289  00380B  33                 	db	51
   290  00380C  30                 	db	48
   291  00380D  31                 	db	49
   292  00380E  4C                 	db	76
   293  00380F  20                 	db	32
   294  003810  46                 	db	70
   295  003811  41                 	db	65
   296  003812  32                 	db	50
   297  003813  31                 	db	49
   298  003814  5F                 	db	95
   299  003815  53                 	db	83
   300  003816  32                 	db	50
   301  003817  00                 	db	0
   302  003818  00                 	db	0
   303  003819  00                 	db	0
   304  00381A  00                 	db	0
   305  00381B  00                 	db	0
   306  00381C  00                 	db	0
   307  00381D  00                 	db	0
   308  00381E  00                 	db	0
   309  00381F  00                 	db	0
   310  003820  00                 	db	0
   311  003821  00                 	db	0
   312  003822  00                 	db	0
   313  003823  00                 	db	0
   314  003824  00                 	db	0
   315                           
   316                           ;initializer for _array1
   317  003825  A2                 	db	162
   318  003826  62                 	db	98
   319  003827  E2                 	db	226
   320  003828  22                 	db	34
   321  003829  02                 	db	2
   322  00382A  C2                 	db	194
   323  00382B  E0                 	db	224
   324  00382C  A8                 	db	168
   325  00382D  90                 	db	144
   326  00382E  68                 	db	104
   327  00382F  98                 	db	152
   328  003830  B0                 	db	176
   329  003831  30                 	db	48
   330  003832  18                 	db	24
   331  003833  7A                 	db	122
   332  003834  10                 	db	16
   333  003835  38                 	db	56
   334  003836  5A                 	db	90
   335  003837  42                 	db	66
   336  003838  4A                 	db	74
   337  003839  52                 	db	82
   338                           
   339                           ;initializer for _LED
   340  00383A  01                 	db	1
   341  00383B  02                 	db	2
   342  00383C  03                 	db	3
   343  00383D  04                 	db	4
   344  00383E  05                 	db	5
   345  00383F  06                 	db	6
   346  003840  07                 	db	7
   347                           
   348                           ;initializer for _setup_alarm_time
   349  003841  30                 	db	48
   350  003842  30                 	db	48
   351  003843  3A                 	db	58
   352  003844  30                 	db	48
   353  003845  30                 	db	48
   354  003846  3A                 	db	58
   355  003847  30                 	db	48
   356  003848  30                 	db	48
   357  003849  00                 	db	0
   358                           
   359                           	psect	mediumconst
   360  00FBAA                     __pmediumconst:
   361                           	opt stack 0
   362  00FBAA  00                 	db	0
   363  00FBAB                     _font:
   364                           	opt stack 0
   365  00FBAB  00                 	db	0
   366  00FBAC  00                 	db	0
   367  00FBAD  00                 	db	0
   368  00FBAE  00                 	db	0
   369  00FBAF  00                 	db	0
   370  00FBB0  00                 	db	0
   371  00FBB1  00                 	db	0
   372  00FBB2  5F                 	db	95
   373  00FBB3  00                 	db	0
   374  00FBB4  00                 	db	0
   375  00FBB5  00                 	db	0
   376  00FBB6  07                 	db	7
   377  00FBB7  00                 	db	0
   378  00FBB8  07                 	db	7
   379  00FBB9  00                 	db	0
   380  00FBBA  14                 	db	20
   381  00FBBB  7F                 	db	127
   382  00FBBC  14                 	db	20
   383  00FBBD  7F                 	db	127
   384  00FBBE  14                 	db	20
   385  00FBBF  24                 	db	36
   386  00FBC0  2A                 	db	42
   387  00FBC1  7F                 	db	127
   388  00FBC2  2A                 	db	42
   389  00FBC3  12                 	db	18
   390  00FBC4  23                 	db	35
   391  00FBC5  13                 	db	19
   392  00FBC6  08                 	db	8
   393  00FBC7  64                 	db	100
   394  00FBC8  62                 	db	98
   395  00FBC9  36                 	db	54
   396  00FBCA  49                 	db	73
   397  00FBCB  56                 	db	86
   398  00FBCC  20                 	db	32
   399  00FBCD  50                 	db	80
   400  00FBCE  00                 	db	0
   401  00FBCF  08                 	db	8
   402  00FBD0  07                 	db	7
   403  00FBD1  03                 	db	3
   404  00FBD2  00                 	db	0
   405  00FBD3  00                 	db	0
   406  00FBD4  1C                 	db	28
   407  00FBD5  22                 	db	34
   408  00FBD6  41                 	db	65
   409  00FBD7  00                 	db	0
   410  00FBD8  00                 	db	0
   411  00FBD9  41                 	db	65
   412  00FBDA  22                 	db	34
   413  00FBDB  1C                 	db	28
   414  00FBDC  00                 	db	0
   415  00FBDD  2A                 	db	42
   416  00FBDE  1C                 	db	28
   417  00FBDF  7F                 	db	127
   418  00FBE0  1C                 	db	28
   419  00FBE1  2A                 	db	42
   420  00FBE2  08                 	db	8
   421  00FBE3  08                 	db	8
   422  00FBE4  3E                 	db	62
   423  00FBE5  08                 	db	8
   424  00FBE6  08                 	db	8
   425  00FBE7  00                 	db	0
   426  00FBE8  80                 	db	128
   427  00FBE9  70                 	db	112
   428  00FBEA  30                 	db	48
   429  00FBEB  00                 	db	0
   430  00FBEC  08                 	db	8
   431  00FBED  08                 	db	8
   432  00FBEE  08                 	db	8
   433  00FBEF  08                 	db	8
   434  00FBF0  08                 	db	8
   435  00FBF1  00                 	db	0
   436  00FBF2  00                 	db	0
   437  00FBF3  60                 	db	96
   438  00FBF4  60                 	db	96
   439  00FBF5  00                 	db	0
   440  00FBF6  20                 	db	32
   441  00FBF7  10                 	db	16
   442  00FBF8  08                 	db	8
   443  00FBF9  04                 	db	4
   444  00FBFA  02                 	db	2
   445  00FBFB  3E                 	db	62
   446  00FBFC  51                 	db	81
   447  00FBFD  49                 	db	73
   448  00FBFE  45                 	db	69
   449  00FBFF  3E                 	db	62
   450  00FC00  00                 	db	0
   451  00FC01  42                 	db	66
   452  00FC02  7F                 	db	127
   453  00FC03  40                 	db	64
   454  00FC04  00                 	db	0
   455  00FC05  72                 	db	114
   456  00FC06  49                 	db	73
   457  00FC07  49                 	db	73
   458  00FC08  49                 	db	73
   459  00FC09  46                 	db	70
   460  00FC0A  21                 	db	33
   461  00FC0B  41                 	db	65
   462  00FC0C  49                 	db	73
   463  00FC0D  4D                 	db	77
   464  00FC0E  33                 	db	51
   465  00FC0F  18                 	db	24
   466  00FC10  14                 	db	20
   467  00FC11  12                 	db	18
   468  00FC12  7F                 	db	127
   469  00FC13  10                 	db	16
   470  00FC14  27                 	db	39
   471  00FC15  45                 	db	69
   472  00FC16  45                 	db	69
   473  00FC17  45                 	db	69
   474  00FC18  39                 	db	57
   475  00FC19  3C                 	db	60
   476  00FC1A  4A                 	db	74
   477  00FC1B  49                 	db	73
   478  00FC1C  49                 	db	73
   479  00FC1D  31                 	db	49
   480  00FC1E  41                 	db	65
   481  00FC1F  21                 	db	33
   482  00FC20  11                 	db	17
   483  00FC21  09                 	db	9
   484  00FC22  07                 	db	7
   485  00FC23  36                 	db	54
   486  00FC24  49                 	db	73
   487  00FC25  49                 	db	73
   488  00FC26  49                 	db	73
   489  00FC27  36                 	db	54
   490  00FC28  46                 	db	70
   491  00FC29  49                 	db	73
   492  00FC2A  49                 	db	73
   493  00FC2B  29                 	db	41
   494  00FC2C  1E                 	db	30
   495  00FC2D  00                 	db	0
   496  00FC2E  00                 	db	0
   497  00FC2F  14                 	db	20
   498  00FC30  00                 	db	0
   499  00FC31  00                 	db	0
   500  00FC32  00                 	db	0
   501  00FC33  40                 	db	64
   502  00FC34  34                 	db	52
   503  00FC35  00                 	db	0
   504  00FC36  00                 	db	0
   505  00FC37  00                 	db	0
   506  00FC38  08                 	db	8
   507  00FC39  14                 	db	20
   508  00FC3A  22                 	db	34
   509  00FC3B  41                 	db	65
   510  00FC3C  14                 	db	20
   511  00FC3D  14                 	db	20
   512  00FC3E  14                 	db	20
   513  00FC3F  14                 	db	20
   514  00FC40  14                 	db	20
   515  00FC41  00                 	db	0
   516  00FC42  41                 	db	65
   517  00FC43  22                 	db	34
   518  00FC44  14                 	db	20
   519  00FC45  08                 	db	8
   520  00FC46  02                 	db	2
   521  00FC47  01                 	db	1
   522  00FC48  59                 	db	89
   523  00FC49  09                 	db	9
   524  00FC4A  06                 	db	6
   525  00FC4B  3E                 	db	62
   526  00FC4C  41                 	db	65
   527  00FC4D  5D                 	db	93
   528  00FC4E  59                 	db	89
   529  00FC4F  4E                 	db	78
   530  00FC50  7C                 	db	124
   531  00FC51  12                 	db	18
   532  00FC52  11                 	db	17
   533  00FC53  12                 	db	18
   534  00FC54  7C                 	db	124
   535  00FC55  7F                 	db	127
   536  00FC56  49                 	db	73
   537  00FC57  49                 	db	73
   538  00FC58  49                 	db	73
   539  00FC59  36                 	db	54
   540  00FC5A  3E                 	db	62
   541  00FC5B  41                 	db	65
   542  00FC5C  41                 	db	65
   543  00FC5D  41                 	db	65
   544  00FC5E  22                 	db	34
   545  00FC5F  7F                 	db	127
   546  00FC60  41                 	db	65
   547  00FC61  41                 	db	65
   548  00FC62  41                 	db	65
   549  00FC63  3E                 	db	62
   550  00FC64  7F                 	db	127
   551  00FC65  49                 	db	73
   552  00FC66  49                 	db	73
   553  00FC67  49                 	db	73
   554  00FC68  41                 	db	65
   555  00FC69  7F                 	db	127
   556  00FC6A  09                 	db	9
   557  00FC6B  09                 	db	9
   558  00FC6C  09                 	db	9
   559  00FC6D  01                 	db	1
   560  00FC6E  3E                 	db	62
   561  00FC6F  41                 	db	65
   562  00FC70  41                 	db	65
   563  00FC71  51                 	db	81
   564  00FC72  73                 	db	115
   565  00FC73  7F                 	db	127
   566  00FC74  08                 	db	8
   567  00FC75  08                 	db	8
   568  00FC76  08                 	db	8
   569  00FC77  7F                 	db	127
   570  00FC78  00                 	db	0
   571  00FC79  41                 	db	65
   572  00FC7A  7F                 	db	127
   573  00FC7B  41                 	db	65
   574  00FC7C  00                 	db	0
   575  00FC7D  20                 	db	32
   576  00FC7E  40                 	db	64
   577  00FC7F  41                 	db	65
   578  00FC80  3F                 	db	63
   579  00FC81  01                 	db	1
   580  00FC82  7F                 	db	127
   581  00FC83  08                 	db	8
   582  00FC84  14                 	db	20
   583  00FC85  22                 	db	34
   584  00FC86  41                 	db	65
   585  00FC87  7F                 	db	127
   586  00FC88  40                 	db	64
   587  00FC89  40                 	db	64
   588  00FC8A  40                 	db	64
   589  00FC8B  40                 	db	64
   590  00FC8C  7F                 	db	127
   591  00FC8D  02                 	db	2
   592  00FC8E  1C                 	db	28
   593  00FC8F  02                 	db	2
   594  00FC90  7F                 	db	127
   595  00FC91  7F                 	db	127
   596  00FC92  04                 	db	4
   597  00FC93  08                 	db	8
   598  00FC94  10                 	db	16
   599  00FC95  7F                 	db	127
   600  00FC96  3E                 	db	62
   601  00FC97  41                 	db	65
   602  00FC98  41                 	db	65
   603  00FC99  41                 	db	65
   604  00FC9A  3E                 	db	62
   605  00FC9B  7F                 	db	127
   606  00FC9C  09                 	db	9
   607  00FC9D  09                 	db	9
   608  00FC9E  09                 	db	9
   609  00FC9F  06                 	db	6
   610  00FCA0  3E                 	db	62
   611  00FCA1  41                 	db	65
   612  00FCA2  51                 	db	81
   613  00FCA3  21                 	db	33
   614  00FCA4  5E                 	db	94
   615  00FCA5  7F                 	db	127
   616  00FCA6  09                 	db	9
   617  00FCA7  19                 	db	25
   618  00FCA8  29                 	db	41
   619  00FCA9  46                 	db	70
   620  00FCAA                     __end_of_font:
   621                           	opt stack 0
   622  00FCAA                     _font2:
   623                           	opt stack 0
   624  00FCAA  26                 	db	38
   625  00FCAB  49                 	db	73
   626  00FCAC  49                 	db	73
   627  00FCAD  49                 	db	73
   628  00FCAE  32                 	db	50
   629  00FCAF  03                 	db	3
   630  00FCB0  01                 	db	1
   631  00FCB1  7F                 	db	127
   632  00FCB2  01                 	db	1
   633  00FCB3  03                 	db	3
   634  00FCB4  3F                 	db	63
   635  00FCB5  40                 	db	64
   636  00FCB6  40                 	db	64
   637  00FCB7  40                 	db	64
   638  00FCB8  3F                 	db	63
   639  00FCB9  1F                 	db	31
   640  00FCBA  20                 	db	32
   641  00FCBB  40                 	db	64
   642  00FCBC  20                 	db	32
   643  00FCBD  1F                 	db	31
   644  00FCBE  3F                 	db	63
   645  00FCBF  40                 	db	64
   646  00FCC0  38                 	db	56
   647  00FCC1  40                 	db	64
   648  00FCC2  3F                 	db	63
   649  00FCC3  63                 	db	99
   650  00FCC4  14                 	db	20
   651  00FCC5  08                 	db	8
   652  00FCC6  14                 	db	20
   653  00FCC7  63                 	db	99
   654  00FCC8  03                 	db	3
   655  00FCC9  04                 	db	4
   656  00FCCA  78                 	db	120
   657  00FCCB  04                 	db	4
   658  00FCCC  03                 	db	3
   659  00FCCD  61                 	db	97
   660  00FCCE  59                 	db	89
   661  00FCCF  49                 	db	73
   662  00FCD0  4D                 	db	77
   663  00FCD1  43                 	db	67
   664  00FCD2  00                 	db	0
   665  00FCD3  7F                 	db	127
   666  00FCD4  41                 	db	65
   667  00FCD5  41                 	db	65
   668  00FCD6  41                 	db	65
   669  00FCD7  02                 	db	2
   670  00FCD8  04                 	db	4
   671  00FCD9  08                 	db	8
   672  00FCDA  10                 	db	16
   673  00FCDB  20                 	db	32
   674  00FCDC  00                 	db	0
   675  00FCDD  41                 	db	65
   676  00FCDE  41                 	db	65
   677  00FCDF  41                 	db	65
   678  00FCE0  7F                 	db	127
   679  00FCE1  04                 	db	4
   680  00FCE2  02                 	db	2
   681  00FCE3  01                 	db	1
   682  00FCE4  02                 	db	2
   683  00FCE5  04                 	db	4
   684  00FCE6  40                 	db	64
   685  00FCE7  40                 	db	64
   686  00FCE8  40                 	db	64
   687  00FCE9  40                 	db	64
   688  00FCEA  40                 	db	64
   689  00FCEB  00                 	db	0
   690  00FCEC  03                 	db	3
   691  00FCED  07                 	db	7
   692  00FCEE  08                 	db	8
   693  00FCEF  00                 	db	0
   694  00FCF0  20                 	db	32
   695  00FCF1  54                 	db	84
   696  00FCF2  54                 	db	84
   697  00FCF3  78                 	db	120
   698  00FCF4  40                 	db	64
   699  00FCF5  7F                 	db	127
   700  00FCF6  28                 	db	40
   701  00FCF7  44                 	db	68
   702  00FCF8  44                 	db	68
   703  00FCF9  38                 	db	56
   704  00FCFA  38                 	db	56
   705  00FCFB  44                 	db	68
   706  00FCFC  44                 	db	68
   707  00FCFD  44                 	db	68
   708  00FCFE  28                 	db	40
   709  00FCFF  38                 	db	56
   710  00FD00  44                 	db	68
   711  00FD01  44                 	db	68
   712  00FD02  28                 	db	40
   713  00FD03  7F                 	db	127
   714  00FD04  38                 	db	56
   715  00FD05  54                 	db	84
   716  00FD06  54                 	db	84
   717  00FD07  54                 	db	84
   718  00FD08  18                 	db	24
   719  00FD09  00                 	db	0
   720  00FD0A  08                 	db	8
   721  00FD0B  7E                 	db	126
   722  00FD0C  09                 	db	9
   723  00FD0D  02                 	db	2
   724  00FD0E  18                 	db	24
   725  00FD0F  A4                 	db	164
   726  00FD10  A4                 	db	164
   727  00FD11  9C                 	db	156
   728  00FD12  78                 	db	120
   729  00FD13  7F                 	db	127
   730  00FD14  08                 	db	8
   731  00FD15  04                 	db	4
   732  00FD16  04                 	db	4
   733  00FD17  78                 	db	120
   734  00FD18  00                 	db	0
   735  00FD19  44                 	db	68
   736  00FD1A  7D                 	db	125
   737  00FD1B  40                 	db	64
   738  00FD1C  00                 	db	0
   739  00FD1D  20                 	db	32
   740  00FD1E  40                 	db	64
   741  00FD1F  40                 	db	64
   742  00FD20  3D                 	db	61
   743  00FD21  00                 	db	0
   744  00FD22  7F                 	db	127
   745  00FD23  10                 	db	16
   746  00FD24  28                 	db	40
   747  00FD25  44                 	db	68
   748  00FD26  00                 	db	0
   749  00FD27  00                 	db	0
   750  00FD28  41                 	db	65
   751  00FD29  7F                 	db	127
   752  00FD2A  40                 	db	64
   753  00FD2B  00                 	db	0
   754  00FD2C  7C                 	db	124
   755  00FD2D  04                 	db	4
   756  00FD2E  78                 	db	120
   757  00FD2F  04                 	db	4
   758  00FD30  78                 	db	120
   759  00FD31  7C                 	db	124
   760  00FD32  08                 	db	8
   761  00FD33  04                 	db	4
   762  00FD34  04                 	db	4
   763  00FD35  78                 	db	120
   764  00FD36  38                 	db	56
   765  00FD37  44                 	db	68
   766  00FD38  44                 	db	68
   767  00FD39  44                 	db	68
   768  00FD3A  38                 	db	56
   769  00FD3B  FC                 	db	252
   770  00FD3C  18                 	db	24
   771  00FD3D  24                 	db	36
   772  00FD3E  24                 	db	36
   773  00FD3F  18                 	db	24
   774  00FD40  18                 	db	24
   775  00FD41  24                 	db	36
   776  00FD42  24                 	db	36
   777  00FD43  18                 	db	24
   778  00FD44  FC                 	db	252
   779  00FD45  7C                 	db	124
   780  00FD46  08                 	db	8
   781  00FD47  04                 	db	4
   782  00FD48  04                 	db	4
   783  00FD49  08                 	db	8
   784  00FD4A  48                 	db	72
   785  00FD4B  54                 	db	84
   786  00FD4C  54                 	db	84
   787  00FD4D  54                 	db	84
   788  00FD4E  24                 	db	36
   789  00FD4F  04                 	db	4
   790  00FD50  04                 	db	4
   791  00FD51  3F                 	db	63
   792  00FD52  44                 	db	68
   793  00FD53  24                 	db	36
   794  00FD54  3C                 	db	60
   795  00FD55  40                 	db	64
   796  00FD56  40                 	db	64
   797  00FD57  20                 	db	32
   798  00FD58  7C                 	db	124
   799  00FD59  1C                 	db	28
   800  00FD5A  20                 	db	32
   801  00FD5B  40                 	db	64
   802  00FD5C  20                 	db	32
   803  00FD5D  1C                 	db	28
   804  00FD5E  3C                 	db	60
   805  00FD5F  40                 	db	64
   806  00FD60  30                 	db	48
   807  00FD61  40                 	db	64
   808  00FD62  3C                 	db	60
   809  00FD63  44                 	db	68
   810  00FD64  28                 	db	40
   811  00FD65  10                 	db	16
   812  00FD66  28                 	db	40
   813  00FD67  44                 	db	68
   814  00FD68  4C                 	db	76
   815  00FD69  90                 	db	144
   816  00FD6A  90                 	db	144
   817  00FD6B  90                 	db	144
   818  00FD6C  7C                 	db	124
   819  00FD6D  44                 	db	68
   820  00FD6E  64                 	db	100
   821  00FD6F  54                 	db	84
   822  00FD70  4C                 	db	76
   823  00FD71  44                 	db	68
   824  00FD72  00                 	db	0
   825  00FD73  08                 	db	8
   826  00FD74  36                 	db	54
   827  00FD75  41                 	db	65
   828  00FD76  00                 	db	0
   829  00FD77  00                 	db	0
   830  00FD78  00                 	db	0
   831  00FD79  77                 	db	119
   832  00FD7A  00                 	db	0
   833  00FD7B  00                 	db	0
   834  00FD7C  00                 	db	0
   835  00FD7D  41                 	db	65
   836  00FD7E  36                 	db	54
   837  00FD7F  08                 	db	8
   838  00FD80  00                 	db	0
   839  00FD81  02                 	db	2
   840  00FD82  01                 	db	1
   841  00FD83  02                 	db	2
   842  00FD84  04                 	db	4
   843  00FD85  02                 	db	2
   844  00FD86                     __end_of_font2:
   845                           	opt stack 0
   846  00FD86                     _dpowers:
   847                           	opt stack 0
   848  00FD86  0001               	dw	1
   849  00FD88  000A               	dw	10
   850  00FD8A  0064               	dw	100
   851  00FD8C  03E8               	dw	1000
   852  00FD8E  2710               	dw	10000
   853  00FD90                     __end_of_dpowers:
   854                           	opt stack 0
   855  00FD90                     _hexpowers:
   856                           	opt stack 0
   857  00FD90  0001               	dw	1
   858  00FD92  0010               	dw	16
   859  00FD94  0100               	dw	256
   860  00FD96  1000               	dw	4096
   861  00FD98                     __end_of_hexpowers:
   862                           	opt stack 0
   863  0000                     _ADCON0	set	4034
   864  0000                     _ADCON0bits	set	4034
   865  0000                     _ADCON1	set	4033
   866  0000                     _ADCON2	set	4032
   867  0000                     _ADRESH	set	4036
   868  0000                     _ADRESL	set	4035
   869  0000                     _CCP1CON	set	4029
   870  0000                     _CCP2CON	set	4026
   871  0000                     _CCPR1L	set	4030
   872  0000                     _CCPR2L	set	4027
   873  0000                     _INTCON2bits	set	4081
   874  0000                     _INTCON3bits	set	4080
   875  0000                     _INTCONbits	set	4082
   876  0000                     _OSCCON	set	4051
   877  0000                     _PIE1bits	set	3997
   878  0000                     _PIR1bits	set	3998
   879  0000                     _PORTAbits	set	3968
   880  0000                     _PORTB	set	3969
   881  0000                     _PORTBbits	set	3969
   882  0000                     _PORTCbits	set	3970
   883  0000                     _PORTDbits	set	3971
   884  0000                     _PORTE	set	3972
   885  0000                     _PR2	set	4043
   886  0000                     _RCSTA	set	4011
   887  0000                     _RCSTAbits	set	4011
   888  0000                     _SPBRG	set	4015
   889  0000                     _SPBRGH	set	4016
   890  0000                     _SSPBUF	set	4041
   891  0000                     _SSPCON1	set	4038
   892  0000                     _SSPSTAT	set	4039
   893  0000                     _SSPSTATbits	set	4039
   894  0000                     _T0CON	set	4053
   895  0000                     _T0CONbits	set	4053
   896  0000                     _T1CON	set	4045
   897  0000                     _T1CONbits	set	4045
   898  0000                     _T2CON	set	4042
   899  0000                     _T3CON	set	4017
   900  0000                     _T3CONbits	set	4017
   901  0000                     _TMR0H	set	4055
   902  0000                     _TMR0L	set	4054
   903  0000                     _TMR1H	set	4047
   904  0000                     _TMR1L	set	4046
   905  0000                     _TMR3L	set	4018
   906  0000                     _TRISA	set	3986
   907  0000                     _TRISB	set	3987
   908  0000                     _TRISC	set	3988
   909  0000                     _TRISCbits	set	3988
   910  0000                     _TRISD	set	3989
   911  0000                     _TRISDbits	set	3989
   912  0000                     _TRISE	set	3990
   913  0000                     _TXREG	set	4013
   914  0000                     _TXSTA	set	4012
   915  0000                     _TXSTAbits	set	4012
   916  0000                     _RBPU	set	32655
   917  0000                     _TRMT	set	32097
   918  00FD98                     STR_1:
   919                           
   920                           ; BSR set to: 0
   921  00FD98  74                 	db	116	;'t'
   922  00FD99  65                 	db	101	;'e'
   923  00FD9A  6D                 	db	109	;'m'
   924  00FD9B  70                 	db	112	;'p'
   925  00FD9C  20                 	db	32
   926  00FD9D  69                 	db	105	;'i'
   927  00FD9E  73                 	db	115	;'s'
   928  00FD9F  20                 	db	32
   929  00FDA0  25                 	db	37
   930  00FDA1  64                 	db	100	;'d'
   931  00FDA2  20                 	db	32
   932  00FDA3  61                 	db	97	;'a'
   933  00FDA4  6E                 	db	110	;'n'
   934  00FDA5  64                 	db	100	;'d'
   935  00FDA6  20                 	db	32
   936  00FDA7  73                 	db	115	;'s'
   937  00FDA8  65                 	db	101	;'e'
   938  00FDA9  74                 	db	116	;'t'
   939  00FDAA  20                 	db	32
   940  00FDAB  74                 	db	116	;'t'
   941  00FDAC  65                 	db	101	;'e'
   942  00FDAD  6D                 	db	109	;'m'
   943  00FDAE  70                 	db	112	;'p'
   944  00FDAF  20                 	db	32
   945  00FDB0  69                 	db	105	;'i'
   946  00FDB1  73                 	db	115	;'s'
   947  00FDB2  20                 	db	32
   948  00FDB3  25                 	db	37
   949  00FDB4  64                 	db	100	;'d'
   950  00FDB5  0D                 	db	13
   951  00FDB6  0A                 	db	10
   952  00FDB7  00                 	db	0
   953  00FDB8                     STR_42:
   954                           
   955                           ; BSR set to: 0
   956  00FDB8  25                 	db	37
   957  00FDB9  30                 	db	48	;'0'
   958  00FDBA  32                 	db	50	;'2'
   959  00FDBB  78                 	db	120	;'x'
   960  00FDBC  3A                 	db	58	;':'
   961  00FDBD  25                 	db	37
   962  00FDBE  30                 	db	48	;'0'
   963  00FDBF  32                 	db	50	;'2'
   964  00FDC0  78                 	db	120	;'x'
   965  00FDC1  3A                 	db	58	;':'
   966  00FDC2  25                 	db	37
   967  00FDC3  30                 	db	48	;'0'
   968  00FDC4  32                 	db	50	;'2'
   969  00FDC5  78                 	db	120	;'x'
   970  00FDC6  20                 	db	32
   971  00FDC7  25                 	db	37
   972  00FDC8  30                 	db	48	;'0'
   973  00FDC9  32                 	db	50	;'2'
   974  00FDCA  78                 	db	120	;'x'
   975  00FDCB  2F                 	db	47
   976  00FDCC  25                 	db	37
   977  00FDCD  30                 	db	48	;'0'
   978  00FDCE  32                 	db	50	;'2'
   979  00FDCF  78                 	db	120	;'x'
   980  00FDD0  2F                 	db	47
   981  00FDD1  25                 	db	37
   982  00FDD2  30                 	db	48	;'0'
   983  00FDD3  32                 	db	50	;'2'
   984  00FDD4  78                 	db	120	;'x'
   985  00FDD5  00                 	db	0
   986  00FDD6                     STR_44:
   987                           
   988                           ; BSR set to: 0
   989  00FDD6  61                 	db	97	;'a'
   990  00FDD7  6C                 	db	108	;'l'
   991  00FDD8  61                 	db	97	;'a'
   992  00FDD9  72                 	db	114	;'r'
   993  00FDDA  6D                 	db	109	;'m'
   994  00FDDB  20                 	db	32
   995  00FDDC  3D                 	db	61	;'='
   996  00FDDD  20                 	db	32
   997  00FDDE  25                 	db	37
   998  00FDDF  64                 	db	100	;'d'
   999  00FDE0  20                 	db	32
  1000  00FDE1  6D                 	db	109	;'m'
  1001  00FDE2  61                 	db	97	;'a'
  1002  00FDE3  74                 	db	116	;'t'
  1003  00FDE4  63                 	db	99	;'c'
  1004  00FDE5  68                 	db	104	;'h'
  1005  00FDE6  20                 	db	32
  1006  00FDE7  3D                 	db	61	;'='
  1007  00FDE8  20                 	db	32
  1008  00FDE9  25                 	db	37
  1009  00FDEA  64                 	db	100	;'d'
  1010  00FDEB  00                 	db	0
  1011  00FDEC                     STR_30:
  1012                           
  1013                           ; BSR set to: 0
  1014  00FDEC  43                 	db	67	;'C'
  1015  00FDED  61                 	db	97	;'a'
  1016  00FDEE  6E                 	db	110	;'n'
  1017  00FDEF  6E                 	db	110	;'n'
  1018  00FDF0  6F                 	db	111	;'o'
  1019  00FDF1  74                 	db	116	;'t'
  1020  00FDF2  20                 	db	32
  1021  00FDF3  66                 	db	102	;'f'
  1022  00FDF4  69                 	db	105	;'i'
  1023  00FDF5  6E                 	db	110	;'n'
  1024  00FDF6  64                 	db	100	;'d'
  1025  00FDF7  20                 	db	32
  1026  00FDF8  62                 	db	98	;'b'
  1027  00FDF9  75                 	db	117	;'u'
  1028  00FDFA  74                 	db	116	;'t'
  1029  00FDFB  74                 	db	116	;'t'
  1030  00FDFC  6F                 	db	111	;'o'
  1031  00FDFD  6E                 	db	110	;'n'
  1032  00FDFE  20                 	db	32
  1033  00FDFF  0D                 	db	13
  1034  00FE00  0A                 	db	10
  1035  00FE01  00                 	db	0
  1036  00FE02                     STR_47:
  1037                           
  1038                           ; BSR set to: 0
  1039  00FE02  42                 	db	66	;'B'
  1040  00FE03  75                 	db	117	;'u'
  1041  00FE04  74                 	db	116	;'t'
  1042  00FE05  74                 	db	116	;'t'
  1043  00FE06  6F                 	db	111	;'o'
  1044  00FE07  6E                 	db	110	;'n'
  1045  00FE08  20                 	db	32
  1046  00FE09  72                 	db	114	;'r'
  1047  00FE0A  65                 	db	101	;'e'
  1048  00FE0B  67                 	db	103	;'g'
  1049  00FE0C  69                 	db	105	;'i'
  1050  00FE0D  73                 	db	115	;'s'
  1051  00FE0E  74                 	db	116	;'t'
  1052  00FE0F  65                 	db	101	;'e'
  1053  00FE10  72                 	db	114	;'r'
  1054  00FE11  65                 	db	101	;'e'
  1055  00FE12  64                 	db	100	;'d'
  1056  00FE13  20                 	db	32
  1057  00FE14  0D                 	db	13
  1058  00FE15  0A                 	db	10
  1059  00FE16  00                 	db	0
  1060  00FE17                     STR_43:
  1061                           
  1062                           ; BSR set to: 0
  1063  00FE17  20                 	db	32
  1064  00FE18  54                 	db	84	;'T'
  1065  00FE19  65                 	db	101	;'e'
  1066  00FE1A  6D                 	db	109	;'m'
  1067  00FE1B  70                 	db	112	;'p'
  1068  00FE1C  20                 	db	32
  1069  00FE1D  3D                 	db	61	;'='
  1070  00FE1E  20                 	db	32
  1071  00FE1F  25                 	db	37
  1072  00FE20  64                 	db	100	;'d'
  1073  00FE21  20                 	db	32
  1074  00FE22  43                 	db	67	;'C'
  1075  00FE23  20                 	db	32
  1076  00FE24  3D                 	db	61	;'='
  1077  00FE25  20                 	db	32
  1078  00FE26  25                 	db	37
  1079  00FE27  64                 	db	100	;'d'
  1080  00FE28  20                 	db	32
  1081  00FE29  46                 	db	70	;'F'
  1082  00FE2A  20                 	db	32
  1083  00FE2B  00                 	db	0
  1084  00FE2C                     STR_35:
  1085                           
  1086                           ; BSR set to: 0
  1087  00FE2C  45                 	db	69	;'E'
  1088  00FE2D  43                 	db	67	;'C'
  1089  00FE2E  45                 	db	69	;'E'
  1090  00FE2F  33                 	db	51	;'3'
  1091  00FE30  33                 	db	51	;'3'
  1092  00FE31  30                 	db	48	;'0'
  1093  00FE32  31                 	db	49	;'1'
  1094  00FE33  4C                 	db	76	;'L'
  1095  00FE34  20                 	db	32
  1096  00FE35  46                 	db	70	;'F'
  1097  00FE36  32                 	db	50	;'2'
  1098  00FE37  33                 	db	51	;'3'
  1099  00FE38  2D                 	db	45
  1100  00FE39  4C                 	db	76	;'L'
  1101  00FE3A  31                 	db	49	;'1'
  1102  00FE3B  33                 	db	51	;'3'
  1103  00FE3C  5F                 	db	95	;'_'
  1104  00FE3D  53                 	db	83	;'S'
  1105  00FE3E  32                 	db	50	;'2'
  1106  00FE3F  00                 	db	0
  1107  00FE40  00                 	db	0
  1108  00FE41                     STR_4:
  1109                           
  1110                           ; BSR set to: 0
  1111  00FE41  63                 	db	99	;'c'
  1112  00FE42  61                 	db	97	;'a'
  1113  00FE43  6C                 	db	108	;'l'
  1114  00FE44  63                 	db	99	;'c'
  1115  00FE45  75                 	db	117	;'u'
  1116  00FE46  6C                 	db	108	;'l'
  1117  00FE47  61                 	db	97	;'a'
  1118  00FE48  74                 	db	116	;'t'
  1119  00FE49  65                 	db	101	;'e'
  1120  00FE4A  20                 	db	32
  1121  00FE4B  64                 	db	100	;'d'
  1122  00FE4C  69                 	db	105	;'i'
  1123  00FE4D  66                 	db	102	;'f'
  1124  00FE4E  66                 	db	102	;'f'
  1125  00FE4F  20                 	db	32
  1126  00FE50  74                 	db	116	;'t'
  1127  00FE51  65                 	db	101	;'e'
  1128  00FE52  6D                 	db	109	;'m'
  1129  00FE53  70                 	db	112	;'p'
  1130  00FE54  0A                 	db	10
  1131  00FE55  00                 	db	0
  1132  00FE56                     STR_45:
  1133                           
  1134                           ; BSR set to: 0
  1135  00FE56  52                 	db	82	;'R'
  1136  00FE57  50                 	db	80	;'P'
  1137  00FE58  4D                 	db	77	;'M'
  1138  00FE59  20                 	db	32
  1139  00FE5A  3D                 	db	61	;'='
  1140  00FE5B  20                 	db	32
  1141  00FE5C  25                 	db	37
  1142  00FE5D  64                 	db	100	;'d'
  1143  00FE5E  20                 	db	32
  1144  00FE5F  20                 	db	32
  1145  00FE60  64                 	db	100	;'d'
  1146  00FE61  63                 	db	99	;'c'
  1147  00FE62  20                 	db	32
  1148  00FE63  3D                 	db	61	;'='
  1149  00FE64  20                 	db	32
  1150  00FE65  25                 	db	37
  1151  00FE66  64                 	db	100	;'d'
  1152  00FE67  0D                 	db	13
  1153  00FE68  0A                 	db	10
  1154  00FE69  00                 	db	0
  1155  00FE6A                     STR_10:
  1156                           
  1157                           ; BSR set to: 0
  1158  00FE6A  45                 	db	69	;'E'
  1159  00FE6B  43                 	db	67	;'C'
  1160  00FE6C  45                 	db	69	;'E'
  1161  00FE6D  33                 	db	51	;'3'
  1162  00FE6E  33                 	db	51	;'3'
  1163  00FE6F  30                 	db	48	;'0'
  1164  00FE70  31                 	db	49	;'1'
  1165  00FE71  4C                 	db	76	;'L'
  1166  00FE72  20                 	db	32
  1167  00FE73  46                 	db	70	;'F'
  1168  00FE74  32                 	db	50	;'2'
  1169  00FE75  33                 	db	51	;'3'
  1170  00FE76  20                 	db	32
  1171  00FE77  46                 	db	70	;'F'
  1172  00FE78  69                 	db	105	;'i'
  1173  00FE79  6E                 	db	110	;'n'
  1174  00FE7A  61                 	db	97	;'a'
  1175  00FE7B  6C                 	db	108	;'l'
  1176  00FE7C  00                 	db	0
  1177  00FE7D  00                 	db	0
  1178  00FE7E                     STR_49:
  1179                           
  1180                           ; BSR set to: 0
  1181  00FE7E  53                 	db	83	;'S'
  1182  00FE7F  65                 	db	101	;'e'
  1183  00FE80  74                 	db	116	;'t'
  1184  00FE81  75                 	db	117	;'u'
  1185  00FE82  70                 	db	112	;'p'
  1186  00FE83  20                 	db	32
  1187  00FE84  41                 	db	65	;'A'
  1188  00FE85  6C                 	db	108	;'l'
  1189  00FE86  61                 	db	97	;'a'
  1190  00FE87  72                 	db	114	;'r'
  1191  00FE88  6D                 	db	109	;'m'
  1192  00FE89  20                 	db	32
  1193  00FE8A  4B                 	db	75	;'K'
  1194  00FE8B  65                 	db	101	;'e'
  1195  00FE8C  79                 	db	121	;'y'
  1196  00FE8D  20                 	db	32
  1197  00FE8E  0D                 	db	13
  1198  00FE8F  0A                 	db	10
  1199  00FE90  00                 	db	0
  1200  00FE91                     STR_38:
  1201                           
  1202                           ; BSR set to: 0
  1203  00FE91  45                 	db	69	;'E'
  1204  00FE92  43                 	db	67	;'C'
  1205  00FE93  45                 	db	69	;'E'
  1206  00FE94  33                 	db	51	;'3'
  1207  00FE95  33                 	db	51	;'3'
  1208  00FE96  30                 	db	48	;'0'
  1209  00FE97  31                 	db	49	;'1'
  1210  00FE98  4C                 	db	76	;'L'
  1211  00FE99  20                 	db	32
  1212  00FE9A  46                 	db	70	;'F'
  1213  00FE9B  32                 	db	50	;'2'
  1214  00FE9C  33                 	db	51	;'3'
  1215  00FE9D  20                 	db	32
  1216  00FE9E  46                 	db	70	;'F'
  1217  00FE9F  69                 	db	105	;'i'
  1218  00FEA0  6E                 	db	110	;'n'
  1219  00FEA1  61                 	db	97	;'a'
  1220  00FEA2  6C                 	db	108	;'l'
  1221  00FEA3  00                 	db	0
  1222  00FEA4                     STR_28:
  1223                           
  1224                           ; BSR set to: 0
  1225  00FEA4  43                 	db	67	;'C'
  1226  00FEA5  68                 	db	104	;'h'
  1227  00FEA6  65                 	db	101	;'e'
  1228  00FEA7  63                 	db	99	;'c'
  1229  00FEA8  6B                 	db	107	;'k'
  1230  00FEA9  69                 	db	105	;'i'
  1231  00FEAA  6E                 	db	110	;'n'
  1232  00FEAB  67                 	db	103	;'g'
  1233  00FEAC  20                 	db	32
  1234  00FEAD  62                 	db	98	;'b'
  1235  00FEAE  75                 	db	117	;'u'
  1236  00FEAF  74                 	db	116	;'t'
  1237  00FEB0  74                 	db	116	;'t'
  1238  00FEB1  6F                 	db	111	;'o'
  1239  00FEB2  6E                 	db	110	;'n'
  1240  00FEB3  20                 	db	32
  1241  00FEB4  0D                 	db	13
  1242  00FEB5  0A                 	db	10
  1243  00FEB6  00                 	db	0
  1244  00FEB7                     STR_5:
  1245                           
  1246                           ; BSR set to: 0
  1247  00FEB7  64                 	db	100	;'d'
  1248  00FEB8  69                 	db	105	;'i'
  1249  00FEB9  66                 	db	102	;'f'
  1250  00FEBA  66                 	db	102	;'f'
  1251  00FEBB  5F                 	db	95	;'_'
  1252  00FEBC  74                 	db	116	;'t'
  1253  00FEBD  65                 	db	101	;'e'
  1254  00FEBE  6D                 	db	109	;'m'
  1255  00FEBF  70                 	db	112	;'p'
  1256  00FEC0  20                 	db	32
  1257  00FEC1  69                 	db	105	;'i'
  1258  00FEC2  73                 	db	115	;'s'
  1259  00FEC3  20                 	db	32
  1260  00FEC4  25                 	db	37
  1261  00FEC5  64                 	db	100	;'d'
  1262  00FEC6  20                 	db	32
  1263  00FEC7  0D                 	db	13
  1264  00FEC8  0A                 	db	10
  1265  00FEC9  00                 	db	0
  1266  00FECA                     STR_50:
  1267                           
  1268                           ; BSR set to: 0
  1269  00FECA  53                 	db	83	;'S'
  1270  00FECB  65                 	db	101	;'e'
  1271  00FECC  74                 	db	116	;'t'
  1272  00FECD  75                 	db	117	;'u'
  1273  00FECE  70                 	db	112	;'p'
  1274  00FECF  20                 	db	32
  1275  00FED0  46                 	db	70	;'F'
  1276  00FED1  61                 	db	97	;'a'
  1277  00FED2  6E                 	db	110	;'n'
  1278  00FED3  20                 	db	32
  1279  00FED4  54                 	db	84	;'T'
  1280  00FED5  65                 	db	101	;'e'
  1281  00FED6  6D                 	db	109	;'m'
  1282  00FED7  70                 	db	112	;'p'
  1283  00FED8  20                 	db	32
  1284  00FED9  0D                 	db	13
  1285  00FEDA  0A                 	db	10
  1286  00FEDB  00                 	db	0
  1287  00FEDC                     STR_48:
  1288                           
  1289                           ; BSR set to: 0
  1290  00FEDC  53                 	db	83	;'S'
  1291  00FEDD  65                 	db	101	;'e'
  1292  00FEDE  74                 	db	116	;'t'
  1293  00FEDF  75                 	db	117	;'u'
  1294  00FEE0  70                 	db	112	;'p'
  1295  00FEE1  20                 	db	32
  1296  00FEE2  54                 	db	84	;'T'
  1297  00FEE3  69                 	db	105	;'i'
  1298  00FEE4  6D                 	db	109	;'m'
  1299  00FEE5  65                 	db	101	;'e'
  1300  00FEE6  20                 	db	32
  1301  00FEE7  4B                 	db	75	;'K'
  1302  00FEE8  65                 	db	101	;'e'
  1303  00FEE9  79                 	db	121	;'y'
  1304  00FEEA  20                 	db	32
  1305  00FEEB  0D                 	db	13
  1306  00FEEC  0A                 	db	10
  1307  00FEED  00                 	db	0
  1308  00FEEE                     STR_51:
  1309                           
  1310                           ; BSR set to: 0
  1311  00FEEE  54                 	db	84	;'T'
  1312  00FEEF  6F                 	db	111	;'o'
  1313  00FEF0  67                 	db	103	;'g'
  1314  00FEF1  67                 	db	103	;'g'
  1315  00FEF2  6C                 	db	108	;'l'
  1316  00FEF3  65                 	db	101	;'e'
  1317  00FEF4  20                 	db	32
  1318  00FEF5  46                 	db	70	;'F'
  1319  00FEF6  61                 	db	97	;'a'
  1320  00FEF7  6E                 	db	110	;'n'
  1321  00FEF8  20                 	db	32
  1322  00FEF9  4B                 	db	75	;'K'
  1323  00FEFA  65                 	db	101	;'e'
  1324  00FEFB  79                 	db	121	;'y'
  1325  00FEFC  20                 	db	32
  1326  00FEFD  0D                 	db	13
  1327  00FEFE  0A                 	db	10
  1328  00FEFF  00                 	db	0
  1329  00FF00                     STR_29:
  1330                           
  1331                           ; BSR set to: 0
  1332  00FF00  4E                 	db	78	;'N'
  1333  00FF01  65                 	db	101	;'e'
  1334  00FF02  63                 	db	99	;'c'
  1335  00FF03  5F                 	db	95	;'_'
  1336  00FF04  62                 	db	98	;'b'
  1337  00FF05  75                 	db	117	;'u'
  1338  00FF06  74                 	db	116	;'t'
  1339  00FF07  74                 	db	116	;'t'
  1340  00FF08  6F                 	db	111	;'o'
  1341  00FF09  6E                 	db	110	;'n'
  1342  00FF0A  20                 	db	32
  1343  00FF0B  3D                 	db	61	;'='
  1344  00FF0C  20                 	db	32
  1345  00FF0D  25                 	db	37
  1346  00FF0E  78                 	db	120	;'x'
  1347  00FF0F  0D                 	db	13
  1348  00FF10  0A                 	db	10
  1349  00FF11  00                 	db	0
  1350  00FF12                     STR_56:
  1351                           
  1352                           ; BSR set to: 0
  1353  00FF12  30                 	db	48	;'0'
  1354  00FF13  31                 	db	49	;'1'
  1355  00FF14  32                 	db	50	;'2'
  1356  00FF15  33                 	db	51	;'3'
  1357  00FF16  34                 	db	52	;'4'
  1358  00FF17  35                 	db	53	;'5'
  1359  00FF18  36                 	db	54	;'6'
  1360  00FF19  37                 	db	55	;'7'
  1361  00FF1A  38                 	db	56	;'8'
  1362  00FF1B  39                 	db	57	;'9'
  1363  00FF1C  61                 	db	97	;'a'
  1364  00FF1D  62                 	db	98	;'b'
  1365  00FF1E  63                 	db	99	;'c'
  1366  00FF1F  64                 	db	100	;'d'
  1367  00FF20  65                 	db	101	;'e'
  1368  00FF21  66                 	db	102	;'f'
  1369  00FF22  00                 	db	0
  1370  00FF23                     STR_3:
  1371                           
  1372                           ; BSR set to: 0
  1373  00FF23  64                 	db	100	;'d'
  1374  00FF24  75                 	db	117	;'u'
  1375  00FF25  74                 	db	116	;'t'
  1376  00FF26  79                 	db	121	;'y'
  1377  00FF27  20                 	db	32
  1378  00FF28  63                 	db	99	;'c'
  1379  00FF29  79                 	db	121	;'y'
  1380  00FF2A  63                 	db	99	;'c'
  1381  00FF2B  6C                 	db	108	;'l'
  1382  00FF2C  65                 	db	101	;'e'
  1383  00FF2D  20                 	db	32
  1384  00FF2E  69                 	db	105	;'i'
  1385  00FF2F  73                 	db	115	;'s'
  1386  00FF30  20                 	db	32
  1387  00FF31  30                 	db	48	;'0'
  1388  00FF32  0A                 	db	10
  1389  00FF33  00                 	db	0
  1390  00FF34                     STR_37:
  1391                           
  1392                           ; BSR set to: 0
  1393  00FF34  20                 	db	32
  1394  00FF35  20                 	db	32
  1395  00FF36  53                 	db	83	;'S'
  1396  00FF37  65                 	db	101	;'e'
  1397  00FF38  74                 	db	116	;'t'
  1398  00FF39  20                 	db	32
  1399  00FF3A  46                 	db	70	;'F'
  1400  00FF3B  61                 	db	97	;'a'
  1401  00FF3C  6E                 	db	110	;'n'
  1402  00FF3D  20                 	db	32
  1403  00FF3E  54                 	db	84	;'T'
  1404  00FF3F  65                 	db	101	;'e'
  1405  00FF40  6D                 	db	109	;'m'
  1406  00FF41  70                 	db	112	;'p'
  1407  00FF42  00                 	db	0
  1408  00FF43                     STR_46:
  1409                           
  1410                           ; BSR set to: 0
  1411  00FF43  65                 	db	101	;'e'
  1412  00FF44  6E                 	db	110	;'n'
  1413  00FF45  64                 	db	100	;'d'
  1414  00FF46  20                 	db	32
  1415  00FF47  6F                 	db	111	;'o'
  1416  00FF48  66                 	db	102	;'f'
  1417  00FF49  20                 	db	32
  1418  00FF4A  73                 	db	115	;'s'
  1419  00FF4B  65                 	db	101	;'e'
  1420  00FF4C  63                 	db	99	;'c'
  1421  00FF4D  6F                 	db	111	;'o'
  1422  00FF4E  6E                 	db	110	;'n'
  1423  00FF4F  64                 	db	100	;'d'
  1424  00FF50  00                 	db	0
  1425  00FF51                     STR_11:
  1426                           
  1427                           ; BSR set to: 0
  1428  00FF51  54                 	db	84	;'T'
  1429  00FF52  65                 	db	101	;'e'
  1430  00FF53  6D                 	db	109	;'m'
  1431  00FF54  70                 	db	112	;'p'
  1432  00FF55  65                 	db	101	;'e'
  1433  00FF56  72                 	db	114	;'r'
  1434  00FF57  61                 	db	97	;'a'
  1435  00FF58  74                 	db	116	;'t'
  1436  00FF59  75                 	db	117	;'u'
  1437  00FF5A  72                 	db	114	;'r'
  1438  00FF5B  65                 	db	101	;'e'
  1439  00FF5C  3A                 	db	58	;':'
  1440  00FF5D  00                 	db	0
  1441  00FF5E                     STR_18:
  1442                           
  1443                           ; BSR set to: 0
  1444  00FF5E  48                 	db	72	;'H'
  1445  00FF5F  54                 	db	84	;'T'
  1446  00FF60  52                 	db	82	;'R'
  1447  00FF61  20                 	db	32
  1448  00FF62  53                 	db	83	;'S'
  1449  00FF63  65                 	db	101	;'e'
  1450  00FF64  74                 	db	116	;'t'
  1451  00FF65  20                 	db	32
  1452  00FF66  54                 	db	84	;'T'
  1453  00FF67  65                 	db	101	;'e'
  1454  00FF68  6D                 	db	109	;'m'
  1455  00FF69  70                 	db	112	;'p'
  1456  00FF6A  00                 	db	0
  1457  00FF6B                     STR_36:
  1458                           
  1459                           ; BSR set to: 0
  1460  00FF6B  20                 	db	32
  1461  00FF6C  46                 	db	70	;'F'
  1462  00FF6D  61                 	db	97	;'a'
  1463  00FF6E  6E                 	db	110	;'n'
  1464  00FF6F  20                 	db	32
  1465  00FF70  53                 	db	83	;'S'
  1466  00FF71  65                 	db	101	;'e'
  1467  00FF72  74                 	db	116	;'t'
  1468  00FF73  75                 	db	117	;'u'
  1469  00FF74  70                 	db	112	;'p'
  1470  00FF75  00                 	db	0
  1471  00FF76  00                 	db	0
  1472  00FF77                     STR_32:
  1473                           
  1474                           ; BSR set to: 0
  1475  00FF77  54                 	db	84	;'T'
  1476  00FF78  69                 	db	105	;'i'
  1477  00FF79  6D                 	db	109	;'m'
  1478  00FF7A  65                 	db	101	;'e'
  1479  00FF7B  20                 	db	32
  1480  00FF7C  53                 	db	83	;'S'
  1481  00FF7D  65                 	db	101	;'e'
  1482  00FF7E  74                 	db	116	;'t'
  1483  00FF7F  75                 	db	117	;'u'
  1484  00FF80  70                 	db	112	;'p'
  1485  00FF81  00                 	db	0
  1486  00FF82  00                 	db	0
  1487  00FF83                     STR_41:
  1488                           
  1489                           ; BSR set to: 0
  1490  00FF83  25                 	db	37
  1491  00FF84  78                 	db	120	;'x'
  1492  00FF85  3A                 	db	58	;':'
  1493  00FF86  25                 	db	37
  1494  00FF87  78                 	db	120	;'x'
  1495  00FF88  3A                 	db	58	;':'
  1496  00FF89  25                 	db	37
  1497  00FF8A  78                 	db	120	;'x'
  1498  00FF8B  0D                 	db	13
  1499  00FF8C  0A                 	db	10
  1500  00FF8D  00                 	db	0
  1501  00FF8E                     STR_39:
  1502                           
  1503                           ; BSR set to: 0
  1504  00FF8E  41                 	db	65	;'A'
  1505  00FF8F  6C                 	db	108	;'l'
  1506  00FF90  72                 	db	114	;'r'
  1507  00FF91  6D                 	db	109	;'m'
  1508  00FF92  20                 	db	32
  1509  00FF93  53                 	db	83	;'S'
  1510  00FF94  65                 	db	101	;'e'
  1511  00FF95  74                 	db	116	;'t'
  1512  00FF96  75                 	db	117	;'u'
  1513  00FF97  70                 	db	112	;'p'
  1514  00FF98  00                 	db	0
  1515  00FF99                     STR_16:
  1516                           
  1517                           ; BSR set to: 0
  1518  00FF99  41                 	db	65	;'A'
  1519  00FF9A  6C                 	db	108	;'l'
  1520  00FF9B  61                 	db	97	;'a'
  1521  00FF9C  72                 	db	114	;'r'
  1522  00FF9D  6D                 	db	109	;'m'
  1523  00FF9E  20                 	db	32
  1524  00FF9F  54                 	db	84	;'T'
  1525  00FFA0  69                 	db	105	;'i'
  1526  00FFA1  6D                 	db	109	;'m'
  1527  00FFA2  65                 	db	101	;'e'
  1528  00FFA3  00                 	db	0
  1529  00FFA4                     STR_2:
  1530                           
  1531                           ; BSR set to: 0
  1532  00FFA4  64                 	db	100	;'d'
  1533  00FFA5  75                 	db	117	;'u'
  1534  00FFA6  74                 	db	116	;'t'
  1535  00FFA7  79                 	db	121	;'y'
  1536  00FFA8  20                 	db	32
  1537  00FFA9  63                 	db	99	;'c'
  1538  00FFAA  79                 	db	121	;'y'
  1539  00FFAB  63                 	db	99	;'c'
  1540  00FFAC  6C                 	db	108	;'l'
  1541  00FFAD  65                 	db	101	;'e'
  1542  00FFAE  00                 	db	0
  1543  00FFAF                     STR_17:
  1544                           
  1545                           ; BSR set to: 0
  1546  00FFAF  41                 	db	65	;'A'
  1547  00FFB0  6C                 	db	108	;'l'
  1548  00FFB1  61                 	db	97	;'a'
  1549  00FFB2  72                 	db	114	;'r'
  1550  00FFB3  6D                 	db	109	;'m'
  1551  00FFB4  20                 	db	32
  1552  00FFB5  53                 	db	83	;'S'
  1553  00FFB6  57                 	db	87	;'W'
  1554  00FFB7  00                 	db	0
  1555  00FFB8                     STR_19:
  1556                           
  1557                           ; BSR set to: 0
  1558  00FFB8  48                 	db	72	;'H'
  1559  00FFB9  54                 	db	84	;'T'
  1560  00FFBA  52                 	db	82	;'R'
  1561  00FFBB  20                 	db	32
  1562  00FFBC  53                 	db	83	;'S'
  1563  00FFBD  57                 	db	87	;'W'
  1564  00FFBE  00                 	db	0
  1565  00FFBF                     STR_7:
  1566                           
  1567                           ; BSR set to: 0
  1568  00FFBF  33                 	db	51	;'3'
  1569  00FFC0  35                 	db	53	;'5'
  1570  00FFC1  2D                 	db	45
  1571  00FFC2  35                 	db	53	;'5'
  1572  00FFC3  30                 	db	48	;'0'
  1573  00FFC4  0A                 	db	10
  1574  00FFC5  00                 	db	0
  1575  00FFC6                     STR_8:
  1576                           
  1577                           ; BSR set to: 0
  1578  00FFC6  32                 	db	50	;'2'
  1579  00FFC7  35                 	db	53	;'5'
  1580  00FFC8  2D                 	db	45
  1581  00FFC9  33                 	db	51	;'3'
  1582  00FFCA  35                 	db	53	;'5'
  1583  00FFCB  0A                 	db	10
  1584  00FFCC  00                 	db	0
  1585  00FFCD                     STR_15:
  1586                           
  1587                           ; BSR set to: 0
  1588  00FFCD  44                 	db	68	;'D'
  1589  00FFCE  61                 	db	97	;'a'
  1590  00FFCF  74                 	db	116	;'t'
  1591  00FFD0  65                 	db	101	;'e'
  1592  00FFD1  00                 	db	0
  1593  00FFD2                     STR_22:
  1594                           
  1595                           ; BSR set to: 0
  1596  00FFD2  56                 	db	86	;'V'
  1597  00FFD3  6F                 	db	111	;'o'
  1598  00FFD4  6C                 	db	108	;'l'
  1599  00FFD5  74                 	db	116	;'t'
  1600  00FFD6  00                 	db	0
  1601  00FFD7                     STR_6:
  1602                           
  1603                           ; BSR set to: 0
  1604  00FFD7  31                 	db	49	;'1'
  1605  00FFD8  30                 	db	48	;'0'
  1606  00FFD9  30                 	db	48	;'0'
  1607  00FFDA  0A                 	db	10
  1608  00FFDB  00                 	db	0
  1609  00FFDC                     STR_9:
  1610                           
  1611                           ; BSR set to: 0
  1612  00FFDC  30                 	db	48	;'0'
  1613  00FFDD  2D                 	db	45
  1614  00FFDE  31                 	db	49	;'1'
  1615  00FFDF  30                 	db	48	;'0'
  1616  00FFE0  00                 	db	0
  1617  00FFE1                     STR_24:
  1618                           
  1619                           ; BSR set to: 0
  1620  00FFE1  4F                 	db	79	;'O'
  1621  00FFE2  4E                 	db	78	;'N'
  1622  00FFE3  20                 	db	32
  1623  00FFE4  00                 	db	0
  1624  00FFE5                     STR_25:
  1625                           
  1626                           ; BSR set to: 0
  1627  00FFE5  4F                 	db	79	;'O'
  1628  00FFE6  46                 	db	70	;'F'
  1629  00FFE7  46                 	db	70	;'F'
  1630  00FFE8  00                 	db	0
  1631  00FFE9                     STR_23:
  1632                           
  1633                           ; BSR set to: 0
  1634  00FFE9  52                 	db	82	;'R'
  1635  00FFEA  50                 	db	80	;'P'
  1636  00FFEB  4D                 	db	77	;'M'
  1637  00FFEC  00                 	db	0
  1638  00FFED                     STR_12:
  1639                           
  1640                           ; BSR set to: 0
  1641  00FFED  43                 	db	67	;'C'
  1642  00FFEE  2F                 	db	47
  1643  00FFEF  00                 	db	0
  1644  00FFF0                     STR_20:
  1645                           
  1646                           ; BSR set to: 0
  1647  00FFF0  44                 	db	68	;'D'
  1648  00FFF1  43                 	db	67	;'C'
  1649  00FFF2  00                 	db	0
  1650  00FFF3                     STR_21:
  1651                           
  1652                           ; BSR set to: 0
  1653  00FFF3  52                 	db	82	;'R'
  1654  00FFF4  4D                 	db	77	;'M'
  1655  00FFF5  00                 	db	0
  1656  00FFF6                     STR_52:
  1657                           
  1658                           ; BSR set to: 0
  1659  00FFF6  31                 	db	49	;'1'
  1660  00FFF7  00                 	db	0
  1661  00FFF8                     STR_53:
  1662                           
  1663                           ; BSR set to: 0
  1664  00FFF8  32                 	db	50	;'2'
  1665  00FFF9  00                 	db	0
  1666  00FFFA                     STR_54:
  1667                           
  1668                           ; BSR set to: 0
  1669  00FFFA  33                 	db	51	;'3'
  1670  00FFFB  00                 	db	0
  1671  00FFFC                     STR_55:
  1672                           
  1673                           ; BSR set to: 0
  1674  00FFFC  34                 	db	52	;'4'
  1675  00FFFD  00                 	db	0
  1676  0000                     
  1677                           ; #config settings
  1678  00FFFE  00                 	db	0	; dummy byte at the end
  1679  0000                     
  1680                           	psect	cinit
  1681  003132                     __pcinit:
  1682                           	opt stack 0
  1683  003132                     start_initialization:
  1684                           	opt stack 0
  1685  003132                     __initialization:
  1686                           	opt stack 0
  1687                           
  1688                           ; Clear objects allocated to BANK0 (36 bytes)
  1689  003132  EE00  F0DA         	lfsr	0,__pbssBANK0
  1690  003136  0E24               	movlw	36
  1691  003138                     clear_0:
  1692  003138  6AEE               	clrf	postinc0,c
  1693  00313A  06E8               	decf	wreg,f,c
  1694  00313C  E1FD               	bnz	clear_0
  1695                           
  1696                           ; Clear objects allocated to COMRAM (38 bytes)
  1697  00313E  EE00  F048         	lfsr	0,__pbssCOMRAM
  1698  003142  0E26               	movlw	38
  1699  003144                     clear_1:
  1700  003144  6AEE               	clrf	postinc0,c
  1701  003146  06E8               	decf	wreg,f,c
  1702  003148  E1FD               	bnz	clear_1
  1703                           
  1704                           ; Initialize objects allocated to BANK1 (68 bytes)
  1705                           ; load TBLPTR registers with __pidataBANK1
  1706  00314A  0E06               	movlw	low __pidataBANK1
  1707  00314C  6EF6               	movwf	tblptrl,c
  1708  00314E  0E38               	movlw	high __pidataBANK1
  1709  003150  6EF7               	movwf	tblptrh,c
  1710  003152  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1711  003154  6EF8               	movwf	tblptru,c
  1712  003156  EE01  F000         	lfsr	0,__pdataBANK1
  1713  00315A  EE10 F044          	lfsr	1,68
  1714  00315E                     copy_data0:
  1715  00315E  0009               	tblrd		*+
  1716  003160  CFF5 FFEE          	movff	tablat,postinc0
  1717  003164  50E5               	movf	postdec1,w,c
  1718  003166  50E1               	movf	fsr1l,w,c
  1719  003168  E1FA               	bnz	copy_data0
  1720                           
  1721                           ; Initialize objects allocated to BANK0 (90 bytes)
  1722                           ; load TBLPTR registers with __pidataBANK0
  1723  00316A  0EA0               	movlw	low __pidataBANK0
  1724  00316C  6EF6               	movwf	tblptrl,c
  1725  00316E  0E33               	movlw	high __pidataBANK0
  1726  003170  6EF7               	movwf	tblptrh,c
  1727  003172  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1728  003174  6EF8               	movwf	tblptru,c
  1729  003176  EE00  F080         	lfsr	0,__pdataBANK0
  1730  00317A  EE10 F05A          	lfsr	1,90
  1731  00317E                     copy_data1:
  1732  00317E  0009               	tblrd		*+
  1733  003180  CFF5 FFEE          	movff	tablat,postinc0
  1734  003184  50E5               	movf	postdec1,w,c
  1735  003186  50E1               	movf	fsr1l,w,c
  1736  003188  E1FA               	bnz	copy_data1
  1737                           
  1738                           ; Initialize objects allocated to COMRAM (1 bytes)
  1739                           ; load TBLPTR registers with __pidataCOMRAM
  1740  00318A  0EA8               	movlw	low __pidataCOMRAM
  1741  00318C  6EF6               	movwf	tblptrl,c
  1742  00318E  0E3E               	movlw	high __pidataCOMRAM
  1743  003190  6EF7               	movwf	tblptrh,c
  1744  003192  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1745  003194  6EF8               	movwf	tblptru,c
  1746  003196  0009               	tblrd		*+	;fetch initializer
  1747  003198  CFF5 F06E          	movff	tablat,__pdataCOMRAM
  1748  00319C                     end_of_initialization:
  1749                           	opt stack 0
  1750  00319C                     __end_of__initialization:
  1751                           	opt stack 0
  1752  00319C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1753  00319E  6EF8               	movwf	tblptru,c
  1754  0031A0  0100               	movlb	0
  1755  0031A2  EF8B  F006         	goto	_main	;jump to C main() function
  1756                           tblptru	equ	0xFF8
  1757                           tblptrh	equ	0xFF7
  1758                           tblptrl	equ	0xFF6
  1759                           tablat	equ	0xFF5
  1760                           postinc0	equ	0xFEE
  1761                           wreg	equ	0xFE8
  1762                           postdec1	equ	0xFE5
  1763                           fsr1l	equ	0xFE1
  1764                           
  1765                           	psect	bssCOMRAM
  1766  000048                     __pbssCOMRAM:
  1767                           	opt stack 0
  1768  000048                     _ALARMEN:
  1769                           	opt stack 0
  1770  000048                     	ds	2
  1771  00004A                     _DS1621_tempC:
  1772                           	opt stack 0
  1773  00004A                     	ds	2
  1774  00004C                     _DS1621_tempF:
  1775                           	opt stack 0
  1776  00004C                     	ds	2
  1777  00004E                     _Time_Elapsed:
  1778                           	opt stack 0
  1779  00004E                     	ds	2
  1780  000050                     _rpm:
  1781                           	opt stack 0
  1782  000050                     	ds	2
  1783  000052                     _txt:
  1784                           	opt stack 0
  1785  000052                     	ds	2
  1786  000054                     _FAN:
  1787                           	opt stack 0
  1788  000054                     	ds	1
  1789  000055                     _Select_Alarm_Field:
  1790                           	opt stack 0
  1791  000055                     	ds	1
  1792  000056                     _Select_Field:
  1793                           	opt stack 0
  1794  000056                     	ds	1
  1795  000057                     __tft_type:
  1796                           	opt stack 0
  1797  000057                     	ds	1
  1798  000058                     _alarm_date:
  1799                           	opt stack 0
  1800  000058                     	ds	1
  1801  000059                     _alarm_hour:
  1802                           	opt stack 0
  1803  000059                     	ds	1
  1804  00005A                     _alarm_minute:
  1805                           	opt stack 0
  1806  00005A                     	ds	1
  1807  00005B                     _alarm_second:
  1808                           	opt stack 0
  1809  00005B                     	ds	1
  1810  00005C                     _day:
  1811                           	opt stack 0
  1812  00005C                     	ds	1
  1813  00005D                     _duty_cycle:
  1814                           	opt stack 0
  1815  00005D                     	ds	1
  1816  00005E                     _found:
  1817                           	opt stack 0
  1818  00005E                     	ds	1
  1819  00005F                     _hour:
  1820                           	opt stack 0
  1821  00005F                     	ds	1
  1822  000060                     _minute:
  1823                           	opt stack 0
  1824  000060                     	ds	1
  1825  000061                     _month:
  1826                           	opt stack 0
  1827  000061                     	ds	1
  1828  000062                     _second:
  1829                           	opt stack 0
  1830  000062                     	ds	1
  1831  000063                     _setup_alarm_hour:
  1832                           	opt stack 0
  1833  000063                     	ds	1
  1834  000064                     _setup_alarm_minute:
  1835                           	opt stack 0
  1836  000064                     	ds	1
  1837  000065                     _setup_alarm_second:
  1838                           	opt stack 0
  1839  000065                     	ds	1
  1840  000066                     _setup_day:
  1841                           	opt stack 0
  1842  000066                     	ds	1
  1843  000067                     _setup_fan_set_temp:
  1844                           	opt stack 0
  1845  000067                     	ds	1
  1846  000068                     _setup_hour:
  1847                           	opt stack 0
  1848  000068                     	ds	1
  1849  000069                     _setup_minute:
  1850                           	opt stack 0
  1851  000069                     	ds	1
  1852  00006A                     _setup_month:
  1853                           	opt stack 0
  1854  00006A                     	ds	1
  1855  00006B                     _setup_second:
  1856                           	opt stack 0
  1857  00006B                     	ds	1
  1858  00006C                     _setup_year:
  1859                           	opt stack 0
  1860  00006C                     	ds	1
  1861  00006D                     _year:
  1862                           	opt stack 0
  1863  00006D                     	ds	1
  1864                           tblptru	equ	0xFF8
  1865                           tblptrh	equ	0xFF7
  1866                           tblptrl	equ	0xFF6
  1867                           tablat	equ	0xFF5
  1868                           postinc0	equ	0xFEE
  1869                           wreg	equ	0xFE8
  1870                           postdec1	equ	0xFE5
  1871                           fsr1l	equ	0xFE1
  1872                           
  1873                           	psect	dataCOMRAM
  1874  00006E                     __pdataCOMRAM:
  1875                           	opt stack 0
  1876  00006E                     _fan_set_temp:
  1877                           	opt stack 0
  1878  00006E                     	ds	1
  1879                           tblptru	equ	0xFF8
  1880                           tblptrh	equ	0xFF7
  1881                           tblptrl	equ	0xFF6
  1882                           tablat	equ	0xFF5
  1883                           postinc0	equ	0xFEE
  1884                           wreg	equ	0xFE8
  1885                           postdec1	equ	0xFE5
  1886                           fsr1l	equ	0xFE1
  1887                           
  1888                           	psect	bssBANK0
  1889  0000DA                     __pbssBANK0:
  1890                           	opt stack 0
  1891  0000DA                     _Nec_code:
  1892                           	opt stack 0
  1893  0000DA                     	ds	4
  1894  0000DE                     _volt:
  1895                           	opt stack 0
  1896  0000DE                     	ds	3
  1897  0000E1                     _MATCHED:
  1898                           	opt stack 0
  1899  0000E1                     	ds	2
  1900  0000E3                     _Nec_ok:
  1901                           	opt stack 0
  1902  0000E3                     	ds	2
  1903  0000E5                     _alarm_mode:
  1904                           	opt stack 0
  1905  0000E5                     	ds	2
  1906  0000E7                     _color:
  1907                           	opt stack 0
  1908  0000E7                     	ds	2
  1909  0000E9                     _glob_RGB:
  1910                           	opt stack 0
  1911  0000E9                     	ds	2
  1912  0000EB                     _nbr:
  1913                           	opt stack 0
  1914  0000EB                     	ds	2
  1915  0000ED                     _nec_ok:
  1916                           	opt stack 0
  1917  0000ED                     	ds	2
  1918  0000EF                     _rps:
  1919                           	opt stack 0
  1920  0000EF                     	ds	2
  1921  0000F1                     _INT0_flag:
  1922                           	opt stack 0
  1923  0000F1                     	ds	1
  1924  0000F2                     _INT1_flag:
  1925                           	opt stack 0
  1926  0000F2                     	ds	1
  1927  0000F3                     _INT2_flag:
  1928                           	opt stack 0
  1929  0000F3                     	ds	1
  1930  0000F4                     _In_Alarm_Time_Setup:
  1931                           	opt stack 0
  1932  0000F4                     	ds	1
  1933  0000F5                     _In_Fan_Temp_Setup:
  1934                           	opt stack 0
  1935  0000F5                     	ds	1
  1936  0000F6                     _In_Time_Setup:
  1937                           	opt stack 0
  1938  0000F6                     	ds	1
  1939  0000F7                     _Nec_State:
  1940                           	opt stack 0
  1941  0000F7                     	ds	1
  1942  0000F8                     _Nec_button:
  1943                           	opt stack 0
  1944  0000F8                     	ds	1
  1945  0000F9                     _Select_Fan_Temp_Field:
  1946                           	opt stack 0
  1947  0000F9                     	ds	1
  1948  0000FA                     _bit_count:
  1949                           	opt stack 0
  1950  0000FA                     	ds	1
  1951  0000FB                     _colstart:
  1952                           	opt stack 0
  1953  0000FB                     	ds	1
  1954  0000FC                     _dow:
  1955                           	opt stack 0
  1956  0000FC                     	ds	1
  1957  0000FD                     _rowstart:
  1958                           	opt stack 0
  1959  0000FD                     	ds	1
  1960                           tblptru	equ	0xFF8
  1961                           tblptrh	equ	0xFF7
  1962                           tblptrl	equ	0xFF6
  1963                           tablat	equ	0xFF5
  1964                           postinc0	equ	0xFEE
  1965                           wreg	equ	0xFE8
  1966                           postdec1	equ	0xFE5
  1967                           fsr1l	equ	0xFE1
  1968                           
  1969                           	psect	dataBANK0
  1970  000080                     __pdataBANK0:
  1971                           	opt stack 0
  1972  000080                     _tempSecond:
  1973                           	opt stack 0
  1974  000080                     	ds	1
  1975  000081                     _wrap:
  1976                           	opt stack 0
  1977  000081                     	ds	1
  1978  000082                     _alarm_time:
  1979                           	opt stack 0
  1980  000082                     	ds	9
  1981  00008B                     _date:
  1982                           	opt stack 0
  1983  00008B                     	ds	9
  1984  000094                     _setup_date:
  1985                           	opt stack 0
  1986  000094                     	ds	9
  1987  00009D                     _setup_time:
  1988                           	opt stack 0
  1989  00009D                     	ds	9
  1990  0000A6                     _time:
  1991                           	opt stack 0
  1992  0000A6                     	ds	9
  1993  0000AF                     _Volt_Txt:
  1994                           	opt stack 0
  1995  0000AF                     	ds	6
  1996  0000B5                     _Fan_Set_Temp_Txt:
  1997                           	opt stack 0
  1998  0000B5                     	ds	5
  1999  0000BA                     _RPM_Txt:
  2000                           	opt stack 0
  2001  0000BA                     	ds	5
  2002  0000BF                     _setup_fan_set_text:
  2003                           	opt stack 0
  2004  0000BF                     	ds	5
  2005  0000C4                     _Alarm_SW_Txt:
  2006                           	opt stack 0
  2007  0000C4                     	ds	4
  2008  0000C8                     _DC_Txt:
  2009                           	opt stack 0
  2010  0000C8                     	ds	4
  2011  0000CC                     _Fan_SW_Txt:
  2012                           	opt stack 0
  2013  0000CC                     	ds	4
  2014  0000D0                     _tempC:
  2015                           	opt stack 0
  2016  0000D0                     	ds	4
  2017  0000D4                     _tempF:
  2018                           	opt stack 0
  2019  0000D4                     	ds	4
  2020  0000D8                     _RTC_ALARM_Txt:
  2021                           	opt stack 0
  2022  0000D8                     	ds	2
  2023                           tblptru	equ	0xFF8
  2024                           tblptrh	equ	0xFF7
  2025                           tblptrl	equ	0xFF6
  2026                           tablat	equ	0xFF5
  2027                           postinc0	equ	0xFEE
  2028                           wreg	equ	0xFE8
  2029                           postdec1	equ	0xFE5
  2030                           fsr1l	equ	0xFE1
  2031                           
  2032                           	psect	dataBANK1
  2033  000100                     __pdataBANK1:
  2034                           	opt stack 0
  2035  000100                     _buffer:
  2036                           	opt stack 0
  2037  000100                     	ds	31
  2038  00011F                     _array1:
  2039                           	opt stack 0
  2040  00011F                     	ds	21
  2041  000134                     _LED:
  2042                           	opt stack 0
  2043  000134                     	ds	7
  2044  00013B                     _setup_alarm_time:
  2045                           	opt stack 0
  2046  00013B                     	ds	9
  2047                           tblptru	equ	0xFF8
  2048                           tblptrh	equ	0xFF7
  2049                           tblptrl	equ	0xFF6
  2050                           tablat	equ	0xFF5
  2051                           postinc0	equ	0xFEE
  2052                           wreg	equ	0xFE8
  2053                           postdec1	equ	0xFE5
  2054                           fsr1l	equ	0xFE1
  2055                           
  2056                           	psect	cstackBANK1
  2057  000144                     __pcstackBANK1:
  2058                           	opt stack 0
  2059  000144                     drawtext@x:
  2060                           	opt stack 0
  2061  000144                     ___fttol@sign1:
  2062                           	opt stack 0
  2063                           
  2064                           ; 1 bytes @ 0x0
  2065  000144                     	ds	1
  2066  000145                     drawtext@textsize:
  2067                           	opt stack 0
  2068  000145                     ___fttol@lval:
  2069                           	opt stack 0
  2070                           
  2071                           ; 4 bytes @ 0x1
  2072  000145                     	ds	2
  2073  000147                     drawtext@i:
  2074                           	opt stack 0
  2075                           
  2076                           ; 2 bytes @ 0x3
  2077  000147                     	ds	2
  2078  000149                     drawtext@cursor_y:
  2079                           	opt stack 0
  2080  000149                     ___fttol@exp1:
  2081                           	opt stack 0
  2082                           
  2083                           ; 1 bytes @ 0x5
  2084  000149                     	ds	1
  2085  00014A                     ?_dec_2_bcd:
  2086                           	opt stack 0
  2087  00014A                     drawtext@cursor_x:
  2088                           	opt stack 0
  2089  00014A                     get_duty_cycle@diff_temp_816:
  2090                           	opt stack 0
  2091  00014A                     do_update_pwm@dc_f:
  2092                           	opt stack 0
  2093                           
  2094                           ; 3 bytes @ 0x6
  2095  00014A                     	ds	1
  2096  00014B                     ??_Update_Screen:
  2097  00014B                     Update_Setup_Fan_Screen@dc_char1:
  2098                           	opt stack 0
  2099                           
  2100                           ; 1 bytes @ 0x7
  2101  00014B                     	ds	1
  2102  00014C                     ??_dec_2_bcd:
  2103  00014C                     Update_Setup_Fan_Screen@dc_char2:
  2104                           	opt stack 0
  2105  00014C                     get_duty_cycle@diff_temp_float:
  2106                           	opt stack 0
  2107                           
  2108                           ; 3 bytes @ 0x8
  2109  00014C                     	ds	1
  2110  00014D                     do_update_pwm@duty_cycle:
  2111                           	opt stack 0
  2112  00014D                     Update_Setup_Fan_Screen@dc_char3:
  2113                           	opt stack 0
  2114  00014D                     Update_Screen@neg_tempF:
  2115                           	opt stack 0
  2116                           
  2117                           ; 2 bytes @ 0x9
  2118  00014D                     	ds	1
  2119  00014E                     do_update_pwm@dc_I:
  2120                           	opt stack 0
  2121  00014E                     dec_2_bcd@bcd:
  2122                           	opt stack 0
  2123                           
  2124                           ; 2 bytes @ 0xA
  2125  00014E                     	ds	1
  2126  00014F                     get_duty_cycle@dc:
  2127                           	opt stack 0
  2128                           
  2129                           ; 2 bytes @ 0xB
  2130  00014F                     	ds	1
  2131  000150                     dec_2_bcd@dec:
  2132                           	opt stack 0
  2133                           
  2134                           ; 1 bytes @ 0xC
  2135  000150                     	ds	1
  2136  000151                     DS3231_Write_Time@Device:
  2137                           	opt stack 0
  2138  000151                     DS3231_Write_Alarm_Time@Device:
  2139                           	opt stack 0
  2140  000151                     get_duty_cycle@diff_temp:
  2141                           	opt stack 0
  2142                           
  2143                           ; 2 bytes @ 0xD
  2144  000151                     	ds	1
  2145  000152                     DS3231_Write_Time@Address:
  2146                           	opt stack 0
  2147  000152                     DS3231_Write_Alarm_Time@Address:
  2148                           	opt stack 0
  2149                           
  2150                           ; 1 bytes @ 0xE
  2151  000152                     	ds	1
  2152                           tblptru	equ	0xFF8
  2153                           tblptrh	equ	0xFF7
  2154                           tblptrl	equ	0xFF6
  2155                           tablat	equ	0xFF5
  2156                           postinc0	equ	0xFEE
  2157                           wreg	equ	0xFE8
  2158                           postdec1	equ	0xFE5
  2159                           fsr1l	equ	0xFE1
  2160                           
  2161                           	psect	cstackBANK0
  2162  0000FE                     __pcstackBANK0:
  2163                           	opt stack 0
  2164  0000FE                     ??_get_duty_cycle:
  2165  0000FE                     ___awmod@counter:
  2166                           	opt stack 0
  2167                           
  2168                           ; 1 bytes @ 0x0
  2169  0000FE                     	ds	1
  2170  0000FF                     ___awmod@sign:
  2171                           	opt stack 0
  2172                           
  2173                           ; 1 bytes @ 0x1
  2174  0000FF                     	ds	1
  2175                           tblptru	equ	0xFF8
  2176                           tblptrh	equ	0xFF7
  2177                           tblptrl	equ	0xFF6
  2178                           tablat	equ	0xFF5
  2179                           postinc0	equ	0xFEE
  2180                           wreg	equ	0xFE8
  2181                           postdec1	equ	0xFE5
  2182                           fsr1l	equ	0xFE1
  2183                           
  2184                           	psect	cstackCOMRAM
  2185  000001                     __pcstackCOMRAM:
  2186                           	opt stack 0
  2187  000001                     ??_INT0_isr:
  2188  000001                     
  2189                           ; 2 bytes @ 0x0
  2190  000001                     	ds	2
  2191  000003                     ??_chkisr:
  2192                           
  2193                           ; 0 bytes @ 0x2
  2194  000003                     	ds	14
  2195  000011                     ??_isdigit:
  2196  000011                     ??_bcd_2_dec:
  2197  000011                     ?_strlen:
  2198                           	opt stack 0
  2199  000011                     ?_get_full_ADC:
  2200                           	opt stack 0
  2201  000011                     ?___wmul:
  2202                           	opt stack 0
  2203  000011                     ?___lwdiv:
  2204                           	opt stack 0
  2205  000011                     ?___ftpack:
  2206                           	opt stack 0
  2207  000011                     spiwrite@x:
  2208                           	opt stack 0
  2209  000011                     I2C_Read@ack:
  2210                           	opt stack 0
  2211  000011                     I2C_Write@outByte:
  2212                           	opt stack 0
  2213  000011                     putch@c:
  2214                           	opt stack 0
  2215  000011                     Wait_One_Sec@k:
  2216                           	opt stack 0
  2217  000011                     OpenUSART@spbrg:
  2218                           	opt stack 0
  2219  000011                     ___wmul@multiplier:
  2220                           	opt stack 0
  2221  000011                     ___lwdiv@dividend:
  2222                           	opt stack 0
  2223  000011                     strcpy@to:
  2224                           	opt stack 0
  2225  000011                     strlen@s:
  2226                           	opt stack 0
  2227  000011                     ___ftpack@arg:
  2228                           	opt stack 0
  2229  000011                     ___ftge@ff1:
  2230                           	opt stack 0
  2231  000011                     I2C_Init@c:
  2232                           	opt stack 0
  2233                           
  2234                           ; 4 bytes @ 0x10
  2235  000011                     	ds	1
  2236  000012                     spiwrite@spidata:
  2237                           	opt stack 0
  2238  000012                     I2C_Read@n:
  2239                           	opt stack 0
  2240  000012                     I2C_Write@n:
  2241                           	opt stack 0
  2242  000012                     _isdigit$2887:
  2243                           	opt stack 0
  2244                           
  2245                           ; 1 bytes @ 0x11
  2246  000012                     	ds	1
  2247  000013                     ??_strlen:
  2248  000013                     ??_get_full_ADC:
  2249  000013                     write_command@cmd_:
  2250                           	opt stack 0
  2251  000013                     write_data@data_:
  2252                           	opt stack 0
  2253  000013                     I2C_Read@inByte:
  2254                           	opt stack 0
  2255  000013                     I2C_Write_Address_Write_One_Byte@Address:
  2256                           	opt stack 0
  2257  000013                     I2C_Write_Cmd_Only@Cmd:
  2258                           	opt stack 0
  2259  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  2260                           	opt stack 0
  2261  000013                     OpenUSART@config:
  2262                           	opt stack 0
  2263  000013                     isdigit@c:
  2264                           	opt stack 0
  2265  000013                     bcd_2_dec@dec:
  2266                           	opt stack 0
  2267  000013                     ___wmul@multiplicand:
  2268                           	opt stack 0
  2269  000013                     ___lwdiv@divisor:
  2270                           	opt stack 0
  2271  000013                     strcpy@from:
  2272                           	opt stack 0
  2273                           
  2274                           ; 2 bytes @ 0x12
  2275  000013                     	ds	1
  2276  000014                     ?_DS1621_Read_Temp:
  2277                           	opt stack 0
  2278  000014                     setAddrWindow@y0:
  2279                           	opt stack 0
  2280  000014                     I2C_Write_Address_Read_One_Byte@Address:
  2281                           	opt stack 0
  2282  000014                     I2C_Write_Address_Write_One_Byte@Data_Out:
  2283                           	opt stack 0
  2284  000014                     I2C_Write_Cmd_Only@Device:
  2285                           	opt stack 0
  2286  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  2287                           	opt stack 0
  2288  000014                     DS3231_Read_Time@Address:
  2289                           	opt stack 0
  2290  000014                     DS3231_Read_Alarm_Time@Address:
  2291                           	opt stack 0
  2292  000014                     ___ftpack@exp:
  2293                           	opt stack 0
  2294  000014                     ___ftge@ff2:
  2295                           	opt stack 0
  2296                           
  2297                           ; 3 bytes @ 0x13
  2298  000014                     	ds	1
  2299  000015                     setAddrWindow@x1:
  2300                           	opt stack 0
  2301  000015                     I2C_Write_Address_Read_One_Byte@Data_Ret:
  2302                           	opt stack 0
  2303  000015                     I2C_Write_Address_Write_One_Byte@Device:
  2304                           	opt stack 0
  2305  000015                     I2C_Write_Cmd_Write_Data@Device:
  2306                           	opt stack 0
  2307  000015                     DS3231_Read_Time@Device:
  2308                           	opt stack 0
  2309  000015                     DS3231_Read_Alarm_Time@Device:
  2310                           	opt stack 0
  2311  000015                     bcd_2_dec@bcd:
  2312                           	opt stack 0
  2313  000015                     ___ftpack@sign:
  2314                           	opt stack 0
  2315  000015                     ___lwdiv@counter:
  2316                           	opt stack 0
  2317  000015                     get_full_ADC@result:
  2318                           	opt stack 0
  2319  000015                     ___wmul@product:
  2320                           	opt stack 0
  2321  000015                     strcpy@cp:
  2322                           	opt stack 0
  2323  000015                     strlen@cp:
  2324                           	opt stack 0
  2325                           
  2326                           ; 2 bytes @ 0x14
  2327  000015                     	ds	1
  2328  000016                     ??___ftpack:
  2329  000016                     setAddrWindow@y1:
  2330                           	opt stack 0
  2331  000016                     I2C_Write_Address_Read_One_Byte@Device:
  2332                           	opt stack 0
  2333  000016                     DS1621_Init@Device:
  2334                           	opt stack 0
  2335  000016                     DS1621_Read_Temp@Cmd:
  2336                           	opt stack 0
  2337  000016                     ___lwdiv@quotient:
  2338                           	opt stack 0
  2339                           
  2340                           ; 2 bytes @ 0x15
  2341  000016                     	ds	1
  2342  000017                     ??___ftge:
  2343  000017                     ?___awdiv:
  2344                           	opt stack 0
  2345  000017                     setAddrWindow@x0:
  2346                           	opt stack 0
  2347  000017                     DS1621_Read_Temp@Data_Ret:
  2348                           	opt stack 0
  2349  000017                     DS3231_Init@Address_7:
  2350                           	opt stack 0
  2351  000017                     delay_ms@ms:
  2352                           	opt stack 0
  2353  000017                     ___awdiv@dividend:
  2354                           	opt stack 0
  2355                           
  2356                           ; 2 bytes @ 0x16
  2357  000017                     	ds	1
  2358  000018                     ?___lwmod:
  2359                           	opt stack 0
  2360  000018                     drawPixel@y:
  2361                           	opt stack 0
  2362  000018                     drawFastVLine@y:
  2363                           	opt stack 0
  2364  000018                     fillRectangle@y:
  2365                           	opt stack 0
  2366  000018                     DS1621_Read_Temp@Device:
  2367                           	opt stack 0
  2368  000018                     DS3231_Init@Address_E:
  2369                           	opt stack 0
  2370  000018                     ___lwmod@dividend:
  2371                           	opt stack 0
  2372                           
  2373                           ; 2 bytes @ 0x17
  2374  000018                     	ds	1
  2375  000019                     ??_delay_ms:
  2376  000019                     ?___awtoft:
  2377                           	opt stack 0
  2378  000019                     ?___lbtoft:
  2379                           	opt stack 0
  2380  000019                     drawFastVLine@h:
  2381                           	opt stack 0
  2382  000019                     fillRectangle@w:
  2383                           	opt stack 0
  2384  000019                     DS3231_Init@control_E:
  2385                           	opt stack 0
  2386  000019                     drawPixel@color:
  2387                           	opt stack 0
  2388  000019                     ___awdiv@divisor:
  2389                           	opt stack 0
  2390  000019                     ___awtoft@c:
  2391                           	opt stack 0
  2392                           
  2393                           ; 2 bytes @ 0x18
  2394  000019                     	ds	1
  2395  00001A                     fillRectangle@h:
  2396                           	opt stack 0
  2397  00001A                     DS3231_Init@Device:
  2398                           	opt stack 0
  2399  00001A                     drawFastVLine@color:
  2400                           	opt stack 0
  2401  00001A                     ___lwmod@divisor:
  2402                           	opt stack 0
  2403                           
  2404                           ; 2 bytes @ 0x19
  2405  00001A                     	ds	1
  2406  00001B                     drawPixel@x:
  2407                           	opt stack 0
  2408  00001B                     DS3231_Turn_Off_Alarm@Address_E:
  2409                           	opt stack 0
  2410  00001B                     DS3231_Turn_On_Alarm@Address_E:
  2411                           	opt stack 0
  2412  00001B                     ___awdiv@counter:
  2413                           	opt stack 0
  2414  00001B                     delay_ms@count:
  2415                           	opt stack 0
  2416  00001B                     fillRectangle@color:
  2417                           	opt stack 0
  2418                           
  2419                           ; 2 bytes @ 0x1A
  2420  00001B                     	ds	1
  2421  00001C                     ??_drawFastVLine:
  2422  00001C                     DS3231_Turn_Off_Alarm@Address_F:
  2423                           	opt stack 0
  2424  00001C                     DS3231_Turn_On_Alarm@Address_F:
  2425                           	opt stack 0
  2426  00001C                     ___awdiv@sign:
  2427                           	opt stack 0
  2428  00001C                     ___awtoft@sign:
  2429                           	opt stack 0
  2430  00001C                     ___lbtoft@c:
  2431                           	opt stack 0
  2432  00001C                     ___lwmod@counter:
  2433                           	opt stack 0
  2434  00001C                     drawCircle@x0:
  2435                           	opt stack 0
  2436                           
  2437                           ; 2 bytes @ 0x1B
  2438  00001C                     	ds	1
  2439  00001D                     ??_fillRectangle:
  2440  00001D                     ?_printf:
  2441                           	opt stack 0
  2442  00001D                     ?___ftmul:
  2443                           	opt stack 0
  2444  00001D                     DS3231_Turn_Off_Alarm@control_E:
  2445                           	opt stack 0
  2446  00001D                     DS3231_Turn_On_Alarm@control_E:
  2447                           	opt stack 0
  2448  00001D                     printf@f:
  2449                           	opt stack 0
  2450  00001D                     ___awdiv@quotient:
  2451                           	opt stack 0
  2452  00001D                     ___ftmul@f1:
  2453                           	opt stack 0
  2454                           
  2455                           ; 3 bytes @ 0x1C
  2456  00001D                     	ds	1
  2457  00001E                     DS3231_Turn_Off_Alarm@control_F:
  2458                           	opt stack 0
  2459  00001E                     DS3231_Turn_On_Alarm@control_F:
  2460                           	opt stack 0
  2461  00001E                     drawCircle@y0:
  2462                           	opt stack 0
  2463                           
  2464                           ; 2 bytes @ 0x1D
  2465  00001E                     	ds	1
  2466  00001F                     DS3231_Turn_Off_Alarm@Device:
  2467                           	opt stack 0
  2468  00001F                     DS3231_Turn_On_Alarm@Device:
  2469                           	opt stack 0
  2470                           
  2471                           ; 1 bytes @ 0x1E
  2472  00001F                     	ds	1
  2473  000020                     drawFastVLine@hi:
  2474                           	opt stack 0
  2475  000020                     drawCircle@r:
  2476                           	opt stack 0
  2477  000020                     ___ftmul@f2:
  2478                           	opt stack 0
  2479                           
  2480                           ; 3 bytes @ 0x1F
  2481  000020                     	ds	1
  2482  000021                     drawFastVLine@lo:
  2483                           	opt stack 0
  2484  000021                     fillRectangle@hi:
  2485                           	opt stack 0
  2486                           
  2487                           ; 1 bytes @ 0x20
  2488  000021                     	ds	1
  2489  000022                     drawFastVLine@x:
  2490                           	opt stack 0
  2491  000022                     fillRectangle@lo:
  2492                           	opt stack 0
  2493  000022                     drawCircle@color:
  2494                           	opt stack 0
  2495                           
  2496                           ; 2 bytes @ 0x21
  2497  000022                     	ds	1
  2498  000023                     ??___ftmul:
  2499  000023                     fillRect@y:
  2500                           	opt stack 0
  2501  000023                     fillRectangle@x:
  2502                           	opt stack 0
  2503                           
  2504                           ; 1 bytes @ 0x22
  2505  000023                     	ds	1
  2506  000024                     ??_drawCircle:
  2507  000024                     fillRect@w:
  2508                           	opt stack 0
  2509  000024                     fillScreen@color:
  2510                           	opt stack 0
  2511                           
  2512                           ; 2 bytes @ 0x23
  2513  000024                     	ds	1
  2514  000025                     fillRect@h:
  2515                           	opt stack 0
  2516                           
  2517                           ; 1 bytes @ 0x24
  2518  000025                     	ds	1
  2519  000026                     ___ftmul@exp:
  2520                           	opt stack 0
  2521  000026                     fillRect@color:
  2522                           	opt stack 0
  2523  000026                     drawCircle@ddF_x:
  2524                           	opt stack 0
  2525                           
  2526                           ; 2 bytes @ 0x25
  2527  000026                     	ds	1
  2528  000027                     ___ftmul@f3_as_product:
  2529                           	opt stack 0
  2530                           
  2531                           ; 3 bytes @ 0x26
  2532  000027                     	ds	1
  2533  000028                     ??_fillRect:
  2534  000028                     drawCircle@ddF_y:
  2535                           	opt stack 0
  2536                           
  2537                           ; 2 bytes @ 0x27
  2538  000028                     	ds	2
  2539  00002A                     ___ftmul@cntr:
  2540                           	opt stack 0
  2541  00002A                     drawCircle@f:
  2542                           	opt stack 0
  2543                           
  2544                           ; 2 bytes @ 0x29
  2545  00002A                     	ds	1
  2546  00002B                     ??_printf:
  2547  00002B                     fillRect@x:
  2548                           	opt stack 0
  2549  00002B                     ___ftmul@sign:
  2550                           	opt stack 0
  2551                           
  2552                           ; 1 bytes @ 0x2A
  2553  00002B                     	ds	1
  2554  00002C                     ?___ftdiv:
  2555                           	opt stack 0
  2556  00002C                     ?_get_RPM:
  2557                           	opt stack 0
  2558  00002C                     fillRect@i:
  2559                           	opt stack 0
  2560  00002C                     drawCircle@x:
  2561                           	opt stack 0
  2562  00002C                     ___ftdiv@f1:
  2563                           	opt stack 0
  2564                           
  2565                           ; 3 bytes @ 0x2B
  2566  00002C                     	ds	2
  2567  00002E                     drawChar@y:
  2568                           	opt stack 0
  2569  00002E                     Update_Setup_Screen_Cursor_Forward@field:
  2570                           	opt stack 0
  2571  00002E                     Update_Setup_Screen_Cursor_Backward@field:
  2572                           	opt stack 0
  2573  00002E                     drawCircle@y:
  2574                           	opt stack 0
  2575                           
  2576                           ; 2 bytes @ 0x2D
  2577  00002E                     	ds	1
  2578  00002F                     drawChar@c:
  2579                           	opt stack 0
  2580  00002F                     Update_Setup_Screen_Cursor_Forward@yinc:
  2581                           	opt stack 0
  2582  00002F                     Update_Setup_Screen_Cursor_Backward@yinc:
  2583                           	opt stack 0
  2584  00002F                     printf@idx:
  2585                           	opt stack 0
  2586  00002F                     get_RPM@RPS:
  2587                           	opt stack 0
  2588  00002F                     ___ftdiv@f2:
  2589                           	opt stack 0
  2590                           
  2591                           ; 3 bytes @ 0x2E
  2592  00002F                     	ds	1
  2593  000030                     Update_Setup_Screen_Cursor_Forward@xinc:
  2594                           	opt stack 0
  2595  000030                     Update_Setup_Screen_Cursor_Backward@xinc:
  2596                           	opt stack 0
  2597  000030                     drawChar@color:
  2598                           	opt stack 0
  2599  000030                     printf@ap:
  2600                           	opt stack 0
  2601                           
  2602                           ; 2 bytes @ 0x2F
  2603  000030                     	ds	1
  2604  000031                     
  2605                           ; 0 bytes @ 0x30
  2606  000031                     	ds	1
  2607  000032                     ??___ftdiv:
  2608  000032                     printf@prec:
  2609                           	opt stack 0
  2610  000032                     drawChar@bg:
  2611                           	opt stack 0
  2612                           
  2613                           ; 2 bytes @ 0x31
  2614  000032                     	ds	1
  2615  000033                     printf@val:
  2616                           	opt stack 0
  2617                           
  2618                           ; 2 bytes @ 0x32
  2619  000033                     	ds	1
  2620  000034                     drawChar@size:
  2621                           	opt stack 0
  2622                           
  2623                           ; 1 bytes @ 0x33
  2624  000034                     	ds	1
  2625  000035                     drawChar@line:
  2626                           	opt stack 0
  2627  000035                     printf@flag:
  2628                           	opt stack 0
  2629  000035                     ___ftdiv@cntr:
  2630                           	opt stack 0
  2631                           
  2632                           ; 1 bytes @ 0x34
  2633  000035                     	ds	1
  2634  000036                     drawChar@x:
  2635                           	opt stack 0
  2636  000036                     printf@width:
  2637                           	opt stack 0
  2638  000036                     ___ftdiv@f3:
  2639                           	opt stack 0
  2640                           
  2641                           ; 3 bytes @ 0x35
  2642  000036                     	ds	1
  2643  000037                     drawChar@j:
  2644                           	opt stack 0
  2645                           
  2646                           ; 1 bytes @ 0x36
  2647  000037                     	ds	1
  2648  000038                     drawChar@i:
  2649                           	opt stack 0
  2650  000038                     printf@c:
  2651                           	opt stack 0
  2652                           
  2653                           ; 1 bytes @ 0x37
  2654  000038                     	ds	1
  2655  000039                     ??_test_alarm:
  2656  000039                     drawtext@y:
  2657                           	opt stack 0
  2658  000039                     ___ftdiv@exp:
  2659                           	opt stack 0
  2660                           
  2661                           ; 1 bytes @ 0x38
  2662  000039                     	ds	1
  2663  00003A                     ___ftdiv@sign:
  2664                           	opt stack 0
  2665  00003A                     drawtext@_text:
  2666                           	opt stack 0
  2667  00003A                     check_for_button_input@j:
  2668                           	opt stack 0
  2669                           
  2670                           ; 2 bytes @ 0x39
  2671  00003A                     	ds	1
  2672  00003B                     ?_read_volt:
  2673                           	opt stack 0
  2674  00003B                     ?___fttol:
  2675                           	opt stack 0
  2676  00003B                     test_alarm@num:
  2677                           	opt stack 0
  2678  00003B                     ___fttol@f1:
  2679                           	opt stack 0
  2680                           
  2681                           ; 3 bytes @ 0x3A
  2682  00003B                     	ds	1
  2683  00003C                     drawtext@color:
  2684                           	opt stack 0
  2685                           
  2686                           ; 2 bytes @ 0x3B
  2687  00003C                     	ds	2
  2688  00003E                     drawtext@bg:
  2689                           	opt stack 0
  2690  00003E                     read_volt@volt:
  2691                           	opt stack 0
  2692                           
  2693                           ; 3 bytes @ 0x3D
  2694  00003E                     	ds	1
  2695  00003F                     ??___fttol:
  2696                           
  2697                           ; 0 bytes @ 0x3E
  2698  00003F                     	ds	1
  2699  000040                     drawtext@size:
  2700                           	opt stack 0
  2701                           
  2702                           ; 1 bytes @ 0x3F
  2703  000040                     	ds	1
  2704  000041                     ??_drawtext:
  2705  000041                     read_volt@nStep:
  2706                           	opt stack 0
  2707                           
  2708                           ; 2 bytes @ 0x40
  2709  000041                     	ds	2
  2710  000043                     
  2711                           ; 0 bytes @ 0x42
  2712  000043                     	ds	1
  2713  000044                     ??_do_update_pwm:
  2714  000044                     ?_get_duty_cycle:
  2715                           	opt stack 0
  2716  000044                     ?___awmod:
  2717                           	opt stack 0
  2718  000044                     get_duty_cycle@ambient_temp:
  2719                           	opt stack 0
  2720  000044                     ___awmod@dividend:
  2721                           	opt stack 0
  2722                           
  2723                           ; 2 bytes @ 0x43
  2724  000044                     	ds	2
  2725  000046                     get_duty_cycle@set_temp:
  2726                           	opt stack 0
  2727  000046                     ___awmod@divisor:
  2728                           	opt stack 0
  2729                           
  2730                           ; 2 bytes @ 0x45
  2731  000046                     	ds	1
  2732  000047                     
  2733                           ; 0 bytes @ 0x46
  2734  000047                     	ds	1
  2735  000048                     tblptru	equ	0xFF8
  2736                           tblptrh	equ	0xFF7
  2737                           tblptrl	equ	0xFF6
  2738                           tablat	equ	0xFF5
  2739                           postinc0	equ	0xFEE
  2740                           wreg	equ	0xFE8
  2741                           postdec1	equ	0xFE5
  2742                           fsr1l	equ	0xFE1
  2743                           
  2744                           ; 0 bytes @ 0x47
  2745 ;;
  2746 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2747 ;;
  2748 ;; *************** function _main *****************
  2749 ;; Defined at:
  2750 ;;		line 110 in file "Main.c"
  2751 ;; Parameters:    Size  Location     Type
  2752 ;;		None
  2753 ;; Auto vars:     Size  Location     Type
  2754 ;;		None
  2755 ;; Return value:  Size  Location     Type
  2756 ;;		None               void
  2757 ;; Registers used:
  2758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2759 ;; Tracked objects:
  2760 ;;		On entry : 0/0
  2761 ;;		On exit  : 0/0
  2762 ;;		Unchanged: 0/0
  2763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2768 ;;Total ram usage:        0 bytes
  2769 ;; Hardware stack levels required when called:   13
  2770 ;; This function calls:
  2771 ;;		_DS1621_Read_Temp
  2772 ;;		_DS3231_Read_Alarm_Time
  2773 ;;		_DS3231_Read_Time
  2774 ;;		_DS3231_Turn_Off_Alarm
  2775 ;;		_Do_Beep_Bad
  2776 ;;		_Do_Beep_Good
  2777 ;;		_Do_Init
  2778 ;;		_Do_Setup_Alarm_Time
  2779 ;;		_Do_Setup_Time
  2780 ;;		_Initialize_Screen
  2781 ;;		_Monitor_Fan
  2782 ;;		_Setup_Temp_Fan
  2783 ;;		_Toggle_Fan
  2784 ;;		_Toggle_Fan_Monitor
  2785 ;;		_Update_Screen
  2786 ;;		___awdiv
  2787 ;;		___fttol
  2788 ;;		___wmul
  2789 ;;		_check_for_button_input
  2790 ;;		_get_RPM
  2791 ;;		_printf
  2792 ;;		_read_volt
  2793 ;;		_test_alarm
  2794 ;; This function is called by:
  2795 ;;		Startup code after reset
  2796 ;; This function uses a non-reentrant model
  2797 ;;
  2798                           
  2799                           	psect	text0
  2800  000D16                     __ptext0:
  2801                           	opt stack 0
  2802  000D16                     _main:
  2803                           	opt stack 18
  2804                           
  2805                           ;Main.c: 111: Do_Init();
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;incstack = 0
  2809  000D16  ECFD  F019         	call	_Do_Init	;wreg free
  2810                           
  2811                           ;Main.c: 112: Initialize_Screen();
  2812  000D1A  EC1E  F003         	call	_Initialize_Screen	;wreg free
  2813                           
  2814                           ;Main.c: 113: DS3231_Turn_Off_Alarm();
  2815  000D1E  ECA8  F01A         	call	_DS3231_Turn_Off_Alarm	;wreg free
  2816                           
  2817                           ;Main.c: 114: DS3231_Read_Alarm_Time();
  2818  000D22  EC4A  F01B         	call	_DS3231_Read_Alarm_Time	;wreg free
  2819                           
  2820                           ;Main.c: 115: test_alarm();
  2821  000D26  EC9F  F00C         	call	_test_alarm	;wreg free
  2822                           
  2823                           ;Main.c: 117: tempSecond = 0xFF;
  2824  000D2A  0100               	movlb	0	; () banked
  2825  000D2C  6980               	setf	_tempSecond& (0+255),b
  2826  000D2E                     l1417:
  2827                           
  2828                           ; BSR set to: 0
  2829                           ;Main.c: 119: DS3231_Read_Time();
  2830  000D2E  EC0B  F019         	call	_DS3231_Read_Time	;wreg free
  2831                           
  2832                           ;Main.c: 121: if (tempSecond != second){
  2833  000D32  5062               	movf	_second,w,c
  2834  000D34  0100               	movlb	0	; () banked
  2835  000D36  1980               	xorwf	_tempSecond& (0+255),w,b
  2836  000D38  B4D8               	btfsc	status,2,c
  2837  000D3A  D080               	goto	l10880
  2838                           
  2839                           ; BSR set to: 0
  2840                           ;Main.c: 122: tempSecond = second;
  2841  000D3C  C062  F080         	movff	_second,_tempSecond
  2842                           
  2843                           ; BSR set to: 0
  2844                           ;Main.c: 123: rpm = (int)get_RPM();
  2845  000D40  EC29  F01A         	call	_get_RPM	;wreg free
  2846  000D44  C02C  F03B         	movff	?_get_RPM,___fttol@f1
  2847  000D48  C02D  F03C         	movff	?_get_RPM+1,___fttol@f1+1
  2848  000D4C  C02E  F03D         	movff	?_get_RPM+2,___fttol@f1+2
  2849  000D50  EC8A  F00E         	call	___fttol	;wreg free
  2850  000D54  C03B  F050         	movff	?___fttol,_rpm
  2851  000D58  C03C  F051         	movff	?___fttol+1,_rpm+1
  2852                           
  2853                           ;Main.c: 124: volt = read_volt();
  2854  000D5C  EC3E  F019         	call	_read_volt	;wreg free
  2855  000D60  C03B  F0DE         	movff	?_read_volt,_volt
  2856  000D64  C03C  F0DF         	movff	?_read_volt+1,_volt+1
  2857  000D68  C03D  F0E0         	movff	?_read_volt+2,_volt+2
  2858                           
  2859                           ;Main.c: 125: DS1621_tempC = DS1621_Read_Temp();
  2860  000D6C  ECA0  F01C         	call	_DS1621_Read_Temp	;wreg free
  2861  000D70  C014  F04A         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2862  000D74  C015  F04B         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2863                           
  2864                           ;Main.c: 126: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2865  000D78  C04A  F011         	movff	_DS1621_tempC,___wmul@multiplier
  2866  000D7C  C04B  F012         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2867  000D80  0E00               	movlw	0
  2868  000D82  6E14               	movwf	___wmul@multiplicand+1,c
  2869  000D84  0E09               	movlw	9
  2870  000D86  6E13               	movwf	___wmul@multiplicand,c
  2871  000D88  EC32  F01D         	call	___wmul	;wreg free
  2872  000D8C  C011  F017         	movff	?___wmul,___awdiv@dividend
  2873  000D90  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  2874  000D94  0E00               	movlw	0
  2875  000D96  6E1A               	movwf	___awdiv@divisor+1,c
  2876  000D98  0E05               	movlw	5
  2877  000D9A  6E19               	movwf	___awdiv@divisor,c
  2878  000D9C  EC67  F016         	call	___awdiv	;wreg free
  2879  000DA0  0E20               	movlw	32
  2880  000DA2  2417               	addwf	?___awdiv,w,c
  2881  000DA4  6E4C               	movwf	_DS1621_tempF,c
  2882  000DA6  0E00               	movlw	0
  2883  000DA8  2018               	addwfc	?___awdiv+1,w,c
  2884  000DAA  6E4D               	movwf	_DS1621_tempF+1,c
  2885                           
  2886                           ;Main.c: 128: printf("%02x:%02x:%02x %02x/%02x/%02x", hour, minute, second, month, day, 
      +                          year);
  2887  000DAC  0EB8               	movlw	low STR_42
  2888  000DAE  6E1D               	movwf	printf@f,c
  2889  000DB0  0EFD               	movlw	high STR_42
  2890  000DB2  6E1E               	movwf	printf@f+1,c
  2891  000DB4  C05F  F01F         	movff	_hour,?_printf+2
  2892  000DB8  6A20               	clrf	?_printf+3,c
  2893  000DBA  C060  F021         	movff	_minute,?_printf+4
  2894  000DBE  6A22               	clrf	?_printf+5,c
  2895  000DC0  C062  F023         	movff	_second,?_printf+6
  2896  000DC4  6A24               	clrf	?_printf+7,c
  2897  000DC6  C061  F025         	movff	_month,?_printf+8
  2898  000DCA  6A26               	clrf	?_printf+9,c
  2899  000DCC  C05C  F027         	movff	_day,?_printf+10
  2900  000DD0  6A28               	clrf	?_printf+11,c
  2901  000DD2  C06D  F029         	movff	_year,?_printf+12
  2902  000DD6  6A2A               	clrf	?_printf+13,c
  2903  000DD8  ECDE  F004         	call	_printf	;wreg free
  2904                           
  2905                           ;Main.c: 129: printf(" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2906  000DDC  0E17               	movlw	low STR_43
  2907  000DDE  6E1D               	movwf	printf@f,c
  2908  000DE0  0EFE               	movlw	high STR_43
  2909  000DE2  6E1E               	movwf	printf@f+1,c
  2910  000DE4  C04A  F01F         	movff	_DS1621_tempC,?_printf+2
  2911  000DE8  C04B  F020         	movff	_DS1621_tempC+1,?_printf+3
  2912  000DEC  C04C  F021         	movff	_DS1621_tempF,?_printf+4
  2913  000DF0  C04D  F022         	movff	_DS1621_tempF+1,?_printf+5
  2914  000DF4  ECDE  F004         	call	_printf	;wreg free
  2915                           
  2916                           ;Main.c: 130: printf("alarm = %d match = %d", alarm_mode, MATCHED);
  2917  000DF8  0ED6               	movlw	low STR_44
  2918  000DFA  6E1D               	movwf	printf@f,c
  2919  000DFC  0EFD               	movlw	high STR_44
  2920  000DFE  6E1E               	movwf	printf@f+1,c
  2921  000E00  C0E5  F01F         	movff	_alarm_mode,?_printf+2
  2922  000E04  C0E6  F020         	movff	_alarm_mode+1,?_printf+3
  2923  000E08  C0E1  F021         	movff	_MATCHED,?_printf+4
  2924  000E0C  C0E2  F022         	movff	_MATCHED+1,?_printf+5
  2925  000E10  ECDE  F004         	call	_printf	;wreg free
  2926                           
  2927                           ;Main.c: 131: printf("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  2928  000E14  0E56               	movlw	low STR_45
  2929  000E16  6E1D               	movwf	printf@f,c
  2930  000E18  0EFE               	movlw	high STR_45
  2931  000E1A  6E1E               	movwf	printf@f+1,c
  2932  000E1C  C050  F01F         	movff	_rpm,?_printf+2
  2933  000E20  C051  F020         	movff	_rpm+1,?_printf+3
  2934  000E24  C05D  F021         	movff	_duty_cycle,?_printf+4
  2935  000E28  6A22               	clrf	?_printf+5,c
  2936  000E2A  ECDE  F004         	call	_printf	;wreg free
  2937                           
  2938                           ;Main.c: 133: Monitor_Fan();
  2939  000E2E  ECD1  F01A         	call	_Monitor_Fan	;wreg free
  2940                           
  2941                           ;Main.c: 134: test_alarm();
  2942  000E32  EC9F  F00C         	call	_test_alarm	;wreg free
  2943                           
  2944                           ;Main.c: 135: Update_Screen();
  2945  000E36  EC0E  F000         	call	_Update_Screen	;wreg free
  2946  000E3A  D000               	goto	l10880
  2947  000E3C                     l10880:
  2948                           
  2949                           ;Main.c: 136: }
  2950                           ;Main.c: 137: printf("end of second");
  2951  000E3C  0E43               	movlw	low STR_46
  2952  000E3E  6E1D               	movwf	printf@f,c
  2953  000E40  0EFF               	movlw	high STR_46
  2954  000E42  6E1E               	movwf	printf@f+1,c
  2955  000E44  ECDE  F004         	call	_printf	;wreg free
  2956                           
  2957                           ;Main.c: 138: if (check_for_button_input() == 1){
  2958  000E48  ECCD  F015         	call	_check_for_button_input	;wreg free
  2959  000E4C  06E8               	decf	wreg,f,c
  2960  000E4E  A4D8               	btfss	status,2,c
  2961  000E50  D045               	goto	l10916
  2962                           
  2963                           ;Main.c: 140: printf("Button registered \r\n");
  2964  000E52  0E02               	movlw	low STR_47
  2965  000E54  6E1D               	movwf	printf@f,c
  2966  000E56  0EFE               	movlw	high STR_47
  2967  000E58  6E1E               	movwf	printf@f+1,c
  2968  000E5A  ECDE  F004         	call	_printf	;wreg free
  2969                           
  2970                           ;Main.c: 141: switch (found){
  2971  000E5E  D02F               	goto	l10914
  2972  000E60                     l10886:
  2973                           
  2974                           ;Main.c: 144: printf("Setup Time Key \r\n");
  2975  000E60  0EDC               	movlw	low STR_48
  2976  000E62  6E1D               	movwf	printf@f,c
  2977  000E64  0EFE               	movlw	high STR_48
  2978  000E66  6E1E               	movwf	printf@f+1,c
  2979  000E68  ECDE  F004         	call	_printf	;wreg free
  2980                           
  2981                           ;Main.c: 145: Do_Beep_Good();
  2982  000E6C  EC25  F01E         	call	_Do_Beep_Good	;wreg free
  2983                           
  2984                           ;Main.c: 146: Do_Setup_Time();
  2985  000E70  EC13  F011         	call	_Do_Setup_Time	;wreg free
  2986                           
  2987                           ;Main.c: 147: break;
  2988  000E74  D033               	goto	l10916
  2989  000E76                     l10892:
  2990                           
  2991                           ;Main.c: 150: printf("Setup Alarm Key \r\n");
  2992  000E76  0E7E               	movlw	low STR_49
  2993  000E78  6E1D               	movwf	printf@f,c
  2994  000E7A  0EFE               	movlw	high STR_49
  2995  000E7C  6E1E               	movwf	printf@f+1,c
  2996  000E7E  ECDE  F004         	call	_printf	;wreg free
  2997                           
  2998                           ;Main.c: 151: Do_Beep_Good();
  2999  000E82  EC25  F01E         	call	_Do_Beep_Good	;wreg free
  3000                           
  3001                           ;Main.c: 152: Do_Setup_Alarm_Time();
  3002  000E86  EC69  F012         	call	_Do_Setup_Alarm_Time	;wreg free
  3003                           
  3004                           ;Main.c: 153: break;
  3005  000E8A  D028               	goto	l10916
  3006  000E8C                     l10898:
  3007                           
  3008                           ;Main.c: 156: printf("Setup Fan Temp \r\n");
  3009  000E8C  0ECA               	movlw	low STR_50
  3010  000E8E  6E1D               	movwf	printf@f,c
  3011  000E90  0EFE               	movlw	high STR_50
  3012  000E92  6E1E               	movwf	printf@f+1,c
  3013  000E94  ECDE  F004         	call	_printf	;wreg free
  3014                           
  3015                           ;Main.c: 157: Do_Beep_Good();
  3016  000E98  EC25  F01E         	call	_Do_Beep_Good	;wreg free
  3017                           
  3018                           ;Main.c: 158: Setup_Temp_Fan();
  3019  000E9C  ECB2  F016         	call	_Setup_Temp_Fan	;wreg free
  3020                           
  3021                           ;Main.c: 159: break;
  3022  000EA0  D01D               	goto	l10916
  3023  000EA2                     l10904:
  3024                           
  3025                           ;Main.c: 161: printf("Toggle Fan Key \r\n");
  3026  000EA2  0EEE               	movlw	low STR_51
  3027  000EA4  6E1D               	movwf	printf@f,c
  3028  000EA6  0EFE               	movlw	high STR_51
  3029  000EA8  6E1E               	movwf	printf@f+1,c
  3030  000EAA  ECDE  F004         	call	_printf	;wreg free
  3031                           
  3032                           ;Main.c: 162: Do_Beep_Good();
  3033  000EAE  EC25  F01E         	call	_Do_Beep_Good	;wreg free
  3034                           
  3035                           ;Main.c: 163: Toggle_Fan_Monitor();
  3036  000EB2  EC48  F01E         	call	_Toggle_Fan_Monitor	;wreg free
  3037                           
  3038                           ;Main.c: 164: break;
  3039  000EB6  D012               	goto	l10916
  3040  000EB8                     l10910:
  3041                           
  3042                           ;Main.c: 166: Do_Beep_Bad();
  3043  000EB8  EC31  F01E         	call	_Do_Beep_Bad	;wreg free
  3044                           
  3045                           ;Main.c: 168: }
  3046                           
  3047                           ;Main.c: 167: break;
  3048  000EBC  D00F               	goto	l10916
  3049  000EBE                     l10914:
  3050  000EBE  505E               	movf	_found,w,c
  3051                           
  3052                           ; Switch size 1, requested type "space"
  3053                           ; Number of cases is 4, Range of values is 5 to 14
  3054                           ; switch strategies available:
  3055                           ; Name         Instructions Cycles
  3056                           ; simple_byte           13     7 (average)
  3057                           ;	Chosen strategy is simple_byte
  3058  000EC0  0A05               	xorlw	5	; case 5
  3059  000EC2  B4D8               	btfsc	status,2,c
  3060  000EC4  D7EE               	goto	l10904
  3061  000EC6  0A09               	xorlw	9	; case 12
  3062  000EC8  B4D8               	btfsc	status,2,c
  3063  000ECA  D7CA               	goto	l10886
  3064  000ECC  0A01               	xorlw	1	; case 13
  3065  000ECE  B4D8               	btfsc	status,2,c
  3066  000ED0  D7D2               	goto	l10892
  3067  000ED2  0A03               	xorlw	3	; case 14
  3068  000ED4  B4D8               	btfsc	status,2,c
  3069  000ED6  D7DA               	goto	l10898
  3070  000ED8  D7EF               	goto	l10910
  3071  000EDA  D000               	goto	l10916
  3072  000EDC                     l10916:
  3073                           
  3074                           ;Main.c: 169: }
  3075                           ;Main.c: 170: if (INT1_flag==1){
  3076  000EDC  0100               	movlb	0	; () banked
  3077  000EDE  05F2               	decf	_INT1_flag& (0+255),w,b
  3078  000EE0  A4D8               	btfss	status,2,c
  3079  000EE2  D006               	goto	l10922
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;Main.c: 171: INT1_flag=0;
  3083  000EE4  0E00               	movlw	0
  3084  000EE6  0100               	movlb	0	; () banked
  3085  000EE8  6FF2               	movwf	_INT1_flag& (0+255),b
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;Main.c: 172: Toggle_Fan();
  3089  000EEA  EC52  F01E         	call	_Toggle_Fan	;wreg free
  3090  000EEE  D000               	goto	l10922
  3091  000EF0                     l10922:
  3092                           
  3093                           ;Main.c: 174: }
  3094                           ;Main.c: 175: if (INT2_flag==1){
  3095  000EF0  0100               	movlb	0	; () banked
  3096  000EF2  05F3               	decf	_INT2_flag& (0+255),w,b
  3097  000EF4  A4D8               	btfss	status,2,c
  3098  000EF6  D71B               	goto	l1417
  3099                           
  3100                           ; BSR set to: 0
  3101                           ;Main.c: 176: INT2_flag=0;
  3102  000EF8  0E00               	movlw	0
  3103  000EFA  0100               	movlb	0	; () banked
  3104  000EFC  6FF3               	movwf	_INT2_flag& (0+255),b
  3105                           
  3106                           ; BSR set to: 0
  3107                           ;Main.c: 177: if (ALARMEN==0) ALARMEN=1;
  3108  000EFE  5048               	movf	_ALARMEN,w,c
  3109  000F00  1049               	iorwf	_ALARMEN+1,w,c
  3110  000F02  A4D8               	btfss	status,2,c
  3111  000F04  D004               	goto	l10930
  3112                           
  3113                           ; BSR set to: 0
  3114  000F06  0E00               	movlw	0
  3115  000F08  6E49               	movwf	_ALARMEN+1,c
  3116  000F0A  0E01               	movlw	1
  3117  000F0C  D003               	goto	L1
  3118  000F0E                     l10930:
  3119                           
  3120                           ; BSR set to: 0
  3121                           ;Main.c: 178: else ALARMEN=0;
  3122  000F0E  0E00               	movlw	0
  3123  000F10  6E49               	movwf	_ALARMEN+1,c
  3124  000F12  0E00               	movlw	0
  3125  000F14                     L1:
  3126  000F14  6E48               	movwf	_ALARMEN,c
  3127                           
  3128                           ; BSR set to: 0
  3129                           
  3130                           ; BSR set to: 0
  3131                           
  3132                           ; BSR set to: 0
  3133  000F16  D70B               	goto	l1417
  3134                           
  3135                           ; BSR set to: 0
  3136                           
  3137                           ; BSR set to: 0
  3138  000F18  EF0C  F000         	goto	start
  3139  000F1C                     __end_of_main:
  3140                           	opt stack 0
  3141                           tblptru	equ	0xFF8
  3142                           tblptrh	equ	0xFF7
  3143                           tblptrl	equ	0xFF6
  3144                           tablat	equ	0xFF5
  3145                           postinc0	equ	0xFEE
  3146                           wreg	equ	0xFE8
  3147                           postdec1	equ	0xFE5
  3148                           fsr1l	equ	0xFE1
  3149                           status	equ	0xFD8
  3150                           
  3151 ;; *************** function _test_alarm *****************
  3152 ;; Defined at:
  3153 ;;		line 183 in file "Main.c"
  3154 ;; Parameters:    Size  Location     Type
  3155 ;;		None
  3156 ;; Auto vars:     Size  Location     Type
  3157 ;;  num             2   58[COMRAM] int 
  3158 ;; Return value:  Size  Location     Type
  3159 ;;		None               void
  3160 ;; Registers used:
  3161 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3162 ;; Tracked objects:
  3163 ;;		On entry : 0/0
  3164 ;;		On exit  : 0/0
  3165 ;;		Unchanged: 0/0
  3166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3168 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3169 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3170 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3171 ;;Total ram usage:        4 bytes
  3172 ;; Hardware stack levels used:    1
  3173 ;; Hardware stack levels required when called:    9
  3174 ;; This function calls:
  3175 ;;		_Activate_Buzzer
  3176 ;;		_DS3231_Turn_Off_Alarm
  3177 ;;		_DS3231_Turn_On_Alarm
  3178 ;;		_Deactivate_Buzzer
  3179 ;;		_Wait_One_Sec
  3180 ;;		___ftge
  3181 ;;		_printf
  3182 ;; This function is called by:
  3183 ;;		_main
  3184 ;; This function uses a non-reentrant model
  3185 ;;
  3186                           
  3187                           	psect	text1
  3188  00193E                     __ptext1:
  3189                           	opt stack 0
  3190  00193E                     _test_alarm:
  3191                           	opt stack 21
  3192                           
  3193                           ;Main.c: 190: if (alarm_mode == 0 && ALARMEN == 1){
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;incstack = 0
  3197  00193E  0100               	movlb	0	; () banked
  3198  001940  51E5               	movf	_alarm_mode& (0+255),w,b
  3199  001942  0100               	movlb	0	; () banked
  3200  001944  11E6               	iorwf	(_alarm_mode+1)& (0+255),w,b
  3201  001946  A4D8               	btfss	status,2,c
  3202  001948  D012               	goto	l10424
  3203                           
  3204                           ; BSR set to: 0
  3205  00194A  0448               	decf	_ALARMEN,w,c
  3206  00194C  1049               	iorwf	_ALARMEN+1,w,c
  3207  00194E  A4D8               	btfss	status,2,c
  3208  001950  D00E               	goto	l10424
  3209                           
  3210                           ; BSR set to: 0
  3211                           ;Main.c: 191: DS3231_Turn_On_Alarm();
  3212  001952  EC7F  F01A         	call	_DS3231_Turn_On_Alarm	;wreg free
  3213                           
  3214                           ;Main.c: 192: alarm_mode = 1;
  3215  001956  0E00               	movlw	0
  3216  001958  0100               	movlb	0	; () banked
  3217  00195A  6FE6               	movwf	(_alarm_mode+1)& (0+255),b
  3218  00195C  0E01               	movlw	1
  3219  00195E  6FE5               	movwf	_alarm_mode& (0+255),b
  3220                           
  3221                           ; BSR set to: 0
  3222                           ;Main.c: 193: printf("1");
  3223  001960  0EF6               	movlw	low STR_52
  3224  001962  6E1D               	movwf	printf@f,c
  3225  001964  0EFF               	movlw	high STR_52
  3226  001966  6E1E               	movwf	printf@f+1,c
  3227  001968  ECDE  F004         	call	_printf	;wreg free
  3228  00196C  D000               	goto	l10424
  3229  00196E                     l10424:
  3230                           
  3231                           ;Main.c: 194: }
  3232                           ;Main.c: 195: if (alarm_mode == 1 && ALARMEN == 0){
  3233  00196E  0100               	movlb	0	; () banked
  3234  001970  05E5               	decf	_alarm_mode& (0+255),w,b
  3235  001972  0100               	movlb	0	; () banked
  3236  001974  11E6               	iorwf	(_alarm_mode+1)& (0+255),w,b
  3237  001976  A4D8               	btfss	status,2,c
  3238  001978  D019               	goto	l10444
  3239                           
  3240                           ; BSR set to: 0
  3241  00197A  5048               	movf	_ALARMEN,w,c
  3242  00197C  1049               	iorwf	_ALARMEN+1,w,c
  3243  00197E  A4D8               	btfss	status,2,c
  3244  001980  D015               	goto	l10444
  3245                           
  3246                           ; BSR set to: 0
  3247                           ;Main.c: 196: DS3231_Turn_Off_Alarm();
  3248  001982  ECA8  F01A         	call	_DS3231_Turn_Off_Alarm	;wreg free
  3249                           
  3250                           ;Main.c: 197: Deactivate_Buzzer();
  3251  001986  EC48  F01F         	call	_Deactivate_Buzzer	;wreg free
  3252                           
  3253                           ;Main.c: 198: alarm_mode=0;
  3254  00198A  0E00               	movlw	0
  3255  00198C  0100               	movlb	0	; () banked
  3256  00198E  6FE6               	movwf	(_alarm_mode+1)& (0+255),b
  3257  001990  0E00               	movlw	0
  3258  001992  6FE5               	movwf	_alarm_mode& (0+255),b
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;Main.c: 199: PORTE=0x00;
  3262  001994  0E00               	movlw	0
  3263  001996  6E84               	movwf	3972,c	;volatile
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;Main.c: 200: PORTBbits.RB3=0;
  3267  001998  9681               	bcf	3969,3,c	;volatile
  3268                           
  3269                           ; BSR set to: 0
  3270                           ;Main.c: 201: PORTBbits.RB4=0;
  3271  00199A  9881               	bcf	3969,4,c	;volatile
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;Main.c: 202: PORTBbits.RB5=0;
  3275  00199C  9A81               	bcf	3969,5,c	;volatile
  3276                           
  3277                           ; BSR set to: 0
  3278                           ;Main.c: 203: printf("2");
  3279  00199E  0EF8               	movlw	low STR_53
  3280  0019A0  6E1D               	movwf	printf@f,c
  3281  0019A2  0EFF               	movlw	high STR_53
  3282  0019A4  6E1E               	movwf	printf@f+1,c
  3283  0019A6  ECDE  F004         	call	_printf	;wreg free
  3284  0019AA  D000               	goto	l10444
  3285  0019AC                     l10444:
  3286                           
  3287                           ;Main.c: 204: }
  3288                           ;Main.c: 205: if (alarm_mode == 1 && ALARMEN == 1){
  3289  0019AC  0100               	movlb	0	; () banked
  3290  0019AE  05E5               	decf	_alarm_mode& (0+255),w,b
  3291  0019B0  0100               	movlb	0	; () banked
  3292  0019B2  11E6               	iorwf	(_alarm_mode+1)& (0+255),w,b
  3293  0019B4  A4D8               	btfss	status,2,c
  3294  0019B6  D07A               	goto	l1443
  3295                           
  3296                           ; BSR set to: 0
  3297  0019B8  0448               	decf	_ALARMEN,w,c
  3298  0019BA  1049               	iorwf	_ALARMEN+1,w,c
  3299  0019BC  B4D8               	btfsc	status,2,c
  3300                           
  3301                           ; BSR set to: 0
  3302                           ;Main.c: 206: if (!PORTDbits.RD5){
  3303  0019BE  BA83               	btfsc	3971,5,c	;volatile
  3304  0019C0  D075               	goto	l1443
  3305                           
  3306                           ; BSR set to: 0
  3307                           ;Main.c: 209: Activate_Buzzer();
  3308  0019C2  EC98  F01E         	call	_Activate_Buzzer	;wreg free
  3309                           
  3310                           ;Main.c: 210: if (volt <= 3.0){
  3311  0019C6  0E00               	movlw	0
  3312  0019C8  6E11               	movwf	___ftge@ff1,c
  3313  0019CA  0E40               	movlw	64
  3314  0019CC  6E12               	movwf	___ftge@ff1+1,c
  3315  0019CE  0E40               	movlw	64
  3316  0019D0  6E13               	movwf	___ftge@ff1+2,c
  3317  0019D2  C0DE  F014         	movff	_volt,___ftge@ff2
  3318  0019D6  C0DF  F015         	movff	_volt+1,___ftge@ff2+1
  3319  0019DA  C0E0  F016         	movff	_volt+2,___ftge@ff2+2
  3320  0019DE  EC1C  F016         	call	___ftge	;wreg free
  3321  0019E2  A0D8               	btfss	status,0,c
  3322  0019E4  D039               	goto	l10474
  3323                           
  3324                           ;Main.c: 211: MATCHED=1;
  3325  0019E6  0E00               	movlw	0
  3326  0019E8  0100               	movlb	0	; () banked
  3327  0019EA  6FE2               	movwf	(_MATCHED+1)& (0+255),b
  3328  0019EC  0E01               	movlw	1
  3329  0019EE  6FE1               	movwf	_MATCHED& (0+255),b
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;Main.c: 212: int num = glob_RGB;
  3333  0019F0  C0E9  F03B         	movff	_glob_RGB,test_alarm@num
  3334  0019F4  C0EA  F03C         	movff	_glob_RGB+1,test_alarm@num+1
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;Main.c: 213: PORTB = PORTB & 0x07;
  3338  0019F8  5081               	movf	3969,w,c	;volatile
  3339  0019FA  0B07               	andlw	7
  3340  0019FC  6E81               	movwf	3969,c	;volatile
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;Main.c: 214: num = num << 3;
  3344  0019FE  C03B  F039         	movff	test_alarm@num,??_test_alarm
  3345  001A02  C03C  F03A         	movff	test_alarm@num+1,??_test_alarm+1
  3346  001A06  90D8               	bcf	status,0,c
  3347  001A08  3639               	rlcf	??_test_alarm,f,c
  3348  001A0A  363A               	rlcf	??_test_alarm+1,f,c
  3349  001A0C  90D8               	bcf	status,0,c
  3350  001A0E  3639               	rlcf	??_test_alarm,f,c
  3351  001A10  363A               	rlcf	??_test_alarm+1,f,c
  3352  001A12  90D8               	bcf	status,0,c
  3353  001A14  3639               	rlcf	??_test_alarm,f,c
  3354  001A16  363A               	rlcf	??_test_alarm+1,f,c
  3355  001A18  C039  F03B         	movff	??_test_alarm,test_alarm@num
  3356  001A1C  C03A  F03C         	movff	??_test_alarm+1,test_alarm@num+1
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;Main.c: 215: PORTB = PORTB | num;
  3360  001A20  5081               	movf	3969,w,c	;volatile
  3361  001A22  103B               	iorwf	test_alarm@num,w,c
  3362  001A24  6E81               	movwf	3969,c	;volatile
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;Main.c: 216: Wait_One_Sec();
  3366  001A26  EC9F  F01D         	call	_Wait_One_Sec	;wreg free
  3367                           
  3368                           ;Main.c: 217: glob_RGB++;
  3369  001A2A  0100               	movlb	0	; () banked
  3370  001A2C  4BE9               	infsnz	_glob_RGB& (0+255),f,b
  3371  001A2E  2BEA               	incf	(_glob_RGB+1)& (0+255),f,b
  3372                           
  3373                           ; BSR set to: 0
  3374                           ;Main.c: 218: if(glob_RGB==8){
  3375  001A30  0E08               	movlw	8
  3376  001A32  0100               	movlb	0	; () banked
  3377  001A34  19E9               	xorwf	_glob_RGB& (0+255),w,b
  3378  001A36  0100               	movlb	0	; () banked
  3379  001A38  11EA               	iorwf	(_glob_RGB+1)& (0+255),w,b
  3380  001A3A  A4D8               	btfss	status,2,c
  3381  001A3C  D006               	goto	l10472
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;Main.c: 219: glob_RGB=0;
  3385  001A3E  0E00               	movlw	0
  3386  001A40  0100               	movlb	0	; () banked
  3387  001A42  6FEA               	movwf	(_glob_RGB+1)& (0+255),b
  3388  001A44  0E00               	movlw	0
  3389  001A46  6FE9               	movwf	_glob_RGB& (0+255),b
  3390  001A48  D000               	goto	l10472
  3391  001A4A                     l10472:
  3392                           
  3393                           ; BSR set to: 0
  3394                           ;Main.c: 220: }
  3395                           ;Main.c: 221: printf("3");
  3396  001A4A  0EFA               	movlw	low STR_54
  3397  001A4C  6E1D               	movwf	printf@f,c
  3398  001A4E  0EFF               	movlw	high STR_54
  3399  001A50  6E1E               	movwf	printf@f+1,c
  3400  001A52  ECDE  F004         	call	_printf	;wreg free
  3401  001A56  D000               	goto	l10474
  3402  001A58                     l10474:
  3403                           
  3404                           ;Main.c: 222: }
  3405                           ;Main.c: 224: if (volt > 3.0){
  3406  001A58  0E00               	movlw	0
  3407  001A5A  6E11               	movwf	___ftge@ff1,c
  3408  001A5C  0E40               	movlw	64
  3409  001A5E  6E12               	movwf	___ftge@ff1+1,c
  3410  001A60  0E40               	movlw	64
  3411  001A62  6E13               	movwf	___ftge@ff1+2,c
  3412  001A64  C0DE  F014         	movff	_volt,___ftge@ff2
  3413  001A68  C0DF  F015         	movff	_volt+1,___ftge@ff2+1
  3414  001A6C  C0E0  F016         	movff	_volt+2,___ftge@ff2+2
  3415  001A70  EC1C  F016         	call	___ftge	;wreg free
  3416  001A74  B0D8               	btfsc	status,0,c
  3417  001A76  D01A               	goto	l1443
  3418                           
  3419                           ;Main.c: 225: MATCHED=0;
  3420  001A78  0E00               	movlw	0
  3421  001A7A  0100               	movlb	0	; () banked
  3422  001A7C  6FE2               	movwf	(_MATCHED+1)& (0+255),b
  3423  001A7E  0E00               	movlw	0
  3424  001A80  6FE1               	movwf	_MATCHED& (0+255),b
  3425                           
  3426                           ;Main.c: 226: ALARMEN=1;
  3427  001A82  0E00               	movlw	0
  3428  001A84  6E49               	movwf	_ALARMEN+1,c
  3429  001A86  0E01               	movlw	1
  3430  001A88  6E48               	movwf	_ALARMEN,c
  3431                           
  3432                           ;Main.c: 227: alarm_mode=0;
  3433  001A8A  0E00               	movlw	0
  3434  001A8C  0100               	movlb	0	; () banked
  3435  001A8E  6FE6               	movwf	(_alarm_mode+1)& (0+255),b
  3436  001A90  0E00               	movlw	0
  3437  001A92  6FE5               	movwf	_alarm_mode& (0+255),b
  3438                           
  3439                           ; BSR set to: 0
  3440                           ;Main.c: 228: Deactivate_Buzzer();
  3441  001A94  EC48  F01F         	call	_Deactivate_Buzzer	;wreg free
  3442                           
  3443                           ;Main.c: 229: PORTBbits.RB3=0;
  3444  001A98  9681               	bcf	3969,3,c	;volatile
  3445                           
  3446                           ;Main.c: 230: PORTBbits.RB4=0;
  3447  001A9A  9881               	bcf	3969,4,c	;volatile
  3448                           
  3449                           ;Main.c: 231: PORTBbits.RB5=0;
  3450  001A9C  9A81               	bcf	3969,5,c	;volatile
  3451                           
  3452                           ;Main.c: 232: printf("4");
  3453  001A9E  0EFC               	movlw	low STR_55
  3454  001AA0  6E1D               	movwf	printf@f,c
  3455  001AA2  0EFF               	movlw	high STR_55
  3456  001AA4  6E1E               	movwf	printf@f+1,c
  3457  001AA6  ECDE  F004         	call	_printf	;wreg free
  3458  001AAA  D000               	goto	l1443
  3459  001AAC                     l1443:
  3460  001AAC  0012               	return		;funcret
  3461  001AAE                     __end_of_test_alarm:
  3462                           	opt stack 0
  3463                           tblptru	equ	0xFF8
  3464                           tblptrh	equ	0xFF7
  3465                           tblptrl	equ	0xFF6
  3466                           tablat	equ	0xFF5
  3467                           postinc0	equ	0xFEE
  3468                           wreg	equ	0xFE8
  3469                           postdec1	equ	0xFE5
  3470                           fsr1l	equ	0xFE1
  3471                           status	equ	0xFD8
  3472                           
  3473 ;; *************** function ___ftge *****************
  3474 ;; Defined at:
  3475 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  3476 ;; Parameters:    Size  Location     Type
  3477 ;;  ff1             3   16[COMRAM] float 
  3478 ;;  ff2             3   19[COMRAM] float 
  3479 ;; Auto vars:     Size  Location     Type
  3480 ;;		None
  3481 ;; Return value:  Size  Location     Type
  3482 ;;		None               void
  3483 ;; Registers used:
  3484 ;;		wreg, status,2, status,0
  3485 ;; Tracked objects:
  3486 ;;		On entry : 0/0
  3487 ;;		On exit  : 0/0
  3488 ;;		Unchanged: 0/0
  3489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3490 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3492 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3493 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3494 ;;Total ram usage:        9 bytes
  3495 ;; Hardware stack levels used:    1
  3496 ;; Hardware stack levels required when called:    3
  3497 ;; This function calls:
  3498 ;;		Nothing
  3499 ;; This function is called by:
  3500 ;;		_test_alarm
  3501 ;; This function uses a non-reentrant model
  3502 ;;
  3503                           
  3504                           	psect	text2
  3505  002C38                     __ptext2:
  3506                           	opt stack 0
  3507  002C38                     ___ftge:
  3508                           	opt stack 26
  3509                           
  3510                           ;incstack = 0
  3511  002C38  AE13               	btfss	___ftge@ff1+2,7,c
  3512  002C3A  D017               	goto	l7062
  3513  002C3C  C011  F017         	movff	___ftge@ff1,??___ftge
  3514  002C40  C012  F018         	movff	___ftge@ff1+1,??___ftge+1
  3515  002C44  C013  F019         	movff	___ftge@ff1+2,??___ftge+2
  3516  002C48  1E17               	comf	??___ftge,f,c
  3517  002C4A  1E18               	comf	??___ftge+1,f,c
  3518  002C4C  1E19               	comf	??___ftge+2,f,c
  3519  002C4E  2A17               	incf	??___ftge,f,c
  3520  002C50  0E00               	movlw	0
  3521  002C52  2218               	addwfc	??___ftge+1,f,c
  3522  002C54  2219               	addwfc	??___ftge+2,f,c
  3523  002C56  0E00               	movlw	0
  3524  002C58  2417               	addwf	??___ftge,w,c
  3525  002C5A  6E11               	movwf	___ftge@ff1,c
  3526  002C5C  0E00               	movlw	0
  3527  002C5E  2018               	addwfc	??___ftge+1,w,c
  3528  002C60  6E12               	movwf	___ftge@ff1+1,c
  3529  002C62  0E80               	movlw	128
  3530  002C64  2019               	addwfc	??___ftge+2,w,c
  3531  002C66  6E13               	movwf	___ftge@ff1+2,c
  3532  002C68  D000               	goto	l7062
  3533  002C6A                     l7062:
  3534  002C6A  AE16               	btfss	___ftge@ff2+2,7,c
  3535  002C6C  D017               	goto	l7066
  3536  002C6E  C014  F017         	movff	___ftge@ff2,??___ftge
  3537  002C72  C015  F018         	movff	___ftge@ff2+1,??___ftge+1
  3538  002C76  C016  F019         	movff	___ftge@ff2+2,??___ftge+2
  3539  002C7A  1E17               	comf	??___ftge,f,c
  3540  002C7C  1E18               	comf	??___ftge+1,f,c
  3541  002C7E  1E19               	comf	??___ftge+2,f,c
  3542  002C80  2A17               	incf	??___ftge,f,c
  3543  002C82  0E00               	movlw	0
  3544  002C84  2218               	addwfc	??___ftge+1,f,c
  3545  002C86  2219               	addwfc	??___ftge+2,f,c
  3546  002C88  0E00               	movlw	0
  3547  002C8A  2417               	addwf	??___ftge,w,c
  3548  002C8C  6E14               	movwf	___ftge@ff2,c
  3549  002C8E  0E00               	movlw	0
  3550  002C90  2018               	addwfc	??___ftge+1,w,c
  3551  002C92  6E15               	movwf	___ftge@ff2+1,c
  3552  002C94  0E80               	movlw	128
  3553  002C96  2019               	addwfc	??___ftge+2,w,c
  3554  002C98  6E16               	movwf	___ftge@ff2+2,c
  3555  002C9A  D000               	goto	l7066
  3556  002C9C                     l7066:
  3557  002C9C  0E00               	movlw	0
  3558  002C9E  1A11               	xorwf	___ftge@ff1,f,c
  3559  002CA0  0E00               	movlw	0
  3560  002CA2  1A12               	xorwf	___ftge@ff1+1,f,c
  3561  002CA4  0E80               	movlw	128
  3562  002CA6  1A13               	xorwf	___ftge@ff1+2,f,c
  3563  002CA8  0E00               	movlw	0
  3564  002CAA  1A14               	xorwf	___ftge@ff2,f,c
  3565  002CAC  0E00               	movlw	0
  3566  002CAE  1A15               	xorwf	___ftge@ff2+1,f,c
  3567  002CB0  0E80               	movlw	128
  3568  002CB2  1A16               	xorwf	___ftge@ff2+2,f,c
  3569  002CB4  5014               	movf	___ftge@ff2,w,c
  3570  002CB6  5C11               	subwf	___ftge@ff1,w,c
  3571  002CB8  5015               	movf	___ftge@ff2+1,w,c
  3572  002CBA  5812               	subwfb	___ftge@ff1+1,w,c
  3573  002CBC  5016               	movf	___ftge@ff2+2,w,c
  3574  002CBE  5813               	subwfb	___ftge@ff1+2,w,c
  3575  002CC0  B0D8               	btfsc	status,0,c
  3576  002CC2  D002               	goto	l7072
  3577  002CC4  90D8               	bcf	status,0,c
  3578  002CC6  D002               	goto	l1937
  3579  002CC8                     l7072:
  3580  002CC8  80D8               	bsf	status,0,c
  3581  002CCA  D000               	goto	l1937
  3582  002CCC                     l1937:
  3583  002CCC  0012               	return		;funcret
  3584  002CCE                     __end_of___ftge:
  3585                           	opt stack 0
  3586                           tblptru	equ	0xFF8
  3587                           tblptrh	equ	0xFF7
  3588                           tblptrl	equ	0xFF6
  3589                           tablat	equ	0xFF5
  3590                           postinc0	equ	0xFEE
  3591                           wreg	equ	0xFE8
  3592                           postdec1	equ	0xFE5
  3593                           fsr1l	equ	0xFE1
  3594                           status	equ	0xFD8
  3595                           
  3596 ;; *************** function _DS3231_Turn_On_Alarm *****************
  3597 ;; Defined at:
  3598 ;;		line 218 in file "I2C_Support.c"
  3599 ;; Parameters:    Size  Location     Type
  3600 ;;		None
  3601 ;; Auto vars:     Size  Location     Type
  3602 ;;  Device          1   30[COMRAM] unsigned char 
  3603 ;;  control_F       1   29[COMRAM] unsigned char 
  3604 ;;  control_E       1   28[COMRAM] unsigned char 
  3605 ;;  Address_F       1   27[COMRAM] unsigned char 
  3606 ;;  Address_E       1   26[COMRAM] unsigned char 
  3607 ;; Return value:  Size  Location     Type
  3608 ;;		None               void
  3609 ;; Registers used:
  3610 ;;		wreg, status,2, status,0, cstack
  3611 ;; Tracked objects:
  3612 ;;		On entry : 0/0
  3613 ;;		On exit  : 0/0
  3614 ;;		Unchanged: 0/0
  3615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3617 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3619 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3620 ;;Total ram usage:        5 bytes
  3621 ;; Hardware stack levels used:    1
  3622 ;; Hardware stack levels required when called:    8
  3623 ;; This function calls:
  3624 ;;		_DS3231_Init
  3625 ;;		_I2C_Write_Address_Read_One_Byte
  3626 ;;		_I2C_Write_Address_Write_One_Byte
  3627 ;; This function is called by:
  3628 ;;		_test_alarm
  3629 ;; This function uses a non-reentrant model
  3630 ;;
  3631                           
  3632                           	psect	text3
  3633  0034FE                     __ptext3:
  3634                           	opt stack 0
  3635  0034FE                     _DS3231_Turn_On_Alarm:
  3636                           	opt stack 21
  3637                           
  3638                           ;I2C_Support.c: 219: char Device = 0x68;
  3639                           
  3640                           ;incstack = 0
  3641  0034FE  0E68               	movlw	104
  3642  003500  6E1F               	movwf	DS3231_Turn_On_Alarm@Device,c
  3643                           
  3644                           ;I2C_Support.c: 220: char Address_E = 0x0E;
  3645  003502  0E0E               	movlw	14
  3646  003504  6E1B               	movwf	DS3231_Turn_On_Alarm@Address_E,c
  3647                           
  3648                           ;I2C_Support.c: 221: char Address_F = 0x0F;
  3649  003506  0E0F               	movlw	15
  3650  003508  6E1C               	movwf	DS3231_Turn_On_Alarm@Address_F,c
  3651                           
  3652                           ;I2C_Support.c: 222: char control_E;
  3653                           ;I2C_Support.c: 223: char control_F;
  3654                           ;I2C_Support.c: 225: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  3655  00350A  C01B  F014         	movff	DS3231_Turn_On_Alarm@Address_E,I2C_Write_Address_Read_One_Byte@Address
  3656  00350E  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  3657  003510  ECBE  F01C         	call	_I2C_Write_Address_Read_One_Byte
  3658  003514  6E1D               	movwf	DS3231_Turn_On_Alarm@control_E,c
  3659                           
  3660                           ;I2C_Support.c: 226: control_E = control_E | 0x01;
  3661  003516  501D               	movf	DS3231_Turn_On_Alarm@control_E,w,c
  3662  003518  0901               	iorlw	1
  3663  00351A  6E1D               	movwf	DS3231_Turn_On_Alarm@control_E,c
  3664                           
  3665                           ;I2C_Support.c: 227: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  3666  00351C  C01B  F013         	movff	DS3231_Turn_On_Alarm@Address_E,I2C_Write_Address_Write_One_Byte@Address
  3667  003520  C01D  F014         	movff	DS3231_Turn_On_Alarm@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  3668  003524  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  3669  003526  EC8F  F01D         	call	_I2C_Write_Address_Write_One_Byte
  3670                           
  3671                           ;I2C_Support.c: 229: control_F = I2C_Write_Address_Read_One_Byte(Device, Address_F);
  3672  00352A  C01C  F014         	movff	DS3231_Turn_On_Alarm@Address_F,I2C_Write_Address_Read_One_Byte@Address
  3673  00352E  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  3674  003530  ECBE  F01C         	call	_I2C_Write_Address_Read_One_Byte
  3675  003534  6E1E               	movwf	DS3231_Turn_On_Alarm@control_F,c
  3676                           
  3677                           ;I2C_Support.c: 230: control_F = control_F & 0xFE;
  3678  003536  501E               	movf	DS3231_Turn_On_Alarm@control_F,w,c
  3679  003538  0BFE               	andlw	254
  3680  00353A  6E1E               	movwf	DS3231_Turn_On_Alarm@control_F,c
  3681                           
  3682                           ;I2C_Support.c: 231: I2C_Write_Address_Write_One_Byte(Device, Address_F, control_F);
  3683  00353C  C01C  F013         	movff	DS3231_Turn_On_Alarm@Address_F,I2C_Write_Address_Write_One_Byte@Address
  3684  003540  C01E  F014         	movff	DS3231_Turn_On_Alarm@control_F,I2C_Write_Address_Write_One_Byte@Data_Out
  3685  003544  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  3686  003546  EC8F  F01D         	call	_I2C_Write_Address_Write_One_Byte
  3687                           
  3688                           ;I2C_Support.c: 232: DS3231_Init();
  3689  00354A  EC73  F014         	call	_DS3231_Init	;wreg free
  3690  00354E  0012               	return		;funcret
  3691  003550                     __end_of_DS3231_Turn_On_Alarm:
  3692                           	opt stack 0
  3693                           tblptru	equ	0xFF8
  3694                           tblptrh	equ	0xFF7
  3695                           tblptrl	equ	0xFF6
  3696                           tablat	equ	0xFF5
  3697                           postinc0	equ	0xFEE
  3698                           wreg	equ	0xFE8
  3699                           postdec1	equ	0xFE5
  3700                           fsr1l	equ	0xFE1
  3701                           status	equ	0xFD8
  3702                           
  3703 ;; *************** function _DS3231_Turn_Off_Alarm *****************
  3704 ;; Defined at:
  3705 ;;		line 202 in file "I2C_Support.c"
  3706 ;; Parameters:    Size  Location     Type
  3707 ;;		None
  3708 ;; Auto vars:     Size  Location     Type
  3709 ;;  Device          1   30[COMRAM] unsigned char 
  3710 ;;  control_F       1   29[COMRAM] unsigned char 
  3711 ;;  control_E       1   28[COMRAM] unsigned char 
  3712 ;;  Address_F       1   27[COMRAM] unsigned char 
  3713 ;;  Address_E       1   26[COMRAM] unsigned char 
  3714 ;; Return value:  Size  Location     Type
  3715 ;;		None               void
  3716 ;; Registers used:
  3717 ;;		wreg, status,2, status,0, cstack
  3718 ;; Tracked objects:
  3719 ;;		On entry : 0/0
  3720 ;;		On exit  : 0/0
  3721 ;;		Unchanged: 0/0
  3722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3724 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3726 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3727 ;;Total ram usage:        5 bytes
  3728 ;; Hardware stack levels used:    1
  3729 ;; Hardware stack levels required when called:    8
  3730 ;; This function calls:
  3731 ;;		_DS3231_Init
  3732 ;;		_I2C_Write_Address_Read_One_Byte
  3733 ;;		_I2C_Write_Address_Write_One_Byte
  3734 ;; This function is called by:
  3735 ;;		_main
  3736 ;;		_test_alarm
  3737 ;; This function uses a non-reentrant model
  3738 ;;
  3739                           
  3740                           	psect	text4
  3741  003550                     __ptext4:
  3742                           	opt stack 0
  3743  003550                     _DS3231_Turn_Off_Alarm:
  3744                           	opt stack 21
  3745                           
  3746                           ;I2C_Support.c: 203: char Device = 0x68;
  3747                           
  3748                           ;incstack = 0
  3749  003550  0E68               	movlw	104
  3750  003552  6E1F               	movwf	DS3231_Turn_Off_Alarm@Device,c
  3751                           
  3752                           ;I2C_Support.c: 204: char Address_E = 0x0E;
  3753  003554  0E0E               	movlw	14
  3754  003556  6E1B               	movwf	DS3231_Turn_Off_Alarm@Address_E,c
  3755                           
  3756                           ;I2C_Support.c: 205: char Address_F = 0x0F;
  3757  003558  0E0F               	movlw	15
  3758  00355A  6E1C               	movwf	DS3231_Turn_Off_Alarm@Address_F,c
  3759                           
  3760                           ;I2C_Support.c: 206: char control_E;
  3761                           ;I2C_Support.c: 207: char control_F;
  3762                           ;I2C_Support.c: 209: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  3763  00355C  C01B  F014         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Read_One_Byte@Address
  3764  003560  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  3765  003562  ECBE  F01C         	call	_I2C_Write_Address_Read_One_Byte
  3766  003566  6E1D               	movwf	DS3231_Turn_Off_Alarm@control_E,c
  3767                           
  3768                           ;I2C_Support.c: 210: control_E = control_E & 0xFE;
  3769  003568  501D               	movf	DS3231_Turn_Off_Alarm@control_E,w,c
  3770  00356A  0BFE               	andlw	254
  3771  00356C  6E1D               	movwf	DS3231_Turn_Off_Alarm@control_E,c
  3772                           
  3773                           ;I2C_Support.c: 211: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  3774  00356E  C01B  F013         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Write_One_Byte@Address
  3775  003572  C01D  F014         	movff	DS3231_Turn_Off_Alarm@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  3776  003576  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  3777  003578  EC8F  F01D         	call	_I2C_Write_Address_Write_One_Byte
  3778                           
  3779                           ;I2C_Support.c: 212: control_F = I2C_Write_Address_Read_One_Byte(Device, Address_F);
  3780  00357C  C01C  F014         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Read_One_Byte@Address
  3781  003580  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  3782  003582  ECBE  F01C         	call	_I2C_Write_Address_Read_One_Byte
  3783  003586  6E1E               	movwf	DS3231_Turn_Off_Alarm@control_F,c
  3784                           
  3785                           ;I2C_Support.c: 213: control_F = control_F & 0xFE;
  3786  003588  501E               	movf	DS3231_Turn_Off_Alarm@control_F,w,c
  3787  00358A  0BFE               	andlw	254
  3788  00358C  6E1E               	movwf	DS3231_Turn_Off_Alarm@control_F,c
  3789                           
  3790                           ;I2C_Support.c: 214: I2C_Write_Address_Write_One_Byte(Device, Address_F, control_F);
  3791  00358E  C01C  F013         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Write_One_Byte@Address
  3792  003592  C01E  F014         	movff	DS3231_Turn_Off_Alarm@control_F,I2C_Write_Address_Write_One_Byte@Data_Out
  3793  003596  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  3794  003598  EC8F  F01D         	call	_I2C_Write_Address_Write_One_Byte
  3795                           
  3796                           ;I2C_Support.c: 215: DS3231_Init();
  3797  00359C  EC73  F014         	call	_DS3231_Init	;wreg free
  3798  0035A0  0012               	return		;funcret
  3799  0035A2                     __end_of_DS3231_Turn_Off_Alarm:
  3800                           	opt stack 0
  3801                           tblptru	equ	0xFF8
  3802                           tblptrh	equ	0xFF7
  3803                           tblptrl	equ	0xFF6
  3804                           tablat	equ	0xFF5
  3805                           postinc0	equ	0xFEE
  3806                           wreg	equ	0xFE8
  3807                           postdec1	equ	0xFE5
  3808                           fsr1l	equ	0xFE1
  3809                           status	equ	0xFD8
  3810                           
  3811 ;; *************** function _DS3231_Init *****************
  3812 ;; Defined at:
  3813 ;;		line 143 in file "I2C_Support.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;		None
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;  Device          1   25[COMRAM] unsigned char 
  3818 ;;  control_E       1   24[COMRAM] unsigned char 
  3819 ;;  Address_E       1   23[COMRAM] unsigned char 
  3820 ;;  Address_7       1   22[COMRAM] unsigned char 
  3821 ;; Return value:  Size  Location     Type
  3822 ;;		None               void
  3823 ;; Registers used:
  3824 ;;		wreg, status,2, status,0, cstack
  3825 ;; Tracked objects:
  3826 ;;		On entry : 0/0
  3827 ;;		On exit  : 0/0
  3828 ;;		Unchanged: 0/0
  3829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3831 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3833 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3834 ;;Total ram usage:        4 bytes
  3835 ;; Hardware stack levels used:    1
  3836 ;; Hardware stack levels required when called:    7
  3837 ;; This function calls:
  3838 ;;		_I2C_ReStart
  3839 ;;		_I2C_Read
  3840 ;;		_I2C_Start
  3841 ;;		_I2C_Stop
  3842 ;;		_I2C_Write
  3843 ;;		_I2C_Write_Address_Read_One_Byte
  3844 ;;		_I2C_Write_Address_Write_One_Byte
  3845 ;; This function is called by:
  3846 ;;		_DS3231_Turn_Off_Alarm
  3847 ;;		_DS3231_Turn_On_Alarm
  3848 ;; This function uses a non-reentrant model
  3849 ;;
  3850                           
  3851                           	psect	text5
  3852  0028E6                     __ptext5:
  3853                           	opt stack 0
  3854  0028E6                     _DS3231_Init:
  3855                           	opt stack 21
  3856                           
  3857                           ;I2C_Support.c: 144: char Device = 0x68;
  3858                           
  3859                           ;incstack = 0
  3860  0028E6  0E68               	movlw	104
  3861  0028E8  6E1A               	movwf	DS3231_Init@Device,c
  3862                           
  3863                           ;I2C_Support.c: 145: char Address_7 = 0x07;
  3864  0028EA  0E07               	movlw	7
  3865  0028EC  6E17               	movwf	DS3231_Init@Address_7,c
  3866                           
  3867                           ;I2C_Support.c: 146: char Address_E = 0x0E;
  3868  0028EE  0E0E               	movlw	14
  3869  0028F0  6E18               	movwf	DS3231_Init@Address_E,c
  3870                           
  3871                           ;I2C_Support.c: 147: char control_E;
  3872                           ;I2C_Support.c: 149: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  3873  0028F2  C018  F014         	movff	DS3231_Init@Address_E,I2C_Write_Address_Read_One_Byte@Address
  3874  0028F6  501A               	movf	DS3231_Init@Device,w,c
  3875  0028F8  ECBE  F01C         	call	_I2C_Write_Address_Read_One_Byte
  3876  0028FC  6E19               	movwf	DS3231_Init@control_E,c
  3877                           
  3878                           ;I2C_Support.c: 150: control_E = control_E & 0x01;
  3879  0028FE  5019               	movf	DS3231_Init@control_E,w,c
  3880  002900  0B01               	andlw	1
  3881  002902  6E19               	movwf	DS3231_Init@control_E,c
  3882                           
  3883                           ;I2C_Support.c: 151: control_E = control_E | 0x25;
  3884  002904  5019               	movf	DS3231_Init@control_E,w,c
  3885  002906  0925               	iorlw	37
  3886  002908  6E19               	movwf	DS3231_Init@control_E,c
  3887                           
  3888                           ;I2C_Support.c: 152: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  3889  00290A  C018  F013         	movff	DS3231_Init@Address_E,I2C_Write_Address_Write_One_Byte@Address
  3890  00290E  C019  F014         	movff	DS3231_Init@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  3891  002912  501A               	movf	DS3231_Init@Device,w,c
  3892  002914  EC8F  F01D         	call	_I2C_Write_Address_Write_One_Byte
  3893                           
  3894                           ;I2C_Support.c: 153: I2C_Start();
  3895  002918  ECC5  F01E         	call	_I2C_Start	;wreg free
  3896                           
  3897                           ;I2C_Support.c: 154: I2C_Write((Device << 1) | 0);
  3898  00291C  501A               	movf	DS3231_Init@Device,w,c
  3899  00291E  241A               	addwf	DS3231_Init@Device,w,c
  3900  002920  EC63  F01C         	call	_I2C_Write
  3901                           
  3902                           ;I2C_Support.c: 155: I2C_Write(Address_7);
  3903  002924  5017               	movf	DS3231_Init@Address_7,w,c
  3904  002926  EC63  F01C         	call	_I2C_Write
  3905                           
  3906                           ;I2C_Support.c: 156: I2C_ReStart();
  3907  00292A  EC3D  F01E         	call	_I2C_ReStart	;wreg free
  3908                           
  3909                           ;I2C_Support.c: 157: I2C_Write((Device << 1) | 1);
  3910  00292E  80D8               	bsf	status,0,c
  3911  002930  341A               	rlcf	DS3231_Init@Device,w,c
  3912  002932  EC63  F01C         	call	_I2C_Write
  3913                           
  3914                           ;I2C_Support.c: 158: alarm_second = I2C_Read(1);
  3915  002936  0E01               	movlw	1
  3916  002938  ECDF  F01B         	call	_I2C_Read
  3917  00293C  6E5B               	movwf	_alarm_second,c
  3918                           
  3919                           ;I2C_Support.c: 159: alarm_minute = I2C_Read(1);
  3920  00293E  0E01               	movlw	1
  3921  002940  ECDF  F01B         	call	_I2C_Read
  3922  002944  6E5A               	movwf	_alarm_minute,c
  3923                           
  3924                           ;I2C_Support.c: 160: alarm_hour = I2C_Read(1);
  3925  002946  0E01               	movlw	1
  3926  002948  ECDF  F01B         	call	_I2C_Read
  3927  00294C  6E59               	movwf	_alarm_hour,c
  3928                           
  3929                           ;I2C_Support.c: 161: alarm_date = I2C_Read(0);
  3930  00294E  0E00               	movlw	0
  3931  002950  ECDF  F01B         	call	_I2C_Read
  3932  002954  6E58               	movwf	_alarm_date,c
  3933                           
  3934                           ;I2C_Support.c: 163: alarm_second = alarm_second & 0x7f;
  3935  002956  505B               	movf	_alarm_second,w,c
  3936  002958  0B7F               	andlw	127
  3937  00295A  6E5B               	movwf	_alarm_second,c
  3938                           
  3939                           ;I2C_Support.c: 164: alarm_minute = alarm_minute & 0x7f;
  3940  00295C  505A               	movf	_alarm_minute,w,c
  3941  00295E  0B7F               	andlw	127
  3942  002960  6E5A               	movwf	_alarm_minute,c
  3943                           
  3944                           ;I2C_Support.c: 165: alarm_hour = alarm_hour & 0x7f;
  3945  002962  5059               	movf	_alarm_hour,w,c
  3946  002964  0B7F               	andlw	127
  3947  002966  6E59               	movwf	_alarm_hour,c
  3948                           
  3949                           ;I2C_Support.c: 166: alarm_date = alarm_date | 0x80;
  3950  002968  5058               	movf	_alarm_date,w,c
  3951  00296A  0980               	iorlw	128
  3952  00296C  6E58               	movwf	_alarm_date,c
  3953                           
  3954                           ;I2C_Support.c: 168: I2C_Start();
  3955  00296E  ECC5  F01E         	call	_I2C_Start	;wreg free
  3956                           
  3957                           ;I2C_Support.c: 169: I2C_Write((Device << 1) | 0);
  3958  002972  501A               	movf	DS3231_Init@Device,w,c
  3959  002974  241A               	addwf	DS3231_Init@Device,w,c
  3960  002976  EC63  F01C         	call	_I2C_Write
  3961                           
  3962                           ;I2C_Support.c: 170: I2C_Write(Address_7);
  3963  00297A  5017               	movf	DS3231_Init@Address_7,w,c
  3964  00297C  EC63  F01C         	call	_I2C_Write
  3965                           
  3966                           ;I2C_Support.c: 172: I2C_Write(alarm_second);
  3967  002980  505B               	movf	_alarm_second,w,c
  3968  002982  EC63  F01C         	call	_I2C_Write
  3969                           
  3970                           ;I2C_Support.c: 173: I2C_Write(alarm_minute);
  3971  002986  505A               	movf	_alarm_minute,w,c
  3972  002988  EC63  F01C         	call	_I2C_Write
  3973                           
  3974                           ;I2C_Support.c: 174: I2C_Write(alarm_hour);
  3975  00298C  5059               	movf	_alarm_hour,w,c
  3976  00298E  EC63  F01C         	call	_I2C_Write
  3977                           
  3978                           ;I2C_Support.c: 175: I2C_Write(alarm_date);
  3979  002992  5058               	movf	_alarm_date,w,c
  3980  002994  EC63  F01C         	call	_I2C_Write
  3981                           
  3982                           ;I2C_Support.c: 176: I2C_Stop();
  3983  002998  ECBC  F01E         	call	_I2C_Stop	;wreg free
  3984  00299C  0012               	return		;funcret
  3985  00299E                     __end_of_DS3231_Init:
  3986                           	opt stack 0
  3987                           tblptru	equ	0xFF8
  3988                           tblptrh	equ	0xFF7
  3989                           tblptrl	equ	0xFF6
  3990                           tablat	equ	0xFF5
  3991                           postinc0	equ	0xFEE
  3992                           wreg	equ	0xFE8
  3993                           postdec1	equ	0xFE5
  3994                           fsr1l	equ	0xFE1
  3995                           status	equ	0xFD8
  3996                           
  3997 ;; *************** function _I2C_Write_Address_Write_One_Byte *****************
  3998 ;; Defined at:
  3999 ;;		line 113 in file "I2C_Soft.c"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;  Device          1    wreg     unsigned char 
  4002 ;;  Address         1   18[COMRAM] unsigned char 
  4003 ;;  Data_Out        1   19[COMRAM] unsigned char 
  4004 ;; Auto vars:     Size  Location     Type
  4005 ;;  Device          1   20[COMRAM] unsigned char 
  4006 ;; Return value:  Size  Location     Type
  4007 ;;		None               void
  4008 ;; Registers used:
  4009 ;;		wreg, status,2, status,0, cstack
  4010 ;; Tracked objects:
  4011 ;;		On entry : 0/0
  4012 ;;		On exit  : 0/0
  4013 ;;		Unchanged: 0/0
  4014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4015 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4016 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4018 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4019 ;;Total ram usage:        3 bytes
  4020 ;; Hardware stack levels used:    1
  4021 ;; Hardware stack levels required when called:    5
  4022 ;; This function calls:
  4023 ;;		_I2C_Start
  4024 ;;		_I2C_Stop
  4025 ;;		_I2C_Write
  4026 ;; This function is called by:
  4027 ;;		_DS3231_Init
  4028 ;;		_DS3231_Turn_Off_Alarm
  4029 ;;		_DS3231_Turn_On_Alarm
  4030 ;; This function uses a non-reentrant model
  4031 ;;
  4032                           
  4033                           	psect	text6
  4034  003B1E                     __ptext6:
  4035                           	opt stack 0
  4036  003B1E                     _I2C_Write_Address_Write_One_Byte:
  4037                           	opt stack 23
  4038                           
  4039                           ;incstack = 0
  4040                           ;I2C_Write_Address_Write_One_Byte@Device stored from wreg
  4041  003B1E  6E15               	movwf	I2C_Write_Address_Write_One_Byte@Device,c
  4042                           
  4043                           ;I2C_Soft.c: 114: I2C_Start();
  4044  003B20  ECC5  F01E         	call	_I2C_Start	;wreg free
  4045                           
  4046                           ;I2C_Soft.c: 115: I2C_Write((Device << 1) | 0);
  4047  003B24  5015               	movf	I2C_Write_Address_Write_One_Byte@Device,w,c
  4048  003B26  2415               	addwf	I2C_Write_Address_Write_One_Byte@Device,w,c
  4049  003B28  EC63  F01C         	call	_I2C_Write
  4050                           
  4051                           ;I2C_Soft.c: 116: I2C_Write(Address);
  4052  003B2C  5013               	movf	I2C_Write_Address_Write_One_Byte@Address,w,c
  4053  003B2E  EC63  F01C         	call	_I2C_Write
  4054                           
  4055                           ;I2C_Soft.c: 117: I2C_Write(Data_Out);
  4056  003B32  5014               	movf	I2C_Write_Address_Write_One_Byte@Data_Out,w,c
  4057  003B34  EC63  F01C         	call	_I2C_Write
  4058                           
  4059                           ;I2C_Soft.c: 118: I2C_Stop();
  4060  003B38  ECBC  F01E         	call	_I2C_Stop	;wreg free
  4061  003B3C  0012               	return		;funcret
  4062  003B3E                     __end_of_I2C_Write_Address_Write_One_Byte:
  4063                           	opt stack 0
  4064                           tblptru	equ	0xFF8
  4065                           tblptrh	equ	0xFF7
  4066                           tblptrl	equ	0xFF6
  4067                           tablat	equ	0xFF5
  4068                           postinc0	equ	0xFEE
  4069                           wreg	equ	0xFE8
  4070                           postdec1	equ	0xFE5
  4071                           fsr1l	equ	0xFE1
  4072                           status	equ	0xFD8
  4073                           
  4074 ;; *************** function _I2C_Write_Address_Read_One_Byte *****************
  4075 ;; Defined at:
  4076 ;;		line 101 in file "I2C_Soft.c"
  4077 ;; Parameters:    Size  Location     Type
  4078 ;;  Device          1    wreg     unsigned char 
  4079 ;;  Address         1   19[COMRAM] unsigned char 
  4080 ;; Auto vars:     Size  Location     Type
  4081 ;;  Device          1   21[COMRAM] unsigned char 
  4082 ;;  Data_Ret        1   20[COMRAM] unsigned char 
  4083 ;; Return value:  Size  Location     Type
  4084 ;;                  1    wreg      unsigned char 
  4085 ;; Registers used:
  4086 ;;		wreg, status,2, status,0, cstack
  4087 ;; Tracked objects:
  4088 ;;		On entry : 0/0
  4089 ;;		On exit  : 0/0
  4090 ;;		Unchanged: 0/0
  4091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4092 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4093 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4095 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4096 ;;Total ram usage:        3 bytes
  4097 ;; Hardware stack levels used:    1
  4098 ;; Hardware stack levels required when called:    6
  4099 ;; This function calls:
  4100 ;;		_I2C_ReStart
  4101 ;;		_I2C_Read
  4102 ;;		_I2C_Start
  4103 ;;		_I2C_Stop
  4104 ;;		_I2C_Write
  4105 ;; This function is called by:
  4106 ;;		_DS3231_Init
  4107 ;;		_DS3231_Turn_Off_Alarm
  4108 ;;		_DS3231_Turn_On_Alarm
  4109 ;; This function uses a non-reentrant model
  4110 ;;
  4111                           
  4112                           	psect	text7
  4113  00397C                     __ptext7:
  4114                           	opt stack 0
  4115  00397C                     _I2C_Write_Address_Read_One_Byte:
  4116                           	opt stack 22
  4117                           
  4118                           ;incstack = 0
  4119                           ;I2C_Write_Address_Read_One_Byte@Device stored from wreg
  4120  00397C  6E16               	movwf	I2C_Write_Address_Read_One_Byte@Device,c
  4121                           
  4122                           ;I2C_Soft.c: 102: char Data_Ret;
  4123                           ;I2C_Soft.c: 103: I2C_Start();
  4124  00397E  ECC5  F01E         	call	_I2C_Start	;wreg free
  4125                           
  4126                           ;I2C_Soft.c: 104: I2C_Write((Device << 1) | 0);
  4127  003982  5016               	movf	I2C_Write_Address_Read_One_Byte@Device,w,c
  4128  003984  2416               	addwf	I2C_Write_Address_Read_One_Byte@Device,w,c
  4129  003986  EC63  F01C         	call	_I2C_Write
  4130                           
  4131                           ;I2C_Soft.c: 105: I2C_Write(Address);
  4132  00398A  5014               	movf	I2C_Write_Address_Read_One_Byte@Address,w,c
  4133  00398C  EC63  F01C         	call	_I2C_Write
  4134                           
  4135                           ;I2C_Soft.c: 106: I2C_ReStart();
  4136  003990  EC3D  F01E         	call	_I2C_ReStart	;wreg free
  4137                           
  4138                           ;I2C_Soft.c: 107: I2C_Write((Device << 1) | 1);
  4139  003994  80D8               	bsf	status,0,c
  4140  003996  3416               	rlcf	I2C_Write_Address_Read_One_Byte@Device,w,c
  4141  003998  EC63  F01C         	call	_I2C_Write
  4142                           
  4143                           ;I2C_Soft.c: 108: Data_Ret = I2C_Read(0);
  4144  00399C  0E00               	movlw	0
  4145  00399E  ECDF  F01B         	call	_I2C_Read
  4146  0039A2  6E15               	movwf	I2C_Write_Address_Read_One_Byte@Data_Ret,c
  4147                           
  4148                           ;I2C_Soft.c: 109: I2C_Stop();
  4149  0039A4  ECBC  F01E         	call	_I2C_Stop	;wreg free
  4150                           
  4151                           ;I2C_Soft.c: 110: return Data_Ret;
  4152  0039A8  5015               	movf	I2C_Write_Address_Read_One_Byte@Data_Ret,w,c
  4153  0039AA  D000               	goto	l375
  4154  0039AC                     l375:
  4155  0039AC  0012               	return		;funcret
  4156  0039AE                     __end_of_I2C_Write_Address_Read_One_Byte:
  4157                           	opt stack 0
  4158                           tblptru	equ	0xFF8
  4159                           tblptrh	equ	0xFF7
  4160                           tblptrl	equ	0xFF6
  4161                           tablat	equ	0xFF5
  4162                           postinc0	equ	0xFEE
  4163                           wreg	equ	0xFE8
  4164                           postdec1	equ	0xFE5
  4165                           fsr1l	equ	0xFE1
  4166                           status	equ	0xFD8
  4167                           
  4168 ;; *************** function _Activate_Buzzer *****************
  4169 ;; Defined at:
  4170 ;;		line 55 in file "utils.c"
  4171 ;; Parameters:    Size  Location     Type
  4172 ;;		None
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;		None
  4175 ;; Return value:  Size  Location     Type
  4176 ;;		None               void
  4177 ;; Registers used:
  4178 ;;		wreg, status,2
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4188 ;;Total ram usage:        0 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; Hardware stack levels required when called:    3
  4191 ;; This function calls:
  4192 ;;		Nothing
  4193 ;; This function is called by:
  4194 ;;		_test_alarm
  4195 ;;		_Do_Beep
  4196 ;; This function uses a non-reentrant model
  4197 ;;
  4198                           
  4199                           	psect	text8
  4200  003D30                     __ptext8:
  4201                           	opt stack 0
  4202  003D30                     _Activate_Buzzer:
  4203                           	opt stack 26
  4204                           
  4205                           ;utils.c: 56: PR2 = 0b11111001;
  4206                           
  4207                           ;incstack = 0
  4208  003D30  0EF9               	movlw	249
  4209  003D32  6ECB               	movwf	4043,c	;volatile
  4210                           
  4211                           ;utils.c: 57: T2CON = 0b00000101;
  4212  003D34  0E05               	movlw	5
  4213  003D36  6ECA               	movwf	4042,c	;volatile
  4214                           
  4215                           ;utils.c: 58: CCPR2L = 0b01001010;
  4216  003D38  0E4A               	movlw	74
  4217  003D3A  6EBB               	movwf	4027,c	;volatile
  4218                           
  4219                           ;utils.c: 59: CCP2CON = 0b00111100;
  4220  003D3C  0E3C               	movlw	60
  4221  003D3E  6EBA               	movwf	4026,c	;volatile
  4222  003D40  0012               	return		;funcret
  4223  003D42                     __end_of_Activate_Buzzer:
  4224                           	opt stack 0
  4225                           tblptru	equ	0xFF8
  4226                           tblptrh	equ	0xFF7
  4227                           tblptrl	equ	0xFF6
  4228                           tablat	equ	0xFF5
  4229                           postinc0	equ	0xFEE
  4230                           wreg	equ	0xFE8
  4231                           postdec1	equ	0xFE5
  4232                           fsr1l	equ	0xFE1
  4233                           status	equ	0xFD8
  4234                           
  4235 ;; *************** function _read_volt *****************
  4236 ;; Defined at:
  4237 ;;		line 109 in file "utils.c"
  4238 ;; Parameters:    Size  Location     Type
  4239 ;;		None
  4240 ;; Auto vars:     Size  Location     Type
  4241 ;;  volt            3   61[COMRAM] float 
  4242 ;;  nStep           2   64[COMRAM] int 
  4243 ;; Return value:  Size  Location     Type
  4244 ;;                  3   58[COMRAM] float 
  4245 ;; Registers used:
  4246 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4247 ;; Tracked objects:
  4248 ;;		On entry : 0/0
  4249 ;;		On exit  : 0/0
  4250 ;;		Unchanged: 0/0
  4251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4252 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4253 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4255 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4256 ;;Total ram usage:        8 bytes
  4257 ;; Hardware stack levels used:    1
  4258 ;; Hardware stack levels required when called:    5
  4259 ;; This function calls:
  4260 ;;		___awtoft
  4261 ;;		___ftdiv
  4262 ;;		___wmul
  4263 ;;		_get_full_ADC
  4264 ;; This function is called by:
  4265 ;;		_main
  4266 ;; This function uses a non-reentrant model
  4267 ;;
  4268                           
  4269                           	psect	text9
  4270  00327C                     __ptext9:
  4271                           	opt stack 0
  4272  00327C                     _read_volt:
  4273                           	opt stack 25
  4274                           
  4275                           ;utils.c: 110: int nStep = get_full_ADC();
  4276                           
  4277                           ;incstack = 0
  4278  00327C  EC46  F01D         	call	_get_full_ADC	;wreg free
  4279  003280  C011  F041         	movff	?_get_full_ADC,read_volt@nStep
  4280  003284  C012  F042         	movff	?_get_full_ADC+1,read_volt@nStep+1
  4281                           
  4282                           ;utils.c: 111: float volt = nStep * 5 /1024.0;
  4283  003288  C041  F011         	movff	read_volt@nStep,___wmul@multiplier
  4284  00328C  C042  F012         	movff	read_volt@nStep+1,___wmul@multiplier+1
  4285  003290  0E00               	movlw	0
  4286  003292  6E14               	movwf	___wmul@multiplicand+1,c
  4287  003294  0E05               	movlw	5
  4288  003296  6E13               	movwf	___wmul@multiplicand,c
  4289  003298  EC32  F01D         	call	___wmul	;wreg free
  4290  00329C  C011  F019         	movff	?___wmul,___awtoft@c
  4291  0032A0  C012  F01A         	movff	?___wmul+1,___awtoft@c+1
  4292  0032A4  EC82  F01C         	call	___awtoft	;wreg free
  4293  0032A8  C019  F02C         	movff	?___awtoft,___ftdiv@f1
  4294  0032AC  C01A  F02D         	movff	?___awtoft+1,___ftdiv@f1+1
  4295  0032B0  C01B  F02E         	movff	?___awtoft+2,___ftdiv@f1+2
  4296  0032B4  0E00               	movlw	0
  4297  0032B6  6E2F               	movwf	___ftdiv@f2,c
  4298  0032B8  0E80               	movlw	128
  4299  0032BA  6E30               	movwf	___ftdiv@f2+1,c
  4300  0032BC  0E44               	movlw	68
  4301  0032BE  6E31               	movwf	___ftdiv@f2+2,c
  4302  0032C0  EC88  F011         	call	___ftdiv	;wreg free
  4303  0032C4  C02C  F03E         	movff	?___ftdiv,read_volt@volt
  4304  0032C8  C02D  F03F         	movff	?___ftdiv+1,read_volt@volt+1
  4305  0032CC  C02E  F040         	movff	?___ftdiv+2,read_volt@volt+2
  4306                           
  4307                           ;utils.c: 112: return (volt);
  4308  0032D0  C03E  F03B         	movff	read_volt@volt,?_read_volt
  4309  0032D4  C03F  F03C         	movff	read_volt@volt+1,?_read_volt+1
  4310  0032D8  C040  F03D         	movff	read_volt@volt+2,?_read_volt+2
  4311  0032DC  D000               	goto	l690
  4312  0032DE                     l690:
  4313  0032DE  0012               	return		;funcret
  4314  0032E0                     __end_of_read_volt:
  4315                           	opt stack 0
  4316                           tblptru	equ	0xFF8
  4317                           tblptrh	equ	0xFF7
  4318                           tblptrl	equ	0xFF6
  4319                           tablat	equ	0xFF5
  4320                           postinc0	equ	0xFEE
  4321                           wreg	equ	0xFE8
  4322                           postdec1	equ	0xFE5
  4323                           fsr1l	equ	0xFE1
  4324                           status	equ	0xFD8
  4325                           
  4326 ;; *************** function _get_full_ADC *****************
  4327 ;; Defined at:
  4328 ;;		line 115 in file "utils.c"
  4329 ;; Parameters:    Size  Location     Type
  4330 ;;		None
  4331 ;; Auto vars:     Size  Location     Type
  4332 ;;  result          2   20[COMRAM] unsigned int 
  4333 ;; Return value:  Size  Location     Type
  4334 ;;                  2   16[COMRAM] unsigned int 
  4335 ;; Registers used:
  4336 ;;		wreg, status,2, status,0
  4337 ;; Tracked objects:
  4338 ;;		On entry : 0/0
  4339 ;;		On exit  : 0/0
  4340 ;;		Unchanged: 0/0
  4341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4342 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4343 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4344 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4345 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4346 ;;Total ram usage:        6 bytes
  4347 ;; Hardware stack levels used:    1
  4348 ;; Hardware stack levels required when called:    3
  4349 ;; This function calls:
  4350 ;;		Nothing
  4351 ;; This function is called by:
  4352 ;;		_read_volt
  4353 ;; This function uses a non-reentrant model
  4354 ;;
  4355                           
  4356                           	psect	text10
  4357  003A8C                     __ptext10:
  4358                           	opt stack 0
  4359  003A8C                     _get_full_ADC:
  4360                           	opt stack 26
  4361                           
  4362                           ;utils.c: 116: unsigned int result;
  4363                           ;utils.c: 117: ADCON0bits.GO = 1;
  4364                           
  4365                           ;incstack = 0
  4366  003A8C  82C2               	bsf	4034,1,c	;volatile
  4367                           
  4368                           ;utils.c: 118: while (ADCON0bits.DONE == 1);
  4369  003A8E  D000               	goto	l693
  4370  003A90                     l693:
  4371  003A90  B2C2               	btfsc	4034,1,c	;volatile
  4372  003A92  D7FE               	goto	l693
  4373                           
  4374                           ;utils.c: 119: result = (ADRESH * 0x100) + ADRESL;
  4375  003A94  50C4               	movf	4036,w,c	;volatile
  4376  003A96  6E14               	movwf	(??_get_full_ADC+1)& (0+255),c
  4377  003A98  6A13               	clrf	??_get_full_ADC& (0+255),c
  4378  003A9A  50C3               	movf	4035,w,c	;volatile
  4379  003A9C  2413               	addwf	??_get_full_ADC,w,c
  4380  003A9E  6E15               	movwf	get_full_ADC@result,c
  4381  003AA0  0E00               	movlw	0
  4382  003AA2  2014               	addwfc	??_get_full_ADC+1,w,c
  4383  003AA4  6E16               	movwf	get_full_ADC@result+1,c
  4384                           
  4385                           ;utils.c: 121: return result;
  4386  003AA6  C015  F011         	movff	get_full_ADC@result,?_get_full_ADC
  4387  003AAA  C016  F012         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  4388  003AAE  D000               	goto	l696
  4389  003AB0                     l696:
  4390  003AB0  0012               	return		;funcret
  4391  003AB2                     __end_of_get_full_ADC:
  4392                           	opt stack 0
  4393                           tblptru	equ	0xFF8
  4394                           tblptrh	equ	0xFF7
  4395                           tblptrl	equ	0xFF6
  4396                           tablat	equ	0xFF5
  4397                           postinc0	equ	0xFEE
  4398                           wreg	equ	0xFE8
  4399                           postdec1	equ	0xFE5
  4400                           fsr1l	equ	0xFE1
  4401                           status	equ	0xFD8
  4402                           
  4403 ;; *************** function _get_RPM *****************
  4404 ;; Defined at:
  4405 ;;		line 22 in file "Fan_Support.c"
  4406 ;; Parameters:    Size  Location     Type
  4407 ;;		None
  4408 ;; Auto vars:     Size  Location     Type
  4409 ;;  RPS             3   46[COMRAM] float 
  4410 ;; Return value:  Size  Location     Type
  4411 ;;                  3   43[COMRAM] float 
  4412 ;; Registers used:
  4413 ;;		wreg, status,2, status,0, cstack
  4414 ;; Tracked objects:
  4415 ;;		On entry : 0/0
  4416 ;;		On exit  : 0/0
  4417 ;;		Unchanged: 0/0
  4418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4419 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4420 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4422 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4423 ;;Total ram usage:        6 bytes
  4424 ;; Hardware stack levels used:    1
  4425 ;; Hardware stack levels required when called:    5
  4426 ;; This function calls:
  4427 ;;		_Wait_One_Sec
  4428 ;;		___ftmul
  4429 ;;		___lbtoft
  4430 ;; This function is called by:
  4431 ;;		_main
  4432 ;; This function uses a non-reentrant model
  4433 ;;
  4434                           
  4435                           	psect	text11
  4436  003452                     __ptext11:
  4437                           	opt stack 0
  4438  003452                     _get_RPM:
  4439                           	opt stack 25
  4440                           
  4441                           ;Fan_Support.c: 23: TMR3L = 0;
  4442                           
  4443                           ;incstack = 0
  4444  003452  0E00               	movlw	0
  4445  003454  6EB2               	movwf	4018,c	;volatile
  4446                           
  4447                           ;Fan_Support.c: 24: T3CONbits.TMR3ON = 1;
  4448  003456  80B1               	bsf	4017,0,c	;volatile
  4449                           
  4450                           ;Fan_Support.c: 25: Wait_One_Sec();
  4451  003458  EC9F  F01D         	call	_Wait_One_Sec	;wreg free
  4452                           
  4453                           ;Fan_Support.c: 26: Wait_One_Sec();
  4454  00345C  EC9F  F01D         	call	_Wait_One_Sec	;wreg free
  4455                           
  4456                           ;Fan_Support.c: 27: Wait_One_Sec();
  4457  003460  EC9F  F01D         	call	_Wait_One_Sec	;wreg free
  4458                           
  4459                           ;Fan_Support.c: 28: Wait_One_Sec();
  4460  003464  EC9F  F01D         	call	_Wait_One_Sec	;wreg free
  4461                           
  4462                           ;Fan_Support.c: 30: T3CONbits.TMR3ON = 0;
  4463  003468  90B1               	bcf	4017,0,c	;volatile
  4464                           
  4465                           ;Fan_Support.c: 31: float RPS = TMR3L;
  4466  00346A  50B2               	movf	4018,w,c	;volatile
  4467  00346C  EC59  F01D         	call	___lbtoft
  4468  003470  C019  F02F         	movff	?___lbtoft,get_RPM@RPS
  4469  003474  C01A  F030         	movff	?___lbtoft+1,get_RPM@RPS+1
  4470  003478  C01B  F031         	movff	?___lbtoft+2,get_RPM@RPS+2
  4471                           
  4472                           ;Fan_Support.c: 32: return (RPS * 60.00);
  4473  00347C  C02F  F01D         	movff	get_RPM@RPS,___ftmul@f1
  4474  003480  C030  F01E         	movff	get_RPM@RPS+1,___ftmul@f1+1
  4475  003484  C031  F01F         	movff	get_RPM@RPS+2,___ftmul@f1+2
  4476  003488  0E00               	movlw	0
  4477  00348A  6E20               	movwf	___ftmul@f2,c
  4478  00348C  0E70               	movlw	112
  4479  00348E  6E21               	movwf	___ftmul@f2+1,c
  4480  003490  0E42               	movlw	66
  4481  003492  6E22               	movwf	___ftmul@f2+2,c
  4482  003494  EC1E  F010         	call	___ftmul	;wreg free
  4483  003498  C01D  F02C         	movff	?___ftmul,?_get_RPM
  4484  00349C  C01E  F02D         	movff	?___ftmul+1,?_get_RPM+1
  4485  0034A0  C01F  F02E         	movff	?___ftmul+2,?_get_RPM+2
  4486  0034A4  D000               	goto	l254
  4487  0034A6                     l254:
  4488  0034A6  0012               	return		;funcret
  4489  0034A8                     __end_of_get_RPM:
  4490                           	opt stack 0
  4491                           tblptru	equ	0xFF8
  4492                           tblptrh	equ	0xFF7
  4493                           tblptrl	equ	0xFF6
  4494                           tablat	equ	0xFF5
  4495                           postinc0	equ	0xFEE
  4496                           wreg	equ	0xFE8
  4497                           postdec1	equ	0xFE5
  4498                           fsr1l	equ	0xFE1
  4499                           status	equ	0xFD8
  4500                           
  4501 ;; *************** function _Update_Screen *****************
  4502 ;; Defined at:
  4503 ;;		line 75 in file "Main_Screen.c"
  4504 ;; Parameters:    Size  Location     Type
  4505 ;;		None
  4506 ;; Auto vars:     Size  Location     Type
  4507 ;;  neg_tempF       2    9[BANK1 ] int 
  4508 ;; Return value:  Size  Location     Type
  4509 ;;		None               void
  4510 ;; Registers used:
  4511 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4512 ;; Tracked objects:
  4513 ;;		On entry : 0/0
  4514 ;;		On exit  : 0/0
  4515 ;;		Unchanged: 0/0
  4516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4518 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4519 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4520 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4521 ;;Total ram usage:        4 bytes
  4522 ;; Hardware stack levels used:    1
  4523 ;; Hardware stack levels required when called:   10
  4524 ;; This function calls:
  4525 ;;		___awdiv
  4526 ;;		___awmod
  4527 ;;		___ftdiv
  4528 ;;		___ftmul
  4529 ;;		___fttol
  4530 ;;		_drawtext
  4531 ;;		_strcpy
  4532 ;; This function is called by:
  4533 ;;		_main
  4534 ;; This function uses a non-reentrant model
  4535 ;;
  4536                           
  4537                           	psect	text12
  4538  00001C                     __ptext12:
  4539                           	opt stack 0
  4540  00001C                     _Update_Screen:
  4541                           	opt stack 20
  4542                           
  4543                           ;Main_Screen.c: 77: if ((DS1621_tempC & 0x80) == 0x80)
  4544                           
  4545                           ;incstack = 0
  4546  00001C  AE4A               	btfss	_DS1621_tempC,7,c
  4547  00001E  D01C               	goto	l10072
  4548                           
  4549                           ;Main_Screen.c: 78: {
  4550                           ;Main_Screen.c: 79: tempC[0] = '-';
  4551  000020  0E2D               	movlw	45
  4552  000022  0100               	movlb	0	; () banked
  4553  000024  6FD0               	movwf	_tempC& (0+255),b
  4554                           
  4555                           ; BSR set to: 0
  4556                           ;Main_Screen.c: 80: tempC[1] = (DS1621_tempC & 0x7f)/10 + '0';
  4557  000026  0E7F               	movlw	127
  4558  000028  144A               	andwf	_DS1621_tempC,w,c
  4559  00002A  6E17               	movwf	___awdiv@dividend,c
  4560  00002C  6A18               	clrf	___awdiv@dividend+1,c
  4561  00002E  0E00               	movlw	0
  4562  000030  6E1A               	movwf	___awdiv@divisor+1,c
  4563  000032  0E0A               	movlw	10
  4564  000034  6E19               	movwf	___awdiv@divisor,c
  4565  000036  EC67  F016         	call	___awdiv	;wreg free
  4566  00003A  5017               	movf	?___awdiv,w,c
  4567  00003C  0F30               	addlw	48
  4568  00003E  0100               	movlb	0	; () banked
  4569  000040  6FD1               	movwf	(_tempC+1)& (0+255),b
  4570                           
  4571                           ; BSR set to: 0
  4572                           ;Main_Screen.c: 81: tempC[2] = (DS1621_tempC & 0x7f)%10 + '0';
  4573  000042  0E7F               	movlw	127
  4574  000044  144A               	andwf	_DS1621_tempC,w,c
  4575  000046  6E44               	movwf	___awmod@dividend,c
  4576  000048  6A45               	clrf	___awmod@dividend+1,c
  4577  00004A  0E00               	movlw	0
  4578  00004C  6E47               	movwf	___awmod@divisor+1,c
  4579  00004E  0E0A               	movlw	10
  4580  000050  6E46               	movwf	___awmod@divisor,c
  4581  000052  EC44  F017         	call	___awmod	;wreg free
  4582  000056  D01B               	goto	L2
  4583  000058                     l10072:
  4584                           
  4585                           ;Main_Screen.c: 83: else
  4586                           ;Main_Screen.c: 84: {
  4587                           ;Main_Screen.c: 85: tempC[0] = '+';
  4588  000058  0E2B               	movlw	43
  4589  00005A  0100               	movlb	0	; () banked
  4590  00005C  6FD0               	movwf	_tempC& (0+255),b
  4591                           
  4592                           ; BSR set to: 0
  4593                           ;Main_Screen.c: 86: tempC[1] = DS1621_tempC/10 + '0';
  4594  00005E  C04A  F017         	movff	_DS1621_tempC,___awdiv@dividend
  4595  000062  C04B  F018         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  4596  000066  0E00               	movlw	0
  4597  000068  6E1A               	movwf	___awdiv@divisor+1,c
  4598  00006A  0E0A               	movlw	10
  4599  00006C  6E19               	movwf	___awdiv@divisor,c
  4600  00006E  EC67  F016         	call	___awdiv	;wreg free
  4601  000072  5017               	movf	?___awdiv,w,c
  4602  000074  0F30               	addlw	48
  4603  000076  0100               	movlb	0	; () banked
  4604  000078  6FD1               	movwf	(_tempC+1)& (0+255),b
  4605                           
  4606                           ; BSR set to: 0
  4607                           ;Main_Screen.c: 87: tempC[2] = DS1621_tempC%10 + '0';
  4608  00007A  C04A  F044         	movff	_DS1621_tempC,___awmod@dividend
  4609  00007E  C04B  F045         	movff	_DS1621_tempC+1,___awmod@dividend+1
  4610  000082  0E00               	movlw	0
  4611  000084  6E47               	movwf	___awmod@divisor+1,c
  4612  000086  0E0A               	movlw	10
  4613  000088  6E46               	movwf	___awmod@divisor,c
  4614  00008A  EC44  F017         	call	___awmod	;wreg free
  4615  00008E                     L2:
  4616  00008E  5044               	movf	?___awmod,w,c
  4617  000090  0F30               	addlw	48
  4618  000092  0100               	movlb	0	; () banked
  4619  000094  6FD2               	movwf	(_tempC+2)& (0+255),b
  4620  000096  D000               	goto	l10078
  4621  000098                     l10078:
  4622                           
  4623                           ; BSR set to: 0
  4624                           ;Main_Screen.c: 88: }
  4625                           ;Main_Screen.c: 90: if (DS1621_tempF < 0)
  4626  000098  AE4D               	btfss	_DS1621_tempF+1,7,c
  4627  00009A  D029               	goto	l10088
  4628                           
  4629                           ; BSR set to: 0
  4630                           ;Main_Screen.c: 91: {
  4631                           ;Main_Screen.c: 92: tempF[0] = '-';
  4632  00009C  0E2D               	movlw	45
  4633  00009E  0100               	movlb	0	; () banked
  4634  0000A0  6FD4               	movwf	_tempF& (0+255),b
  4635                           
  4636                           ; BSR set to: 0
  4637                           ;Main_Screen.c: 93: int neg_tempF = -DS1621_tempF;
  4638  0000A2  C04C  F14B         	movff	_DS1621_tempF,??_Update_Screen
  4639  0000A6  C04D  F14C         	movff	_DS1621_tempF+1,??_Update_Screen+1
  4640  0000AA  0101               	movlb	1	; () banked
  4641  0000AC  1F4B               	comf	??_Update_Screen& (0+255),f,b
  4642  0000AE  1F4C               	comf	(??_Update_Screen+1)& (0+255),f,b
  4643  0000B0  4B4B               	infsnz	??_Update_Screen& (0+255),f,b
  4644  0000B2  2B4C               	incf	(??_Update_Screen+1)& (0+255),f,b
  4645  0000B4  C14B  F14D         	movff	??_Update_Screen,Update_Screen@neg_tempF
  4646  0000B8  C14C  F14E         	movff	??_Update_Screen+1,Update_Screen@neg_tempF+1
  4647                           
  4648                           ; BSR set to: 1
  4649                           ;Main_Screen.c: 94: tempF[1] = neg_tempF/10 + '0';
  4650  0000BC  C14D  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  4651  0000C0  C14E  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  4652  0000C4  0E00               	movlw	0
  4653  0000C6  6E1A               	movwf	___awdiv@divisor+1,c
  4654  0000C8  0E0A               	movlw	10
  4655  0000CA  6E19               	movwf	___awdiv@divisor,c
  4656  0000CC  EC67  F016         	call	___awdiv	;wreg free
  4657  0000D0  5017               	movf	?___awdiv,w,c
  4658  0000D2  0F30               	addlw	48
  4659  0000D4  0100               	movlb	0	; () banked
  4660  0000D6  6FD5               	movwf	(_tempF+1)& (0+255),b
  4661                           
  4662                           ; BSR set to: 0
  4663                           ;Main_Screen.c: 95: tempF[2] = neg_tempF%10 + '0';
  4664  0000D8  C14D  F044         	movff	Update_Screen@neg_tempF,___awmod@dividend
  4665  0000DC  C14E  F045         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  4666  0000E0  0E00               	movlw	0
  4667  0000E2  6E47               	movwf	___awmod@divisor+1,c
  4668  0000E4  0E0A               	movlw	10
  4669  0000E6  6E46               	movwf	___awmod@divisor,c
  4670  0000E8  EC44  F017         	call	___awmod	;wreg free
  4671  0000EC  D01B               	goto	L3
  4672  0000EE                     l10088:
  4673                           
  4674                           ; BSR set to: 0
  4675                           ;Main_Screen.c: 97: else
  4676                           ;Main_Screen.c: 98: {
  4677                           ;Main_Screen.c: 99: tempF[0] = '+';
  4678  0000EE  0E2B               	movlw	43
  4679  0000F0  0100               	movlb	0	; () banked
  4680  0000F2  6FD4               	movwf	_tempF& (0+255),b
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;Main_Screen.c: 100: tempF[1] = DS1621_tempF/10 + '0';
  4684  0000F4  C04C  F017         	movff	_DS1621_tempF,___awdiv@dividend
  4685  0000F8  C04D  F018         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  4686  0000FC  0E00               	movlw	0
  4687  0000FE  6E1A               	movwf	___awdiv@divisor+1,c
  4688  000100  0E0A               	movlw	10
  4689  000102  6E19               	movwf	___awdiv@divisor,c
  4690  000104  EC67  F016         	call	___awdiv	;wreg free
  4691  000108  5017               	movf	?___awdiv,w,c
  4692  00010A  0F30               	addlw	48
  4693  00010C  0100               	movlb	0	; () banked
  4694  00010E  6FD5               	movwf	(_tempF+1)& (0+255),b
  4695                           
  4696                           ; BSR set to: 0
  4697                           ;Main_Screen.c: 101: tempF[2] = DS1621_tempF%10 + '0';
  4698  000110  C04C  F044         	movff	_DS1621_tempF,___awmod@dividend
  4699  000114  C04D  F045         	movff	_DS1621_tempF+1,___awmod@dividend+1
  4700  000118  0E00               	movlw	0
  4701  00011A  6E47               	movwf	___awmod@divisor+1,c
  4702  00011C  0E0A               	movlw	10
  4703  00011E  6E46               	movwf	___awmod@divisor,c
  4704  000120  EC44  F017         	call	___awmod	;wreg free
  4705  000124                     L3:
  4706  000124  5044               	movf	?___awmod,w,c
  4707  000126  0F30               	addlw	48
  4708  000128  0100               	movlb	0	; () banked
  4709  00012A  6FD6               	movwf	(_tempF+2)& (0+255),b
  4710  00012C  D000               	goto	l10094
  4711  00012E                     l10094:
  4712                           
  4713                           ; BSR set to: 0
  4714                           ;Main_Screen.c: 102: }
  4715                           ;Main_Screen.c: 103: time[0] = (hour>>4) + '0';
  4716  00012E  385F               	swapf	_hour,w,c
  4717  000130  0B0F               	andlw	15
  4718  000132  0F30               	addlw	48
  4719  000134  0100               	movlb	0	; () banked
  4720  000136  6FA6               	movwf	_time& (0+255),b
  4721                           
  4722                           ; BSR set to: 0
  4723                           ;Main_Screen.c: 104: time[1] = (hour & 0x0f)+ '0';
  4724  000138  505F               	movf	_hour,w,c
  4725  00013A  0B0F               	andlw	15
  4726  00013C  0F30               	addlw	48
  4727  00013E  0100               	movlb	0	; () banked
  4728  000140  6FA7               	movwf	(_time+1)& (0+255),b
  4729                           
  4730                           ; BSR set to: 0
  4731                           ;Main_Screen.c: 105: time[3] = (minute >> 4) + '0';
  4732  000142  3860               	swapf	_minute,w,c
  4733  000144  0B0F               	andlw	15
  4734  000146  0F30               	addlw	48
  4735  000148  0100               	movlb	0	; () banked
  4736  00014A  6FA9               	movwf	(_time+3)& (0+255),b
  4737                           
  4738                           ; BSR set to: 0
  4739                           ;Main_Screen.c: 106: time[4] = (minute & 0x0f) + '0';
  4740  00014C  5060               	movf	_minute,w,c
  4741  00014E  0B0F               	andlw	15
  4742  000150  0F30               	addlw	48
  4743  000152  0100               	movlb	0	; () banked
  4744  000154  6FAA               	movwf	(_time+4)& (0+255),b
  4745                           
  4746                           ; BSR set to: 0
  4747                           ;Main_Screen.c: 107: time[6] = (second >> 4) + '0';
  4748  000156  3862               	swapf	_second,w,c
  4749  000158  0B0F               	andlw	15
  4750  00015A  0F30               	addlw	48
  4751  00015C  0100               	movlb	0	; () banked
  4752  00015E  6FAC               	movwf	(_time+6)& (0+255),b
  4753                           
  4754                           ; BSR set to: 0
  4755                           ;Main_Screen.c: 108: time[7] = (second & 0x0f) + '0';
  4756  000160  5062               	movf	_second,w,c
  4757  000162  0B0F               	andlw	15
  4758  000164  0F30               	addlw	48
  4759  000166  0100               	movlb	0	; () banked
  4760  000168  6FAD               	movwf	(_time+7)& (0+255),b
  4761                           
  4762                           ; BSR set to: 0
  4763                           ;Main_Screen.c: 109: date[0] = (month >> 4) + '0';
  4764  00016A  3861               	swapf	_month,w,c
  4765  00016C  0B0F               	andlw	15
  4766  00016E  0F30               	addlw	48
  4767  000170  0100               	movlb	0	; () banked
  4768  000172  6F8B               	movwf	_date& (0+255),b
  4769                           
  4770                           ; BSR set to: 0
  4771                           ;Main_Screen.c: 110: date[1] = (month & 0x0f) + '0';
  4772  000174  5061               	movf	_month,w,c
  4773  000176  0B0F               	andlw	15
  4774  000178  0F30               	addlw	48
  4775  00017A  0100               	movlb	0	; () banked
  4776  00017C  6F8C               	movwf	(_date+1)& (0+255),b
  4777                           
  4778                           ; BSR set to: 0
  4779                           ;Main_Screen.c: 111: date[3] = (day >> 4) + '0';
  4780  00017E  385C               	swapf	_day,w,c
  4781  000180  0B0F               	andlw	15
  4782  000182  0F30               	addlw	48
  4783  000184  0100               	movlb	0	; () banked
  4784  000186  6F8E               	movwf	(_date+3)& (0+255),b
  4785                           
  4786                           ; BSR set to: 0
  4787                           ;Main_Screen.c: 112: date[4] = (day & 0x0f) + '0';
  4788  000188  505C               	movf	_day,w,c
  4789  00018A  0B0F               	andlw	15
  4790  00018C  0F30               	addlw	48
  4791  00018E  0100               	movlb	0	; () banked
  4792  000190  6F8F               	movwf	(_date+4)& (0+255),b
  4793                           
  4794                           ; BSR set to: 0
  4795                           ;Main_Screen.c: 113: date[6] = (year >> 4) + '0';
  4796  000192  386D               	swapf	_year,w,c
  4797  000194  0B0F               	andlw	15
  4798  000196  0F30               	addlw	48
  4799  000198  0100               	movlb	0	; () banked
  4800  00019A  6F91               	movwf	(_date+6)& (0+255),b
  4801                           
  4802                           ; BSR set to: 0
  4803                           ;Main_Screen.c: 114: date[7] = (year & 0x0f) + '0';
  4804  00019C  506D               	movf	_year,w,c
  4805  00019E  0B0F               	andlw	15
  4806  0001A0  0F30               	addlw	48
  4807  0001A2  0100               	movlb	0	; () banked
  4808  0001A4  6F92               	movwf	(_date+7)& (0+255),b
  4809                           
  4810                           ; BSR set to: 0
  4811                           ;Main_Screen.c: 115: alarm_time[0] = (alarm_hour>>4) + '0';
  4812  0001A6  3859               	swapf	_alarm_hour,w,c
  4813  0001A8  0B0F               	andlw	15
  4814  0001AA  0F30               	addlw	48
  4815  0001AC  0100               	movlb	0	; () banked
  4816  0001AE  6F82               	movwf	_alarm_time& (0+255),b
  4817                           
  4818                           ; BSR set to: 0
  4819                           ;Main_Screen.c: 116: alarm_time[1] = (alarm_hour & 0x0f)+ '0';
  4820  0001B0  5059               	movf	_alarm_hour,w,c
  4821  0001B2  0B0F               	andlw	15
  4822  0001B4  0F30               	addlw	48
  4823  0001B6  0100               	movlb	0	; () banked
  4824  0001B8  6F83               	movwf	(_alarm_time+1)& (0+255),b
  4825                           
  4826                           ; BSR set to: 0
  4827                           ;Main_Screen.c: 117: alarm_time[3] = (alarm_minute >> 4) + '0';
  4828  0001BA  385A               	swapf	_alarm_minute,w,c
  4829  0001BC  0B0F               	andlw	15
  4830  0001BE  0F30               	addlw	48
  4831  0001C0  0100               	movlb	0	; () banked
  4832  0001C2  6F85               	movwf	(_alarm_time+3)& (0+255),b
  4833                           
  4834                           ; BSR set to: 0
  4835                           ;Main_Screen.c: 118: alarm_time[4] = (alarm_minute &0x0f) + '0';
  4836  0001C4  505A               	movf	_alarm_minute,w,c
  4837  0001C6  0B0F               	andlw	15
  4838  0001C8  0F30               	addlw	48
  4839  0001CA  0100               	movlb	0	; () banked
  4840  0001CC  6F86               	movwf	(_alarm_time+4)& (0+255),b
  4841                           
  4842                           ; BSR set to: 0
  4843                           ;Main_Screen.c: 119: alarm_time[6] = (alarm_second >>4 ) + '0';
  4844  0001CE  385B               	swapf	_alarm_second,w,c
  4845  0001D0  0B0F               	andlw	15
  4846  0001D2  0F30               	addlw	48
  4847  0001D4  0100               	movlb	0	; () banked
  4848  0001D6  6F88               	movwf	(_alarm_time+6)& (0+255),b
  4849                           
  4850                           ; BSR set to: 0
  4851                           ;Main_Screen.c: 120: alarm_time[7] = (alarm_second & 0x0f) + '0';
  4852  0001D8  505B               	movf	_alarm_second,w,c
  4853  0001DA  0B0F               	andlw	15
  4854  0001DC  0F30               	addlw	48
  4855  0001DE  0100               	movlb	0	; () banked
  4856  0001E0  6F89               	movwf	(_alarm_time+7)& (0+255),b
  4857                           
  4858                           ; BSR set to: 0
  4859                           ;Main_Screen.c: 122: if (ALARMEN == 1)
  4860  0001E2  0448               	decf	_ALARMEN,w,c
  4861  0001E4  1049               	iorwf	_ALARMEN+1,w,c
  4862  0001E6  A4D8               	btfss	status,2,c
  4863  0001E8  D00B               	goto	l10134
  4864                           
  4865                           ; BSR set to: 0
  4866                           ;Main_Screen.c: 123: {
  4867                           ;Main_Screen.c: 124: strcpy(Alarm_SW_Txt, "ON ");
  4868  0001EA  0EC4               	movlw	low _Alarm_SW_Txt
  4869  0001EC  6E11               	movwf	strcpy@to,c
  4870  0001EE  0E00               	movlw	high _Alarm_SW_Txt
  4871  0001F0  6E12               	movwf	strcpy@to+1,c
  4872  0001F2  0EE1               	movlw	low STR_24
  4873  0001F4  6E13               	movwf	strcpy@from,c
  4874  0001F6  0EFF               	movlw	high STR_24
  4875  0001F8  6E14               	movwf	strcpy@from+1,c
  4876  0001FA  ECD7  F01C         	call	_strcpy	;wreg free
  4877                           
  4878                           ;Main_Screen.c: 125: }
  4879  0001FE  D00B               	goto	l10136
  4880  000200                     l10134:
  4881                           
  4882                           ;Main_Screen.c: 126: else
  4883                           ;Main_Screen.c: 127: {
  4884                           ;Main_Screen.c: 128: strcpy(Alarm_SW_Txt, "OFF");
  4885  000200  0EC4               	movlw	low _Alarm_SW_Txt
  4886  000202  6E11               	movwf	strcpy@to,c
  4887  000204  0E00               	movlw	high _Alarm_SW_Txt
  4888  000206  6E12               	movwf	strcpy@to+1,c
  4889  000208  0EE5               	movlw	low STR_25
  4890  00020A  6E13               	movwf	strcpy@from,c
  4891  00020C  0EFF               	movlw	high STR_25
  4892  00020E  6E14               	movwf	strcpy@from+1,c
  4893  000210  ECD7  F01C         	call	_strcpy	;wreg free
  4894  000214  D000               	goto	l10136
  4895  000216                     l10136:
  4896                           
  4897                           ;Main_Screen.c: 129: }
  4898                           ;Main_Screen.c: 131: Fan_Set_Temp_Txt[0] = fan_set_temp/100 + '0';
  4899  000216  C06E  F017         	movff	_fan_set_temp,___awdiv@dividend
  4900  00021A  6A18               	clrf	___awdiv@dividend+1,c
  4901  00021C  0E00               	movlw	0
  4902  00021E  6E1A               	movwf	___awdiv@divisor+1,c
  4903  000220  0E64               	movlw	100
  4904  000222  6E19               	movwf	___awdiv@divisor,c
  4905  000224  EC67  F016         	call	___awdiv	;wreg free
  4906  000228  5017               	movf	?___awdiv,w,c
  4907  00022A  0F30               	addlw	48
  4908  00022C  0100               	movlb	0	; () banked
  4909  00022E  6FB5               	movwf	_Fan_Set_Temp_Txt& (0+255),b
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;Main_Screen.c: 132: Fan_Set_Temp_Txt[1] = (fan_set_temp/10)%10 + '0';
  4913  000230  0E00               	movlw	0
  4914  000232  6E1A               	movwf	___awdiv@divisor+1,c
  4915  000234  0E0A               	movlw	10
  4916  000236  6E19               	movwf	___awdiv@divisor,c
  4917  000238  C06E  F017         	movff	_fan_set_temp,___awdiv@dividend
  4918  00023C  6A18               	clrf	___awdiv@dividend+1,c
  4919  00023E  EC67  F016         	call	___awdiv	;wreg free
  4920  000242  C017  F044         	movff	?___awdiv,___awmod@dividend
  4921  000246  C018  F045         	movff	?___awdiv+1,___awmod@dividend+1
  4922  00024A  0E00               	movlw	0
  4923  00024C  6E47               	movwf	___awmod@divisor+1,c
  4924  00024E  0E0A               	movlw	10
  4925  000250  6E46               	movwf	___awmod@divisor,c
  4926  000252  EC44  F017         	call	___awmod	;wreg free
  4927  000256  5044               	movf	?___awmod,w,c
  4928  000258  0F30               	addlw	48
  4929  00025A  0100               	movlb	0	; () banked
  4930  00025C  6FB6               	movwf	(_Fan_Set_Temp_Txt+1)& (0+255),b
  4931                           
  4932                           ; BSR set to: 0
  4933                           ;Main_Screen.c: 133: Fan_Set_Temp_Txt[2] = fan_set_temp%10 + '0';
  4934  00025E  C06E  F044         	movff	_fan_set_temp,___awmod@dividend
  4935  000262  6A45               	clrf	___awmod@dividend+1,c
  4936  000264  0E00               	movlw	0
  4937  000266  6E47               	movwf	___awmod@divisor+1,c
  4938  000268  0E0A               	movlw	10
  4939  00026A  6E46               	movwf	___awmod@divisor,c
  4940  00026C  EC44  F017         	call	___awmod	;wreg free
  4941  000270  5044               	movf	?___awmod,w,c
  4942  000272  0F30               	addlw	48
  4943  000274  0100               	movlb	0	; () banked
  4944  000276  6FB7               	movwf	(_Fan_Set_Temp_Txt+2)& (0+255),b
  4945                           
  4946                           ; BSR set to: 0
  4947                           ;Main_Screen.c: 135: if (FAN == 1)
  4948  000278  0454               	decf	_FAN,w,c
  4949  00027A  A4D8               	btfss	status,2,c
  4950  00027C  D00B               	goto	l10146
  4951                           
  4952                           ; BSR set to: 0
  4953                           ;Main_Screen.c: 136: {
  4954                           ;Main_Screen.c: 137: strcpy(Fan_SW_Txt, "ON ");
  4955  00027E  0ECC               	movlw	low _Fan_SW_Txt
  4956  000280  6E11               	movwf	strcpy@to,c
  4957  000282  0E00               	movlw	high _Fan_SW_Txt
  4958  000284  6E12               	movwf	strcpy@to+1,c
  4959  000286  0EE1               	movlw	low STR_24
  4960  000288  6E13               	movwf	strcpy@from,c
  4961  00028A  0EFF               	movlw	high STR_24
  4962  00028C  6E14               	movwf	strcpy@from+1,c
  4963  00028E  ECD7  F01C         	call	_strcpy	;wreg free
  4964                           
  4965                           ;Main_Screen.c: 138: }
  4966  000292  D00B               	goto	l10148
  4967  000294                     l10146:
  4968                           
  4969                           ;Main_Screen.c: 139: else
  4970                           ;Main_Screen.c: 140: {
  4971                           ;Main_Screen.c: 141: strcpy(Fan_SW_Txt, "OFF");
  4972  000294  0ECC               	movlw	low _Fan_SW_Txt
  4973  000296  6E11               	movwf	strcpy@to,c
  4974  000298  0E00               	movlw	high _Fan_SW_Txt
  4975  00029A  6E12               	movwf	strcpy@to+1,c
  4976  00029C  0EE5               	movlw	low STR_25
  4977  00029E  6E13               	movwf	strcpy@from,c
  4978  0002A0  0EFF               	movlw	high STR_25
  4979  0002A2  6E14               	movwf	strcpy@from+1,c
  4980  0002A4  ECD7  F01C         	call	_strcpy	;wreg free
  4981  0002A8  D000               	goto	l10148
  4982  0002AA                     l10148:
  4983                           
  4984                           ;Main_Screen.c: 142: }
  4985                           ;Main_Screen.c: 144: if (PORTDbits.RD5 == 0) RTC_ALARM_Txt[0] = '1';
  4986  0002AA  BA83               	btfsc	3971,5,c	;volatile
  4987  0002AC  D002               	goto	l10152
  4988  0002AE  0E31               	movlw	49
  4989  0002B0  D001               	goto	L4
  4990  0002B2                     l10152:
  4991                           
  4992                           ;Main_Screen.c: 145: else RTC_ALARM_Txt[0] = '0';
  4993  0002B2  0E30               	movlw	48
  4994  0002B4                     L4:
  4995  0002B4  0100               	movlb	0	; () banked
  4996  0002B6  6FD8               	movwf	_RTC_ALARM_Txt& (0+255),b
  4997  0002B8  D000               	goto	l10154
  4998  0002BA                     l10154:
  4999                           
  5000                           ; BSR set to: 0
  5001                           ;Main_Screen.c: 147: DC_Txt[0] = duty_cycle / 100 + '0';
  5002  0002BA  C05D  F017         	movff	_duty_cycle,___awdiv@dividend
  5003  0002BE  6A18               	clrf	___awdiv@dividend+1,c
  5004  0002C0  0E00               	movlw	0
  5005  0002C2  6E1A               	movwf	___awdiv@divisor+1,c
  5006  0002C4  0E64               	movlw	100
  5007  0002C6  6E19               	movwf	___awdiv@divisor,c
  5008  0002C8  EC67  F016         	call	___awdiv	;wreg free
  5009  0002CC  5017               	movf	?___awdiv,w,c
  5010  0002CE  0F30               	addlw	48
  5011  0002D0  0100               	movlb	0	; () banked
  5012  0002D2  6FC8               	movwf	_DC_Txt& (0+255),b
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;Main_Screen.c: 148: DC_Txt[1] = (duty_cycle / 10) % 10 + '0';
  5016  0002D4  0E00               	movlw	0
  5017  0002D6  6E1A               	movwf	___awdiv@divisor+1,c
  5018  0002D8  0E0A               	movlw	10
  5019  0002DA  6E19               	movwf	___awdiv@divisor,c
  5020  0002DC  C05D  F017         	movff	_duty_cycle,___awdiv@dividend
  5021  0002E0  6A18               	clrf	___awdiv@dividend+1,c
  5022  0002E2  EC67  F016         	call	___awdiv	;wreg free
  5023  0002E6  C017  F044         	movff	?___awdiv,___awmod@dividend
  5024  0002EA  C018  F045         	movff	?___awdiv+1,___awmod@dividend+1
  5025  0002EE  0E00               	movlw	0
  5026  0002F0  6E47               	movwf	___awmod@divisor+1,c
  5027  0002F2  0E0A               	movlw	10
  5028  0002F4  6E46               	movwf	___awmod@divisor,c
  5029  0002F6  EC44  F017         	call	___awmod	;wreg free
  5030  0002FA  5044               	movf	?___awmod,w,c
  5031  0002FC  0F30               	addlw	48
  5032  0002FE  0100               	movlb	0	; () banked
  5033  000300  6FC9               	movwf	(_DC_Txt+1)& (0+255),b
  5034                           
  5035                           ; BSR set to: 0
  5036                           ;Main_Screen.c: 149: DC_Txt[2] = duty_cycle % 10 + '0';
  5037  000302  C05D  F044         	movff	_duty_cycle,___awmod@dividend
  5038  000306  6A45               	clrf	___awmod@dividend+1,c
  5039  000308  0E00               	movlw	0
  5040  00030A  6E47               	movwf	___awmod@divisor+1,c
  5041  00030C  0E0A               	movlw	10
  5042  00030E  6E46               	movwf	___awmod@divisor,c
  5043  000310  EC44  F017         	call	___awmod	;wreg free
  5044  000314  5044               	movf	?___awmod,w,c
  5045  000316  0F30               	addlw	48
  5046  000318  0100               	movlb	0	; () banked
  5047  00031A  6FCA               	movwf	(_DC_Txt+2)& (0+255),b
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;Main_Screen.c: 150: Volt_Txt[0] = ((int) volt) + '0';
  5051  00031C  C0DE  F03B         	movff	_volt,___fttol@f1
  5052  000320  C0DF  F03C         	movff	_volt+1,___fttol@f1+1
  5053  000324  C0E0  F03D         	movff	_volt+2,___fttol@f1+2
  5054  000328  EC8A  F00E         	call	___fttol	;wreg free
  5055  00032C  503B               	movf	?___fttol,w,c
  5056  00032E  0F30               	addlw	48
  5057  000330  0100               	movlb	0	; () banked
  5058  000332  6FAF               	movwf	_Volt_Txt& (0+255),b
  5059                           
  5060                           ; BSR set to: 0
  5061                           ;Main_Screen.c: 151: Volt_Txt[2] = ((int)(((volt*100)/10)) %10) + '0';
  5062  000334  0E00               	movlw	0
  5063  000336  6E2F               	movwf	___ftdiv@f2,c
  5064  000338  0E20               	movlw	32
  5065  00033A  6E30               	movwf	___ftdiv@f2+1,c
  5066  00033C  0E41               	movlw	65
  5067  00033E  6E31               	movwf	___ftdiv@f2+2,c
  5068  000340  0E00               	movlw	0
  5069  000342  6E20               	movwf	___ftmul@f2,c
  5070  000344  0EC8               	movlw	200
  5071  000346  6E21               	movwf	___ftmul@f2+1,c
  5072  000348  0E42               	movlw	66
  5073  00034A  6E22               	movwf	___ftmul@f2+2,c
  5074  00034C  C0DE  F01D         	movff	_volt,___ftmul@f1
  5075  000350  C0DF  F01E         	movff	_volt+1,___ftmul@f1+1
  5076  000354  C0E0  F01F         	movff	_volt+2,___ftmul@f1+2
  5077  000358  EC1E  F010         	call	___ftmul	;wreg free
  5078  00035C  C01D  F02C         	movff	?___ftmul,___ftdiv@f1
  5079  000360  C01E  F02D         	movff	?___ftmul+1,___ftdiv@f1+1
  5080  000364  C01F  F02E         	movff	?___ftmul+2,___ftdiv@f1+2
  5081  000368  EC88  F011         	call	___ftdiv	;wreg free
  5082  00036C  C02C  F03B         	movff	?___ftdiv,___fttol@f1
  5083  000370  C02D  F03C         	movff	?___ftdiv+1,___fttol@f1+1
  5084  000374  C02E  F03D         	movff	?___ftdiv+2,___fttol@f1+2
  5085  000378  EC8A  F00E         	call	___fttol	;wreg free
  5086  00037C  C03B  F044         	movff	?___fttol,___awmod@dividend
  5087  000380  C03C  F045         	movff	?___fttol+1,___awmod@dividend+1
  5088  000384  0E00               	movlw	0
  5089  000386  6E47               	movwf	___awmod@divisor+1,c
  5090  000388  0E0A               	movlw	10
  5091  00038A  6E46               	movwf	___awmod@divisor,c
  5092  00038C  EC44  F017         	call	___awmod	;wreg free
  5093  000390  5044               	movf	?___awmod,w,c
  5094  000392  0F30               	addlw	48
  5095  000394  0100               	movlb	0	; () banked
  5096  000396  6FB1               	movwf	(_Volt_Txt+2)& (0+255),b
  5097                           
  5098                           ; BSR set to: 0
  5099                           ;Main_Screen.c: 152: Volt_Txt[3] = ((int)((volt*100))%10) + '0';
  5100  000398  0E00               	movlw	0
  5101  00039A  6E20               	movwf	___ftmul@f2,c
  5102  00039C  0EC8               	movlw	200
  5103  00039E  6E21               	movwf	___ftmul@f2+1,c
  5104  0003A0  0E42               	movlw	66
  5105  0003A2  6E22               	movwf	___ftmul@f2+2,c
  5106  0003A4  C0DE  F01D         	movff	_volt,___ftmul@f1
  5107  0003A8  C0DF  F01E         	movff	_volt+1,___ftmul@f1+1
  5108  0003AC  C0E0  F01F         	movff	_volt+2,___ftmul@f1+2
  5109  0003B0  EC1E  F010         	call	___ftmul	;wreg free
  5110  0003B4  C01D  F03B         	movff	?___ftmul,___fttol@f1
  5111  0003B8  C01E  F03C         	movff	?___ftmul+1,___fttol@f1+1
  5112  0003BC  C01F  F03D         	movff	?___ftmul+2,___fttol@f1+2
  5113  0003C0  EC8A  F00E         	call	___fttol	;wreg free
  5114  0003C4  C03B  F044         	movff	?___fttol,___awmod@dividend
  5115  0003C8  C03C  F045         	movff	?___fttol+1,___awmod@dividend+1
  5116  0003CC  0E00               	movlw	0
  5117  0003CE  6E47               	movwf	___awmod@divisor+1,c
  5118  0003D0  0E0A               	movlw	10
  5119  0003D2  6E46               	movwf	___awmod@divisor,c
  5120  0003D4  EC44  F017         	call	___awmod	;wreg free
  5121  0003D8  5044               	movf	?___awmod,w,c
  5122  0003DA  0F30               	addlw	48
  5123  0003DC  0100               	movlb	0	; () banked
  5124  0003DE  6FB2               	movwf	(_Volt_Txt+3)& (0+255),b
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;Main_Screen.c: 153: RPM_Txt[0] = rpm / 1000 + '0';
  5128  0003E0  C050  F017         	movff	_rpm,___awdiv@dividend
  5129  0003E4  C051  F018         	movff	_rpm+1,___awdiv@dividend+1
  5130  0003E8  0E03               	movlw	3
  5131  0003EA  6E1A               	movwf	___awdiv@divisor+1,c
  5132  0003EC  0EE8               	movlw	232
  5133  0003EE  6E19               	movwf	___awdiv@divisor,c
  5134  0003F0  EC67  F016         	call	___awdiv	;wreg free
  5135  0003F4  5017               	movf	?___awdiv,w,c
  5136  0003F6  0F30               	addlw	48
  5137  0003F8  0100               	movlb	0	; () banked
  5138  0003FA  6FBA               	movwf	_RPM_Txt& (0+255),b
  5139                           
  5140                           ; BSR set to: 0
  5141                           ;Main_Screen.c: 155: RPM_Txt[1] = ((rpm / 100) % 10) + '0';
  5142  0003FC  0E00               	movlw	0
  5143  0003FE  6E1A               	movwf	___awdiv@divisor+1,c
  5144  000400  0E64               	movlw	100
  5145  000402  6E19               	movwf	___awdiv@divisor,c
  5146  000404  C050  F017         	movff	_rpm,___awdiv@dividend
  5147  000408  C051  F018         	movff	_rpm+1,___awdiv@dividend+1
  5148  00040C  EC67  F016         	call	___awdiv	;wreg free
  5149  000410  C017  F044         	movff	?___awdiv,___awmod@dividend
  5150  000414  C018  F045         	movff	?___awdiv+1,___awmod@dividend+1
  5151  000418  0E00               	movlw	0
  5152  00041A  6E47               	movwf	___awmod@divisor+1,c
  5153  00041C  0E0A               	movlw	10
  5154  00041E  6E46               	movwf	___awmod@divisor,c
  5155  000420  EC44  F017         	call	___awmod	;wreg free
  5156  000424  5044               	movf	?___awmod,w,c
  5157  000426  0F30               	addlw	48
  5158  000428  0100               	movlb	0	; () banked
  5159  00042A  6FBB               	movwf	(_RPM_Txt+1)& (0+255),b
  5160                           
  5161                           ; BSR set to: 0
  5162                           ;Main_Screen.c: 157: RPM_Txt[2] = (rpm / 10) % 10 + '0';
  5163  00042C  0E00               	movlw	0
  5164  00042E  6E1A               	movwf	___awdiv@divisor+1,c
  5165  000430  0E0A               	movlw	10
  5166  000432  6E19               	movwf	___awdiv@divisor,c
  5167  000434  C050  F017         	movff	_rpm,___awdiv@dividend
  5168  000438  C051  F018         	movff	_rpm+1,___awdiv@dividend+1
  5169  00043C  EC67  F016         	call	___awdiv	;wreg free
  5170  000440  C017  F044         	movff	?___awdiv,___awmod@dividend
  5171  000444  C018  F045         	movff	?___awdiv+1,___awmod@dividend+1
  5172  000448  0E00               	movlw	0
  5173  00044A  6E47               	movwf	___awmod@divisor+1,c
  5174  00044C  0E0A               	movlw	10
  5175  00044E  6E46               	movwf	___awmod@divisor,c
  5176  000450  EC44  F017         	call	___awmod	;wreg free
  5177  000454  5044               	movf	?___awmod,w,c
  5178  000456  0F30               	addlw	48
  5179  000458  0100               	movlb	0	; () banked
  5180  00045A  6FBC               	movwf	(_RPM_Txt+2)& (0+255),b
  5181                           
  5182                           ; BSR set to: 0
  5183                           ;Main_Screen.c: 158: RPM_Txt[3] = rpm % 10 + '0';
  5184  00045C  C050  F044         	movff	_rpm,___awmod@dividend
  5185  000460  C051  F045         	movff	_rpm+1,___awmod@dividend+1
  5186  000464  0E00               	movlw	0
  5187  000466  6E47               	movwf	___awmod@divisor+1,c
  5188  000468  0E0A               	movlw	10
  5189  00046A  6E46               	movwf	___awmod@divisor,c
  5190  00046C  EC44  F017         	call	___awmod	;wreg free
  5191  000470  5044               	movf	?___awmod,w,c
  5192  000472  0F30               	addlw	48
  5193  000474  0100               	movlb	0	; () banked
  5194  000476  6FBD               	movwf	(_RPM_Txt+3)& (0+255),b
  5195                           
  5196                           ; BSR set to: 0
  5197                           ;Main_Screen.c: 160: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  5198  000478  0E17               	movlw	23
  5199  00047A  6E39               	movwf	drawtext@y,c
  5200  00047C  0ED0               	movlw	low _tempC
  5201  00047E  6E3A               	movwf	drawtext@_text,c
  5202  000480  0E00               	movlw	high _tempC
  5203  000482  6E3B               	movwf	drawtext@_text+1,c
  5204  000484  0EFF               	movlw	255
  5205  000486  6E3D               	movwf	drawtext@color+1,c
  5206  000488  0EE0               	movlw	224
  5207  00048A  6E3C               	movwf	drawtext@color,c
  5208  00048C  0E00               	movlw	0
  5209  00048E  6E3F               	movwf	drawtext@bg+1,c
  5210  000490  0E00               	movlw	0
  5211  000492  6E3E               	movwf	drawtext@bg,c
  5212  000494  0E02               	movlw	2
  5213  000496  6E40               	movwf	drawtext@size,c
  5214  000498  0E01               	movlw	1
  5215  00049A  EC11  F00F         	call	_drawtext
  5216                           
  5217                           ;Main_Screen.c: 161: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  5218  00049E  0E17               	movlw	23
  5219  0004A0  6E39               	movwf	drawtext@y,c
  5220  0004A2  0ED4               	movlw	low _tempF
  5221  0004A4  6E3A               	movwf	drawtext@_text,c
  5222  0004A6  0E00               	movlw	high _tempF
  5223  0004A8  6E3B               	movwf	drawtext@_text+1,c
  5224  0004AA  0EFF               	movlw	255
  5225  0004AC  6E3D               	movwf	drawtext@color+1,c
  5226  0004AE  0EE0               	movlw	224
  5227  0004B0  6E3C               	movwf	drawtext@color,c
  5228  0004B2  0E00               	movlw	0
  5229  0004B4  6E3F               	movwf	drawtext@bg+1,c
  5230  0004B6  0E00               	movlw	0
  5231  0004B8  6E3E               	movwf	drawtext@bg,c
  5232  0004BA  0E02               	movlw	2
  5233  0004BC  6E40               	movwf	drawtext@size,c
  5234  0004BE  0E46               	movlw	70
  5235  0004C0  EC11  F00F         	call	_drawtext
  5236                           
  5237                           ;Main_Screen.c: 162: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  5238  0004C4  0E34               	movlw	52
  5239  0004C6  6E39               	movwf	drawtext@y,c
  5240  0004C8  0EA6               	movlw	low _time
  5241  0004CA  6E3A               	movwf	drawtext@_text,c
  5242  0004CC  0E00               	movlw	high _time
  5243  0004CE  6E3B               	movwf	drawtext@_text+1,c
  5244  0004D0  0E07               	movlw	7
  5245  0004D2  6E3D               	movwf	drawtext@color+1,c
  5246  0004D4  683C               	setf	drawtext@color,c
  5247  0004D6  0E00               	movlw	0
  5248  0004D8  6E3F               	movwf	drawtext@bg+1,c
  5249  0004DA  0E00               	movlw	0
  5250  0004DC  6E3E               	movwf	drawtext@bg,c
  5251  0004DE  0E02               	movlw	2
  5252  0004E0  6E40               	movwf	drawtext@size,c
  5253  0004E2  0E0F               	movlw	15
  5254  0004E4  EC11  F00F         	call	_drawtext
  5255                           
  5256                           ;Main_Screen.c: 163: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  5257  0004E8  0E52               	movlw	82
  5258  0004EA  6E39               	movwf	drawtext@y,c
  5259  0004EC  0E8B               	movlw	low _date
  5260  0004EE  6E3A               	movwf	drawtext@_text,c
  5261  0004F0  0E00               	movlw	high _date
  5262  0004F2  6E3B               	movwf	drawtext@_text+1,c
  5263  0004F4  0E07               	movlw	7
  5264  0004F6  6E3D               	movwf	drawtext@color+1,c
  5265  0004F8  0EE0               	movlw	224
  5266  0004FA  6E3C               	movwf	drawtext@color,c
  5267  0004FC  0E00               	movlw	0
  5268  0004FE  6E3F               	movwf	drawtext@bg+1,c
  5269  000500  0E00               	movlw	0
  5270  000502  6E3E               	movwf	drawtext@bg,c
  5271  000504  0E02               	movlw	2
  5272  000506  6E40               	movwf	drawtext@size,c
  5273  000508  0E0F               	movlw	15
  5274  00050A  EC11  F00F         	call	_drawtext
  5275                           
  5276                           ;Main_Screen.c: 164: drawtext(10 , 110 , alarm_time , 0x07FF , 0x0000 , 1);
  5277  00050E  0E6E               	movlw	110
  5278  000510  6E39               	movwf	drawtext@y,c
  5279  000512  0E82               	movlw	low _alarm_time
  5280  000514  6E3A               	movwf	drawtext@_text,c
  5281  000516  0E00               	movlw	high _alarm_time
  5282  000518  6E3B               	movwf	drawtext@_text+1,c
  5283  00051A  0E07               	movlw	7
  5284  00051C  6E3D               	movwf	drawtext@color+1,c
  5285  00051E  683C               	setf	drawtext@color,c
  5286  000520  0E00               	movlw	0
  5287  000522  6E3F               	movwf	drawtext@bg+1,c
  5288  000524  0E00               	movlw	0
  5289  000526  6E3E               	movwf	drawtext@bg,c
  5290  000528  0E01               	movlw	1
  5291  00052A  6E40               	movwf	drawtext@size,c
  5292  00052C  0E0A               	movlw	10
  5293  00052E  EC11  F00F         	call	_drawtext
  5294                           
  5295                           ;Main_Screen.c: 165: drawtext(95 , 110 , Alarm_SW_Txt , 0x07FF , 0x0000 , 1);
  5296  000532  0E6E               	movlw	110
  5297  000534  6E39               	movwf	drawtext@y,c
  5298  000536  0EC4               	movlw	low _Alarm_SW_Txt
  5299  000538  6E3A               	movwf	drawtext@_text,c
  5300  00053A  0E00               	movlw	high _Alarm_SW_Txt
  5301  00053C  6E3B               	movwf	drawtext@_text+1,c
  5302  00053E  0E07               	movlw	7
  5303  000540  6E3D               	movwf	drawtext@color+1,c
  5304  000542  683C               	setf	drawtext@color,c
  5305  000544  0E00               	movlw	0
  5306  000546  6E3F               	movwf	drawtext@bg+1,c
  5307  000548  0E00               	movlw	0
  5308  00054A  6E3E               	movwf	drawtext@bg,c
  5309  00054C  0E01               	movlw	1
  5310  00054E  6E40               	movwf	drawtext@size,c
  5311  000550  0E5F               	movlw	95
  5312  000552  EC11  F00F         	call	_drawtext
  5313                           
  5314                           ;Main_Screen.c: 166: drawtext(35, 130 ,Fan_Set_Temp_Txt, 0xF800, 0x0000, 1);
  5315  000556  0E82               	movlw	130
  5316  000558  6E39               	movwf	drawtext@y,c
  5317  00055A  0EB5               	movlw	low _Fan_Set_Temp_Txt
  5318  00055C  6E3A               	movwf	drawtext@_text,c
  5319  00055E  0E00               	movlw	high _Fan_Set_Temp_Txt
  5320  000560  6E3B               	movwf	drawtext@_text+1,c
  5321  000562  0EF8               	movlw	248
  5322  000564  6E3D               	movwf	drawtext@color+1,c
  5323  000566  0E00               	movlw	0
  5324  000568  6E3C               	movwf	drawtext@color,c
  5325  00056A  0E00               	movlw	0
  5326  00056C  6E3F               	movwf	drawtext@bg+1,c
  5327  00056E  0E00               	movlw	0
  5328  000570  6E3E               	movwf	drawtext@bg,c
  5329  000572  0E01               	movlw	1
  5330  000574  6E40               	movwf	drawtext@size,c
  5331  000576  0E23               	movlw	35
  5332  000578  EC11  F00F         	call	_drawtext
  5333                           
  5334                           ;Main_Screen.c: 167: drawtext(95, 130, Fan_SW_Txt, 0xF800 , 0x0000 , 1);
  5335  00057C  0E82               	movlw	130
  5336  00057E  6E39               	movwf	drawtext@y,c
  5337  000580  0ECC               	movlw	low _Fan_SW_Txt
  5338  000582  6E3A               	movwf	drawtext@_text,c
  5339  000584  0E00               	movlw	high _Fan_SW_Txt
  5340  000586  6E3B               	movwf	drawtext@_text+1,c
  5341  000588  0EF8               	movlw	248
  5342  00058A  6E3D               	movwf	drawtext@color+1,c
  5343  00058C  0E00               	movlw	0
  5344  00058E  6E3C               	movwf	drawtext@color,c
  5345  000590  0E00               	movlw	0
  5346  000592  6E3F               	movwf	drawtext@bg+1,c
  5347  000594  0E00               	movlw	0
  5348  000596  6E3E               	movwf	drawtext@bg,c
  5349  000598  0E01               	movlw	1
  5350  00059A  6E40               	movwf	drawtext@size,c
  5351  00059C  0E5F               	movlw	95
  5352  00059E  EC11  F00F         	call	_drawtext
  5353                           
  5354                           ;Main_Screen.c: 168: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  5355  0005A2  0E96               	movlw	150
  5356  0005A4  6E39               	movwf	drawtext@y,c
  5357  0005A6  0EC8               	movlw	low _DC_Txt
  5358  0005A8  6E3A               	movwf	drawtext@_text,c
  5359  0005AA  0E00               	movlw	high _DC_Txt
  5360  0005AC  6E3B               	movwf	drawtext@_text+1,c
  5361  0005AE  0E07               	movlw	7
  5362  0005B0  6E3D               	movwf	drawtext@color+1,c
  5363  0005B2  0EE0               	movlw	224
  5364  0005B4  6E3C               	movwf	drawtext@color,c
  5365  0005B6  0E00               	movlw	0
  5366  0005B8  6E3F               	movwf	drawtext@bg+1,c
  5367  0005BA  0E00               	movlw	0
  5368  0005BC  6E3E               	movwf	drawtext@bg,c
  5369  0005BE  0E01               	movlw	1
  5370  0005C0  6E40               	movwf	drawtext@size,c
  5371  0005C2  0E0A               	movlw	10
  5372  0005C4  EC11  F00F         	call	_drawtext
  5373                           
  5374                           ;Main_Screen.c: 169: drawtext(35, 150, RTC_ALARM_Txt, 0x07E0, 0x0000, 1);
  5375  0005C8  0E96               	movlw	150
  5376  0005CA  6E39               	movwf	drawtext@y,c
  5377  0005CC  0ED8               	movlw	low _RTC_ALARM_Txt
  5378  0005CE  6E3A               	movwf	drawtext@_text,c
  5379  0005D0  0E00               	movlw	high _RTC_ALARM_Txt
  5380  0005D2  6E3B               	movwf	drawtext@_text+1,c
  5381  0005D4  0E07               	movlw	7
  5382  0005D6  6E3D               	movwf	drawtext@color+1,c
  5383  0005D8  0EE0               	movlw	224
  5384  0005DA  6E3C               	movwf	drawtext@color,c
  5385  0005DC  0E00               	movlw	0
  5386  0005DE  6E3F               	movwf	drawtext@bg+1,c
  5387  0005E0  0E00               	movlw	0
  5388  0005E2  6E3E               	movwf	drawtext@bg,c
  5389  0005E4  0E01               	movlw	1
  5390  0005E6  6E40               	movwf	drawtext@size,c
  5391  0005E8  0E23               	movlw	35
  5392  0005EA  EC11  F00F         	call	_drawtext
  5393                           
  5394                           ;Main_Screen.c: 170: drawtext(50, 150, Volt_Txt, 0x07E0, 0x0000, 1);
  5395  0005EE  0E96               	movlw	150
  5396  0005F0  6E39               	movwf	drawtext@y,c
  5397  0005F2  0EAF               	movlw	low _Volt_Txt
  5398  0005F4  6E3A               	movwf	drawtext@_text,c
  5399  0005F6  0E00               	movlw	high _Volt_Txt
  5400  0005F8  6E3B               	movwf	drawtext@_text+1,c
  5401  0005FA  0E07               	movlw	7
  5402  0005FC  6E3D               	movwf	drawtext@color+1,c
  5403  0005FE  0EE0               	movlw	224
  5404  000600  6E3C               	movwf	drawtext@color,c
  5405  000602  0E00               	movlw	0
  5406  000604  6E3F               	movwf	drawtext@bg+1,c
  5407  000606  0E00               	movlw	0
  5408  000608  6E3E               	movwf	drawtext@bg,c
  5409  00060A  0E01               	movlw	1
  5410  00060C  6E40               	movwf	drawtext@size,c
  5411  00060E  0E32               	movlw	50
  5412  000610  EC11  F00F         	call	_drawtext
  5413                           
  5414                           ;Main_Screen.c: 171: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  5415  000614  0E96               	movlw	150
  5416  000616  6E39               	movwf	drawtext@y,c
  5417  000618  0EBA               	movlw	low _RPM_Txt
  5418  00061A  6E3A               	movwf	drawtext@_text,c
  5419  00061C  0E00               	movlw	high _RPM_Txt
  5420  00061E  6E3B               	movwf	drawtext@_text+1,c
  5421  000620  0E07               	movlw	7
  5422  000622  6E3D               	movwf	drawtext@color+1,c
  5423  000624  0EE0               	movlw	224
  5424  000626  6E3C               	movwf	drawtext@color,c
  5425  000628  0E00               	movlw	0
  5426  00062A  6E3F               	movwf	drawtext@bg+1,c
  5427  00062C  0E00               	movlw	0
  5428  00062E  6E3E               	movwf	drawtext@bg,c
  5429  000630  0E01               	movlw	1
  5430  000632  6E40               	movwf	drawtext@size,c
  5431  000634  0E5D               	movlw	93
  5432  000636  EC11  F00F         	call	_drawtext
  5433  00063A  0012               	return		;funcret
  5434  00063C                     __end_of_Update_Screen:
  5435                           	opt stack 0
  5436                           tblptru	equ	0xFF8
  5437                           tblptrh	equ	0xFF7
  5438                           tblptrl	equ	0xFF6
  5439                           tablat	equ	0xFF5
  5440                           postinc0	equ	0xFEE
  5441                           wreg	equ	0xFE8
  5442                           postdec1	equ	0xFE5
  5443                           fsr1l	equ	0xFE1
  5444                           status	equ	0xFD8
  5445                           
  5446 ;; *************** function _Toggle_Fan_Monitor *****************
  5447 ;; Defined at:
  5448 ;;		line 162 in file "Fan_Support.c"
  5449 ;; Parameters:    Size  Location     Type
  5450 ;;		None
  5451 ;; Auto vars:     Size  Location     Type
  5452 ;;		None
  5453 ;; Return value:  Size  Location     Type
  5454 ;;		None               void
  5455 ;; Registers used:
  5456 ;;		wreg, status,2, status,0, cstack
  5457 ;; Tracked objects:
  5458 ;;		On entry : 0/0
  5459 ;;		On exit  : 0/0
  5460 ;;		Unchanged: 0/0
  5461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5466 ;;Total ram usage:        0 bytes
  5467 ;; Hardware stack levels used:    1
  5468 ;; Hardware stack levels required when called:    8
  5469 ;; This function calls:
  5470 ;;		_Toggle_Fan
  5471 ;; This function is called by:
  5472 ;;		_main
  5473 ;; This function uses a non-reentrant model
  5474 ;;
  5475                           
  5476                           	psect	text13
  5477  003C90                     __ptext13:
  5478                           	opt stack 0
  5479  003C90                     _Toggle_Fan_Monitor:
  5480                           	opt stack 22
  5481                           
  5482                           ;Fan_Support.c: 163: if (FAN) {
  5483                           
  5484                           ;incstack = 0
  5485  003C90  5054               	movf	_FAN,w,c
  5486  003C92  B4D8               	btfsc	status,2,c
  5487  003C94  D003               	goto	l10042
  5488                           
  5489                           ;Fan_Support.c: 165: Toggle_Fan();
  5490  003C96  EC52  F01E         	call	_Toggle_Fan	;wreg free
  5491                           
  5492                           ;Fan_Support.c: 166: } else{
  5493  003C9A  D003               	goto	l308
  5494  003C9C                     l10042:
  5495                           
  5496                           ;Fan_Support.c: 167: Toggle_Fan();
  5497  003C9C  EC52  F01E         	call	_Toggle_Fan	;wreg free
  5498  003CA0  D000               	goto	l308
  5499  003CA2                     l308:
  5500  003CA2  0012               	return		;funcret
  5501  003CA4                     __end_of_Toggle_Fan_Monitor:
  5502                           	opt stack 0
  5503                           tblptru	equ	0xFF8
  5504                           tblptrh	equ	0xFF7
  5505                           tblptrl	equ	0xFF6
  5506                           tablat	equ	0xFF5
  5507                           postinc0	equ	0xFEE
  5508                           wreg	equ	0xFE8
  5509                           postdec1	equ	0xFE5
  5510                           fsr1l	equ	0xFE1
  5511                           status	equ	0xFD8
  5512                           
  5513 ;; *************** function _Toggle_Fan *****************
  5514 ;; Defined at:
  5515 ;;		line 35 in file "Fan_Support.c"
  5516 ;; Parameters:    Size  Location     Type
  5517 ;;		None
  5518 ;; Auto vars:     Size  Location     Type
  5519 ;;		None
  5520 ;; Return value:  Size  Location     Type
  5521 ;;		None               void
  5522 ;; Registers used:
  5523 ;;		wreg, status,2, status,0, cstack
  5524 ;; Tracked objects:
  5525 ;;		On entry : 0/0
  5526 ;;		On exit  : 0/0
  5527 ;;		Unchanged: 0/0
  5528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5533 ;;Total ram usage:        0 bytes
  5534 ;; Hardware stack levels used:    1
  5535 ;; Hardware stack levels required when called:    7
  5536 ;; This function calls:
  5537 ;;		_Turn_Off_Fan
  5538 ;;		_Turn_On_Fan
  5539 ;; This function is called by:
  5540 ;;		_Toggle_Fan_Monitor
  5541 ;;		_main
  5542 ;;		_INT0_ISR
  5543 ;; This function uses a non-reentrant model
  5544 ;;
  5545                           
  5546                           	psect	text14
  5547  003CA4                     __ptext14:
  5548                           	opt stack 0
  5549  003CA4                     _Toggle_Fan:
  5550                           	opt stack 22
  5551                           
  5552                           ;Fan_Support.c: 36: if (FAN) {
  5553                           
  5554                           ;incstack = 0
  5555  003CA4  5054               	movf	_FAN,w,c
  5556  003CA6  B4D8               	btfsc	status,2,c
  5557  003CA8  D003               	goto	l9514
  5558                           
  5559                           ;Fan_Support.c: 37: Turn_Off_Fan();
  5560  003CAA  EC2F  F01F         	call	_Turn_Off_Fan	;wreg free
  5561                           
  5562                           ;Fan_Support.c: 38: } else
  5563  003CAE  D003               	goto	l259
  5564  003CB0                     l9514:
  5565                           
  5566                           ;Fan_Support.c: 39: Turn_On_Fan();
  5567  003CB0  ECD7  F01E         	call	_Turn_On_Fan	;wreg free
  5568  003CB4  D000               	goto	l259
  5569  003CB6                     l259:
  5570  003CB6  0012               	return		;funcret
  5571  003CB8                     __end_of_Toggle_Fan:
  5572                           	opt stack 0
  5573                           tblptru	equ	0xFF8
  5574                           tblptrh	equ	0xFF7
  5575                           tblptrl	equ	0xFF6
  5576                           tablat	equ	0xFF5
  5577                           postinc0	equ	0xFEE
  5578                           wreg	equ	0xFE8
  5579                           postdec1	equ	0xFE5
  5580                           fsr1l	equ	0xFE1
  5581                           status	equ	0xFD8
  5582                           
  5583 ;; *************** function _Turn_On_Fan *****************
  5584 ;; Defined at:
  5585 ;;		line 48 in file "Fan_Support.c"
  5586 ;; Parameters:    Size  Location     Type
  5587 ;;		None
  5588 ;; Auto vars:     Size  Location     Type
  5589 ;;		None
  5590 ;; Return value:  Size  Location     Type
  5591 ;;		None               void
  5592 ;; Registers used:
  5593 ;;		wreg, status,2, status,0, cstack
  5594 ;; Tracked objects:
  5595 ;;		On entry : 0/0
  5596 ;;		On exit  : 0/0
  5597 ;;		Unchanged: 0/0
  5598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5603 ;;Total ram usage:        0 bytes
  5604 ;; Hardware stack levels used:    1
  5605 ;; Hardware stack levels required when called:    6
  5606 ;; This function calls:
  5607 ;;		_do_update_pwm
  5608 ;; This function is called by:
  5609 ;;		_Toggle_Fan
  5610 ;; This function uses a non-reentrant model
  5611 ;;
  5612                           
  5613                           	psect	text15
  5614  003DAE                     __ptext15:
  5615                           	opt stack 0
  5616  003DAE                     _Turn_On_Fan:
  5617                           	opt stack 22
  5618                           
  5619                           ;Fan_Support.c: 49: FAN = 1;
  5620                           
  5621                           ;incstack = 0
  5622  003DAE  0E01               	movlw	1
  5623  003DB0  6E54               	movwf	_FAN,c
  5624                           
  5625                           ;Fan_Support.c: 50: do_update_pwm(duty_cycle);
  5626  003DB2  505D               	movf	_duty_cycle,w,c
  5627  003DB4  EC12  F014         	call	_do_update_pwm
  5628                           
  5629                           ;Fan_Support.c: 51: PORTAbits.RA5 = 1;
  5630  003DB8  8A80               	bsf	3968,5,c	;volatile
  5631                           
  5632                           ;Fan_Support.c: 52: PORTAbits.RA4 = 1;
  5633  003DBA  8880               	bsf	3968,4,c	;volatile
  5634  003DBC  0012               	return		;funcret
  5635  003DBE                     __end_of_Turn_On_Fan:
  5636                           	opt stack 0
  5637                           tblptru	equ	0xFF8
  5638                           tblptrh	equ	0xFF7
  5639                           tblptrl	equ	0xFF6
  5640                           tablat	equ	0xFF5
  5641                           postinc0	equ	0xFEE
  5642                           wreg	equ	0xFE8
  5643                           postdec1	equ	0xFE5
  5644                           fsr1l	equ	0xFE1
  5645                           status	equ	0xFD8
  5646                           
  5647 ;; *************** function _Setup_Temp_Fan *****************
  5648 ;; Defined at:
  5649 ;;		line 23 in file "Setup_Fan_Temp.c"
  5650 ;; Parameters:    Size  Location     Type
  5651 ;;		None
  5652 ;; Auto vars:     Size  Location     Type
  5653 ;;		None
  5654 ;; Return value:  Size  Location     Type
  5655 ;;		None               void
  5656 ;; Registers used:
  5657 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5658 ;; Tracked objects:
  5659 ;;		On entry : 0/0
  5660 ;;		On exit  : 0/0
  5661 ;;		Unchanged: 0/0
  5662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5667 ;;Total ram usage:        0 bytes
  5668 ;; Hardware stack levels used:    1
  5669 ;; Hardware stack levels required when called:   12
  5670 ;; This function calls:
  5671 ;;		_Decrease_Fan_Temp
  5672 ;;		_Do_Beep_Bad
  5673 ;;		_Do_Beep_Good
  5674 ;;		_Do_Save_New_Fan_Temp
  5675 ;;		_Exit_Setup_Fan_Temp
  5676 ;;		_Increase_Fan_Temp
  5677 ;;		_Initialize_Setup_Fan_Screen
  5678 ;;		_Update_Setup_Fan_Screen
  5679 ;;		_check_for_button_input
  5680 ;; This function is called by:
  5681 ;;		_main
  5682 ;; This function uses a non-reentrant model
  5683 ;;
  5684                           
  5685                           	psect	text16
  5686  002D64                     __ptext16:
  5687                           	opt stack 0
  5688  002D64                     _Setup_Temp_Fan:
  5689                           	opt stack 18
  5690                           
  5691                           ;Setup_Fan_Temp.c: 24: In_Fan_Temp_Setup = 1;
  5692                           
  5693                           ;incstack = 0
  5694  002D64  0E01               	movlw	1
  5695  002D66  0100               	movlb	0	; () banked
  5696  002D68  6FF5               	movwf	_In_Fan_Temp_Setup& (0+255),b
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;Setup_Fan_Temp.c: 25: setup_fan_set_temp = fan_set_temp;
  5700  002D6A  C06E  F067         	movff	_fan_set_temp,_setup_fan_set_temp
  5701                           
  5702                           ; BSR set to: 0
  5703                           ;Setup_Fan_Temp.c: 26: Initialize_Setup_Fan_Screen();
  5704  002D6E  ECCF  F014         	call	_Initialize_Setup_Fan_Screen	;wreg free
  5705                           
  5706                           ;Setup_Fan_Temp.c: 27: Update_Setup_Fan_Screen();
  5707  002D72  EC2B  F015         	call	_Update_Setup_Fan_Screen	;wreg free
  5708                           
  5709                           ;Setup_Fan_Temp.c: 29: while (In_Fan_Temp_Setup == 1) {
  5710  002D76  D03B               	goto	l10314
  5711  002D78                     l10282:
  5712                           
  5713                           ;Setup_Fan_Temp.c: 30: if (check_for_button_input() == 1) {
  5714  002D78  ECCD  F015         	call	_check_for_button_input	;wreg free
  5715  002D7C  06E8               	decf	wreg,f,c
  5716  002D7E  A4D8               	btfss	status,2,c
  5717  002D80  D036               	goto	l10314
  5718                           
  5719                           ;Setup_Fan_Temp.c: 31: nec_ok = 0;
  5720  002D82  0E00               	movlw	0
  5721  002D84  0100               	movlb	0	; () banked
  5722  002D86  6FEE               	movwf	(_nec_ok+1)& (0+255),b
  5723  002D88  0E00               	movlw	0
  5724  002D8A  6FED               	movwf	_nec_ok& (0+255),b
  5725                           
  5726                           ;Setup_Fan_Temp.c: 33: if ((found == 0) || (found == 2) || (found == 6) || (found == 7))
      +                           {
  5727  002D8C  505E               	movf	_found,w,c
  5728  002D8E  B4D8               	btfsc	status,2,c
  5729  002D90  D00C               	goto	l10292
  5730                           
  5731                           ; BSR set to: 0
  5732  002D92  0E02               	movlw	2
  5733  002D94  185E               	xorwf	_found,w,c
  5734  002D96  B4D8               	btfsc	status,2,c
  5735  002D98  D008               	goto	l10292
  5736                           
  5737                           ; BSR set to: 0
  5738  002D9A  0E06               	movlw	6
  5739  002D9C  185E               	xorwf	_found,w,c
  5740  002D9E  B4D8               	btfsc	status,2,c
  5741  002DA0  D004               	goto	l10292
  5742                           
  5743                           ; BSR set to: 0
  5744  002DA2  0E07               	movlw	7
  5745  002DA4  185E               	xorwf	_found,w,c
  5746  002DA6  A4D8               	btfss	status,2,c
  5747  002DA8  D01F               	goto	l10312
  5748  002DAA                     l10292:
  5749                           
  5750                           ; BSR set to: 0
  5751                           ;Setup_Fan_Temp.c: 35: Do_Beep_Good();
  5752  002DAA  EC25  F01E         	call	_Do_Beep_Good	;wreg free
  5753                           
  5754                           ;Setup_Fan_Temp.c: 36: if (found == 2) Do_Save_New_Fan_Temp();
  5755  002DAE  0E02               	movlw	2
  5756  002DB0  185E               	xorwf	_found,w,c
  5757  002DB2  A4D8               	btfss	status,2,c
  5758  002DB4  D003               	goto	l10298
  5759  002DB6  EC66  F01E         	call	_Do_Save_New_Fan_Temp	;wreg free
  5760  002DBA  D000               	goto	l10298
  5761  002DBC                     l10298:
  5762                           
  5763                           ;Setup_Fan_Temp.c: 37: if (found == 0) Exit_Setup_Fan_Temp();
  5764  002DBC  505E               	movf	_found,w,c
  5765  002DBE  A4D8               	btfss	status,2,c
  5766  002DC0  D003               	goto	l10302
  5767  002DC2  ECDF  F01E         	call	_Exit_Setup_Fan_Temp	;wreg free
  5768  002DC6  D000               	goto	l10302
  5769  002DC8                     l10302:
  5770                           
  5771                           ;Setup_Fan_Temp.c: 38: if (found == 6) Decrease_Fan_Temp();
  5772  002DC8  0E06               	movlw	6
  5773  002DCA  185E               	xorwf	_found,w,c
  5774  002DCC  A4D8               	btfss	status,2,c
  5775  002DCE  D003               	goto	l10306
  5776  002DD0  EC70  F01E         	call	_Decrease_Fan_Temp	;wreg free
  5777  002DD4  D000               	goto	l10306
  5778  002DD6                     l10306:
  5779                           
  5780                           ;Setup_Fan_Temp.c: 39: if (found == 7) Increase_Fan_Temp();
  5781  002DD6  0E07               	movlw	7
  5782  002DD8  185E               	xorwf	_found,w,c
  5783  002DDA  A4D8               	btfss	status,2,c
  5784  002DDC  D003               	goto	l10310
  5785  002DDE  EC5C  F01E         	call	_Increase_Fan_Temp	;wreg free
  5786  002DE2  D000               	goto	l10310
  5787  002DE4                     l10310:
  5788                           
  5789                           ;Setup_Fan_Temp.c: 40: found = 0xff;
  5790  002DE4  685E               	setf	_found,c
  5791                           
  5792                           ;Setup_Fan_Temp.c: 41: } else {
  5793  002DE6  D003               	goto	l10314
  5794  002DE8                     l10312:
  5795                           
  5796                           ;Setup_Fan_Temp.c: 42: Do_Beep_Bad();
  5797  002DE8  EC31  F01E         	call	_Do_Beep_Bad	;wreg free
  5798  002DEC  D000               	goto	l10314
  5799  002DEE                     l10314:
  5800  002DEE  0100               	movlb	0	; () banked
  5801  002DF0  05F5               	decf	_In_Fan_Temp_Setup& (0+255),w,b
  5802  002DF2  B4D8               	btfsc	status,2,c
  5803  002DF4  D7C1               	goto	l10282
  5804                           
  5805                           ; BSR set to: 0
  5806                           
  5807                           ; BSR set to: 0
  5808  002DF6  0012               	return		;funcret
  5809  002DF8                     __end_of_Setup_Temp_Fan:
  5810                           	opt stack 0
  5811                           tblptru	equ	0xFF8
  5812                           tblptrh	equ	0xFF7
  5813                           tblptrl	equ	0xFF6
  5814                           tablat	equ	0xFF5
  5815                           postinc0	equ	0xFEE
  5816                           wreg	equ	0xFE8
  5817                           postdec1	equ	0xFE5
  5818                           fsr1l	equ	0xFE1
  5819                           status	equ	0xFD8
  5820                           
  5821 ;; *************** function _Initialize_Setup_Fan_Screen *****************
  5822 ;; Defined at:
  5823 ;;		line 81 in file "Setup_Fan_Temp.c"
  5824 ;; Parameters:    Size  Location     Type
  5825 ;;		None
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;		None
  5828 ;; Return value:  Size  Location     Type
  5829 ;;		None               void
  5830 ;; Registers used:
  5831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5832 ;; Tracked objects:
  5833 ;;		On entry : 0/0
  5834 ;;		On exit  : 0/0
  5835 ;;		Unchanged: 0/0
  5836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5841 ;;Total ram usage:        0 bytes
  5842 ;; Hardware stack levels used:    1
  5843 ;; Hardware stack levels required when called:   10
  5844 ;; This function calls:
  5845 ;;		_drawtext
  5846 ;;		_fillScreen
  5847 ;;		_strcpy
  5848 ;; This function is called by:
  5849 ;;		_Setup_Temp_Fan
  5850 ;; This function uses a non-reentrant model
  5851 ;;
  5852                           
  5853                           	psect	text17
  5854  00299E                     __ptext17:
  5855                           	opt stack 0
  5856  00299E                     _Initialize_Setup_Fan_Screen:
  5857                           	opt stack 19
  5858                           
  5859                           ;Setup_Fan_Temp.c: 82: fillScreen(0x0000);
  5860                           
  5861                           ; BSR set to: 0
  5862                           ;incstack = 0
  5863  00299E  0E00               	movlw	0
  5864  0029A0  6E25               	movwf	fillScreen@color+1,c
  5865  0029A2  0E00               	movlw	0
  5866  0029A4  6E24               	movwf	fillScreen@color,c
  5867  0029A6  ECCE  F01D         	call	_fillScreen	;wreg free
  5868                           
  5869                           ;Setup_Fan_Temp.c: 84: strcpy(txt, "ECE3301L F23-L13_S2\0");
  5870  0029AA  C052  F011         	movff	_txt,strcpy@to
  5871  0029AE  C053  F012         	movff	_txt+1,strcpy@to+1
  5872  0029B2  0E2C               	movlw	low STR_35
  5873  0029B4  6E13               	movwf	strcpy@from,c
  5874  0029B6  0EFE               	movlw	high STR_35
  5875  0029B8  6E14               	movwf	strcpy@from+1,c
  5876  0029BA  ECD7  F01C         	call	_strcpy	;wreg free
  5877                           
  5878                           ;Setup_Fan_Temp.c: 85: drawtext(1, 1, txt, 0xFFFF, 0x0000, 1);
  5879  0029BE  0E01               	movlw	1
  5880  0029C0  6E39               	movwf	drawtext@y,c
  5881  0029C2  C052  F03A         	movff	_txt,drawtext@_text
  5882  0029C6  C053  F03B         	movff	_txt+1,drawtext@_text+1
  5883  0029CA  0EFF               	movlw	255
  5884  0029CC  6E3D               	movwf	drawtext@color+1,c
  5885  0029CE  683C               	setf	drawtext@color,c
  5886  0029D0  0E00               	movlw	0
  5887  0029D2  6E3F               	movwf	drawtext@bg+1,c
  5888  0029D4  0E00               	movlw	0
  5889  0029D6  6E3E               	movwf	drawtext@bg,c
  5890  0029D8  0E01               	movlw	1
  5891  0029DA  6E40               	movwf	drawtext@size,c
  5892  0029DC  0E01               	movlw	1
  5893  0029DE  EC11  F00F         	call	_drawtext
  5894                           
  5895                           ;Setup_Fan_Temp.c: 87: strcpy(txt, " Fan Setup\0");
  5896  0029E2  C052  F011         	movff	_txt,strcpy@to
  5897  0029E6  C053  F012         	movff	_txt+1,strcpy@to+1
  5898  0029EA  0E6B               	movlw	low STR_36
  5899  0029EC  6E13               	movwf	strcpy@from,c
  5900  0029EE  0EFF               	movlw	high STR_36
  5901  0029F0  6E14               	movwf	strcpy@from+1,c
  5902  0029F2  ECD7  F01C         	call	_strcpy	;wreg free
  5903                           
  5904                           ;Setup_Fan_Temp.c: 88: drawtext(1, 1 + 25, txt, 0xFFE0, 0x0000, 2);
  5905  0029F6  0E1A               	movlw	26
  5906  0029F8  6E39               	movwf	drawtext@y,c
  5907  0029FA  C052  F03A         	movff	_txt,drawtext@_text
  5908  0029FE  C053  F03B         	movff	_txt+1,drawtext@_text+1
  5909  002A02  0EFF               	movlw	255
  5910  002A04  6E3D               	movwf	drawtext@color+1,c
  5911  002A06  0EE0               	movlw	224
  5912  002A08  6E3C               	movwf	drawtext@color,c
  5913  002A0A  0E00               	movlw	0
  5914  002A0C  6E3F               	movwf	drawtext@bg+1,c
  5915  002A0E  0E00               	movlw	0
  5916  002A10  6E3E               	movwf	drawtext@bg,c
  5917  002A12  0E02               	movlw	2
  5918  002A14  6E40               	movwf	drawtext@size,c
  5919  002A16  0E01               	movlw	1
  5920  002A18  EC11  F00F         	call	_drawtext
  5921                           
  5922                           ;Setup_Fan_Temp.c: 90: strcpy(txt, "  Set Fan Temp");
  5923  002A1C  C052  F011         	movff	_txt,strcpy@to
  5924  002A20  C053  F012         	movff	_txt+1,strcpy@to+1
  5925  002A24  0E34               	movlw	low STR_37
  5926  002A26  6E13               	movwf	strcpy@from,c
  5927  002A28  0EFF               	movlw	high STR_37
  5928  002A2A  6E14               	movwf	strcpy@from+1,c
  5929  002A2C  ECD7  F01C         	call	_strcpy	;wreg free
  5930                           
  5931                           ;Setup_Fan_Temp.c: 91: drawtext(15, 60, txt, 0x07FF, 0x0000, 1);
  5932  002A30  0E3C               	movlw	60
  5933  002A32  6E39               	movwf	drawtext@y,c
  5934  002A34  C052  F03A         	movff	_txt,drawtext@_text
  5935  002A38  C053  F03B         	movff	_txt+1,drawtext@_text+1
  5936  002A3C  0E07               	movlw	7
  5937  002A3E  6E3D               	movwf	drawtext@color+1,c
  5938  002A40  683C               	setf	drawtext@color,c
  5939  002A42  0E00               	movlw	0
  5940  002A44  6E3F               	movwf	drawtext@bg+1,c
  5941  002A46  0E00               	movlw	0
  5942  002A48  6E3E               	movwf	drawtext@bg,c
  5943  002A4A  0E01               	movlw	1
  5944  002A4C  6E40               	movwf	drawtext@size,c
  5945  002A4E  0E0F               	movlw	15
  5946  002A50  EC11  F00F         	call	_drawtext
  5947  002A54  0012               	return		;funcret
  5948  002A56                     __end_of_Initialize_Setup_Fan_Screen:
  5949                           	opt stack 0
  5950                           tblptru	equ	0xFF8
  5951                           tblptrh	equ	0xFF7
  5952                           tblptrl	equ	0xFF6
  5953                           tablat	equ	0xFF5
  5954                           postinc0	equ	0xFEE
  5955                           wreg	equ	0xFE8
  5956                           postdec1	equ	0xFE5
  5957                           fsr1l	equ	0xFE1
  5958                           status	equ	0xFD8
  5959                           
  5960 ;; *************** function _Increase_Fan_Temp *****************
  5961 ;; Defined at:
  5962 ;;		line 48 in file "Setup_Fan_Temp.c"
  5963 ;; Parameters:    Size  Location     Type
  5964 ;;		None
  5965 ;; Auto vars:     Size  Location     Type
  5966 ;;		None
  5967 ;; Return value:  Size  Location     Type
  5968 ;;		None               void
  5969 ;; Registers used:
  5970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5971 ;; Tracked objects:
  5972 ;;		On entry : 0/0
  5973 ;;		On exit  : 0/0
  5974 ;;		Unchanged: 0/0
  5975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5980 ;;Total ram usage:        0 bytes
  5981 ;; Hardware stack levels used:    1
  5982 ;; Hardware stack levels required when called:   11
  5983 ;; This function calls:
  5984 ;;		_Update_Setup_Fan_Screen
  5985 ;; This function is called by:
  5986 ;;		_Setup_Temp_Fan
  5987 ;; This function uses a non-reentrant model
  5988 ;;
  5989                           
  5990                           	psect	text18
  5991  003CB8                     __ptext18:
  5992                           	opt stack 0
  5993  003CB8                     _Increase_Fan_Temp:
  5994                           	opt stack 18
  5995                           
  5996                           ;Setup_Fan_Temp.c: 49: setup_fan_set_temp++;
  5997                           
  5998                           ;incstack = 0
  5999  003CB8  2A67               	incf	_setup_fan_set_temp,f,c
  6000                           
  6001                           ;Setup_Fan_Temp.c: 50: if (setup_fan_set_temp >= 110){
  6002  003CBA  0E6D               	movlw	109
  6003  003CBC  6467               	cpfsgt	_setup_fan_set_temp,c
  6004  003CBE  D003               	goto	l9840
  6005                           
  6006                           ;Setup_Fan_Temp.c: 51: setup_fan_set_temp = 110;
  6007  003CC0  0E6E               	movlw	110
  6008  003CC2  6E67               	movwf	_setup_fan_set_temp,c
  6009  003CC4  D000               	goto	l9840
  6010  003CC6                     l9840:
  6011                           
  6012                           ;Setup_Fan_Temp.c: 52: }
  6013                           ;Setup_Fan_Temp.c: 55: Update_Setup_Fan_Screen();
  6014  003CC6  EC2B  F015         	call	_Update_Setup_Fan_Screen	;wreg free
  6015  003CCA  0012               	return		;funcret
  6016  003CCC                     __end_of_Increase_Fan_Temp:
  6017                           	opt stack 0
  6018                           tblptru	equ	0xFF8
  6019                           tblptrh	equ	0xFF7
  6020                           tblptrl	equ	0xFF6
  6021                           tablat	equ	0xFF5
  6022                           postinc0	equ	0xFEE
  6023                           wreg	equ	0xFE8
  6024                           postdec1	equ	0xFE5
  6025                           fsr1l	equ	0xFE1
  6026                           status	equ	0xFD8
  6027                           
  6028 ;; *************** function _Exit_Setup_Fan_Temp *****************
  6029 ;; Defined at:
  6030 ;;		line 68 in file "Setup_Fan_Temp.c"
  6031 ;; Parameters:    Size  Location     Type
  6032 ;;		None
  6033 ;; Auto vars:     Size  Location     Type
  6034 ;;		None
  6035 ;; Return value:  Size  Location     Type
  6036 ;;		None               void
  6037 ;; Registers used:
  6038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6039 ;; Tracked objects:
  6040 ;;		On entry : 0/0
  6041 ;;		On exit  : 0/0
  6042 ;;		Unchanged: 0/0
  6043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6048 ;;Total ram usage:        0 bytes
  6049 ;; Hardware stack levels used:    1
  6050 ;; Hardware stack levels required when called:   11
  6051 ;; This function calls:
  6052 ;;		_DS3231_Read_Time
  6053 ;;		_Initialize_Screen
  6054 ;; This function is called by:
  6055 ;;		_Setup_Temp_Fan
  6056 ;; This function uses a non-reentrant model
  6057 ;;
  6058                           
  6059                           	psect	text19
  6060  003DBE                     __ptext19:
  6061                           	opt stack 0
  6062  003DBE                     _Exit_Setup_Fan_Temp:
  6063                           	opt stack 18
  6064                           
  6065                           ;Setup_Fan_Temp.c: 69: DS3231_Read_Time();
  6066                           
  6067                           ;incstack = 0
  6068  003DBE  EC0B  F019         	call	_DS3231_Read_Time	;wreg free
  6069                           
  6070                           ;Setup_Fan_Temp.c: 70: Initialize_Screen();
  6071  003DC2  EC1E  F003         	call	_Initialize_Screen	;wreg free
  6072                           
  6073                           ;Setup_Fan_Temp.c: 71: In_Fan_Temp_Setup = 0;
  6074  003DC6  0E00               	movlw	0
  6075  003DC8  0100               	movlb	0	; () banked
  6076  003DCA  6FF5               	movwf	_In_Fan_Temp_Setup& (0+255),b
  6077                           
  6078                           ; BSR set to: 0
  6079  003DCC  0012               	return		;funcret
  6080  003DCE                     __end_of_Exit_Setup_Fan_Temp:
  6081                           	opt stack 0
  6082                           tblptru	equ	0xFF8
  6083                           tblptrh	equ	0xFF7
  6084                           tblptrl	equ	0xFF6
  6085                           tablat	equ	0xFF5
  6086                           postinc0	equ	0xFEE
  6087                           wreg	equ	0xFE8
  6088                           postdec1	equ	0xFE5
  6089                           fsr1l	equ	0xFE1
  6090                           status	equ	0xFD8
  6091                           
  6092 ;; *************** function _Do_Save_New_Fan_Temp *****************
  6093 ;; Defined at:
  6094 ;;		line 74 in file "Setup_Fan_Temp.c"
  6095 ;; Parameters:    Size  Location     Type
  6096 ;;		None
  6097 ;; Auto vars:     Size  Location     Type
  6098 ;;		None
  6099 ;; Return value:  Size  Location     Type
  6100 ;;		None               void
  6101 ;; Registers used:
  6102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6103 ;; Tracked objects:
  6104 ;;		On entry : 0/0
  6105 ;;		On exit  : 0/0
  6106 ;;		Unchanged: 0/0
  6107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6112 ;;Total ram usage:        0 bytes
  6113 ;; Hardware stack levels used:    1
  6114 ;; Hardware stack levels required when called:   11
  6115 ;; This function calls:
  6116 ;;		_DS3231_Read_Time
  6117 ;;		_Initialize_Screen
  6118 ;; This function is called by:
  6119 ;;		_Setup_Temp_Fan
  6120 ;; This function uses a non-reentrant model
  6121 ;;
  6122                           
  6123                           	psect	text20
  6124  003CCC                     __ptext20:
  6125                           	opt stack 0
  6126  003CCC                     _Do_Save_New_Fan_Temp:
  6127                           	opt stack 18
  6128                           
  6129                           ;Setup_Fan_Temp.c: 75: fan_set_temp = setup_fan_set_temp;
  6130                           
  6131                           ; BSR set to: 0
  6132                           ;incstack = 0
  6133  003CCC  C067  F06E         	movff	_setup_fan_set_temp,_fan_set_temp
  6134                           
  6135                           ;Setup_Fan_Temp.c: 76: DS3231_Read_Time();
  6136  003CD0  EC0B  F019         	call	_DS3231_Read_Time	;wreg free
  6137                           
  6138                           ;Setup_Fan_Temp.c: 77: Initialize_Screen();
  6139  003CD4  EC1E  F003         	call	_Initialize_Screen	;wreg free
  6140                           
  6141                           ;Setup_Fan_Temp.c: 78: In_Fan_Temp_Setup = 0;
  6142  003CD8  0E00               	movlw	0
  6143  003CDA  0100               	movlb	0	; () banked
  6144  003CDC  6FF5               	movwf	_In_Fan_Temp_Setup& (0+255),b
  6145                           
  6146                           ; BSR set to: 0
  6147  003CDE  0012               	return		;funcret
  6148  003CE0                     __end_of_Do_Save_New_Fan_Temp:
  6149                           	opt stack 0
  6150                           tblptru	equ	0xFF8
  6151                           tblptrh	equ	0xFF7
  6152                           tblptrl	equ	0xFF6
  6153                           tablat	equ	0xFF5
  6154                           postinc0	equ	0xFEE
  6155                           wreg	equ	0xFE8
  6156                           postdec1	equ	0xFE5
  6157                           fsr1l	equ	0xFE1
  6158                           status	equ	0xFD8
  6159                           
  6160 ;; *************** function _Decrease_Fan_Temp *****************
  6161 ;; Defined at:
  6162 ;;		line 58 in file "Setup_Fan_Temp.c"
  6163 ;; Parameters:    Size  Location     Type
  6164 ;;		None
  6165 ;; Auto vars:     Size  Location     Type
  6166 ;;		None
  6167 ;; Return value:  Size  Location     Type
  6168 ;;		None               void
  6169 ;; Registers used:
  6170 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6171 ;; Tracked objects:
  6172 ;;		On entry : 0/0
  6173 ;;		On exit  : 0/0
  6174 ;;		Unchanged: 0/0
  6175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6180 ;;Total ram usage:        0 bytes
  6181 ;; Hardware stack levels used:    1
  6182 ;; Hardware stack levels required when called:   11
  6183 ;; This function calls:
  6184 ;;		_Update_Setup_Fan_Screen
  6185 ;; This function is called by:
  6186 ;;		_Setup_Temp_Fan
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           	psect	text21
  6191  003CE0                     __ptext21:
  6192                           	opt stack 0
  6193  003CE0                     _Decrease_Fan_Temp:
  6194                           	opt stack 18
  6195                           
  6196                           ;Setup_Fan_Temp.c: 59: setup_fan_set_temp--;
  6197                           
  6198                           ; BSR set to: 0
  6199                           ;incstack = 0
  6200  003CE0  0667               	decf	_setup_fan_set_temp,f,c
  6201                           
  6202                           ;Setup_Fan_Temp.c: 60: if (setup_fan_set_temp <= 50){
  6203  003CE2  0E33               	movlw	51
  6204  003CE4  6067               	cpfslt	_setup_fan_set_temp,c
  6205  003CE6  D003               	goto	l9832
  6206                           
  6207                           ;Setup_Fan_Temp.c: 61: setup_fan_set_temp = 50;
  6208  003CE8  0E32               	movlw	50
  6209  003CEA  6E67               	movwf	_setup_fan_set_temp,c
  6210  003CEC  D000               	goto	l9832
  6211  003CEE                     l9832:
  6212                           
  6213                           ;Setup_Fan_Temp.c: 62: }
  6214                           ;Setup_Fan_Temp.c: 65: Update_Setup_Fan_Screen();
  6215  003CEE  EC2B  F015         	call	_Update_Setup_Fan_Screen	;wreg free
  6216  003CF2  0012               	return		;funcret
  6217  003CF4                     __end_of_Decrease_Fan_Temp:
  6218                           	opt stack 0
  6219                           tblptru	equ	0xFF8
  6220                           tblptrh	equ	0xFF7
  6221                           tblptrl	equ	0xFF6
  6222                           tablat	equ	0xFF5
  6223                           postinc0	equ	0xFEE
  6224                           wreg	equ	0xFE8
  6225                           postdec1	equ	0xFE5
  6226                           fsr1l	equ	0xFE1
  6227                           status	equ	0xFD8
  6228                           
  6229 ;; *************** function _Update_Setup_Fan_Screen *****************
  6230 ;; Defined at:
  6231 ;;		line 94 in file "Setup_Fan_Temp.c"
  6232 ;; Parameters:    Size  Location     Type
  6233 ;;		None
  6234 ;; Auto vars:     Size  Location     Type
  6235 ;;  dc_char3        1    9[BANK1 ] unsigned char 
  6236 ;;  dc_char2        1    8[BANK1 ] unsigned char 
  6237 ;;  dc_char1        1    7[BANK1 ] unsigned char 
  6238 ;; Return value:  Size  Location     Type
  6239 ;;		None               void
  6240 ;; Registers used:
  6241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6242 ;; Tracked objects:
  6243 ;;		On entry : 0/0
  6244 ;;		On exit  : 0/0
  6245 ;;		Unchanged: 0/0
  6246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6248 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6250 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6251 ;;Total ram usage:        3 bytes
  6252 ;; Hardware stack levels used:    1
  6253 ;; Hardware stack levels required when called:   10
  6254 ;; This function calls:
  6255 ;;		___awdiv
  6256 ;;		___awmod
  6257 ;;		_drawtext
  6258 ;; This function is called by:
  6259 ;;		_Setup_Temp_Fan
  6260 ;;		_Increase_Fan_Temp
  6261 ;;		_Decrease_Fan_Temp
  6262 ;; This function uses a non-reentrant model
  6263 ;;
  6264                           
  6265                           	psect	text22
  6266  002A56                     __ptext22:
  6267                           	opt stack 0
  6268  002A56                     _Update_Setup_Fan_Screen:
  6269                           	opt stack 19
  6270                           
  6271                           ;Setup_Fan_Temp.c: 95: char dc_char1 = setup_fan_set_temp / 100;
  6272                           
  6273                           ;incstack = 0
  6274  002A56  C067  F017         	movff	_setup_fan_set_temp,___awdiv@dividend
  6275  002A5A  6A18               	clrf	___awdiv@dividend+1,c
  6276  002A5C  0E00               	movlw	0
  6277  002A5E  6E1A               	movwf	___awdiv@divisor+1,c
  6278  002A60  0E64               	movlw	100
  6279  002A62  6E19               	movwf	___awdiv@divisor,c
  6280  002A64  EC67  F016         	call	___awdiv	;wreg free
  6281  002A68  5017               	movf	?___awdiv,w,c
  6282  002A6A  0101               	movlb	1	; () banked
  6283  002A6C  6F4B               	movwf	Update_Setup_Fan_Screen@dc_char1& (0+255),b
  6284                           
  6285                           ;Setup_Fan_Temp.c: 96: char dc_char2 = (setup_fan_set_temp / 10)%10;
  6286  002A6E  0E00               	movlw	0
  6287  002A70  6E1A               	movwf	___awdiv@divisor+1,c
  6288  002A72  0E0A               	movlw	10
  6289  002A74  6E19               	movwf	___awdiv@divisor,c
  6290  002A76  C067  F017         	movff	_setup_fan_set_temp,___awdiv@dividend
  6291  002A7A  6A18               	clrf	___awdiv@dividend+1,c
  6292  002A7C  EC67  F016         	call	___awdiv	;wreg free
  6293  002A80  C017  F044         	movff	?___awdiv,___awmod@dividend
  6294  002A84  C018  F045         	movff	?___awdiv+1,___awmod@dividend+1
  6295  002A88  0E00               	movlw	0
  6296  002A8A  6E47               	movwf	___awmod@divisor+1,c
  6297  002A8C  0E0A               	movlw	10
  6298  002A8E  6E46               	movwf	___awmod@divisor,c
  6299  002A90  EC44  F017         	call	___awmod	;wreg free
  6300  002A94  5044               	movf	?___awmod,w,c
  6301  002A96  0101               	movlb	1	; () banked
  6302  002A98  6F4C               	movwf	Update_Setup_Fan_Screen@dc_char2& (0+255),b
  6303                           
  6304                           ;Setup_Fan_Temp.c: 97: char dc_char3 = (setup_fan_set_temp % 10);
  6305  002A9A  C067  F044         	movff	_setup_fan_set_temp,___awmod@dividend
  6306  002A9E  6A45               	clrf	___awmod@dividend+1,c
  6307  002AA0  0E00               	movlw	0
  6308  002AA2  6E47               	movwf	___awmod@divisor+1,c
  6309  002AA4  0E0A               	movlw	10
  6310  002AA6  6E46               	movwf	___awmod@divisor,c
  6311  002AA8  EC44  F017         	call	___awmod	;wreg free
  6312  002AAC  5044               	movf	?___awmod,w,c
  6313  002AAE  0101               	movlb	1	; () banked
  6314  002AB0  6F4D               	movwf	Update_Setup_Fan_Screen@dc_char3& (0+255),b
  6315                           
  6316                           ; BSR set to: 1
  6317                           ;Setup_Fan_Temp.c: 98: setup_fan_set_text[0] = dc_char1 + '0';
  6318  002AB2  0101               	movlb	1	; () banked
  6319  002AB4  514B               	movf	Update_Setup_Fan_Screen@dc_char1& (0+255),w,b
  6320  002AB6  0F30               	addlw	48
  6321  002AB8  0100               	movlb	0	; () banked
  6322  002ABA  6FBF               	movwf	_setup_fan_set_text& (0+255),b
  6323                           
  6324                           ; BSR set to: 0
  6325                           ;Setup_Fan_Temp.c: 99: setup_fan_set_text[1] = dc_char2 + '0';
  6326  002ABC  0101               	movlb	1	; () banked
  6327  002ABE  514C               	movf	Update_Setup_Fan_Screen@dc_char2& (0+255),w,b
  6328  002AC0  0F30               	addlw	48
  6329  002AC2  0100               	movlb	0	; () banked
  6330  002AC4  6FC0               	movwf	(_setup_fan_set_text+1)& (0+255),b
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;Setup_Fan_Temp.c: 100: setup_fan_set_text[2] = dc_char3 + '0';
  6334  002AC6  0101               	movlb	1	; () banked
  6335  002AC8  514D               	movf	Update_Setup_Fan_Screen@dc_char3& (0+255),w,b
  6336  002ACA  0F30               	addlw	48
  6337  002ACC  0100               	movlb	0	; () banked
  6338  002ACE  6FC1               	movwf	(_setup_fan_set_text+2)& (0+255),b
  6339                           
  6340                           ; BSR set to: 0
  6341                           ;Setup_Fan_Temp.c: 101: drawtext(40, 74, setup_fan_set_text, 0xF800, 0x0000, 2);
  6342  002AD0  0E4A               	movlw	74
  6343  002AD2  6E39               	movwf	drawtext@y,c
  6344  002AD4  0EBF               	movlw	low _setup_fan_set_text
  6345  002AD6  6E3A               	movwf	drawtext@_text,c
  6346  002AD8  0E00               	movlw	high _setup_fan_set_text
  6347  002ADA  6E3B               	movwf	drawtext@_text+1,c
  6348  002ADC  0EF8               	movlw	248
  6349  002ADE  6E3D               	movwf	drawtext@color+1,c
  6350  002AE0  0E00               	movlw	0
  6351  002AE2  6E3C               	movwf	drawtext@color,c
  6352  002AE4  0E00               	movlw	0
  6353  002AE6  6E3F               	movwf	drawtext@bg+1,c
  6354  002AE8  0E00               	movlw	0
  6355  002AEA  6E3E               	movwf	drawtext@bg,c
  6356  002AEC  0E02               	movlw	2
  6357  002AEE  6E40               	movwf	drawtext@size,c
  6358  002AF0  0E28               	movlw	40
  6359  002AF2  EC11  F00F         	call	_drawtext
  6360  002AF6  0012               	return		;funcret
  6361  002AF8                     __end_of_Update_Setup_Fan_Screen:
  6362                           	opt stack 0
  6363                           tblptru	equ	0xFF8
  6364                           tblptrh	equ	0xFF7
  6365                           tblptrl	equ	0xFF6
  6366                           tablat	equ	0xFF5
  6367                           postinc0	equ	0xFEE
  6368                           wreg	equ	0xFE8
  6369                           postdec1	equ	0xFE5
  6370                           fsr1l	equ	0xFE1
  6371                           status	equ	0xFD8
  6372                           
  6373 ;; *************** function _Monitor_Fan *****************
  6374 ;; Defined at:
  6375 ;;		line 113 in file "Fan_Support.c"
  6376 ;; Parameters:    Size  Location     Type
  6377 ;;		None
  6378 ;; Auto vars:     Size  Location     Type
  6379 ;;		None
  6380 ;; Return value:  Size  Location     Type
  6381 ;;		None               void
  6382 ;; Registers used:
  6383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6384 ;; Tracked objects:
  6385 ;;		On entry : 0/0
  6386 ;;		On exit  : 0/0
  6387 ;;		Unchanged: 0/0
  6388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6393 ;;Total ram usage:        0 bytes
  6394 ;; Hardware stack levels used:    1
  6395 ;; Hardware stack levels required when called:    6
  6396 ;; This function calls:
  6397 ;;		_do_update_pwm
  6398 ;;		_get_duty_cycle
  6399 ;;		_printf
  6400 ;; This function is called by:
  6401 ;;		_main
  6402 ;; This function uses a non-reentrant model
  6403 ;;
  6404                           
  6405                           	psect	text23
  6406  0035A2                     __ptext23:
  6407                           	opt stack 0
  6408  0035A2                     _Monitor_Fan:
  6409                           	opt stack 24
  6410                           
  6411                           ;Fan_Support.c: 114: duty_cycle = get_duty_cycle(DS1621_tempF, setup_fan_set_temp);
  6412                           
  6413                           ;incstack = 0
  6414  0035A2  C04C  F044         	movff	_DS1621_tempF,get_duty_cycle@ambient_temp
  6415  0035A6  C04D  F045         	movff	_DS1621_tempF+1,get_duty_cycle@ambient_temp+1
  6416  0035AA  C067  F046         	movff	_setup_fan_set_temp,get_duty_cycle@set_temp
  6417  0035AE  6A47               	clrf	get_duty_cycle@set_temp+1,c
  6418  0035B0  EC8E  F007         	call	_get_duty_cycle	;wreg free
  6419  0035B4  5044               	movf	?_get_duty_cycle,w,c
  6420  0035B6  6E5D               	movwf	_duty_cycle,c
  6421                           
  6422                           ;Fan_Support.c: 115: printf("temp is %d and set temp is %d\r\n", DS1621_tempF, setup_fan
      +                          _set_temp);
  6423  0035B8  0E98               	movlw	low STR_1
  6424  0035BA  6E1D               	movwf	printf@f,c
  6425  0035BC  0EFD               	movlw	high STR_1
  6426  0035BE  6E1E               	movwf	printf@f+1,c
  6427  0035C0  C04C  F01F         	movff	_DS1621_tempF,?_printf+2
  6428  0035C4  C04D  F020         	movff	_DS1621_tempF+1,?_printf+3
  6429  0035C8  C067  F021         	movff	_setup_fan_set_temp,?_printf+4
  6430  0035CC  6A22               	clrf	?_printf+5,c
  6431  0035CE  ECDE  F004         	call	_printf	;wreg free
  6432                           
  6433                           ;Fan_Support.c: 116: printf("duty cycle");
  6434  0035D2  0EA4               	movlw	low STR_2
  6435  0035D4  6E1D               	movwf	printf@f,c
  6436  0035D6  0EFF               	movlw	high STR_2
  6437  0035D8  6E1E               	movwf	printf@f+1,c
  6438  0035DA  ECDE  F004         	call	_printf	;wreg free
  6439                           
  6440                           ;Fan_Support.c: 117: do_update_pwm(duty_cycle);
  6441  0035DE  505D               	movf	_duty_cycle,w,c
  6442  0035E0  EC12  F014         	call	_do_update_pwm
  6443                           
  6444                           ;Fan_Support.c: 118: if(FAN == 1)
  6445  0035E4  0454               	decf	_FAN,w,c
  6446  0035E6  A4D8               	btfss	status,2,c
  6447  0035E8  D002               	goto	l292
  6448                           
  6449                           ;Fan_Support.c: 119: {
  6450                           ;Fan_Support.c: 120: PORTAbits.RA5 = 1;
  6451  0035EA  8A80               	bsf	3968,5,c	;volatile
  6452                           
  6453                           ;Fan_Support.c: 121: }
  6454  0035EC  D002               	goto	l294
  6455  0035EE                     l292:
  6456                           
  6457                           ;Fan_Support.c: 122: else PORTAbits.RA5 = 0;
  6458  0035EE  9A80               	bcf	3968,5,c	;volatile
  6459  0035F0  D000               	goto	l294
  6460  0035F2                     l294:
  6461  0035F2  0012               	return		;funcret
  6462  0035F4                     __end_of_Monitor_Fan:
  6463                           	opt stack 0
  6464                           tblptru	equ	0xFF8
  6465                           tblptrh	equ	0xFF7
  6466                           tblptrl	equ	0xFF6
  6467                           tablat	equ	0xFF5
  6468                           postinc0	equ	0xFEE
  6469                           wreg	equ	0xFE8
  6470                           postdec1	equ	0xFE5
  6471                           fsr1l	equ	0xFE1
  6472                           status	equ	0xFD8
  6473                           
  6474 ;; *************** function _get_duty_cycle *****************
  6475 ;; Defined at:
  6476 ;;		line 125 in file "Fan_Support.c"
  6477 ;; Parameters:    Size  Location     Type
  6478 ;;  ambient_temp    2   67[COMRAM] int 
  6479 ;;  set_temp        2   69[COMRAM] int 
  6480 ;; Auto vars:     Size  Location     Type
  6481 ;;  diff_temp       2    6[BANK1 ] int 
  6482 ;;  diff_temp_fl    3    8[BANK1 ] float 
  6483 ;;  diff_temp       2   13[BANK1 ] int 
  6484 ;;  dc              2   11[BANK1 ] int 
  6485 ;; Return value:  Size  Location     Type
  6486 ;;                  2   67[COMRAM] int 
  6487 ;; Registers used:
  6488 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6489 ;; Tracked objects:
  6490 ;;		On entry : 0/0
  6491 ;;		On exit  : 0/0
  6492 ;;		Unchanged: 0/0
  6493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6494 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6495 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6496 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6497 ;;      Totals:         4       2       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6498 ;;Total ram usage:       15 bytes
  6499 ;; Hardware stack levels used:    1
  6500 ;; Hardware stack levels required when called:    5
  6501 ;; This function calls:
  6502 ;;		___awtoft
  6503 ;;		___ftmul
  6504 ;;		___fttol
  6505 ;;		_printf
  6506 ;; This function is called by:
  6507 ;;		_Monitor_Fan
  6508 ;; This function uses a non-reentrant model
  6509 ;;
  6510                           
  6511                           	psect	text24
  6512  000F1C                     __ptext24:
  6513                           	opt stack 0
  6514  000F1C                     _get_duty_cycle:
  6515                           	opt stack 24
  6516                           
  6517                           ;Fan_Support.c: 126: int diff_temp;
  6518                           ;Fan_Support.c: 128: if (ambient_temp >= set_temp){
  6519                           
  6520                           ;incstack = 0
  6521  000F1C  5046               	movf	get_duty_cycle@set_temp,w,c
  6522  000F1E  5C44               	subwf	get_duty_cycle@ambient_temp,w,c
  6523  000F20  5045               	movf	get_duty_cycle@ambient_temp+1,w,c
  6524  000F22  0A80               	xorlw	128
  6525  000F24  0100               	movlb	0	; () banked
  6526  000F26  6FFE               	movwf	??_get_duty_cycle& (0+255),b
  6527  000F28  5047               	movf	get_duty_cycle@set_temp+1,w,c
  6528  000F2A  0A80               	xorlw	128
  6529  000F2C  0100               	movlb	0	; () banked
  6530  000F2E  59FE               	subwfb	??_get_duty_cycle& (0+255),w,b
  6531  000F30  A0D8               	btfss	status,0,c
  6532  000F32  D009               	goto	l9522
  6533                           
  6534                           ; BSR set to: 0
  6535                           ;Fan_Support.c: 129: duty_cycle=0;
  6536  000F34  0E00               	movlw	0
  6537  000F36  6E5D               	movwf	_duty_cycle,c
  6538                           
  6539                           ; BSR set to: 0
  6540                           ;Fan_Support.c: 130: printf("duty cycle is 0\n");
  6541  000F38  0E23               	movlw	low STR_3
  6542  000F3A  6E1D               	movwf	printf@f,c
  6543  000F3C  0EFF               	movlw	high STR_3
  6544  000F3E  6E1E               	movwf	printf@f+1,c
  6545  000F40  ECDE  F004         	call	_printf	;wreg free
  6546                           
  6547                           ;Fan_Support.c: 131: }
  6548  000F44  D024               	goto	l9528
  6549  000F46                     l9522:
  6550                           
  6551                           ;Fan_Support.c: 132: else {
  6552                           ;Fan_Support.c: 133: int diff_temp = (set_temp - ambient_temp);
  6553  000F46  C044  F0FE         	movff	get_duty_cycle@ambient_temp,??_get_duty_cycle
  6554  000F4A  C045  F0FF         	movff	get_duty_cycle@ambient_temp+1,??_get_duty_cycle+1
  6555  000F4E  0100               	movlb	0	; () banked
  6556  000F50  1FFE               	comf	??_get_duty_cycle& (0+255),f,b
  6557  000F52  1FFF               	comf	(??_get_duty_cycle+1)& (0+255),f,b
  6558  000F54  4BFE               	infsnz	??_get_duty_cycle& (0+255),f,b
  6559  000F56  2BFF               	incf	(??_get_duty_cycle+1)& (0+255),f,b
  6560  000F58  5046               	movf	get_duty_cycle@set_temp,w,c
  6561  000F5A  0100               	movlb	0	; () banked
  6562  000F5C  25FE               	addwf	??_get_duty_cycle& (0+255),w,b
  6563  000F5E  0101               	movlb	1	; () banked
  6564  000F60  6F4A               	movwf	get_duty_cycle@diff_temp_816& (0+255),b
  6565  000F62  5047               	movf	get_duty_cycle@set_temp+1,w,c
  6566  000F64  0100               	movlb	0	; () banked
  6567  000F66  21FF               	addwfc	(??_get_duty_cycle+1)& (0+255),w,b
  6568  000F68  0101               	movlb	1	; () banked
  6569  000F6A  6F4B               	movwf	(get_duty_cycle@diff_temp_816+1)& (0+255),b
  6570                           
  6571                           ; BSR set to: 1
  6572                           ;Fan_Support.c: 134: printf("calculate diff temp\n");
  6573  000F6C  0E41               	movlw	low STR_4
  6574  000F6E  6E1D               	movwf	printf@f,c
  6575  000F70  0EFE               	movlw	high STR_4
  6576  000F72  6E1E               	movwf	printf@f+1,c
  6577  000F74  ECDE  F004         	call	_printf	;wreg free
  6578                           
  6579                           ;Fan_Support.c: 135: printf("diff_temp is %d \r\n",diff_temp);
  6580  000F78  0EB7               	movlw	low STR_5
  6581  000F7A  6E1D               	movwf	printf@f,c
  6582  000F7C  0EFE               	movlw	high STR_5
  6583  000F7E  6E1E               	movwf	printf@f+1,c
  6584  000F80  C14A  F01F         	movff	get_duty_cycle@diff_temp_816,?_printf+2
  6585  000F84  C14B  F020         	movff	get_duty_cycle@diff_temp_816+1,?_printf+3
  6586  000F88  ECDE  F004         	call	_printf	;wreg free
  6587  000F8C  D000               	goto	l9528
  6588  000F8E                     l9528:
  6589                           
  6590                           ;Fan_Support.c: 136: }
  6591                           ;Fan_Support.c: 138: float diff_temp_float = (float)diff_temp;
  6592  000F8E  C151  F019         	movff	get_duty_cycle@diff_temp,___awtoft@c
  6593  000F92  C152  F01A         	movff	get_duty_cycle@diff_temp+1,___awtoft@c+1
  6594  000F96  EC82  F01C         	call	___awtoft	;wreg free
  6595  000F9A  C019  F14C         	movff	?___awtoft,get_duty_cycle@diff_temp_float
  6596  000F9E  C01A  F14D         	movff	?___awtoft+1,get_duty_cycle@diff_temp_float+1
  6597  000FA2  C01B  F14E         	movff	?___awtoft+2,get_duty_cycle@diff_temp_float+2
  6598                           
  6599                           ;Fan_Support.c: 139: int dc;
  6600                           ;Fan_Support.c: 140: if (diff_temp >= 50){
  6601  000FA6  0101               	movlb	1	; () banked
  6602  000FA8  BF52               	btfsc	(get_duty_cycle@diff_temp+1)& (0+255),7,b
  6603  000FAA  D011               	goto	l9536
  6604  000FAC  0101               	movlb	1	; () banked
  6605  000FAE  5152               	movf	(get_duty_cycle@diff_temp+1)& (0+255),w,b
  6606  000FB0  E105               	bnz	u6740
  6607  000FB2  0E32               	movlw	50
  6608  000FB4  0101               	movlb	1	; () banked
  6609  000FB6  5D51               	subwf	get_duty_cycle@diff_temp& (0+255),w,b
  6610  000FB8  A0D8               	btfss	status,0,c
  6611  000FBA  D009               	goto	l9536
  6612  000FBC                     u6740:
  6613                           
  6614                           ; BSR set to: 1
  6615                           ;Fan_Support.c: 141: duty_cycle=100;
  6616  000FBC  0E64               	movlw	100
  6617  000FBE  6E5D               	movwf	_duty_cycle,c
  6618                           
  6619                           ; BSR set to: 1
  6620                           ;Fan_Support.c: 142: printf("100\n");
  6621  000FC0  0ED7               	movlw	low STR_6
  6622  000FC2  6E1D               	movwf	printf@f,c
  6623  000FC4  0EFF               	movlw	high STR_6
  6624  000FC6  6E1E               	movwf	printf@f+1,c
  6625  000FC8  ECDE  F004         	call	_printf	;wreg free
  6626  000FCC  D000               	goto	l9536
  6627  000FCE                     l9536:
  6628                           
  6629                           ;Fan_Support.c: 143: }
  6630                           ;Fan_Support.c: 144: if (diff_temp >= 35 && diff_temp < 50){
  6631  000FCE  0101               	movlb	1	; () banked
  6632  000FD0  BF52               	btfsc	(get_duty_cycle@diff_temp+1)& (0+255),7,b
  6633  000FD2  D036               	goto	l9546
  6634  000FD4  0101               	movlb	1	; () banked
  6635  000FD6  5152               	movf	(get_duty_cycle@diff_temp+1)& (0+255),w,b
  6636  000FD8  E105               	bnz	u6750
  6637  000FDA  0E23               	movlw	35
  6638  000FDC  0101               	movlb	1	; () banked
  6639  000FDE  5D51               	subwf	get_duty_cycle@diff_temp& (0+255),w,b
  6640  000FE0  A0D8               	btfss	status,0,c
  6641  000FE2  D02E               	goto	l9546
  6642  000FE4                     u6750:
  6643                           
  6644                           ; BSR set to: 1
  6645  000FE4  0101               	movlb	1	; () banked
  6646  000FE6  BF52               	btfsc	(get_duty_cycle@diff_temp+1)& (0+255),7,b
  6647  000FE8  D008               	goto	l9540
  6648  000FEA  0101               	movlb	1	; () banked
  6649  000FEC  5152               	movf	(get_duty_cycle@diff_temp+1)& (0+255),w,b
  6650  000FEE  E128               	bnz	l9546
  6651  000FF0  0E32               	movlw	50
  6652  000FF2  0101               	movlb	1	; () banked
  6653  000FF4  5D51               	subwf	get_duty_cycle@diff_temp& (0+255),w,b
  6654  000FF6  B0D8               	btfsc	status,0,c
  6655  000FF8  D023               	goto	l9546
  6656  000FFA                     l9540:
  6657                           
  6658                           ; BSR set to: 1
  6659                           ;Fan_Support.c: 145: dc = (int)(diff_temp_float * 2.00);
  6660  000FFA  0E00               	movlw	0
  6661  000FFC  6E20               	movwf	___ftmul@f2,c
  6662  000FFE  0E00               	movlw	0
  6663  001000  6E21               	movwf	___ftmul@f2+1,c
  6664  001002  0E40               	movlw	64
  6665  001004  6E22               	movwf	___ftmul@f2+2,c
  6666  001006  C14C  F01D         	movff	get_duty_cycle@diff_temp_float,___ftmul@f1
  6667  00100A  C14D  F01E         	movff	get_duty_cycle@diff_temp_float+1,___ftmul@f1+1
  6668  00100E  C14E  F01F         	movff	get_duty_cycle@diff_temp_float+2,___ftmul@f1+2
  6669  001012  EC1E  F010         	call	___ftmul	;wreg free
  6670  001016  C01D  F03B         	movff	?___ftmul,___fttol@f1
  6671  00101A  C01E  F03C         	movff	?___ftmul+1,___fttol@f1+1
  6672  00101E  C01F  F03D         	movff	?___ftmul+2,___fttol@f1+2
  6673  001022  EC8A  F00E         	call	___fttol	;wreg free
  6674  001026  C03B  F14F         	movff	?___fttol,get_duty_cycle@dc
  6675  00102A  C03C  F150         	movff	?___fttol+1,get_duty_cycle@dc+1
  6676                           
  6677                           ;Fan_Support.c: 146: duty_cycle = dc;
  6678  00102E  C14F  F05D         	movff	get_duty_cycle@dc,_duty_cycle
  6679                           
  6680                           ;Fan_Support.c: 147: printf("35-50\n");
  6681  001032  0EBF               	movlw	low STR_7
  6682  001034  6E1D               	movwf	printf@f,c
  6683  001036  0EFF               	movlw	high STR_7
  6684  001038  6E1E               	movwf	printf@f+1,c
  6685  00103A  ECDE  F004         	call	_printf	;wreg free
  6686  00103E  D000               	goto	l9546
  6687  001040                     l9546:
  6688                           
  6689                           ;Fan_Support.c: 148: }
  6690                           ;Fan_Support.c: 149: if (diff_temp >= 25 && diff_temp < 35){
  6691  001040  0101               	movlb	1	; () banked
  6692  001042  BF52               	btfsc	(get_duty_cycle@diff_temp+1)& (0+255),7,b
  6693  001044  D036               	goto	l9556
  6694  001046  0101               	movlb	1	; () banked
  6695  001048  5152               	movf	(get_duty_cycle@diff_temp+1)& (0+255),w,b
  6696  00104A  E105               	bnz	u6770
  6697  00104C  0E19               	movlw	25
  6698  00104E  0101               	movlb	1	; () banked
  6699  001050  5D51               	subwf	get_duty_cycle@diff_temp& (0+255),w,b
  6700  001052  A0D8               	btfss	status,0,c
  6701  001054  D02E               	goto	l9556
  6702  001056                     u6770:
  6703                           
  6704                           ; BSR set to: 1
  6705  001056  0101               	movlb	1	; () banked
  6706  001058  BF52               	btfsc	(get_duty_cycle@diff_temp+1)& (0+255),7,b
  6707  00105A  D008               	goto	l9550
  6708  00105C  0101               	movlb	1	; () banked
  6709  00105E  5152               	movf	(get_duty_cycle@diff_temp+1)& (0+255),w,b
  6710  001060  E128               	bnz	l9556
  6711  001062  0E23               	movlw	35
  6712  001064  0101               	movlb	1	; () banked
  6713  001066  5D51               	subwf	get_duty_cycle@diff_temp& (0+255),w,b
  6714  001068  B0D8               	btfsc	status,0,c
  6715  00106A  D023               	goto	l9556
  6716  00106C                     l9550:
  6717                           
  6718                           ; BSR set to: 1
  6719                           ;Fan_Support.c: 150: dc = (int)(diff_temp_float * 1.5);
  6720  00106C  0E00               	movlw	0
  6721  00106E  6E20               	movwf	___ftmul@f2,c
  6722  001070  0EC0               	movlw	192
  6723  001072  6E21               	movwf	___ftmul@f2+1,c
  6724  001074  0E3F               	movlw	63
  6725  001076  6E22               	movwf	___ftmul@f2+2,c
  6726  001078  C14C  F01D         	movff	get_duty_cycle@diff_temp_float,___ftmul@f1
  6727  00107C  C14D  F01E         	movff	get_duty_cycle@diff_temp_float+1,___ftmul@f1+1
  6728  001080  C14E  F01F         	movff	get_duty_cycle@diff_temp_float+2,___ftmul@f1+2
  6729  001084  EC1E  F010         	call	___ftmul	;wreg free
  6730  001088  C01D  F03B         	movff	?___ftmul,___fttol@f1
  6731  00108C  C01E  F03C         	movff	?___ftmul+1,___fttol@f1+1
  6732  001090  C01F  F03D         	movff	?___ftmul+2,___fttol@f1+2
  6733  001094  EC8A  F00E         	call	___fttol	;wreg free
  6734  001098  C03B  F14F         	movff	?___fttol,get_duty_cycle@dc
  6735  00109C  C03C  F150         	movff	?___fttol+1,get_duty_cycle@dc+1
  6736                           
  6737                           ;Fan_Support.c: 151: duty_cycle = dc;
  6738  0010A0  C14F  F05D         	movff	get_duty_cycle@dc,_duty_cycle
  6739                           
  6740                           ;Fan_Support.c: 152: printf("25-35\n");
  6741  0010A4  0EC6               	movlw	low STR_8
  6742  0010A6  6E1D               	movwf	printf@f,c
  6743  0010A8  0EFF               	movlw	high STR_8
  6744  0010AA  6E1E               	movwf	printf@f+1,c
  6745  0010AC  ECDE  F004         	call	_printf	;wreg free
  6746  0010B0  D000               	goto	l9556
  6747  0010B2                     l9556:
  6748                           
  6749                           ;Fan_Support.c: 153: }
  6750                           ;Fan_Support.c: 154: if (diff_temp >= 0 && diff_temp < 10){
  6751  0010B2  0101               	movlb	1	; () banked
  6752  0010B4  BF52               	btfsc	(get_duty_cycle@diff_temp+1)& (0+255),7,b
  6753  0010B6  D02E               	goto	l9566
  6754                           
  6755                           ; BSR set to: 1
  6756  0010B8  0101               	movlb	1	; () banked
  6757  0010BA  BF52               	btfsc	(get_duty_cycle@diff_temp+1)& (0+255),7,b
  6758  0010BC  D008               	goto	l9560
  6759  0010BE  0101               	movlb	1	; () banked
  6760  0010C0  5152               	movf	(get_duty_cycle@diff_temp+1)& (0+255),w,b
  6761  0010C2  E128               	bnz	l9566
  6762  0010C4  0E0A               	movlw	10
  6763  0010C6  0101               	movlb	1	; () banked
  6764  0010C8  5D51               	subwf	get_duty_cycle@diff_temp& (0+255),w,b
  6765  0010CA  B0D8               	btfsc	status,0,c
  6766  0010CC  D023               	goto	l9566
  6767  0010CE                     l9560:
  6768                           
  6769                           ; BSR set to: 1
  6770                           ;Fan_Support.c: 155: dc = (int)(diff_temp_float * 1.00);
  6771  0010CE  0E00               	movlw	0
  6772  0010D0  6E20               	movwf	___ftmul@f2,c
  6773  0010D2  0E80               	movlw	128
  6774  0010D4  6E21               	movwf	___ftmul@f2+1,c
  6775  0010D6  0E3F               	movlw	63
  6776  0010D8  6E22               	movwf	___ftmul@f2+2,c
  6777  0010DA  C14C  F01D         	movff	get_duty_cycle@diff_temp_float,___ftmul@f1
  6778  0010DE  C14D  F01E         	movff	get_duty_cycle@diff_temp_float+1,___ftmul@f1+1
  6779  0010E2  C14E  F01F         	movff	get_duty_cycle@diff_temp_float+2,___ftmul@f1+2
  6780  0010E6  EC1E  F010         	call	___ftmul	;wreg free
  6781  0010EA  C01D  F03B         	movff	?___ftmul,___fttol@f1
  6782  0010EE  C01E  F03C         	movff	?___ftmul+1,___fttol@f1+1
  6783  0010F2  C01F  F03D         	movff	?___ftmul+2,___fttol@f1+2
  6784  0010F6  EC8A  F00E         	call	___fttol	;wreg free
  6785  0010FA  C03B  F14F         	movff	?___fttol,get_duty_cycle@dc
  6786  0010FE  C03C  F150         	movff	?___fttol+1,get_duty_cycle@dc+1
  6787                           
  6788                           ;Fan_Support.c: 156: duty_cycle = dc;
  6789  001102  C14F  F05D         	movff	get_duty_cycle@dc,_duty_cycle
  6790                           
  6791                           ;Fan_Support.c: 157: printf("0-10");
  6792  001106  0EDC               	movlw	low STR_9
  6793  001108  6E1D               	movwf	printf@f,c
  6794  00110A  0EFF               	movlw	high STR_9
  6795  00110C  6E1E               	movwf	printf@f+1,c
  6796  00110E  ECDE  F004         	call	_printf	;wreg free
  6797  001112  D000               	goto	l9566
  6798  001114                     l9566:
  6799                           
  6800                           ;Fan_Support.c: 158: }
  6801                           ;Fan_Support.c: 159: return duty_cycle;
  6802  001114  C05D  F044         	movff	_duty_cycle,?_get_duty_cycle
  6803  001118  6A45               	clrf	?_get_duty_cycle+1,c
  6804  00111A  D000               	goto	l303
  6805  00111C                     l303:
  6806  00111C  0012               	return		;funcret
  6807  00111E                     __end_of_get_duty_cycle:
  6808                           	opt stack 0
  6809                           tblptru	equ	0xFF8
  6810                           tblptrh	equ	0xFF7
  6811                           tblptrl	equ	0xFF6
  6812                           tablat	equ	0xFF5
  6813                           postinc0	equ	0xFEE
  6814                           wreg	equ	0xFE8
  6815                           postdec1	equ	0xFE5
  6816                           fsr1l	equ	0xFE1
  6817                           status	equ	0xFD8
  6818                           
  6819 ;; *************** function ___awtoft *****************
  6820 ;; Defined at:
  6821 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  6822 ;; Parameters:    Size  Location     Type
  6823 ;;  c               2   24[COMRAM] int 
  6824 ;; Auto vars:     Size  Location     Type
  6825 ;;  sign            1   27[COMRAM] unsigned char 
  6826 ;; Return value:  Size  Location     Type
  6827 ;;                  3   24[COMRAM] float 
  6828 ;; Registers used:
  6829 ;;		wreg, status,2, status,0, cstack
  6830 ;; Tracked objects:
  6831 ;;		On entry : 0/0
  6832 ;;		On exit  : 0/0
  6833 ;;		Unchanged: 0/0
  6834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6835 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6836 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6838 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6839 ;;Total ram usage:        4 bytes
  6840 ;; Hardware stack levels used:    1
  6841 ;; Hardware stack levels required when called:    4
  6842 ;; This function calls:
  6843 ;;		___ftpack
  6844 ;; This function is called by:
  6845 ;;		_get_duty_cycle
  6846 ;;		_read_volt
  6847 ;; This function uses a non-reentrant model
  6848 ;;
  6849                           
  6850                           	psect	text25
  6851  003904                     __ptext25:
  6852                           	opt stack 0
  6853  003904                     ___awtoft:
  6854                           	opt stack 25
  6855                           
  6856                           ;incstack = 0
  6857  003904  0E00               	movlw	0
  6858  003906  6E1C               	movwf	___awtoft@sign,c
  6859  003908  AE1A               	btfss	___awtoft@c+1,7,c
  6860  00390A  D007               	goto	l9506
  6861  00390C  6C19               	negf	___awtoft@c,c
  6862  00390E  1E1A               	comf	___awtoft@c+1,f,c
  6863  003910  B0D8               	btfsc	status,0,c
  6864  003912  2A1A               	incf	___awtoft@c+1,f,c
  6865  003914  0E01               	movlw	1
  6866  003916  6E1C               	movwf	___awtoft@sign,c
  6867  003918  D000               	goto	l9506
  6868  00391A                     l9506:
  6869  00391A  C019  F011         	movff	___awtoft@c,___ftpack@arg
  6870  00391E  C01A  F012         	movff	___awtoft@c+1,___ftpack@arg+1
  6871  003922  6A13               	clrf	___ftpack@arg+2,c
  6872  003924  0E8E               	movlw	142
  6873  003926  6E14               	movwf	___ftpack@exp,c
  6874  003928  C01C  F015         	movff	___awtoft@sign,___ftpack@sign
  6875  00392C  ECAF  F013         	call	___ftpack	;wreg free
  6876  003930  C011  F019         	movff	?___ftpack,?___awtoft
  6877  003934  C012  F01A         	movff	?___ftpack+1,?___awtoft+1
  6878  003938  C013  F01B         	movff	?___ftpack+2,?___awtoft+2
  6879  00393C  D000               	goto	l1766
  6880  00393E                     l1766:
  6881  00393E  0012               	return		;funcret
  6882  003940                     __end_of___awtoft:
  6883                           	opt stack 0
  6884                           tblptru	equ	0xFF8
  6885                           tblptrh	equ	0xFF7
  6886                           tblptrl	equ	0xFF6
  6887                           tablat	equ	0xFF5
  6888                           postinc0	equ	0xFEE
  6889                           wreg	equ	0xFE8
  6890                           postdec1	equ	0xFE5
  6891                           fsr1l	equ	0xFE1
  6892                           status	equ	0xFD8
  6893                           
  6894 ;; *************** function _Do_Setup_Time *****************
  6895 ;; Defined at:
  6896 ;;		line 32 in file "Setup_Time.c"
  6897 ;; Parameters:    Size  Location     Type
  6898 ;;		None
  6899 ;; Auto vars:     Size  Location     Type
  6900 ;;		None
  6901 ;; Return value:  Size  Location     Type
  6902 ;;		None               void
  6903 ;; Registers used:
  6904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6905 ;; Tracked objects:
  6906 ;;		On entry : 0/0
  6907 ;;		On exit  : 0/0
  6908 ;;		Unchanged: 0/0
  6909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6914 ;;Total ram usage:        0 bytes
  6915 ;; Hardware stack levels used:    1
  6916 ;; Hardware stack levels required when called:   12
  6917 ;; This function calls:
  6918 ;;		_DS3231_Read_Time
  6919 ;;		_Decrease_Time
  6920 ;;		_Do_Beep_Bad
  6921 ;;		_Do_Beep_Good
  6922 ;;		_Do_Save_New_Time
  6923 ;;		_Exit_Time_Setup
  6924 ;;		_Go_Next_Field
  6925 ;;		_Go_Prev_Field
  6926 ;;		_Increase_Time
  6927 ;;		_Initialize_Setup_Time_Screen
  6928 ;;		_Update_Setup_Time_Screen
  6929 ;;		_bcd_2_dec
  6930 ;;		_check_for_button_input
  6931 ;; This function is called by:
  6932 ;;		_main
  6933 ;; This function uses a non-reentrant model
  6934 ;;
  6935                           
  6936                           	psect	text26
  6937  002226                     __ptext26:
  6938                           	opt stack 0
  6939  002226                     _Do_Setup_Time:
  6940                           	opt stack 18
  6941                           
  6942                           ;Setup_Time.c: 33: Select_Field = 0;
  6943                           
  6944                           ;incstack = 0
  6945  002226  0E00               	movlw	0
  6946  002228  6E56               	movwf	_Select_Field,c
  6947                           
  6948                           ;Setup_Time.c: 34: DS3231_Read_Time();
  6949  00222A  EC0B  F019         	call	_DS3231_Read_Time	;wreg free
  6950                           
  6951                           ;Setup_Time.c: 35: setup_second = bcd_2_dec(second);
  6952  00222E  5062               	movf	_second,w,c
  6953  002230  EC08  F01D         	call	_bcd_2_dec
  6954  002234  6E6B               	movwf	_setup_second,c
  6955                           
  6956                           ;Setup_Time.c: 36: setup_minute = bcd_2_dec(minute);
  6957  002236  5060               	movf	_minute,w,c
  6958  002238  EC08  F01D         	call	_bcd_2_dec
  6959  00223C  6E69               	movwf	_setup_minute,c
  6960                           
  6961                           ;Setup_Time.c: 37: setup_hour = bcd_2_dec(hour);
  6962  00223E  505F               	movf	_hour,w,c
  6963  002240  EC08  F01D         	call	_bcd_2_dec
  6964  002244  6E68               	movwf	_setup_hour,c
  6965                           
  6966                           ;Setup_Time.c: 38: setup_day = bcd_2_dec(day);
  6967  002246  505C               	movf	_day,w,c
  6968  002248  EC08  F01D         	call	_bcd_2_dec
  6969  00224C  6E66               	movwf	_setup_day,c
  6970                           
  6971                           ;Setup_Time.c: 39: setup_month = bcd_2_dec(month);
  6972  00224E  5061               	movf	_month,w,c
  6973  002250  EC08  F01D         	call	_bcd_2_dec
  6974  002254  6E6A               	movwf	_setup_month,c
  6975                           
  6976                           ;Setup_Time.c: 40: setup_year = bcd_2_dec(year);
  6977  002256  506D               	movf	_year,w,c
  6978  002258  EC08  F01D         	call	_bcd_2_dec
  6979  00225C  6E6C               	movwf	_setup_year,c
  6980                           
  6981                           ;Setup_Time.c: 42: Initialize_Setup_Time_Screen();
  6982  00225E  EC98  F00F         	call	_Initialize_Setup_Time_Screen	;wreg free
  6983                           
  6984                           ;Setup_Time.c: 43: Update_Setup_Time_Screen();
  6985  002262  EC1D  F00B         	call	_Update_Setup_Time_Screen	;wreg free
  6986                           
  6987                           ;Setup_Time.c: 44: In_Time_Setup = 1;
  6988  002266  0E01               	movlw	1
  6989  002268  0100               	movlb	0	; () banked
  6990  00226A  6FF6               	movwf	_In_Time_Setup& (0+255),b
  6991                           
  6992                           ;Setup_Time.c: 46: while (In_Time_Setup == 1) {
  6993  00226C  D04C               	goto	l10272
  6994  00226E                     l10228:
  6995                           
  6996                           ; BSR set to: 0
  6997                           ;Setup_Time.c: 47: if (check_for_button_input() == 1) {
  6998  00226E  ECCD  F015         	call	_check_for_button_input	;wreg free
  6999  002272  06E8               	decf	wreg,f,c
  7000  002274  A4D8               	btfss	status,2,c
  7001  002276  D047               	goto	l10272
  7002                           
  7003                           ;Setup_Time.c: 48: if ((found == 3) || (found == 4) || (found == 0) || (found == 2) || (
      +                          found == 6) || (found == 7)) {
  7004  002278  0E03               	movlw	3
  7005  00227A  185E               	xorwf	_found,w,c
  7006  00227C  B4D8               	btfsc	status,2,c
  7007  00227E  D013               	goto	l10242
  7008  002280  0E04               	movlw	4
  7009  002282  185E               	xorwf	_found,w,c
  7010  002284  B4D8               	btfsc	status,2,c
  7011  002286  D00F               	goto	l10242
  7012  002288  505E               	movf	_found,w,c
  7013  00228A  B4D8               	btfsc	status,2,c
  7014  00228C  D00C               	goto	l10242
  7015  00228E  0E02               	movlw	2
  7016  002290  185E               	xorwf	_found,w,c
  7017  002292  B4D8               	btfsc	status,2,c
  7018  002294  D008               	goto	l10242
  7019  002296  0E06               	movlw	6
  7020  002298  185E               	xorwf	_found,w,c
  7021  00229A  B4D8               	btfsc	status,2,c
  7022  00229C  D004               	goto	l10242
  7023  00229E  0E07               	movlw	7
  7024  0022A0  185E               	xorwf	_found,w,c
  7025  0022A2  A4D8               	btfss	status,2,c
  7026  0022A4  D02D               	goto	l10270
  7027  0022A6                     l10242:
  7028                           
  7029                           ;Setup_Time.c: 49: Do_Beep_Good();
  7030  0022A6  EC25  F01E         	call	_Do_Beep_Good	;wreg free
  7031                           
  7032                           ;Setup_Time.c: 50: if (found == 3) Go_Prev_Field();
  7033  0022AA  0E03               	movlw	3
  7034  0022AC  185E               	xorwf	_found,w,c
  7035  0022AE  A4D8               	btfss	status,2,c
  7036  0022B0  D003               	goto	l10248
  7037  0022B2  ECE9  F01D         	call	_Go_Prev_Field	;wreg free
  7038  0022B6  D000               	goto	l10248
  7039  0022B8                     l10248:
  7040                           
  7041                           ;Setup_Time.c: 51: if (found == 4) Go_Next_Field();
  7042  0022B8  0E04               	movlw	4
  7043  0022BA  185E               	xorwf	_found,w,c
  7044  0022BC  A4D8               	btfss	status,2,c
  7045  0022BE  D003               	goto	l10252
  7046  0022C0  ECF5  F01D         	call	_Go_Next_Field	;wreg free
  7047  0022C4  D000               	goto	l10252
  7048  0022C6                     l10252:
  7049                           
  7050                           ;Setup_Time.c: 52: if (found == 2) Do_Save_New_Time();
  7051  0022C6  0E02               	movlw	2
  7052  0022C8  185E               	xorwf	_found,w,c
  7053  0022CA  A4D8               	btfss	status,2,c
  7054  0022CC  D003               	goto	l10256
  7055  0022CE  EC7A  F01E         	call	_Do_Save_New_Time	;wreg free
  7056  0022D2  D000               	goto	l10256
  7057  0022D4                     l10256:
  7058                           
  7059                           ;Setup_Time.c: 53: if (found == 0) Exit_Time_Setup();
  7060  0022D4  505E               	movf	_found,w,c
  7061  0022D6  A4D8               	btfss	status,2,c
  7062  0022D8  D003               	goto	l10260
  7063  0022DA  ECE7  F01E         	call	_Exit_Time_Setup	;wreg free
  7064  0022DE  D000               	goto	l10260
  7065  0022E0                     l10260:
  7066                           
  7067                           ;Setup_Time.c: 54: if (found == 6) Decrease_Time();
  7068  0022E0  0E06               	movlw	6
  7069  0022E2  185E               	xorwf	_found,w,c
  7070  0022E4  A4D8               	btfss	status,2,c
  7071  0022E6  D003               	goto	l10264
  7072  0022E8  ECFC  F016         	call	_Decrease_Time	;wreg free
  7073  0022EC  D000               	goto	l10264
  7074  0022EE                     l10264:
  7075                           
  7076                           ;Setup_Time.c: 55: if (found == 7) Increase_Time();
  7077  0022EE  0E07               	movlw	7
  7078  0022F0  185E               	xorwf	_found,w,c
  7079  0022F2  A4D8               	btfss	status,2,c
  7080  0022F4  D003               	goto	l10268
  7081  0022F6  EC5A  F018         	call	_Increase_Time	;wreg free
  7082  0022FA  D000               	goto	l10268
  7083  0022FC                     l10268:
  7084                           
  7085                           ;Setup_Time.c: 61: found = 0xff;
  7086  0022FC  685E               	setf	_found,c
  7087                           
  7088                           ;Setup_Time.c: 62: } else {
  7089  0022FE  D003               	goto	l10272
  7090  002300                     l10270:
  7091                           
  7092                           ;Setup_Time.c: 63: Do_Beep_Bad();
  7093  002300  EC31  F01E         	call	_Do_Beep_Bad	;wreg free
  7094  002304  D000               	goto	l10272
  7095  002306                     l10272:
  7096  002306  0100               	movlb	0	; () banked
  7097  002308  05F6               	decf	_In_Time_Setup& (0+255),w,b
  7098  00230A  B4D8               	btfsc	status,2,c
  7099  00230C  D7B0               	goto	l10228
  7100                           
  7101                           ; BSR set to: 0
  7102                           
  7103                           ; BSR set to: 0
  7104  00230E  0012               	return		;funcret
  7105  002310                     __end_of_Do_Setup_Time:
  7106                           	opt stack 0
  7107                           tblptru	equ	0xFF8
  7108                           tblptrh	equ	0xFF7
  7109                           tblptrl	equ	0xFF6
  7110                           tablat	equ	0xFF5
  7111                           postinc0	equ	0xFEE
  7112                           wreg	equ	0xFE8
  7113                           postdec1	equ	0xFE5
  7114                           fsr1l	equ	0xFE1
  7115                           status	equ	0xFD8
  7116                           
  7117 ;; *************** function _Initialize_Setup_Time_Screen *****************
  7118 ;; Defined at:
  7119 ;;		line 164 in file "Setup_Time.c"
  7120 ;; Parameters:    Size  Location     Type
  7121 ;;		None
  7122 ;; Auto vars:     Size  Location     Type
  7123 ;;		None
  7124 ;; Return value:  Size  Location     Type
  7125 ;;		None               void
  7126 ;; Registers used:
  7127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7128 ;; Tracked objects:
  7129 ;;		On entry : 0/0
  7130 ;;		On exit  : 0/0
  7131 ;;		Unchanged: 0/0
  7132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7137 ;;Total ram usage:        0 bytes
  7138 ;; Hardware stack levels used:    1
  7139 ;; Hardware stack levels required when called:   10
  7140 ;; This function calls:
  7141 ;;		_drawtext
  7142 ;;		_fillRect
  7143 ;;		_fillScreen
  7144 ;;		_strcpy
  7145 ;; This function is called by:
  7146 ;;		_Do_Setup_Time
  7147 ;; This function uses a non-reentrant model
  7148 ;;
  7149                           
  7150                           	psect	text27
  7151  001F30                     __ptext27:
  7152                           	opt stack 0
  7153  001F30                     _Initialize_Setup_Time_Screen:
  7154                           	opt stack 19
  7155                           
  7156                           ;Setup_Time.c: 165: fillScreen(0x0000);
  7157                           
  7158                           ; BSR set to: 0
  7159                           ;incstack = 0
  7160  001F30  0E00               	movlw	0
  7161  001F32  6E25               	movwf	fillScreen@color+1,c
  7162  001F34  0E00               	movlw	0
  7163  001F36  6E24               	movwf	fillScreen@color,c
  7164  001F38  ECCE  F01D         	call	_fillScreen	;wreg free
  7165                           
  7166                           ;Setup_Time.c: 167: strcpy(txt, "ECE3301L F23 Final\0");
  7167  001F3C  C052  F011         	movff	_txt,strcpy@to
  7168  001F40  C053  F012         	movff	_txt+1,strcpy@to+1
  7169  001F44  0E6A               	movlw	low STR_10
  7170  001F46  6E13               	movwf	strcpy@from,c
  7171  001F48  0EFE               	movlw	high STR_10
  7172  001F4A  6E14               	movwf	strcpy@from+1,c
  7173  001F4C  ECD7  F01C         	call	_strcpy	;wreg free
  7174                           
  7175                           ;Setup_Time.c: 168: drawtext(1, 1, txt, 0xFFFF, 0x0000, 1);
  7176  001F50  0E01               	movlw	1
  7177  001F52  6E39               	movwf	drawtext@y,c
  7178  001F54  C052  F03A         	movff	_txt,drawtext@_text
  7179  001F58  C053  F03B         	movff	_txt+1,drawtext@_text+1
  7180  001F5C  0EFF               	movlw	255
  7181  001F5E  6E3D               	movwf	drawtext@color+1,c
  7182  001F60  683C               	setf	drawtext@color,c
  7183  001F62  0E00               	movlw	0
  7184  001F64  6E3F               	movwf	drawtext@bg+1,c
  7185  001F66  0E00               	movlw	0
  7186  001F68  6E3E               	movwf	drawtext@bg,c
  7187  001F6A  0E01               	movlw	1
  7188  001F6C  6E40               	movwf	drawtext@size,c
  7189  001F6E  0E01               	movlw	1
  7190  001F70  EC11  F00F         	call	_drawtext
  7191                           
  7192                           ;Setup_Time.c: 171: strcpy(txt, "Time Setup\0");
  7193  001F74  C052  F011         	movff	_txt,strcpy@to
  7194  001F78  C053  F012         	movff	_txt+1,strcpy@to+1
  7195  001F7C  0E77               	movlw	low STR_32
  7196  001F7E  6E13               	movwf	strcpy@from,c
  7197  001F80  0EFF               	movlw	high STR_32
  7198  001F82  6E14               	movwf	strcpy@from+1,c
  7199  001F84  ECD7  F01C         	call	_strcpy	;wreg free
  7200                           
  7201                           ;Setup_Time.c: 172: drawtext(1 + 3, 1 + 15, txt, 0xF81F, 0x0000, 2);
  7202  001F88  0E10               	movlw	16
  7203  001F8A  6E39               	movwf	drawtext@y,c
  7204  001F8C  C052  F03A         	movff	_txt,drawtext@_text
  7205  001F90  C053  F03B         	movff	_txt+1,drawtext@_text+1
  7206  001F94  0EF8               	movlw	248
  7207  001F96  6E3D               	movwf	drawtext@color+1,c
  7208  001F98  0E1F               	movlw	31
  7209  001F9A  6E3C               	movwf	drawtext@color,c
  7210  001F9C  0E00               	movlw	0
  7211  001F9E  6E3F               	movwf	drawtext@bg+1,c
  7212  001FA0  0E00               	movlw	0
  7213  001FA2  6E3E               	movwf	drawtext@bg,c
  7214  001FA4  0E02               	movlw	2
  7215  001FA6  6E40               	movwf	drawtext@size,c
  7216  001FA8  0E04               	movlw	4
  7217  001FAA  EC11  F00F         	call	_drawtext
  7218                           
  7219                           ;Setup_Time.c: 174: strcpy(txt, "Time");
  7220  001FAE  C052  F011         	movff	_txt,strcpy@to
  7221  001FB2  C053  F012         	movff	_txt+1,strcpy@to+1
  7222  001FB6  0E9F               	movlw	low (STR_16+6)
  7223  001FB8  6E13               	movwf	strcpy@from,c
  7224  001FBA  0EFF               	movlw	high (STR_16+6)
  7225  001FBC  6E14               	movwf	strcpy@from+1,c
  7226  001FBE  ECD7  F01C         	call	_strcpy	;wreg free
  7227                           
  7228                           ;Setup_Time.c: 175: drawtext(50, 40, txt, 0x001F, 0x0000, 1);
  7229  001FC2  0E28               	movlw	40
  7230  001FC4  6E39               	movwf	drawtext@y,c
  7231  001FC6  C052  F03A         	movff	_txt,drawtext@_text
  7232  001FCA  C053  F03B         	movff	_txt+1,drawtext@_text+1
  7233  001FCE  0E00               	movlw	0
  7234  001FD0  6E3D               	movwf	drawtext@color+1,c
  7235  001FD2  0E1F               	movlw	31
  7236  001FD4  6E3C               	movwf	drawtext@color,c
  7237  001FD6  0E00               	movlw	0
  7238  001FD8  6E3F               	movwf	drawtext@bg+1,c
  7239  001FDA  0E00               	movlw	0
  7240  001FDC  6E3E               	movwf	drawtext@bg,c
  7241  001FDE  0E01               	movlw	1
  7242  001FE0  6E40               	movwf	drawtext@size,c
  7243  001FE2  0E32               	movlw	50
  7244  001FE4  EC11  F00F         	call	_drawtext
  7245                           
  7246                           ;Setup_Time.c: 177: fillRect(15 - 1, 52 + 16, 25, 2, 0x07FF);
  7247  001FE8  0E44               	movlw	68
  7248  001FEA  6E23               	movwf	fillRect@y,c
  7249  001FEC  0E19               	movlw	25
  7250  001FEE  6E24               	movwf	fillRect@w,c
  7251  001FF0  0E02               	movlw	2
  7252  001FF2  6E25               	movwf	fillRect@h,c
  7253  001FF4  0E07               	movlw	7
  7254  001FF6  6E27               	movwf	fillRect@color+1,c
  7255  001FF8  6826               	setf	fillRect@color,c
  7256  001FFA  0E0E               	movlw	14
  7257  001FFC  EC96  F01B         	call	_fillRect
  7258                           
  7259                           ;Setup_Time.c: 178: strcpy(txt, "Date");
  7260  002000  C052  F011         	movff	_txt,strcpy@to
  7261  002004  C053  F012         	movff	_txt+1,strcpy@to+1
  7262  002008  0ECD               	movlw	low STR_15
  7263  00200A  6E13               	movwf	strcpy@from,c
  7264  00200C  0EFF               	movlw	high STR_15
  7265  00200E  6E14               	movwf	strcpy@from+1,c
  7266  002010  ECD7  F01C         	call	_strcpy	;wreg free
  7267                           
  7268                           ;Setup_Time.c: 179: drawtext(50, 71, txt, 0xF800, 0x0000, 1);
  7269  002014  0E47               	movlw	71
  7270  002016  6E39               	movwf	drawtext@y,c
  7271  002018  C052  F03A         	movff	_txt,drawtext@_text
  7272  00201C  C053  F03B         	movff	_txt+1,drawtext@_text+1
  7273  002020  0EF8               	movlw	248
  7274  002022  6E3D               	movwf	drawtext@color+1,c
  7275  002024  0E00               	movlw	0
  7276  002026  6E3C               	movwf	drawtext@color,c
  7277  002028  0E00               	movlw	0
  7278  00202A  6E3F               	movwf	drawtext@bg+1,c
  7279  00202C  0E00               	movlw	0
  7280  00202E  6E3E               	movwf	drawtext@bg,c
  7281  002030  0E01               	movlw	1
  7282  002032  6E40               	movwf	drawtext@size,c
  7283  002034  0E32               	movlw	50
  7284  002036  EC11  F00F         	call	_drawtext
  7285  00203A  0012               	return		;funcret
  7286  00203C                     __end_of_Initialize_Setup_Time_Screen:
  7287                           	opt stack 0
  7288                           tblptru	equ	0xFF8
  7289                           tblptrh	equ	0xFF7
  7290                           tblptrl	equ	0xFF6
  7291                           tablat	equ	0xFF5
  7292                           postinc0	equ	0xFEE
  7293                           wreg	equ	0xFE8
  7294                           postdec1	equ	0xFE5
  7295                           fsr1l	equ	0xFE1
  7296                           status	equ	0xFD8
  7297                           
  7298 ;; *************** function _Increase_Time *****************
  7299 ;; Defined at:
  7300 ;;		line 69 in file "Setup_Time.c"
  7301 ;; Parameters:    Size  Location     Type
  7302 ;;		None
  7303 ;; Auto vars:     Size  Location     Type
  7304 ;;		None
  7305 ;; Return value:  Size  Location     Type
  7306 ;;		None               void
  7307 ;; Registers used:
  7308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7309 ;; Tracked objects:
  7310 ;;		On entry : 0/0
  7311 ;;		On exit  : 0/0
  7312 ;;		Unchanged: 0/0
  7313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7318 ;;Total ram usage:        0 bytes
  7319 ;; Hardware stack levels used:    1
  7320 ;; Hardware stack levels required when called:   11
  7321 ;; This function calls:
  7322 ;;		_Update_Setup_Time_Screen
  7323 ;; This function is called by:
  7324 ;;		_Do_Setup_Time
  7325 ;; This function uses a non-reentrant model
  7326 ;;
  7327                           
  7328                           	psect	text28
  7329  0030B4                     __ptext28:
  7330                           	opt stack 0
  7331  0030B4                     _Increase_Time:
  7332                           	opt stack 18
  7333                           
  7334                           ;Setup_Time.c: 70: switch (Select_Field)
  7335                           
  7336                           ;incstack = 0
  7337  0030B4  D027               	goto	l9794
  7338  0030B6                     l9760:
  7339                           
  7340                           ;Setup_Time.c: 73: setup_hour++;
  7341  0030B6  2A68               	incf	_setup_hour,f,c
  7342                           
  7343                           ;Setup_Time.c: 74: if (setup_hour >= 24) setup_hour = 0;
  7344  0030B8  0E17               	movlw	23
  7345  0030BA  6468               	cpfsgt	_setup_hour,c
  7346  0030BC  D037               	goto	l9796
  7347  0030BE  0E00               	movlw	0
  7348  0030C0  6E68               	movwf	_setup_hour,c
  7349                           
  7350                           ;Setup_Time.c: 75: break;
  7351  0030C2  D034               	goto	l9796
  7352  0030C4                     l9766:
  7353                           
  7354                           ;Setup_Time.c: 77: setup_minute++;
  7355  0030C4  2A69               	incf	_setup_minute,f,c
  7356                           
  7357                           ;Setup_Time.c: 78: if (setup_minute >= 60) setup_minute = 0;
  7358  0030C6  0E3B               	movlw	59
  7359  0030C8  6469               	cpfsgt	_setup_minute,c
  7360  0030CA  D030               	goto	l9796
  7361  0030CC  0E00               	movlw	0
  7362  0030CE  6E69               	movwf	_setup_minute,c
  7363                           
  7364                           ;Setup_Time.c: 79: break;
  7365  0030D0  D02D               	goto	l9796
  7366  0030D2                     l9772:
  7367                           
  7368                           ;Setup_Time.c: 82: setup_second++;
  7369  0030D2  2A6B               	incf	_setup_second,f,c
  7370                           
  7371                           ;Setup_Time.c: 83: if (setup_second >= 60) setup_second = 0;
  7372  0030D4  0E3B               	movlw	59
  7373  0030D6  646B               	cpfsgt	_setup_second,c
  7374  0030D8  D029               	goto	l9796
  7375  0030DA  0E00               	movlw	0
  7376  0030DC  6E6B               	movwf	_setup_second,c
  7377                           
  7378                           ;Setup_Time.c: 84: break;
  7379  0030DE  D026               	goto	l9796
  7380  0030E0                     l9778:
  7381                           
  7382                           ;Setup_Time.c: 87: setup_month++;
  7383  0030E0  2A6A               	incf	_setup_month,f,c
  7384                           
  7385                           ;Setup_Time.c: 88: if (setup_month == 13) setup_month = 1;
  7386  0030E2  0E0D               	movlw	13
  7387  0030E4  186A               	xorwf	_setup_month,w,c
  7388  0030E6  A4D8               	btfss	status,2,c
  7389  0030E8  D021               	goto	l9796
  7390  0030EA  0E01               	movlw	1
  7391  0030EC  6E6A               	movwf	_setup_month,c
  7392                           
  7393                           ;Setup_Time.c: 89: break;
  7394  0030EE  D01E               	goto	l9796
  7395  0030F0                     l9784:
  7396                           
  7397                           ;Setup_Time.c: 92: setup_day++;
  7398  0030F0  2A66               	incf	_setup_day,f,c
  7399                           
  7400                           ;Setup_Time.c: 93: if (setup_day == 32) setup_day = 1;
  7401  0030F2  0E20               	movlw	32
  7402  0030F4  1866               	xorwf	_setup_day,w,c
  7403  0030F6  A4D8               	btfss	status,2,c
  7404  0030F8  D019               	goto	l9796
  7405  0030FA  0E01               	movlw	1
  7406  0030FC  6E66               	movwf	_setup_day,c
  7407                           
  7408                           ;Setup_Time.c: 94: break;
  7409  0030FE  D016               	goto	l9796
  7410  003100                     l9790:
  7411                           
  7412                           ;Setup_Time.c: 97: setup_year++;
  7413  003100  2A6C               	incf	_setup_year,f,c
  7414                           
  7415                           ;Setup_Time.c: 102: }
  7416                           
  7417                           ;Setup_Time.c: 101: break;
  7418                           
  7419                           ;Setup_Time.c: 100: default:
  7420                           
  7421                           ;Setup_Time.c: 98: break;
  7422  003102  D014               	goto	l9796
  7423  003104                     l9794:
  7424  003104  5056               	movf	_Select_Field,w,c
  7425                           
  7426                           ; Switch size 1, requested type "space"
  7427                           ; Number of cases is 6, Range of values is 0 to 5
  7428                           ; switch strategies available:
  7429                           ; Name         Instructions Cycles
  7430                           ; simple_byte           19    10 (average)
  7431                           ;	Chosen strategy is simple_byte
  7432  003106  0A00               	xorlw	0	; case 0
  7433  003108  B4D8               	btfsc	status,2,c
  7434  00310A  D7D5               	goto	l9760
  7435  00310C  0A01               	xorlw	1	; case 1
  7436  00310E  B4D8               	btfsc	status,2,c
  7437  003110  D7D9               	goto	l9766
  7438  003112  0A03               	xorlw	3	; case 2
  7439  003114  B4D8               	btfsc	status,2,c
  7440  003116  D7DD               	goto	l9772
  7441  003118  0A01               	xorlw	1	; case 3
  7442  00311A  B4D8               	btfsc	status,2,c
  7443  00311C  D7E1               	goto	l9778
  7444  00311E  0A07               	xorlw	7	; case 4
  7445  003120  B4D8               	btfsc	status,2,c
  7446  003122  D7E6               	goto	l9784
  7447  003124  0A01               	xorlw	1	; case 5
  7448  003126  B4D8               	btfsc	status,2,c
  7449  003128  D7EB               	goto	l9790
  7450  00312A  D000               	goto	l9796
  7451  00312C                     l9796:
  7452                           
  7453                           ;Setup_Time.c: 103: Update_Setup_Time_Screen();
  7454  00312C  EC1D  F00B         	call	_Update_Setup_Time_Screen	;wreg free
  7455  003130  0012               	return		;funcret
  7456  003132                     __end_of_Increase_Time:
  7457                           	opt stack 0
  7458                           tblptru	equ	0xFF8
  7459                           tblptrh	equ	0xFF7
  7460                           tblptrl	equ	0xFF6
  7461                           tablat	equ	0xFF5
  7462                           postinc0	equ	0xFEE
  7463                           wreg	equ	0xFE8
  7464                           postdec1	equ	0xFE5
  7465                           fsr1l	equ	0xFE1
  7466                           status	equ	0xFD8
  7467                           
  7468 ;; *************** function _Go_Prev_Field *****************
  7469 ;; Defined at:
  7470 ;;		line 145 in file "Setup_Time.c"
  7471 ;; Parameters:    Size  Location     Type
  7472 ;;		None
  7473 ;; Auto vars:     Size  Location     Type
  7474 ;;		None
  7475 ;; Return value:  Size  Location     Type
  7476 ;;		None               void
  7477 ;; Registers used:
  7478 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7479 ;; Tracked objects:
  7480 ;;		On entry : 0/0
  7481 ;;		On exit  : 0/0
  7482 ;;		Unchanged: 0/0
  7483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7488 ;;Total ram usage:        0 bytes
  7489 ;; Hardware stack levels used:    1
  7490 ;; Hardware stack levels required when called:    9
  7491 ;; This function calls:
  7492 ;;		_Update_Setup_Screen_Cursor_Backward
  7493 ;; This function is called by:
  7494 ;;		_Do_Setup_Time
  7495 ;; This function uses a non-reentrant model
  7496 ;;
  7497                           
  7498                           	psect	text29
  7499  003BD2                     __ptext29:
  7500                           	opt stack 0
  7501  003BD2                     _Go_Prev_Field:
  7502                           	opt stack 20
  7503                           
  7504                           ;Setup_Time.c: 146: if (Select_Field == 0) Select_Field = 5;
  7505                           
  7506                           ;incstack = 0
  7507  003BD2  5056               	movf	_Select_Field,w,c
  7508  003BD4  A4D8               	btfss	status,2,c
  7509  003BD6  D003               	goto	l9690
  7510  003BD8  0E05               	movlw	5
  7511  003BDA  6E56               	movwf	_Select_Field,c
  7512  003BDC  D002               	goto	l9692
  7513  003BDE                     l9690:
  7514                           
  7515                           ;Setup_Time.c: 147: else Select_Field--;
  7516  003BDE  0656               	decf	_Select_Field,f,c
  7517  003BE0  D000               	goto	l9692
  7518  003BE2                     l9692:
  7519                           
  7520                           ;Setup_Time.c: 148: Update_Setup_Screen_Cursor_Backward(Select_Field);
  7521  003BE2  5056               	movf	_Select_Field,w,c
  7522  003BE4  EC6C  F009         	call	_Update_Setup_Screen_Cursor_Backward
  7523  003BE8  0012               	return		;funcret
  7524  003BEA                     __end_of_Go_Prev_Field:
  7525                           	opt stack 0
  7526                           tblptru	equ	0xFF8
  7527                           tblptrh	equ	0xFF7
  7528                           tblptrl	equ	0xFF6
  7529                           tablat	equ	0xFF5
  7530                           postinc0	equ	0xFEE
  7531                           wreg	equ	0xFE8
  7532                           postdec1	equ	0xFE5
  7533                           fsr1l	equ	0xFE1
  7534                           status	equ	0xFD8
  7535                           
  7536 ;; *************** function _Go_Next_Field *****************
  7537 ;; Defined at:
  7538 ;;		line 139 in file "Setup_Time.c"
  7539 ;; Parameters:    Size  Location     Type
  7540 ;;		None
  7541 ;; Auto vars:     Size  Location     Type
  7542 ;;		None
  7543 ;; Return value:  Size  Location     Type
  7544 ;;		None               void
  7545 ;; Registers used:
  7546 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7547 ;; Tracked objects:
  7548 ;;		On entry : 0/0
  7549 ;;		On exit  : 0/0
  7550 ;;		Unchanged: 0/0
  7551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7555 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7556 ;;Total ram usage:        0 bytes
  7557 ;; Hardware stack levels used:    1
  7558 ;; Hardware stack levels required when called:    9
  7559 ;; This function calls:
  7560 ;;		_Update_Setup_Screen_Cursor_Forward
  7561 ;; This function is called by:
  7562 ;;		_Do_Setup_Time
  7563 ;; This function uses a non-reentrant model
  7564 ;;
  7565                           
  7566                           	psect	text30
  7567  003BEA                     __ptext30:
  7568                           	opt stack 0
  7569  003BEA                     _Go_Next_Field:
  7570                           	opt stack 20
  7571                           
  7572                           ;Setup_Time.c: 140: Select_Field++;
  7573                           
  7574                           ;incstack = 0
  7575  003BEA  2A56               	incf	_Select_Field,f,c
  7576                           
  7577                           ;Setup_Time.c: 141: if (Select_Field == 6) Select_Field = 0;
  7578  003BEC  0E06               	movlw	6
  7579  003BEE  1856               	xorwf	_Select_Field,w,c
  7580  003BF0  A4D8               	btfss	status,2,c
  7581  003BF2  D003               	goto	l9700
  7582  003BF4  0E00               	movlw	0
  7583  003BF6  6E56               	movwf	_Select_Field,c
  7584  003BF8  D000               	goto	l9700
  7585  003BFA                     l9700:
  7586                           
  7587                           ;Setup_Time.c: 142: Update_Setup_Screen_Cursor_Forward(Select_Field);
  7588  003BFA  5056               	movf	_Select_Field,w,c
  7589  003BFC  EC8F  F008         	call	_Update_Setup_Screen_Cursor_Forward
  7590  003C00  0012               	return		;funcret
  7591  003C02                     __end_of_Go_Next_Field:
  7592                           	opt stack 0
  7593                           tblptru	equ	0xFF8
  7594                           tblptrh	equ	0xFF7
  7595                           tblptrl	equ	0xFF6
  7596                           tablat	equ	0xFF5
  7597                           postinc0	equ	0xFEE
  7598                           wreg	equ	0xFE8
  7599                           postdec1	equ	0xFE5
  7600                           fsr1l	equ	0xFE1
  7601                           status	equ	0xFD8
  7602                           
  7603 ;; *************** function _Exit_Time_Setup *****************
  7604 ;; Defined at:
  7605 ;;		line 158 in file "Setup_Time.c"
  7606 ;; Parameters:    Size  Location     Type
  7607 ;;		None
  7608 ;; Auto vars:     Size  Location     Type
  7609 ;;		None
  7610 ;; Return value:  Size  Location     Type
  7611 ;;		None               void
  7612 ;; Registers used:
  7613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7614 ;; Tracked objects:
  7615 ;;		On entry : 0/0
  7616 ;;		On exit  : 0/0
  7617 ;;		Unchanged: 0/0
  7618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7623 ;;Total ram usage:        0 bytes
  7624 ;; Hardware stack levels used:    1
  7625 ;; Hardware stack levels required when called:   11
  7626 ;; This function calls:
  7627 ;;		_DS3231_Read_Time
  7628 ;;		_Initialize_Screen
  7629 ;; This function is called by:
  7630 ;;		_Do_Setup_Time
  7631 ;; This function uses a non-reentrant model
  7632 ;;
  7633                           
  7634                           	psect	text31
  7635  003DCE                     __ptext31:
  7636                           	opt stack 0
  7637  003DCE                     _Exit_Time_Setup:
  7638                           	opt stack 18
  7639                           
  7640                           ;Setup_Time.c: 159: DS3231_Read_Time();
  7641                           
  7642                           ;incstack = 0
  7643  003DCE  EC0B  F019         	call	_DS3231_Read_Time	;wreg free
  7644                           
  7645                           ;Setup_Time.c: 160: Initialize_Screen();
  7646  003DD2  EC1E  F003         	call	_Initialize_Screen	;wreg free
  7647                           
  7648                           ;Setup_Time.c: 161: In_Time_Setup = 0;
  7649  003DD6  0E00               	movlw	0
  7650  003DD8  0100               	movlb	0	; () banked
  7651  003DDA  6FF6               	movwf	_In_Time_Setup& (0+255),b
  7652                           
  7653                           ; BSR set to: 0
  7654  003DDC  0012               	return		;funcret
  7655  003DDE                     __end_of_Exit_Time_Setup:
  7656                           	opt stack 0
  7657                           tblptru	equ	0xFF8
  7658                           tblptrh	equ	0xFF7
  7659                           tblptrl	equ	0xFF6
  7660                           tablat	equ	0xFF5
  7661                           postinc0	equ	0xFEE
  7662                           wreg	equ	0xFE8
  7663                           postdec1	equ	0xFE5
  7664                           fsr1l	equ	0xFE1
  7665                           status	equ	0xFD8
  7666                           
  7667 ;; *************** function _Do_Save_New_Time *****************
  7668 ;; Defined at:
  7669 ;;		line 151 in file "Setup_Time.c"
  7670 ;; Parameters:    Size  Location     Type
  7671 ;;		None
  7672 ;; Auto vars:     Size  Location     Type
  7673 ;;		None
  7674 ;; Return value:  Size  Location     Type
  7675 ;;		None               void
  7676 ;; Registers used:
  7677 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7678 ;; Tracked objects:
  7679 ;;		On entry : 0/0
  7680 ;;		On exit  : 0/0
  7681 ;;		Unchanged: 0/0
  7682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7687 ;;Total ram usage:        0 bytes
  7688 ;; Hardware stack levels used:    1
  7689 ;; Hardware stack levels required when called:   11
  7690 ;; This function calls:
  7691 ;;		_DS3231_Read_Time
  7692 ;;		_DS3231_Write_Time
  7693 ;;		_Initialize_Screen
  7694 ;; This function is called by:
  7695 ;;		_Do_Setup_Time
  7696 ;; This function uses a non-reentrant model
  7697 ;;
  7698                           
  7699                           	psect	text32
  7700  003CF4                     __ptext32:
  7701                           	opt stack 0
  7702  003CF4                     _Do_Save_New_Time:
  7703                           	opt stack 18
  7704                           
  7705                           ;Setup_Time.c: 152: DS3231_Write_Time();
  7706                           
  7707                           ; BSR set to: 0
  7708                           ;incstack = 0
  7709  003CF4  EC7C  F015         	call	_DS3231_Write_Time	;wreg free
  7710                           
  7711                           ;Setup_Time.c: 153: DS3231_Read_Time();
  7712  003CF8  EC0B  F019         	call	_DS3231_Read_Time	;wreg free
  7713                           
  7714                           ;Setup_Time.c: 154: Initialize_Screen();
  7715  003CFC  EC1E  F003         	call	_Initialize_Screen	;wreg free
  7716                           
  7717                           ;Setup_Time.c: 155: In_Time_Setup = 0;
  7718  003D00  0E00               	movlw	0
  7719  003D02  0100               	movlb	0	; () banked
  7720  003D04  6FF6               	movwf	_In_Time_Setup& (0+255),b
  7721                           
  7722                           ; BSR set to: 0
  7723  003D06  0012               	return		;funcret
  7724  003D08                     __end_of_Do_Save_New_Time:
  7725                           	opt stack 0
  7726                           tblptru	equ	0xFF8
  7727                           tblptrh	equ	0xFF7
  7728                           tblptrl	equ	0xFF6
  7729                           tablat	equ	0xFF5
  7730                           postinc0	equ	0xFEE
  7731                           wreg	equ	0xFE8
  7732                           postdec1	equ	0xFE5
  7733                           fsr1l	equ	0xFE1
  7734                           status	equ	0xFD8
  7735                           
  7736 ;; *************** function _DS3231_Write_Time *****************
  7737 ;; Defined at:
  7738 ;;		line 81 in file "I2C_Support.c"
  7739 ;; Parameters:    Size  Location     Type
  7740 ;;		None
  7741 ;; Auto vars:     Size  Location     Type
  7742 ;;  Address         1   14[BANK1 ] unsigned char 
  7743 ;;  Device          1   13[BANK1 ] unsigned char 
  7744 ;; Return value:  Size  Location     Type
  7745 ;;		None               void
  7746 ;; Registers used:
  7747 ;;		wreg, status,2, status,0, cstack
  7748 ;; Tracked objects:
  7749 ;;		On entry : 0/0
  7750 ;;		On exit  : 0/0
  7751 ;;		Unchanged: 0/0
  7752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7754 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7756 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7757 ;;Total ram usage:        2 bytes
  7758 ;; Hardware stack levels used:    1
  7759 ;; Hardware stack levels required when called:    5
  7760 ;; This function calls:
  7761 ;;		_I2C_Start
  7762 ;;		_I2C_Stop
  7763 ;;		_I2C_Write
  7764 ;;		_dec_2_bcd
  7765 ;; This function is called by:
  7766 ;;		_Do_Save_New_Time
  7767 ;; This function uses a non-reentrant model
  7768 ;;
  7769                           
  7770                           	psect	text33
  7771  002AF8                     __ptext33:
  7772                           	opt stack 0
  7773  002AF8                     _DS3231_Write_Time:
  7774                           	opt stack 23
  7775                           
  7776                           ;I2C_Support.c: 82: char Device = 0x68;
  7777                           
  7778                           ; BSR set to: 0
  7779                           ;incstack = 0
  7780  002AF8  0E68               	movlw	104
  7781  002AFA  0101               	movlb	1	; () banked
  7782  002AFC  6F51               	movwf	DS3231_Write_Time@Device& (0+255),b
  7783                           
  7784                           ;I2C_Support.c: 83: char Address = 0x00;
  7785  002AFE  0E00               	movlw	0
  7786  002B00  0101               	movlb	1	; () banked
  7787  002B02  6F52               	movwf	DS3231_Write_Time@Address& (0+255),b
  7788                           
  7789                           ; BSR set to: 1
  7790                           ;I2C_Support.c: 84: second = dec_2_bcd(setup_second);
  7791  002B04  506B               	movf	_setup_second,w,c
  7792  002B06  EC70  F019         	call	_dec_2_bcd
  7793  002B0A  0101               	movlb	1	; () banked
  7794  002B0C  514A               	movf	?_dec_2_bcd& (0+255),w,b
  7795  002B0E  6E62               	movwf	_second,c
  7796                           
  7797                           ; BSR set to: 1
  7798                           ;I2C_Support.c: 85: minute = dec_2_bcd(setup_minute);
  7799  002B10  5069               	movf	_setup_minute,w,c
  7800  002B12  EC70  F019         	call	_dec_2_bcd
  7801  002B16  0101               	movlb	1	; () banked
  7802  002B18  514A               	movf	?_dec_2_bcd& (0+255),w,b
  7803  002B1A  6E60               	movwf	_minute,c
  7804                           
  7805                           ; BSR set to: 1
  7806                           ;I2C_Support.c: 86: hour = dec_2_bcd(setup_hour);
  7807  002B1C  5068               	movf	_setup_hour,w,c
  7808  002B1E  EC70  F019         	call	_dec_2_bcd
  7809  002B22  0101               	movlb	1	; () banked
  7810  002B24  514A               	movf	?_dec_2_bcd& (0+255),w,b
  7811  002B26  6E5F               	movwf	_hour,c
  7812                           
  7813                           ; BSR set to: 1
  7814                           ;I2C_Support.c: 87: dow = 0x01;
  7815  002B28  0E01               	movlw	1
  7816  002B2A  0100               	movlb	0	; () banked
  7817  002B2C  6FFC               	movwf	_dow& (0+255),b
  7818                           
  7819                           ;I2C_Support.c: 88: day = dec_2_bcd(setup_day);
  7820  002B2E  5066               	movf	_setup_day,w,c
  7821  002B30  EC70  F019         	call	_dec_2_bcd
  7822  002B34  0101               	movlb	1	; () banked
  7823  002B36  514A               	movf	?_dec_2_bcd& (0+255),w,b
  7824  002B38  6E5C               	movwf	_day,c
  7825                           
  7826                           ;I2C_Support.c: 89: month = dec_2_bcd(setup_month);
  7827  002B3A  506A               	movf	_setup_month,w,c
  7828  002B3C  EC70  F019         	call	_dec_2_bcd
  7829  002B40  0101               	movlb	1	; () banked
  7830  002B42  514A               	movf	?_dec_2_bcd& (0+255),w,b
  7831  002B44  6E61               	movwf	_month,c
  7832                           
  7833                           ;I2C_Support.c: 90: year = dec_2_bcd(setup_year);
  7834  002B46  506C               	movf	_setup_year,w,c
  7835  002B48  EC70  F019         	call	_dec_2_bcd
  7836  002B4C  0101               	movlb	1	; () banked
  7837  002B4E  514A               	movf	?_dec_2_bcd& (0+255),w,b
  7838  002B50  6E6D               	movwf	_year,c
  7839                           
  7840                           ; BSR set to: 1
  7841                           ;I2C_Support.c: 91: I2C_Start();
  7842  002B52  ECC5  F01E         	call	_I2C_Start	;wreg free
  7843                           
  7844                           ;I2C_Support.c: 92: I2C_Write((Device << 1) | 0);
  7845  002B56  0101               	movlb	1	; () banked
  7846  002B58  5151               	movf	DS3231_Write_Time@Device& (0+255),w,b
  7847  002B5A  2551               	addwf	DS3231_Write_Time@Device& (0+255),w,b
  7848  002B5C  EC63  F01C         	call	_I2C_Write
  7849                           
  7850                           ;I2C_Support.c: 93: I2C_Write(Address);
  7851  002B60  0101               	movlb	1	; () banked
  7852  002B62  5152               	movf	DS3231_Write_Time@Address& (0+255),w,b
  7853  002B64  EC63  F01C         	call	_I2C_Write
  7854                           
  7855                           ;I2C_Support.c: 94: I2C_Write(second);
  7856  002B68  5062               	movf	_second,w,c
  7857  002B6A  EC63  F01C         	call	_I2C_Write
  7858                           
  7859                           ;I2C_Support.c: 95: I2C_Write(minute);
  7860  002B6E  5060               	movf	_minute,w,c
  7861  002B70  EC63  F01C         	call	_I2C_Write
  7862                           
  7863                           ;I2C_Support.c: 96: I2C_Write(hour);
  7864  002B74  505F               	movf	_hour,w,c
  7865  002B76  EC63  F01C         	call	_I2C_Write
  7866                           
  7867                           ;I2C_Support.c: 97: I2C_Write(dow);
  7868  002B7A  0100               	movlb	0	; () banked
  7869  002B7C  51FC               	movf	_dow& (0+255),w,b
  7870  002B7E  EC63  F01C         	call	_I2C_Write
  7871                           
  7872                           ;I2C_Support.c: 98: I2C_Write(day);
  7873  002B82  505C               	movf	_day,w,c
  7874  002B84  EC63  F01C         	call	_I2C_Write
  7875                           
  7876                           ;I2C_Support.c: 99: I2C_Write(month);
  7877  002B88  5061               	movf	_month,w,c
  7878  002B8A  EC63  F01C         	call	_I2C_Write
  7879                           
  7880                           ;I2C_Support.c: 100: I2C_Write(year);
  7881  002B8E  506D               	movf	_year,w,c
  7882  002B90  EC63  F01C         	call	_I2C_Write
  7883                           
  7884                           ;I2C_Support.c: 101: I2C_Stop();
  7885  002B94  ECBC  F01E         	call	_I2C_Stop	;wreg free
  7886  002B98  0012               	return		;funcret
  7887  002B9A                     __end_of_DS3231_Write_Time:
  7888                           	opt stack 0
  7889                           tblptru	equ	0xFF8
  7890                           tblptrh	equ	0xFF7
  7891                           tblptrl	equ	0xFF6
  7892                           tablat	equ	0xFF5
  7893                           postinc0	equ	0xFEE
  7894                           wreg	equ	0xFE8
  7895                           postdec1	equ	0xFE5
  7896                           fsr1l	equ	0xFE1
  7897                           status	equ	0xFD8
  7898                           
  7899 ;; *************** function _Decrease_Time *****************
  7900 ;; Defined at:
  7901 ;;		line 106 in file "Setup_Time.c"
  7902 ;; Parameters:    Size  Location     Type
  7903 ;;		None
  7904 ;; Auto vars:     Size  Location     Type
  7905 ;;		None
  7906 ;; Return value:  Size  Location     Type
  7907 ;;		None               void
  7908 ;; Registers used:
  7909 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7910 ;; Tracked objects:
  7911 ;;		On entry : 0/0
  7912 ;;		On exit  : 0/0
  7913 ;;		Unchanged: 0/0
  7914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7919 ;;Total ram usage:        0 bytes
  7920 ;; Hardware stack levels used:    1
  7921 ;; Hardware stack levels required when called:   11
  7922 ;; This function calls:
  7923 ;;		_Update_Setup_Time_Screen
  7924 ;; This function is called by:
  7925 ;;		_Do_Setup_Time
  7926 ;; This function uses a non-reentrant model
  7927 ;;
  7928                           
  7929                           	psect	text34
  7930  002DF8                     __ptext34:
  7931                           	opt stack 0
  7932  002DF8                     _Decrease_Time:
  7933                           	opt stack 18
  7934                           
  7935                           ;Setup_Time.c: 107: switch (Select_Field)
  7936                           
  7937                           ;incstack = 0
  7938  002DF8  D030               	goto	l9754
  7939  002DFA                     l9716:
  7940                           
  7941                           ;Setup_Time.c: 110: if (setup_hour < 1) setup_hour = 23;
  7942  002DFA  5068               	movf	_setup_hour,w,c
  7943  002DFC  A4D8               	btfss	status,2,c
  7944  002DFE  D003               	goto	l9720
  7945  002E00  0E17               	movlw	23
  7946  002E02  6E68               	movwf	_setup_hour,c
  7947  002E04  D03E               	goto	l9756
  7948  002E06                     l9720:
  7949                           
  7950                           ;Setup_Time.c: 111: else --setup_hour;
  7951  002E06  0668               	decf	_setup_hour,f,c
  7952                           
  7953                           ;Setup_Time.c: 112: break;
  7954  002E08  D03C               	goto	l9756
  7955  002E0A                     l9722:
  7956                           
  7957                           ;Setup_Time.c: 114: if (setup_minute <= 0) setup_minute = 59;
  7958  002E0A  5069               	movf	_setup_minute,w,c
  7959  002E0C  A4D8               	btfss	status,2,c
  7960  002E0E  D003               	goto	l9726
  7961  002E10  0E3B               	movlw	59
  7962  002E12  6E69               	movwf	_setup_minute,c
  7963  002E14  D036               	goto	l9756
  7964  002E16                     l9726:
  7965                           
  7966                           ;Setup_Time.c: 115: else --setup_minute;
  7967  002E16  0669               	decf	_setup_minute,f,c
  7968                           
  7969                           ;Setup_Time.c: 116: break;
  7970  002E18  D034               	goto	l9756
  7971  002E1A                     l9728:
  7972                           
  7973                           ;Setup_Time.c: 118: if (setup_second <= 0) setup_second = 59;
  7974  002E1A  506B               	movf	_setup_second,w,c
  7975  002E1C  A4D8               	btfss	status,2,c
  7976  002E1E  D003               	goto	l9732
  7977  002E20  0E3B               	movlw	59
  7978  002E22  6E6B               	movwf	_setup_second,c
  7979  002E24  D02E               	goto	l9756
  7980  002E26                     l9732:
  7981                           
  7982                           ;Setup_Time.c: 119: else --setup_second;
  7983  002E26  066B               	decf	_setup_second,f,c
  7984                           
  7985                           ;Setup_Time.c: 120: break;
  7986  002E28  D02C               	goto	l9756
  7987  002E2A                     l9734:
  7988                           
  7989                           ;Setup_Time.c: 122: if (setup_month == 0) setup_month = 12;
  7990  002E2A  506A               	movf	_setup_month,w,c
  7991  002E2C  A4D8               	btfss	status,2,c
  7992  002E2E  D003               	goto	l9738
  7993  002E30  0E0C               	movlw	12
  7994  002E32  6E6A               	movwf	_setup_month,c
  7995  002E34  D026               	goto	l9756
  7996  002E36                     l9738:
  7997                           
  7998                           ;Setup_Time.c: 123: else --setup_month;
  7999  002E36  066A               	decf	_setup_month,f,c
  8000                           
  8001                           ;Setup_Time.c: 124: break;
  8002  002E38  D024               	goto	l9756
  8003  002E3A                     l9740:
  8004                           
  8005                           ;Setup_Time.c: 126: if (setup_day <= 1) setup_day = 31;
  8006  002E3A  0E02               	movlw	2
  8007  002E3C  6066               	cpfslt	_setup_day,c
  8008  002E3E  D003               	goto	l9744
  8009  002E40  0E1F               	movlw	31
  8010  002E42  6E66               	movwf	_setup_day,c
  8011  002E44  D01E               	goto	l9756
  8012  002E46                     l9744:
  8013                           
  8014                           ;Setup_Time.c: 127: else --setup_day;
  8015  002E46  0666               	decf	_setup_day,f,c
  8016                           
  8017                           ;Setup_Time.c: 128: break;
  8018  002E48  D01C               	goto	l9756
  8019  002E4A                     l9746:
  8020                           
  8021                           ;Setup_Time.c: 130: if (setup_year <= 0 ) setup_year = 1;
  8022  002E4A  506C               	movf	_setup_year,w,c
  8023  002E4C  A4D8               	btfss	status,2,c
  8024  002E4E  D003               	goto	l9750
  8025  002E50  0E01               	movlw	1
  8026  002E52  6E6C               	movwf	_setup_year,c
  8027  002E54  D016               	goto	l9756
  8028  002E56                     l9750:
  8029                           
  8030                           ;Setup_Time.c: 131: else --setup_year;
  8031  002E56  066C               	decf	_setup_year,f,c
  8032                           
  8033                           ;Setup_Time.c: 135: }
  8034                           
  8035                           ;Setup_Time.c: 134: break;
  8036                           
  8037                           ;Setup_Time.c: 133: default:
  8038                           
  8039                           ;Setup_Time.c: 132: break;
  8040  002E58  D014               	goto	l9756
  8041  002E5A                     l9754:
  8042  002E5A  5056               	movf	_Select_Field,w,c
  8043                           
  8044                           ; Switch size 1, requested type "space"
  8045                           ; Number of cases is 6, Range of values is 0 to 5
  8046                           ; switch strategies available:
  8047                           ; Name         Instructions Cycles
  8048                           ; simple_byte           19    10 (average)
  8049                           ;	Chosen strategy is simple_byte
  8050  002E5C  0A00               	xorlw	0	; case 0
  8051  002E5E  B4D8               	btfsc	status,2,c
  8052  002E60  D7CC               	goto	l9716
  8053  002E62  0A01               	xorlw	1	; case 1
  8054  002E64  B4D8               	btfsc	status,2,c
  8055  002E66  D7D1               	goto	l9722
  8056  002E68  0A03               	xorlw	3	; case 2
  8057  002E6A  B4D8               	btfsc	status,2,c
  8058  002E6C  D7D6               	goto	l9728
  8059  002E6E  0A01               	xorlw	1	; case 3
  8060  002E70  B4D8               	btfsc	status,2,c
  8061  002E72  D7DB               	goto	l9734
  8062  002E74  0A07               	xorlw	7	; case 4
  8063  002E76  B4D8               	btfsc	status,2,c
  8064  002E78  D7E0               	goto	l9740
  8065  002E7A  0A01               	xorlw	1	; case 5
  8066  002E7C  B4D8               	btfsc	status,2,c
  8067  002E7E  D7E5               	goto	l9746
  8068  002E80  D000               	goto	l9756
  8069  002E82                     l9756:
  8070                           
  8071                           ;Setup_Time.c: 136: Update_Setup_Time_Screen();
  8072  002E82  EC1D  F00B         	call	_Update_Setup_Time_Screen	;wreg free
  8073  002E86  0012               	return		;funcret
  8074  002E88                     __end_of_Decrease_Time:
  8075                           	opt stack 0
  8076                           tblptru	equ	0xFF8
  8077                           tblptrh	equ	0xFF7
  8078                           tblptrl	equ	0xFF6
  8079                           tablat	equ	0xFF5
  8080                           postinc0	equ	0xFEE
  8081                           wreg	equ	0xFE8
  8082                           postdec1	equ	0xFE5
  8083                           fsr1l	equ	0xFE1
  8084                           status	equ	0xFD8
  8085                           
  8086 ;; *************** function _Update_Setup_Time_Screen *****************
  8087 ;; Defined at:
  8088 ;;		line 182 in file "Setup_Time.c"
  8089 ;; Parameters:    Size  Location     Type
  8090 ;;		None
  8091 ;; Auto vars:     Size  Location     Type
  8092 ;;		None
  8093 ;; Return value:  Size  Location     Type
  8094 ;;		None               void
  8095 ;; Registers used:
  8096 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8097 ;; Tracked objects:
  8098 ;;		On entry : 0/0
  8099 ;;		On exit  : 0/0
  8100 ;;		Unchanged: 0/0
  8101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8106 ;;Total ram usage:        0 bytes
  8107 ;; Hardware stack levels used:    1
  8108 ;; Hardware stack levels required when called:   10
  8109 ;; This function calls:
  8110 ;;		___awdiv
  8111 ;;		___awmod
  8112 ;;		_drawtext
  8113 ;; This function is called by:
  8114 ;;		_Do_Setup_Time
  8115 ;;		_Increase_Time
  8116 ;;		_Decrease_Time
  8117 ;; This function uses a non-reentrant model
  8118 ;;
  8119                           
  8120                           	psect	text35
  8121  00163A                     __ptext35:
  8122                           	opt stack 0
  8123  00163A                     _Update_Setup_Time_Screen:
  8124                           	opt stack 19
  8125                           
  8126                           ;Setup_Time.c: 184: setup_time[0] = (setup_hour / 10) + '0';
  8127                           
  8128                           ;incstack = 0
  8129  00163A  C068  F017         	movff	_setup_hour,___awdiv@dividend
  8130  00163E  6A18               	clrf	___awdiv@dividend+1,c
  8131  001640  0E00               	movlw	0
  8132  001642  6E1A               	movwf	___awdiv@divisor+1,c
  8133  001644  0E0A               	movlw	10
  8134  001646  6E19               	movwf	___awdiv@divisor,c
  8135  001648  EC67  F016         	call	___awdiv	;wreg free
  8136  00164C  5017               	movf	?___awdiv,w,c
  8137  00164E  0F30               	addlw	48
  8138  001650  0100               	movlb	0	; () banked
  8139  001652  6F9D               	movwf	_setup_time& (0+255),b
  8140                           
  8141                           ;Setup_Time.c: 185: setup_time[1] = (setup_hour % 10) + '0';
  8142  001654  C068  F044         	movff	_setup_hour,___awmod@dividend
  8143  001658  6A45               	clrf	___awmod@dividend+1,c
  8144  00165A  0E00               	movlw	0
  8145  00165C  6E47               	movwf	___awmod@divisor+1,c
  8146  00165E  0E0A               	movlw	10
  8147  001660  6E46               	movwf	___awmod@divisor,c
  8148  001662  EC44  F017         	call	___awmod	;wreg free
  8149  001666  5044               	movf	?___awmod,w,c
  8150  001668  0F30               	addlw	48
  8151  00166A  0100               	movlb	0	; () banked
  8152  00166C  6F9E               	movwf	(_setup_time+1)& (0+255),b
  8153                           
  8154                           ;Setup_Time.c: 187: setup_time[3] = (setup_minute / 10) + '0';
  8155  00166E  C069  F017         	movff	_setup_minute,___awdiv@dividend
  8156  001672  6A18               	clrf	___awdiv@dividend+1,c
  8157  001674  0E00               	movlw	0
  8158  001676  6E1A               	movwf	___awdiv@divisor+1,c
  8159  001678  0E0A               	movlw	10
  8160  00167A  6E19               	movwf	___awdiv@divisor,c
  8161  00167C  EC67  F016         	call	___awdiv	;wreg free
  8162  001680  5017               	movf	?___awdiv,w,c
  8163  001682  0F30               	addlw	48
  8164  001684  0100               	movlb	0	; () banked
  8165  001686  6FA0               	movwf	(_setup_time+3)& (0+255),b
  8166                           
  8167                           ;Setup_Time.c: 188: setup_time[4] = (setup_minute % 10) + '0';
  8168  001688  C069  F044         	movff	_setup_minute,___awmod@dividend
  8169  00168C  6A45               	clrf	___awmod@dividend+1,c
  8170  00168E  0E00               	movlw	0
  8171  001690  6E47               	movwf	___awmod@divisor+1,c
  8172  001692  0E0A               	movlw	10
  8173  001694  6E46               	movwf	___awmod@divisor,c
  8174  001696  EC44  F017         	call	___awmod	;wreg free
  8175  00169A  5044               	movf	?___awmod,w,c
  8176  00169C  0F30               	addlw	48
  8177  00169E  0100               	movlb	0	; () banked
  8178  0016A0  6FA1               	movwf	(_setup_time+4)& (0+255),b
  8179                           
  8180                           ;Setup_Time.c: 190: setup_time[6] = (setup_second / 10) + '0';
  8181  0016A2  C06B  F017         	movff	_setup_second,___awdiv@dividend
  8182  0016A6  6A18               	clrf	___awdiv@dividend+1,c
  8183  0016A8  0E00               	movlw	0
  8184  0016AA  6E1A               	movwf	___awdiv@divisor+1,c
  8185  0016AC  0E0A               	movlw	10
  8186  0016AE  6E19               	movwf	___awdiv@divisor,c
  8187  0016B0  EC67  F016         	call	___awdiv	;wreg free
  8188  0016B4  5017               	movf	?___awdiv,w,c
  8189  0016B6  0F30               	addlw	48
  8190  0016B8  0100               	movlb	0	; () banked
  8191  0016BA  6FA3               	movwf	(_setup_time+6)& (0+255),b
  8192                           
  8193                           ;Setup_Time.c: 191: setup_time[7] = (setup_second % 10) + '0';
  8194  0016BC  C06B  F044         	movff	_setup_second,___awmod@dividend
  8195  0016C0  6A45               	clrf	___awmod@dividend+1,c
  8196  0016C2  0E00               	movlw	0
  8197  0016C4  6E47               	movwf	___awmod@divisor+1,c
  8198  0016C6  0E0A               	movlw	10
  8199  0016C8  6E46               	movwf	___awmod@divisor,c
  8200  0016CA  EC44  F017         	call	___awmod	;wreg free
  8201  0016CE  5044               	movf	?___awmod,w,c
  8202  0016D0  0F30               	addlw	48
  8203  0016D2  0100               	movlb	0	; () banked
  8204  0016D4  6FA4               	movwf	(_setup_time+7)& (0+255),b
  8205                           
  8206                           ;Setup_Time.c: 193: setup_date[0] = (setup_month / 10) + '0';
  8207  0016D6  C06A  F017         	movff	_setup_month,___awdiv@dividend
  8208  0016DA  6A18               	clrf	___awdiv@dividend+1,c
  8209  0016DC  0E00               	movlw	0
  8210  0016DE  6E1A               	movwf	___awdiv@divisor+1,c
  8211  0016E0  0E0A               	movlw	10
  8212  0016E2  6E19               	movwf	___awdiv@divisor,c
  8213  0016E4  EC67  F016         	call	___awdiv	;wreg free
  8214  0016E8  5017               	movf	?___awdiv,w,c
  8215  0016EA  0F30               	addlw	48
  8216  0016EC  0100               	movlb	0	; () banked
  8217  0016EE  6F94               	movwf	_setup_date& (0+255),b
  8218                           
  8219                           ;Setup_Time.c: 194: setup_date[1] = (setup_month % 10) + '0';
  8220  0016F0  C06A  F044         	movff	_setup_month,___awmod@dividend
  8221  0016F4  6A45               	clrf	___awmod@dividend+1,c
  8222  0016F6  0E00               	movlw	0
  8223  0016F8  6E47               	movwf	___awmod@divisor+1,c
  8224  0016FA  0E0A               	movlw	10
  8225  0016FC  6E46               	movwf	___awmod@divisor,c
  8226  0016FE  EC44  F017         	call	___awmod	;wreg free
  8227  001702  5044               	movf	?___awmod,w,c
  8228  001704  0F30               	addlw	48
  8229  001706  0100               	movlb	0	; () banked
  8230  001708  6F95               	movwf	(_setup_date+1)& (0+255),b
  8231                           
  8232                           ;Setup_Time.c: 196: setup_date[3] = (setup_day / 10) + '0';
  8233  00170A  C066  F017         	movff	_setup_day,___awdiv@dividend
  8234  00170E  6A18               	clrf	___awdiv@dividend+1,c
  8235  001710  0E00               	movlw	0
  8236  001712  6E1A               	movwf	___awdiv@divisor+1,c
  8237  001714  0E0A               	movlw	10
  8238  001716  6E19               	movwf	___awdiv@divisor,c
  8239  001718  EC67  F016         	call	___awdiv	;wreg free
  8240  00171C  5017               	movf	?___awdiv,w,c
  8241  00171E  0F30               	addlw	48
  8242  001720  0100               	movlb	0	; () banked
  8243  001722  6F97               	movwf	(_setup_date+3)& (0+255),b
  8244                           
  8245                           ;Setup_Time.c: 197: setup_date[4] = (setup_day % 10) + '0';
  8246  001724  C066  F044         	movff	_setup_day,___awmod@dividend
  8247  001728  6A45               	clrf	___awmod@dividend+1,c
  8248  00172A  0E00               	movlw	0
  8249  00172C  6E47               	movwf	___awmod@divisor+1,c
  8250  00172E  0E0A               	movlw	10
  8251  001730  6E46               	movwf	___awmod@divisor,c
  8252  001732  EC44  F017         	call	___awmod	;wreg free
  8253  001736  5044               	movf	?___awmod,w,c
  8254  001738  0F30               	addlw	48
  8255  00173A  0100               	movlb	0	; () banked
  8256  00173C  6F98               	movwf	(_setup_date+4)& (0+255),b
  8257                           
  8258                           ;Setup_Time.c: 199: setup_date[6] = (setup_year / 10) + '0';
  8259  00173E  C06C  F017         	movff	_setup_year,___awdiv@dividend
  8260  001742  6A18               	clrf	___awdiv@dividend+1,c
  8261  001744  0E00               	movlw	0
  8262  001746  6E1A               	movwf	___awdiv@divisor+1,c
  8263  001748  0E0A               	movlw	10
  8264  00174A  6E19               	movwf	___awdiv@divisor,c
  8265  00174C  EC67  F016         	call	___awdiv	;wreg free
  8266  001750  5017               	movf	?___awdiv,w,c
  8267  001752  0F30               	addlw	48
  8268  001754  0100               	movlb	0	; () banked
  8269  001756  6F9A               	movwf	(_setup_date+6)& (0+255),b
  8270                           
  8271                           ;Setup_Time.c: 200: setup_date[7] = (setup_year % 10) + '0';
  8272  001758  C06C  F044         	movff	_setup_year,___awmod@dividend
  8273  00175C  6A45               	clrf	___awmod@dividend+1,c
  8274  00175E  0E00               	movlw	0
  8275  001760  6E47               	movwf	___awmod@divisor+1,c
  8276  001762  0E0A               	movlw	10
  8277  001764  6E46               	movwf	___awmod@divisor,c
  8278  001766  EC44  F017         	call	___awmod	;wreg free
  8279  00176A  5044               	movf	?___awmod,w,c
  8280  00176C  0F30               	addlw	48
  8281  00176E  0100               	movlb	0	; () banked
  8282  001770  6F9B               	movwf	(_setup_date+7)& (0+255),b
  8283                           
  8284                           ; BSR set to: 0
  8285                           ;Setup_Time.c: 202: drawtext(15, 52, setup_time, 0x07FF, 0x0000, 2);
  8286  001772  0E34               	movlw	52
  8287  001774  6E39               	movwf	drawtext@y,c
  8288  001776  0E9D               	movlw	low _setup_time
  8289  001778  6E3A               	movwf	drawtext@_text,c
  8290  00177A  0E00               	movlw	high _setup_time
  8291  00177C  6E3B               	movwf	drawtext@_text+1,c
  8292  00177E  0E07               	movlw	7
  8293  001780  6E3D               	movwf	drawtext@color+1,c
  8294  001782  683C               	setf	drawtext@color,c
  8295  001784  0E00               	movlw	0
  8296  001786  6E3F               	movwf	drawtext@bg+1,c
  8297  001788  0E00               	movlw	0
  8298  00178A  6E3E               	movwf	drawtext@bg,c
  8299  00178C  0E02               	movlw	2
  8300  00178E  6E40               	movwf	drawtext@size,c
  8301  001790  0E0F               	movlw	15
  8302  001792  EC11  F00F         	call	_drawtext
  8303                           
  8304                           ;Setup_Time.c: 203: drawtext(15, 82, setup_date, 0x07E0, 0x0000, 2);
  8305  001796  0E52               	movlw	82
  8306  001798  6E39               	movwf	drawtext@y,c
  8307  00179A  0E94               	movlw	low _setup_date
  8308  00179C  6E3A               	movwf	drawtext@_text,c
  8309  00179E  0E00               	movlw	high _setup_date
  8310  0017A0  6E3B               	movwf	drawtext@_text+1,c
  8311  0017A2  0E07               	movlw	7
  8312  0017A4  6E3D               	movwf	drawtext@color+1,c
  8313  0017A6  0EE0               	movlw	224
  8314  0017A8  6E3C               	movwf	drawtext@color,c
  8315  0017AA  0E00               	movlw	0
  8316  0017AC  6E3F               	movwf	drawtext@bg+1,c
  8317  0017AE  0E00               	movlw	0
  8318  0017B0  6E3E               	movwf	drawtext@bg,c
  8319  0017B2  0E02               	movlw	2
  8320  0017B4  6E40               	movwf	drawtext@size,c
  8321  0017B6  0E0F               	movlw	15
  8322  0017B8  EC11  F00F         	call	_drawtext
  8323  0017BC  0012               	return		;funcret
  8324  0017BE                     __end_of_Update_Setup_Time_Screen:
  8325                           	opt stack 0
  8326                           tblptru	equ	0xFF8
  8327                           tblptrh	equ	0xFF7
  8328                           tblptrl	equ	0xFF6
  8329                           tablat	equ	0xFF5
  8330                           postinc0	equ	0xFEE
  8331                           wreg	equ	0xFE8
  8332                           postdec1	equ	0xFE5
  8333                           fsr1l	equ	0xFE1
  8334                           status	equ	0xFD8
  8335                           
  8336 ;; *************** function _Do_Setup_Alarm_Time *****************
  8337 ;; Defined at:
  8338 ;;		line 24 in file "Setup_Alarm_Time.c"
  8339 ;; Parameters:    Size  Location     Type
  8340 ;;		None
  8341 ;; Auto vars:     Size  Location     Type
  8342 ;;		None
  8343 ;; Return value:  Size  Location     Type
  8344 ;;		None               void
  8345 ;; Registers used:
  8346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8347 ;; Tracked objects:
  8348 ;;		On entry : 0/0
  8349 ;;		On exit  : 0/0
  8350 ;;		Unchanged: 0/0
  8351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8356 ;;Total ram usage:        0 bytes
  8357 ;; Hardware stack levels used:    1
  8358 ;; Hardware stack levels required when called:   12
  8359 ;; This function calls:
  8360 ;;		_DS3231_Read_Alarm_Time
  8361 ;;		_Decrease_Alarm_Time
  8362 ;;		_Do_Beep_Bad
  8363 ;;		_Do_Beep_Good
  8364 ;;		_Do_Save_New_Alarm_Time
  8365 ;;		_Exit_Setup_Alarm_Time
  8366 ;;		_Go_Next_Alarm_Field
  8367 ;;		_Go_Prev_Alarm_Field
  8368 ;;		_Increase_Alarm_Time
  8369 ;;		_Initialize_Setup_Alarm_Time_Screen
  8370 ;;		_Update_Setup_Alarm_Time_Screen
  8371 ;;		_bcd_2_dec
  8372 ;;		_check_for_button_input
  8373 ;; This function is called by:
  8374 ;;		_main
  8375 ;; This function uses a non-reentrant model
  8376 ;;
  8377                           
  8378                           	psect	text36
  8379  0024D2                     __ptext36:
  8380                           	opt stack 0
  8381  0024D2                     _Do_Setup_Alarm_Time:
  8382                           	opt stack 18
  8383                           
  8384                           ;Setup_Alarm_Time.c: 25: Select_Alarm_Field = 0;
  8385                           
  8386                           ;incstack = 0
  8387  0024D2  0E00               	movlw	0
  8388  0024D4  6E55               	movwf	_Select_Alarm_Field,c
  8389                           
  8390                           ;Setup_Alarm_Time.c: 26: In_Alarm_Time_Setup = 1;
  8391  0024D6  0E01               	movlw	1
  8392  0024D8  0100               	movlb	0	; () banked
  8393  0024DA  6FF4               	movwf	_In_Alarm_Time_Setup& (0+255),b
  8394                           
  8395                           ; BSR set to: 0
  8396                           ;Setup_Alarm_Time.c: 27: DS3231_Read_Alarm_Time();
  8397  0024DC  EC4A  F01B         	call	_DS3231_Read_Alarm_Time	;wreg free
  8398                           
  8399                           ;Setup_Alarm_Time.c: 28: alarm_second = bcd_2_dec(alarm_second);
  8400  0024E0  505B               	movf	_alarm_second,w,c
  8401  0024E2  EC08  F01D         	call	_bcd_2_dec
  8402  0024E6  6E5B               	movwf	_alarm_second,c
  8403                           
  8404                           ;Setup_Alarm_Time.c: 29: alarm_minute = bcd_2_dec(alarm_minute);
  8405  0024E8  505A               	movf	_alarm_minute,w,c
  8406  0024EA  EC08  F01D         	call	_bcd_2_dec
  8407  0024EE  6E5A               	movwf	_alarm_minute,c
  8408                           
  8409                           ;Setup_Alarm_Time.c: 30: alarm_hour = bcd_2_dec(alarm_hour);
  8410  0024F0  5059               	movf	_alarm_hour,w,c
  8411  0024F2  EC08  F01D         	call	_bcd_2_dec
  8412  0024F6  6E59               	movwf	_alarm_hour,c
  8413                           
  8414                           ;Setup_Alarm_Time.c: 31: setup_alarm_second = alarm_second;
  8415  0024F8  C05B  F065         	movff	_alarm_second,_setup_alarm_second
  8416                           
  8417                           ;Setup_Alarm_Time.c: 32: setup_alarm_minute = alarm_minute;
  8418  0024FC  C05A  F064         	movff	_alarm_minute,_setup_alarm_minute
  8419                           
  8420                           ;Setup_Alarm_Time.c: 33: setup_alarm_hour = alarm_hour;
  8421  002500  C059  F063         	movff	_alarm_hour,_setup_alarm_hour
  8422                           
  8423                           ;Setup_Alarm_Time.c: 34: Initialize_Setup_Alarm_Time_Screen();
  8424  002504  EC46  F013         	call	_Initialize_Setup_Alarm_Time_Screen	;wreg free
  8425                           
  8426                           ;Setup_Alarm_Time.c: 35: Update_Setup_Alarm_Time_Screen();
  8427  002508  ECF9  F011         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  8428                           
  8429                           ;Setup_Alarm_Time.c: 36: while (In_Alarm_Time_Setup == 1) {
  8430  00250C  D04C               	goto	l10380
  8431  00250E                     l10336:
  8432                           
  8433                           ;Setup_Alarm_Time.c: 37: if (check_for_button_input() == 1) {
  8434  00250E  ECCD  F015         	call	_check_for_button_input	;wreg free
  8435  002512  06E8               	decf	wreg,f,c
  8436  002514  A4D8               	btfss	status,2,c
  8437  002516  D047               	goto	l10380
  8438                           
  8439                           ;Setup_Alarm_Time.c: 38: if ((found == 3) || (found == 4) || (found == 0) || (found == 2
      +                          ) || (found == 6) || (found == 7)) {
  8440  002518  0E03               	movlw	3
  8441  00251A  185E               	xorwf	_found,w,c
  8442  00251C  B4D8               	btfsc	status,2,c
  8443  00251E  D013               	goto	l10350
  8444  002520  0E04               	movlw	4
  8445  002522  185E               	xorwf	_found,w,c
  8446  002524  B4D8               	btfsc	status,2,c
  8447  002526  D00F               	goto	l10350
  8448  002528  505E               	movf	_found,w,c
  8449  00252A  B4D8               	btfsc	status,2,c
  8450  00252C  D00C               	goto	l10350
  8451  00252E  0E02               	movlw	2
  8452  002530  185E               	xorwf	_found,w,c
  8453  002532  B4D8               	btfsc	status,2,c
  8454  002534  D008               	goto	l10350
  8455  002536  0E06               	movlw	6
  8456  002538  185E               	xorwf	_found,w,c
  8457  00253A  B4D8               	btfsc	status,2,c
  8458  00253C  D004               	goto	l10350
  8459  00253E  0E07               	movlw	7
  8460  002540  185E               	xorwf	_found,w,c
  8461  002542  A4D8               	btfss	status,2,c
  8462  002544  D02D               	goto	l10378
  8463  002546                     l10350:
  8464                           
  8465                           ;Setup_Alarm_Time.c: 39: Do_Beep_Good();
  8466  002546  EC25  F01E         	call	_Do_Beep_Good	;wreg free
  8467                           
  8468                           ;Setup_Alarm_Time.c: 40: if (found == 3) Go_Prev_Alarm_Field();
  8469  00254A  0E03               	movlw	3
  8470  00254C  185E               	xorwf	_found,w,c
  8471  00254E  A4D8               	btfss	status,2,c
  8472  002550  D003               	goto	l10356
  8473  002552  EC01  F01E         	call	_Go_Prev_Alarm_Field	;wreg free
  8474  002556  D000               	goto	l10356
  8475  002558                     l10356:
  8476                           
  8477                           ;Setup_Alarm_Time.c: 41: if (found == 4) Go_Next_Alarm_Field();
  8478  002558  0E04               	movlw	4
  8479  00255A  185E               	xorwf	_found,w,c
  8480  00255C  A4D8               	btfss	status,2,c
  8481  00255E  D003               	goto	l10360
  8482  002560  EC0D  F01E         	call	_Go_Next_Alarm_Field	;wreg free
  8483  002564  D000               	goto	l10360
  8484  002566                     l10360:
  8485                           
  8486                           ;Setup_Alarm_Time.c: 42: if (found == 2) Do_Save_New_Alarm_Time();
  8487  002566  0E02               	movlw	2
  8488  002568  185E               	xorwf	_found,w,c
  8489  00256A  A4D8               	btfss	status,2,c
  8490  00256C  D003               	goto	l10364
  8491  00256E  EC19  F01E         	call	_Do_Save_New_Alarm_Time	;wreg free
  8492  002572  D000               	goto	l10364
  8493  002574                     l10364:
  8494                           
  8495                           ;Setup_Alarm_Time.c: 43: if (found == 0) Exit_Setup_Alarm_Time();
  8496  002574  505E               	movf	_found,w,c
  8497  002576  A4D8               	btfss	status,2,c
  8498  002578  D003               	goto	l10368
  8499  00257A  ECEF  F01E         	call	_Exit_Setup_Alarm_Time	;wreg free
  8500  00257E  D000               	goto	l10368
  8501  002580                     l10368:
  8502                           
  8503                           ;Setup_Alarm_Time.c: 44: if (found == 6) Decrease_Alarm_Time();
  8504  002580  0E06               	movlw	6
  8505  002582  185E               	xorwf	_found,w,c
  8506  002584  A4D8               	btfss	status,2,c
  8507  002586  D003               	goto	l10372
  8508  002588  EC23  F01B         	call	_Decrease_Alarm_Time	;wreg free
  8509  00258C  D000               	goto	l10372
  8510  00258E                     l10372:
  8511                           
  8512                           ;Setup_Alarm_Time.c: 45: if (found == 7) Increase_Alarm_Time();
  8513  00258E  0E07               	movlw	7
  8514  002590  185E               	xorwf	_found,w,c
  8515  002592  A4D8               	btfss	status,2,c
  8516  002594  D003               	goto	l10376
  8517  002596  ECBB  F01B         	call	_Increase_Alarm_Time	;wreg free
  8518  00259A  D000               	goto	l10376
  8519  00259C                     l10376:
  8520                           
  8521                           ;Setup_Alarm_Time.c: 46: found = 0xff;
  8522  00259C  685E               	setf	_found,c
  8523                           
  8524                           ;Setup_Alarm_Time.c: 47: } else {
  8525  00259E  D003               	goto	l10380
  8526  0025A0                     l10378:
  8527                           
  8528                           ;Setup_Alarm_Time.c: 48: Do_Beep_Bad();
  8529  0025A0  EC31  F01E         	call	_Do_Beep_Bad	;wreg free
  8530  0025A4  D000               	goto	l10380
  8531  0025A6                     l10380:
  8532  0025A6  0100               	movlb	0	; () banked
  8533  0025A8  05F4               	decf	_In_Alarm_Time_Setup& (0+255),w,b
  8534  0025AA  B4D8               	btfsc	status,2,c
  8535  0025AC  D7B0               	goto	l10336
  8536                           
  8537                           ; BSR set to: 0
  8538                           
  8539                           ; BSR set to: 0
  8540  0025AE  0012               	return		;funcret
  8541  0025B0                     __end_of_Do_Setup_Alarm_Time:
  8542                           	opt stack 0
  8543                           tblptru	equ	0xFF8
  8544                           tblptrh	equ	0xFF7
  8545                           tblptrl	equ	0xFF6
  8546                           tablat	equ	0xFF5
  8547                           postinc0	equ	0xFEE
  8548                           wreg	equ	0xFE8
  8549                           postdec1	equ	0xFE5
  8550                           fsr1l	equ	0xFE1
  8551                           status	equ	0xFD8
  8552                           
  8553 ;; *************** function _check_for_button_input *****************
  8554 ;; Defined at:
  8555 ;;		line 130 in file "utils.c"
  8556 ;; Parameters:    Size  Location     Type
  8557 ;;		None
  8558 ;; Auto vars:     Size  Location     Type
  8559 ;;  j               2   57[COMRAM] int 
  8560 ;; Return value:  Size  Location     Type
  8561 ;;                  1    wreg      unsigned char 
  8562 ;; Registers used:
  8563 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8564 ;; Tracked objects:
  8565 ;;		On entry : 0/0
  8566 ;;		On exit  : 0/0
  8567 ;;		Unchanged: 0/0
  8568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8570 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8571 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8572 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8573 ;;Total ram usage:        3 bytes
  8574 ;; Hardware stack levels used:    1
  8575 ;; Hardware stack levels required when called:    5
  8576 ;; This function calls:
  8577 ;;		_printf
  8578 ;; This function is called by:
  8579 ;;		_Do_Setup_Time
  8580 ;;		_Setup_Temp_Fan
  8581 ;;		_Do_Setup_Alarm_Time
  8582 ;;		_main
  8583 ;; This function uses a non-reentrant model
  8584 ;;
  8585                           
  8586                           	psect	text37
  8587  002B9A                     __ptext37:
  8588                           	opt stack 0
  8589  002B9A                     _check_for_button_input:
  8590                           	opt stack 25
  8591                           
  8592                           ;utils.c: 131: printf("Checking button \r\n");
  8593                           
  8594                           ; BSR set to: 0
  8595                           ;incstack = 0
  8596  002B9A  0EA4               	movlw	low STR_28
  8597  002B9C  6E1D               	movwf	printf@f,c
  8598  002B9E  0EFE               	movlw	high STR_28
  8599  002BA0  6E1E               	movwf	printf@f+1,c
  8600  002BA2  ECDE  F004         	call	_printf	;wreg free
  8601                           
  8602                           ;utils.c: 132: if (Nec_ok == 1) {
  8603  002BA6  0100               	movlb	0	; () banked
  8604  002BA8  05E3               	decf	_Nec_ok& (0+255),w,b
  8605  002BAA  0100               	movlb	0	; () banked
  8606  002BAC  11E4               	iorwf	(_Nec_ok+1)& (0+255),w,b
  8607  002BAE  A4D8               	btfss	status,2,c
  8608  002BB0  D042               	goto	l707
  8609                           
  8610                           ; BSR set to: 0
  8611                           ;utils.c: 133: Nec_ok = 0;
  8612  002BB2  0E00               	movlw	0
  8613  002BB4  0100               	movlb	0	; () banked
  8614  002BB6  6FE4               	movwf	(_Nec_ok+1)& (0+255),b
  8615  002BB8  0E00               	movlw	0
  8616  002BBA  6FE3               	movwf	_Nec_ok& (0+255),b
  8617                           
  8618                           ; BSR set to: 0
  8619                           ;utils.c: 135: INTCONbits.INT0IE = 1;
  8620  002BBC  88F2               	bsf	intcon,4,c	;volatile
  8621                           
  8622                           ; BSR set to: 0
  8623                           ;utils.c: 136: INTCON2bits.INTEDG0 = 0;
  8624  002BBE  9CF1               	bcf	intcon2,6,c	;volatile
  8625                           
  8626                           ; BSR set to: 0
  8627                           ;utils.c: 137: printf("Nec_button = %x\r\n", Nec_button);
  8628  002BC0  0E00               	movlw	low STR_29
  8629  002BC2  6E1D               	movwf	printf@f,c
  8630  002BC4  0EFF               	movlw	high STR_29
  8631  002BC6  6E1E               	movwf	printf@f+1,c
  8632  002BC8  C0F8  F01F         	movff	_Nec_button,?_printf+2
  8633  002BCC  6A20               	clrf	?_printf+3,c
  8634  002BCE  ECDE  F004         	call	_printf	;wreg free
  8635                           
  8636                           ;utils.c: 138: found = 0xff;
  8637  002BD2  685E               	setf	_found,c
  8638                           
  8639                           ;utils.c: 139: for (int j = 0; j < 21; j++) {
  8640  002BD4  0E00               	movlw	0
  8641  002BD6  6E3B               	movwf	check_for_button_input@j+1,c
  8642  002BD8  0E00               	movlw	0
  8643  002BDA  6E3A               	movwf	check_for_button_input@j,c
  8644  002BDC                     l9640:
  8645  002BDC  BE3B               	btfsc	check_for_button_input@j+1,7,c
  8646  002BDE  D008               	goto	l9644
  8647  002BE0  503B               	movf	check_for_button_input@j+1,w,c
  8648  002BE2  E11C               	bnz	l9654
  8649  002BE4  0E15               	movlw	21
  8650  002BE6  5C3A               	subwf	check_for_button_input@j,w,c
  8651  002BE8  B0D8               	btfsc	status,0,c
  8652  002BEA  D018               	goto	l9654
  8653  002BEC  D001               	goto	l9644
  8654  002BEE  D016               	goto	l9654
  8655  002BF0                     l9644:
  8656                           
  8657                           ;utils.c: 140: if (Nec_button == array1[j]) {
  8658  002BF0  0E1F               	movlw	low _array1
  8659  002BF2  243A               	addwf	check_for_button_input@j,w,c
  8660  002BF4  6ED9               	movwf	fsr2l,c
  8661  002BF6  0E01               	movlw	high _array1
  8662  002BF8  203B               	addwfc	check_for_button_input@j+1,w,c
  8663  002BFA  6EDA               	movwf	fsr2h,c
  8664  002BFC  0100               	movlb	0	; () banked
  8665  002BFE  51F8               	movf	_Nec_button& (0+255),w,b
  8666  002C00  18DE               	xorwf	postinc2,w,c
  8667  002C02  A4D8               	btfss	status,2,c
  8668  002C04  D007               	goto	l9650
  8669                           
  8670                           ; BSR set to: 0
  8671                           ;utils.c: 141: found = j;
  8672  002C06  C03A  F05E         	movff	check_for_button_input@j,_found
  8673                           
  8674                           ; BSR set to: 0
  8675                           ;utils.c: 142: j = 21;
  8676  002C0A  0E00               	movlw	0
  8677  002C0C  6E3B               	movwf	check_for_button_input@j+1,c
  8678  002C0E  0E15               	movlw	21
  8679  002C10  6E3A               	movwf	check_for_button_input@j,c
  8680  002C12  D000               	goto	l9650
  8681  002C14                     l9650:
  8682                           
  8683                           ; BSR set to: 0
  8684  002C14  4A3A               	infsnz	check_for_button_input@j,f,c
  8685  002C16  2A3B               	incf	check_for_button_input@j+1,f,c
  8686  002C18  D7E1               	goto	l9640
  8687                           
  8688                           ; BSR set to: 0
  8689  002C1A  D000               	goto	l9654
  8690  002C1C                     l9654:
  8691                           
  8692                           ;utils.c: 143: }
  8693                           ;utils.c: 144: }
  8694                           ;utils.c: 145: if (found == 0xff) {
  8695  002C1C  285E               	incf	_found,w,c
  8696  002C1E  A4D8               	btfss	status,2,c
  8697  002C20  D008               	goto	l9664
  8698                           
  8699                           ;utils.c: 146: printf("Cannot find button \r\n");
  8700  002C22  0EEC               	movlw	low STR_30
  8701  002C24  6E1D               	movwf	printf@f,c
  8702  002C26  0EFD               	movlw	high STR_30
  8703  002C28  6E1E               	movwf	printf@f+1,c
  8704  002C2A  ECDE  F004         	call	_printf	;wreg free
  8705                           
  8706                           ;utils.c: 147: return (0);
  8707  002C2E  0E00               	movlw	0
  8708                           
  8709                           ;utils.c: 148: } else {
  8710  002C30  D002               	goto	l707
  8711  002C32                     l9664:
  8712                           
  8713                           ;utils.c: 149: return (1);
  8714  002C32  0E01               	movlw	1
  8715  002C34  D000               	goto	l707
  8716  002C36                     l707:
  8717  002C36  0012               	return		;funcret
  8718  002C38                     __end_of_check_for_button_input:
  8719                           	opt stack 0
  8720                           tblptru	equ	0xFF8
  8721                           tblptrh	equ	0xFF7
  8722                           tblptrl	equ	0xFF6
  8723                           tablat	equ	0xFF5
  8724                           intcon	equ	0xFF2
  8725                           intcon2	equ	0xFF1
  8726                           postinc0	equ	0xFEE
  8727                           wreg	equ	0xFE8
  8728                           postdec1	equ	0xFE5
  8729                           fsr1l	equ	0xFE1
  8730                           postinc2	equ	0xFDE
  8731                           fsr2h	equ	0xFDA
  8732                           fsr2l	equ	0xFD9
  8733                           status	equ	0xFD8
  8734                           
  8735 ;; *************** function _bcd_2_dec *****************
  8736 ;; Defined at:
  8737 ;;		line 15 in file "utils.c"
  8738 ;; Parameters:    Size  Location     Type
  8739 ;;  bcd             1    wreg     unsigned char 
  8740 ;; Auto vars:     Size  Location     Type
  8741 ;;  bcd             1   20[COMRAM] unsigned char 
  8742 ;;  dec             2   18[COMRAM] int 
  8743 ;; Return value:  Size  Location     Type
  8744 ;;                  1    wreg      unsigned char 
  8745 ;; Registers used:
  8746 ;;		wreg, status,2, status,0, prodl, prodh
  8747 ;; Tracked objects:
  8748 ;;		On entry : 0/0
  8749 ;;		On exit  : 0/0
  8750 ;;		Unchanged: 0/0
  8751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8753 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8754 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8755 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8756 ;;Total ram usage:        5 bytes
  8757 ;; Hardware stack levels used:    1
  8758 ;; Hardware stack levels required when called:    3
  8759 ;; This function calls:
  8760 ;;		Nothing
  8761 ;; This function is called by:
  8762 ;;		_Do_Setup_Time
  8763 ;;		_Do_Setup_Alarm_Time
  8764 ;; This function uses a non-reentrant model
  8765 ;;
  8766                           
  8767                           	psect	text38
  8768  003A10                     __ptext38:
  8769                           	opt stack 0
  8770  003A10                     _bcd_2_dec:
  8771                           	opt stack 26
  8772                           
  8773                           ;incstack = 0
  8774                           ;bcd_2_dec@bcd stored from wreg
  8775  003A10  6E15               	movwf	bcd_2_dec@bcd,c
  8776                           
  8777                           ;utils.c: 16: int dec;
  8778                           ;utils.c: 17: dec = ((bcd >> 4) * 10) + (bcd & 0x0f);
  8779  003A12  C015  F011         	movff	bcd_2_dec@bcd,??_bcd_2_dec
  8780  003A16  0E0F               	movlw	15
  8781  003A18  1611               	andwf	??_bcd_2_dec,f,c
  8782  003A1A  C015  F012         	movff	bcd_2_dec@bcd,??_bcd_2_dec+1
  8783  003A1E  3A12               	swapf	??_bcd_2_dec+1,f,c
  8784  003A20  0E0F               	movlw	15
  8785  003A22  1612               	andwf	??_bcd_2_dec+1,f,c
  8786  003A24  5012               	movf	??_bcd_2_dec+1,w,c
  8787  003A26  0D0A               	mullw	10
  8788  003A28  5011               	movf	??_bcd_2_dec,w,c
  8789  003A2A  24F3               	addwf	prodl,w,c
  8790  003A2C  6E13               	movwf	bcd_2_dec@dec,c
  8791  003A2E  0E00               	movlw	0
  8792  003A30  20F4               	addwfc	prodh,w,c
  8793  003A32  6E14               	movwf	bcd_2_dec@dec+1,c
  8794                           
  8795                           ;utils.c: 18: return dec;
  8796  003A34  5013               	movf	bcd_2_dec@dec,w,c
  8797  003A36  D000               	goto	l652
  8798  003A38                     l652:
  8799  003A38  0012               	return		;funcret
  8800  003A3A                     __end_of_bcd_2_dec:
  8801                           	opt stack 0
  8802                           tblptru	equ	0xFF8
  8803                           tblptrh	equ	0xFF7
  8804                           tblptrl	equ	0xFF6
  8805                           tablat	equ	0xFF5
  8806                           prodh	equ	0xFF4
  8807                           prodl	equ	0xFF3
  8808                           intcon	equ	0xFF2
  8809                           intcon2	equ	0xFF1
  8810                           postinc0	equ	0xFEE
  8811                           wreg	equ	0xFE8
  8812                           postdec1	equ	0xFE5
  8813                           fsr1l	equ	0xFE1
  8814                           postinc2	equ	0xFDE
  8815                           fsr2h	equ	0xFDA
  8816                           fsr2l	equ	0xFD9
  8817                           status	equ	0xFD8
  8818                           
  8819 ;; *************** function _Initialize_Setup_Alarm_Time_Screen *****************
  8820 ;; Defined at:
  8821 ;;		line 127 in file "Setup_Alarm_Time.c"
  8822 ;; Parameters:    Size  Location     Type
  8823 ;;		None
  8824 ;; Auto vars:     Size  Location     Type
  8825 ;;		None
  8826 ;; Return value:  Size  Location     Type
  8827 ;;		None               void
  8828 ;; Registers used:
  8829 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8830 ;; Tracked objects:
  8831 ;;		On entry : 0/0
  8832 ;;		On exit  : 0/0
  8833 ;;		Unchanged: 0/0
  8834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8839 ;;Total ram usage:        0 bytes
  8840 ;; Hardware stack levels used:    1
  8841 ;; Hardware stack levels required when called:   10
  8842 ;; This function calls:
  8843 ;;		_drawtext
  8844 ;;		_fillRect
  8845 ;;		_fillScreen
  8846 ;;		_strcpy
  8847 ;; This function is called by:
  8848 ;;		_Do_Setup_Alarm_Time
  8849 ;; This function uses a non-reentrant model
  8850 ;;
  8851                           
  8852                           	psect	text39
  8853  00268C                     __ptext39:
  8854                           	opt stack 0
  8855  00268C                     _Initialize_Setup_Alarm_Time_Screen:
  8856                           	opt stack 19
  8857                           
  8858                           ;Setup_Alarm_Time.c: 128: fillScreen(0x0000);
  8859                           
  8860                           ;incstack = 0
  8861  00268C  0E00               	movlw	0
  8862  00268E  6E25               	movwf	fillScreen@color+1,c
  8863  002690  0E00               	movlw	0
  8864  002692  6E24               	movwf	fillScreen@color,c
  8865  002694  ECCE  F01D         	call	_fillScreen	;wreg free
  8866                           
  8867                           ;Setup_Alarm_Time.c: 130: strcpy(txt, "ECE3301L F23 Final");
  8868  002698  C052  F011         	movff	_txt,strcpy@to
  8869  00269C  C053  F012         	movff	_txt+1,strcpy@to+1
  8870  0026A0  0E91               	movlw	low STR_38
  8871  0026A2  6E13               	movwf	strcpy@from,c
  8872  0026A4  0EFE               	movlw	high STR_38
  8873  0026A6  6E14               	movwf	strcpy@from+1,c
  8874  0026A8  ECD7  F01C         	call	_strcpy	;wreg free
  8875                           
  8876                           ;Setup_Alarm_Time.c: 131: drawtext(1, 1, txt, 0xFFFF, 0x0000, 1);
  8877  0026AC  0E01               	movlw	1
  8878  0026AE  6E39               	movwf	drawtext@y,c
  8879  0026B0  C052  F03A         	movff	_txt,drawtext@_text
  8880  0026B4  C053  F03B         	movff	_txt+1,drawtext@_text+1
  8881  0026B8  0EFF               	movlw	255
  8882  0026BA  6E3D               	movwf	drawtext@color+1,c
  8883  0026BC  683C               	setf	drawtext@color,c
  8884  0026BE  0E00               	movlw	0
  8885  0026C0  6E3F               	movwf	drawtext@bg+1,c
  8886  0026C2  0E00               	movlw	0
  8887  0026C4  6E3E               	movwf	drawtext@bg,c
  8888  0026C6  0E01               	movlw	1
  8889  0026C8  6E40               	movwf	drawtext@size,c
  8890  0026CA  0E01               	movlw	1
  8891  0026CC  EC11  F00F         	call	_drawtext
  8892                           
  8893                           ;Setup_Alarm_Time.c: 134: strcpy(txt, "Alrm Setup");
  8894  0026D0  C052  F011         	movff	_txt,strcpy@to
  8895  0026D4  C053  F012         	movff	_txt+1,strcpy@to+1
  8896  0026D8  0E8E               	movlw	low STR_39
  8897  0026DA  6E13               	movwf	strcpy@from,c
  8898  0026DC  0EFF               	movlw	high STR_39
  8899  0026DE  6E14               	movwf	strcpy@from+1,c
  8900  0026E0  ECD7  F01C         	call	_strcpy	;wreg free
  8901                           
  8902                           ;Setup_Alarm_Time.c: 135: drawtext(1 + 5, 1 + 20, txt, 0xF81F, 0x0000, 2);
  8903  0026E4  0E15               	movlw	21
  8904  0026E6  6E39               	movwf	drawtext@y,c
  8905  0026E8  C052  F03A         	movff	_txt,drawtext@_text
  8906  0026EC  C053  F03B         	movff	_txt+1,drawtext@_text+1
  8907  0026F0  0EF8               	movlw	248
  8908  0026F2  6E3D               	movwf	drawtext@color+1,c
  8909  0026F4  0E1F               	movlw	31
  8910  0026F6  6E3C               	movwf	drawtext@color,c
  8911  0026F8  0E00               	movlw	0
  8912  0026FA  6E3F               	movwf	drawtext@bg+1,c
  8913  0026FC  0E00               	movlw	0
  8914  0026FE  6E3E               	movwf	drawtext@bg,c
  8915  002700  0E02               	movlw	2
  8916  002702  6E40               	movwf	drawtext@size,c
  8917  002704  0E06               	movlw	6
  8918  002706  EC11  F00F         	call	_drawtext
  8919                           
  8920                           ;Setup_Alarm_Time.c: 137: strcpy(txt, "Time");
  8921  00270A  C052  F011         	movff	_txt,strcpy@to
  8922  00270E  C053  F012         	movff	_txt+1,strcpy@to+1
  8923  002712  0E9F               	movlw	low (STR_16+6)
  8924  002714  6E13               	movwf	strcpy@from,c
  8925  002716  0EFF               	movlw	high (STR_16+6)
  8926  002718  6E14               	movwf	strcpy@from+1,c
  8927  00271A  ECD7  F01C         	call	_strcpy	;wreg free
  8928                           
  8929                           ;Setup_Alarm_Time.c: 138: drawtext(50, 40, txt, 0x001F, 0x0000, 1);
  8930  00271E  0E28               	movlw	40
  8931  002720  6E39               	movwf	drawtext@y,c
  8932  002722  C052  F03A         	movff	_txt,drawtext@_text
  8933  002726  C053  F03B         	movff	_txt+1,drawtext@_text+1
  8934  00272A  0E00               	movlw	0
  8935  00272C  6E3D               	movwf	drawtext@color+1,c
  8936  00272E  0E1F               	movlw	31
  8937  002730  6E3C               	movwf	drawtext@color,c
  8938  002732  0E00               	movlw	0
  8939  002734  6E3F               	movwf	drawtext@bg+1,c
  8940  002736  0E00               	movlw	0
  8941  002738  6E3E               	movwf	drawtext@bg,c
  8942  00273A  0E01               	movlw	1
  8943  00273C  6E40               	movwf	drawtext@size,c
  8944  00273E  0E32               	movlw	50
  8945  002740  EC11  F00F         	call	_drawtext
  8946                           
  8947                           ;Setup_Alarm_Time.c: 139: fillRect(15 - 1, 52 + 16, 25, 2, 0x07FF);
  8948  002744  0E44               	movlw	68
  8949  002746  6E23               	movwf	fillRect@y,c
  8950  002748  0E19               	movlw	25
  8951  00274A  6E24               	movwf	fillRect@w,c
  8952  00274C  0E02               	movlw	2
  8953  00274E  6E25               	movwf	fillRect@h,c
  8954  002750  0E07               	movlw	7
  8955  002752  6E27               	movwf	fillRect@color+1,c
  8956  002754  6826               	setf	fillRect@color,c
  8957  002756  0E0E               	movlw	14
  8958  002758  EC96  F01B         	call	_fillRect
  8959  00275C  0012               	return		;funcret
  8960  00275E                     __end_of_Initialize_Setup_Alarm_Time_Screen:
  8961                           	opt stack 0
  8962                           tblptru	equ	0xFF8
  8963                           tblptrh	equ	0xFF7
  8964                           tblptrl	equ	0xFF6
  8965                           tablat	equ	0xFF5
  8966                           prodh	equ	0xFF4
  8967                           prodl	equ	0xFF3
  8968                           intcon	equ	0xFF2
  8969                           intcon2	equ	0xFF1
  8970                           postinc0	equ	0xFEE
  8971                           wreg	equ	0xFE8
  8972                           postdec1	equ	0xFE5
  8973                           fsr1l	equ	0xFE1
  8974                           postinc2	equ	0xFDE
  8975                           fsr2h	equ	0xFDA
  8976                           fsr2l	equ	0xFD9
  8977                           status	equ	0xFD8
  8978                           
  8979 ;; *************** function _Increase_Alarm_Time *****************
  8980 ;; Defined at:
  8981 ;;		line 54 in file "Setup_Alarm_Time.c"
  8982 ;; Parameters:    Size  Location     Type
  8983 ;;		None
  8984 ;; Auto vars:     Size  Location     Type
  8985 ;;		None
  8986 ;; Return value:  Size  Location     Type
  8987 ;;		None               void
  8988 ;; Registers used:
  8989 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8990 ;; Tracked objects:
  8991 ;;		On entry : 0/0
  8992 ;;		On exit  : 0/0
  8993 ;;		Unchanged: 0/0
  8994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8999 ;;Total ram usage:        0 bytes
  9000 ;; Hardware stack levels used:    1
  9001 ;; Hardware stack levels required when called:   11
  9002 ;; This function calls:
  9003 ;;		_Update_Setup_Alarm_Time_Screen
  9004 ;; This function is called by:
  9005 ;;		_Do_Setup_Alarm_Time
  9006 ;; This function uses a non-reentrant model
  9007 ;;
  9008                           
  9009                           	psect	text40
  9010  003776                     __ptext40:
  9011                           	opt stack 0
  9012  003776                     _Increase_Alarm_Time:
  9013                           	opt stack 18
  9014                           
  9015                           ;Setup_Alarm_Time.c: 55: switch (Select_Alarm_Field)
  9016                           
  9017                           ;incstack = 0
  9018  003776  D015               	goto	l9934
  9019  003778                     l9914:
  9020                           
  9021                           ;Setup_Alarm_Time.c: 58: setup_alarm_hour++;
  9022  003778  2A63               	incf	_setup_alarm_hour,f,c
  9023                           
  9024                           ;Setup_Alarm_Time.c: 59: if (setup_alarm_hour >= 24) setup_alarm_hour = 0;
  9025  00377A  0E17               	movlw	23
  9026  00377C  6463               	cpfsgt	_setup_alarm_hour,c
  9027  00377E  D01C               	goto	l9936
  9028  003780  0E00               	movlw	0
  9029  003782  6E63               	movwf	_setup_alarm_hour,c
  9030                           
  9031                           ;Setup_Alarm_Time.c: 60: break;
  9032  003784  D019               	goto	l9936
  9033  003786                     l9920:
  9034                           
  9035                           ;Setup_Alarm_Time.c: 62: setup_alarm_minute++;
  9036  003786  2A64               	incf	_setup_alarm_minute,f,c
  9037                           
  9038                           ;Setup_Alarm_Time.c: 63: if (setup_alarm_minute >= 60) setup_alarm_minute = 0;
  9039  003788  0E3B               	movlw	59
  9040  00378A  6464               	cpfsgt	_setup_alarm_minute,c
  9041  00378C  D015               	goto	l9936
  9042  00378E  0E00               	movlw	0
  9043  003790  6E64               	movwf	_setup_alarm_minute,c
  9044                           
  9045                           ;Setup_Alarm_Time.c: 64: break;
  9046  003792  D012               	goto	l9936
  9047  003794                     l9926:
  9048                           
  9049                           ;Setup_Alarm_Time.c: 67: setup_alarm_second++;
  9050  003794  2A65               	incf	_setup_alarm_second,f,c
  9051                           
  9052                           ;Setup_Alarm_Time.c: 68: if (setup_alarm_second >= 60) setup_alarm_second = 0;
  9053  003796  0E3B               	movlw	59
  9054  003798  6465               	cpfsgt	_setup_alarm_second,c
  9055  00379A  D00E               	goto	l9936
  9056  00379C  0E00               	movlw	0
  9057  00379E  6E65               	movwf	_setup_alarm_second,c
  9058                           
  9059                           ;Setup_Alarm_Time.c: 73: }
  9060                           
  9061                           ;Setup_Alarm_Time.c: 72: break;
  9062                           
  9063                           ;Setup_Alarm_Time.c: 71: default:
  9064                           
  9065                           ;Setup_Alarm_Time.c: 69: break;
  9066  0037A0  D00B               	goto	l9936
  9067  0037A2                     l9934:
  9068  0037A2  5055               	movf	_Select_Alarm_Field,w,c
  9069                           
  9070                           ; Switch size 1, requested type "space"
  9071                           ; Number of cases is 3, Range of values is 0 to 2
  9072                           ; switch strategies available:
  9073                           ; Name         Instructions Cycles
  9074                           ; simple_byte           10     6 (average)
  9075                           ;	Chosen strategy is simple_byte
  9076  0037A4  0A00               	xorlw	0	; case 0
  9077  0037A6  B4D8               	btfsc	status,2,c
  9078  0037A8  D7E7               	goto	l9914
  9079  0037AA  0A01               	xorlw	1	; case 1
  9080  0037AC  B4D8               	btfsc	status,2,c
  9081  0037AE  D7EB               	goto	l9920
  9082  0037B0  0A03               	xorlw	3	; case 2
  9083  0037B2  B4D8               	btfsc	status,2,c
  9084  0037B4  D7EF               	goto	l9926
  9085  0037B6  D000               	goto	l9936
  9086  0037B8                     l9936:
  9087                           
  9088                           ;Setup_Alarm_Time.c: 74: Update_Setup_Alarm_Time_Screen();
  9089  0037B8  ECF9  F011         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  9090  0037BC  0012               	return		;funcret
  9091  0037BE                     __end_of_Increase_Alarm_Time:
  9092                           	opt stack 0
  9093                           tblptru	equ	0xFF8
  9094                           tblptrh	equ	0xFF7
  9095                           tblptrl	equ	0xFF6
  9096                           tablat	equ	0xFF5
  9097                           prodh	equ	0xFF4
  9098                           prodl	equ	0xFF3
  9099                           intcon	equ	0xFF2
  9100                           intcon2	equ	0xFF1
  9101                           postinc0	equ	0xFEE
  9102                           wreg	equ	0xFE8
  9103                           postdec1	equ	0xFE5
  9104                           fsr1l	equ	0xFE1
  9105                           postinc2	equ	0xFDE
  9106                           fsr2h	equ	0xFDA
  9107                           fsr2l	equ	0xFD9
  9108                           status	equ	0xFD8
  9109                           
  9110 ;; *************** function _Go_Prev_Alarm_Field *****************
  9111 ;; Defined at:
  9112 ;;		line 107 in file "Setup_Alarm_Time.c"
  9113 ;; Parameters:    Size  Location     Type
  9114 ;;		None
  9115 ;; Auto vars:     Size  Location     Type
  9116 ;;		None
  9117 ;; Return value:  Size  Location     Type
  9118 ;;		None               void
  9119 ;; Registers used:
  9120 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9121 ;; Tracked objects:
  9122 ;;		On entry : 0/0
  9123 ;;		On exit  : 0/0
  9124 ;;		Unchanged: 0/0
  9125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9129 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9130 ;;Total ram usage:        0 bytes
  9131 ;; Hardware stack levels used:    1
  9132 ;; Hardware stack levels required when called:    9
  9133 ;; This function calls:
  9134 ;;		_Update_Setup_Screen_Cursor_Backward
  9135 ;; This function is called by:
  9136 ;;		_Do_Setup_Alarm_Time
  9137 ;; This function uses a non-reentrant model
  9138 ;;
  9139                           
  9140                           	psect	text41
  9141  003C02                     __ptext41:
  9142                           	opt stack 0
  9143  003C02                     _Go_Prev_Alarm_Field:
  9144                           	opt stack 20
  9145                           
  9146                           ;Setup_Alarm_Time.c: 108: if (Select_Alarm_Field == 0) Select_Alarm_Field = 2;
  9147                           
  9148                           ;incstack = 0
  9149  003C02  5055               	movf	_Select_Alarm_Field,w,c
  9150  003C04  A4D8               	btfss	status,2,c
  9151  003C06  D003               	goto	l9862
  9152  003C08  0E02               	movlw	2
  9153  003C0A  6E55               	movwf	_Select_Alarm_Field,c
  9154  003C0C  D002               	goto	l9864
  9155  003C0E                     l9862:
  9156                           
  9157                           ;Setup_Alarm_Time.c: 109: else Select_Alarm_Field--;
  9158  003C0E  0655               	decf	_Select_Alarm_Field,f,c
  9159  003C10  D000               	goto	l9864
  9160  003C12                     l9864:
  9161                           
  9162                           ;Setup_Alarm_Time.c: 110: Update_Setup_Screen_Cursor_Backward(Select_Alarm_Field);
  9163  003C12  5055               	movf	_Select_Alarm_Field,w,c
  9164  003C14  EC6C  F009         	call	_Update_Setup_Screen_Cursor_Backward
  9165  003C18  0012               	return		;funcret
  9166  003C1A                     __end_of_Go_Prev_Alarm_Field:
  9167                           	opt stack 0
  9168                           tblptru	equ	0xFF8
  9169                           tblptrh	equ	0xFF7
  9170                           tblptrl	equ	0xFF6
  9171                           tablat	equ	0xFF5
  9172                           prodh	equ	0xFF4
  9173                           prodl	equ	0xFF3
  9174                           intcon	equ	0xFF2
  9175                           intcon2	equ	0xFF1
  9176                           postinc0	equ	0xFEE
  9177                           wreg	equ	0xFE8
  9178                           postdec1	equ	0xFE5
  9179                           fsr1l	equ	0xFE1
  9180                           postinc2	equ	0xFDE
  9181                           fsr2h	equ	0xFDA
  9182                           fsr2l	equ	0xFD9
  9183                           status	equ	0xFD8
  9184                           
  9185 ;; *************** function _Update_Setup_Screen_Cursor_Backward *****************
  9186 ;; Defined at:
  9187 ;;		line 243 in file "Setup_Time.c"
  9188 ;; Parameters:    Size  Location     Type
  9189 ;;  field           1    wreg     unsigned char 
  9190 ;; Auto vars:     Size  Location     Type
  9191 ;;  field           1   45[COMRAM] unsigned char 
  9192 ;;  xinc            1   47[COMRAM] unsigned char 
  9193 ;;  yinc            1   46[COMRAM] unsigned char 
  9194 ;; Return value:  Size  Location     Type
  9195 ;;		None               void
  9196 ;; Registers used:
  9197 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9198 ;; Tracked objects:
  9199 ;;		On entry : 0/0
  9200 ;;		On exit  : 0/0
  9201 ;;		Unchanged: 0/0
  9202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9204 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9206 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9207 ;;Total ram usage:        3 bytes
  9208 ;; Hardware stack levels used:    1
  9209 ;; Hardware stack levels required when called:    8
  9210 ;; This function calls:
  9211 ;;		_fillRect
  9212 ;; This function is called by:
  9213 ;;		_Go_Prev_Field
  9214 ;;		_Go_Prev_Alarm_Field
  9215 ;; This function uses a non-reentrant model
  9216 ;;
  9217                           
  9218                           	psect	text42
  9219  0012D8                     __ptext42:
  9220                           	opt stack 0
  9221  0012D8                     _Update_Setup_Screen_Cursor_Backward:
  9222                           	opt stack 20
  9223                           
  9224                           ;incstack = 0
  9225                           ;Update_Setup_Screen_Cursor_Backward@field stored from wreg
  9226  0012D8  6E2E               	movwf	Update_Setup_Screen_Cursor_Backward@field,c
  9227                           
  9228                           ;Setup_Time.c: 244: char xinc = 36;
  9229  0012DA  0E24               	movlw	36
  9230  0012DC  6E30               	movwf	Update_Setup_Screen_Cursor_Backward@xinc,c
  9231                           
  9232                           ;Setup_Time.c: 245: char yinc = 30;
  9233  0012DE  0E1E               	movlw	30
  9234  0012E0  6E2F               	movwf	Update_Setup_Screen_Cursor_Backward@yinc,c
  9235                           
  9236                           ;Setup_Time.c: 246: switch (field) {
  9237  0012E2  D0BF               	goto	l9472
  9238  0012E4                     l9450:
  9239                           
  9240                           ;Setup_Time.c: 248: fillRect(15 - 1 + xinc, 52 + 16, 25, 2, 0x0000);
  9241  0012E4  0E44               	movlw	68
  9242  0012E6  6E23               	movwf	fillRect@y,c
  9243  0012E8  0E19               	movlw	25
  9244  0012EA  6E24               	movwf	fillRect@w,c
  9245  0012EC  0E02               	movlw	2
  9246  0012EE  6E25               	movwf	fillRect@h,c
  9247  0012F0  0E00               	movlw	0
  9248  0012F2  6E27               	movwf	fillRect@color+1,c
  9249  0012F4  0E00               	movlw	0
  9250  0012F6  6E26               	movwf	fillRect@color,c
  9251  0012F8  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9252  0012FA  0F0E               	addlw	14
  9253  0012FC  EC96  F01B         	call	_fillRect
  9254                           
  9255                           ;Setup_Time.c: 249: fillRect(15 - 1, 52 + 16, 25, 2, 0x07FF);
  9256  001300  0E44               	movlw	68
  9257  001302  6E23               	movwf	fillRect@y,c
  9258  001304  0E19               	movlw	25
  9259  001306  6E24               	movwf	fillRect@w,c
  9260  001308  0E02               	movlw	2
  9261  00130A  6E25               	movwf	fillRect@h,c
  9262  00130C  0E07               	movlw	7
  9263  00130E  6E27               	movwf	fillRect@color+1,c
  9264  001310  6826               	setf	fillRect@color,c
  9265  001312  0E0E               	movlw	14
  9266  001314  EC96  F01B         	call	_fillRect
  9267                           
  9268                           ;Setup_Time.c: 250: break;
  9269  001318  D0B8               	goto	l976
  9270  00131A                     l9452:
  9271                           
  9272                           ;Setup_Time.c: 253: fillRect(15 - 1 + 2 * xinc, 52 + 16, 25, 2, 0x0000);
  9273  00131A  0E44               	movlw	68
  9274  00131C  6E23               	movwf	fillRect@y,c
  9275  00131E  0E19               	movlw	25
  9276  001320  6E24               	movwf	fillRect@w,c
  9277  001322  0E02               	movlw	2
  9278  001324  6E25               	movwf	fillRect@h,c
  9279  001326  0E00               	movlw	0
  9280  001328  6E27               	movwf	fillRect@color+1,c
  9281  00132A  0E00               	movlw	0
  9282  00132C  6E26               	movwf	fillRect@color,c
  9283  00132E  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9284  001330  0D02               	mullw	2
  9285  001332  50F3               	movf	prodl,w,c
  9286  001334  0F0E               	addlw	14
  9287  001336  EC96  F01B         	call	_fillRect
  9288                           
  9289                           ;Setup_Time.c: 254: fillRect(15 - 1 + xinc, 52 + 16, 25, 2, 0x07FF);
  9290  00133A  0E44               	movlw	68
  9291  00133C  6E23               	movwf	fillRect@y,c
  9292  00133E  0E19               	movlw	25
  9293  001340  6E24               	movwf	fillRect@w,c
  9294  001342  0E02               	movlw	2
  9295  001344  6E25               	movwf	fillRect@h,c
  9296  001346  0E07               	movlw	7
  9297  001348  6E27               	movwf	fillRect@color+1,c
  9298  00134A  6826               	setf	fillRect@color,c
  9299  00134C  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9300  00134E  0F0E               	addlw	14
  9301  001350  EC96  F01B         	call	_fillRect
  9302                           
  9303                           ;Setup_Time.c: 255: break;
  9304  001354  D09A               	goto	l976
  9305  001356                     l9456:
  9306                           
  9307                           ;Setup_Time.c: 258: fillRect(15 - 1, 52 + 16, 25, 2, 0x0000);
  9308  001356  0E44               	movlw	68
  9309  001358  6E23               	movwf	fillRect@y,c
  9310  00135A  0E19               	movlw	25
  9311  00135C  6E24               	movwf	fillRect@w,c
  9312  00135E  0E02               	movlw	2
  9313  001360  6E25               	movwf	fillRect@h,c
  9314  001362  0E00               	movlw	0
  9315  001364  6E27               	movwf	fillRect@color+1,c
  9316  001366  0E00               	movlw	0
  9317  001368  6E26               	movwf	fillRect@color,c
  9318  00136A  0E0E               	movlw	14
  9319  00136C  EC96  F01B         	call	_fillRect
  9320                           
  9321                           ;Setup_Time.c: 259: fillRect(15 - 1, 52 + 16 + yinc, 25, 2, 0x0000);
  9322  001370  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9323  001372  0F44               	addlw	68
  9324  001374  6E23               	movwf	fillRect@y,c
  9325  001376  0E19               	movlw	25
  9326  001378  6E24               	movwf	fillRect@w,c
  9327  00137A  0E02               	movlw	2
  9328  00137C  6E25               	movwf	fillRect@h,c
  9329  00137E  0E00               	movlw	0
  9330  001380  6E27               	movwf	fillRect@color+1,c
  9331  001382  0E00               	movlw	0
  9332  001384  6E26               	movwf	fillRect@color,c
  9333  001386  0E0E               	movlw	14
  9334  001388  EC96  F01B         	call	_fillRect
  9335                           
  9336                           ;Setup_Time.c: 260: fillRect(15 - 1 + 2 * xinc, 52 + 16, 25, 2, 0x07FF);
  9337  00138C  0E44               	movlw	68
  9338  00138E  6E23               	movwf	fillRect@y,c
  9339  001390  0E19               	movlw	25
  9340  001392  6E24               	movwf	fillRect@w,c
  9341  001394  0E02               	movlw	2
  9342  001396  6E25               	movwf	fillRect@h,c
  9343  001398  0E07               	movlw	7
  9344  00139A  6E27               	movwf	fillRect@color+1,c
  9345  00139C  6826               	setf	fillRect@color,c
  9346  00139E  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9347  0013A0  0D02               	mullw	2
  9348  0013A2  50F3               	movf	prodl,w,c
  9349  0013A4  0F0E               	addlw	14
  9350  0013A6  EC96  F01B         	call	_fillRect
  9351                           
  9352                           ;Setup_Time.c: 261: break;
  9353  0013AA  D06F               	goto	l976
  9354  0013AC                     l9460:
  9355                           
  9356                           ;Setup_Time.c: 264: fillRect(15 - 1 + xinc, 52 + 16 + yinc, 25, 2, 0x0000);
  9357  0013AC  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9358  0013AE  0F44               	addlw	68
  9359  0013B0  6E23               	movwf	fillRect@y,c
  9360  0013B2  0E19               	movlw	25
  9361  0013B4  6E24               	movwf	fillRect@w,c
  9362  0013B6  0E02               	movlw	2
  9363  0013B8  6E25               	movwf	fillRect@h,c
  9364  0013BA  0E00               	movlw	0
  9365  0013BC  6E27               	movwf	fillRect@color+1,c
  9366  0013BE  0E00               	movlw	0
  9367  0013C0  6E26               	movwf	fillRect@color,c
  9368  0013C2  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9369  0013C4  0F0E               	addlw	14
  9370  0013C6  EC96  F01B         	call	_fillRect
  9371                           
  9372                           ;Setup_Time.c: 265: fillRect(15 - 1, 52 + 16 + yinc, 25, 2, 0x07FF);
  9373  0013CA  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9374  0013CC  0F44               	addlw	68
  9375  0013CE  6E23               	movwf	fillRect@y,c
  9376  0013D0  0E19               	movlw	25
  9377  0013D2  6E24               	movwf	fillRect@w,c
  9378  0013D4  0E02               	movlw	2
  9379  0013D6  6E25               	movwf	fillRect@h,c
  9380  0013D8  0E07               	movlw	7
  9381  0013DA  6E27               	movwf	fillRect@color+1,c
  9382  0013DC  6826               	setf	fillRect@color,c
  9383  0013DE  0E0E               	movlw	14
  9384  0013E0  EC96  F01B         	call	_fillRect
  9385                           
  9386                           ;Setup_Time.c: 266: break;
  9387  0013E4  D052               	goto	l976
  9388  0013E6                     l9462:
  9389                           
  9390                           ;Setup_Time.c: 269: fillRect(15 - 1 + 2 * xinc, 52 + 16 + yinc, 25, 2, 0x0000);
  9391  0013E6  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9392  0013E8  0F44               	addlw	68
  9393  0013EA  6E23               	movwf	fillRect@y,c
  9394  0013EC  0E19               	movlw	25
  9395  0013EE  6E24               	movwf	fillRect@w,c
  9396  0013F0  0E02               	movlw	2
  9397  0013F2  6E25               	movwf	fillRect@h,c
  9398  0013F4  0E00               	movlw	0
  9399  0013F6  6E27               	movwf	fillRect@color+1,c
  9400  0013F8  0E00               	movlw	0
  9401  0013FA  6E26               	movwf	fillRect@color,c
  9402  0013FC  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9403  0013FE  0D02               	mullw	2
  9404  001400  50F3               	movf	prodl,w,c
  9405  001402  0F0E               	addlw	14
  9406  001404  EC96  F01B         	call	_fillRect
  9407                           
  9408                           ;Setup_Time.c: 270: fillRect(15 - 1 + xinc, 52 + 16 + yinc, 25, 2, 0x07FF);
  9409  001408  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9410  00140A  0F44               	addlw	68
  9411  00140C  6E23               	movwf	fillRect@y,c
  9412  00140E  0E19               	movlw	25
  9413  001410  6E24               	movwf	fillRect@w,c
  9414  001412  0E02               	movlw	2
  9415  001414  6E25               	movwf	fillRect@h,c
  9416  001416  0E07               	movlw	7
  9417  001418  6E27               	movwf	fillRect@color+1,c
  9418  00141A  6826               	setf	fillRect@color,c
  9419  00141C  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9420  00141E  0F0E               	addlw	14
  9421  001420  EC96  F01B         	call	_fillRect
  9422                           
  9423                           ;Setup_Time.c: 271: break;
  9424  001424  D032               	goto	l976
  9425  001426                     l9466:
  9426                           
  9427                           ;Setup_Time.c: 274: fillRect(15 - 1, 52 + 16, 25, 2, 0x0000);
  9428  001426  0E44               	movlw	68
  9429  001428  6E23               	movwf	fillRect@y,c
  9430  00142A  0E19               	movlw	25
  9431  00142C  6E24               	movwf	fillRect@w,c
  9432  00142E  0E02               	movlw	2
  9433  001430  6E25               	movwf	fillRect@h,c
  9434  001432  0E00               	movlw	0
  9435  001434  6E27               	movwf	fillRect@color+1,c
  9436  001436  0E00               	movlw	0
  9437  001438  6E26               	movwf	fillRect@color,c
  9438  00143A  0E0E               	movlw	14
  9439  00143C  EC96  F01B         	call	_fillRect
  9440                           
  9441                           ;Setup_Time.c: 275: fillRect(15 - 1 + 2 * xinc, 52 + 16 + yinc, 25, 2, 0x07FF);
  9442  001440  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9443  001442  0F44               	addlw	68
  9444  001444  6E23               	movwf	fillRect@y,c
  9445  001446  0E19               	movlw	25
  9446  001448  6E24               	movwf	fillRect@w,c
  9447  00144A  0E02               	movlw	2
  9448  00144C  6E25               	movwf	fillRect@h,c
  9449  00144E  0E07               	movlw	7
  9450  001450  6E27               	movwf	fillRect@color+1,c
  9451  001452  6826               	setf	fillRect@color,c
  9452  001454  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9453  001456  0D02               	mullw	2
  9454  001458  50F3               	movf	prodl,w,c
  9455  00145A  0F0E               	addlw	14
  9456  00145C  EC96  F01B         	call	_fillRect
  9457                           
  9458                           ;Setup_Time.c: 277: }
  9459                           
  9460                           ;Setup_Time.c: 276: break;
  9461  001460  D014               	goto	l976
  9462  001462                     l9472:
  9463  001462  502E               	movf	Update_Setup_Screen_Cursor_Backward@field,w,c
  9464                           
  9465                           ; Switch size 1, requested type "space"
  9466                           ; Number of cases is 6, Range of values is 0 to 5
  9467                           ; switch strategies available:
  9468                           ; Name         Instructions Cycles
  9469                           ; simple_byte           19    10 (average)
  9470                           ;	Chosen strategy is simple_byte
  9471  001464  0A00               	xorlw	0	; case 0
  9472  001466  B4D8               	btfsc	status,2,c
  9473  001468  D73D               	goto	l9450
  9474  00146A  0A01               	xorlw	1	; case 1
  9475  00146C  B4D8               	btfsc	status,2,c
  9476  00146E  D755               	goto	l9452
  9477  001470  0A03               	xorlw	3	; case 2
  9478  001472  B4D8               	btfsc	status,2,c
  9479  001474  D770               	goto	l9456
  9480  001476  0A01               	xorlw	1	; case 3
  9481  001478  B4D8               	btfsc	status,2,c
  9482  00147A  D798               	goto	l9460
  9483  00147C  0A07               	xorlw	7	; case 4
  9484  00147E  B4D8               	btfsc	status,2,c
  9485  001480  D7B2               	goto	l9462
  9486  001482  0A01               	xorlw	1	; case 5
  9487  001484  B4D8               	btfsc	status,2,c
  9488  001486  D7CF               	goto	l9466
  9489  001488  D000               	goto	l976
  9490  00148A                     l976:
  9491  00148A  0012               	return		;funcret
  9492  00148C                     __end_of_Update_Setup_Screen_Cursor_Backward:
  9493                           	opt stack 0
  9494                           tblptru	equ	0xFF8
  9495                           tblptrh	equ	0xFF7
  9496                           tblptrl	equ	0xFF6
  9497                           tablat	equ	0xFF5
  9498                           prodh	equ	0xFF4
  9499                           prodl	equ	0xFF3
  9500                           intcon	equ	0xFF2
  9501                           intcon2	equ	0xFF1
  9502                           postinc0	equ	0xFEE
  9503                           wreg	equ	0xFE8
  9504                           postdec1	equ	0xFE5
  9505                           fsr1l	equ	0xFE1
  9506                           postinc2	equ	0xFDE
  9507                           fsr2h	equ	0xFDA
  9508                           fsr2l	equ	0xFD9
  9509                           status	equ	0xFD8
  9510                           
  9511 ;; *************** function _Go_Next_Alarm_Field *****************
  9512 ;; Defined at:
  9513 ;;		line 101 in file "Setup_Alarm_Time.c"
  9514 ;; Parameters:    Size  Location     Type
  9515 ;;		None
  9516 ;; Auto vars:     Size  Location     Type
  9517 ;;		None
  9518 ;; Return value:  Size  Location     Type
  9519 ;;		None               void
  9520 ;; Registers used:
  9521 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9522 ;; Tracked objects:
  9523 ;;		On entry : 0/0
  9524 ;;		On exit  : 0/0
  9525 ;;		Unchanged: 0/0
  9526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9531 ;;Total ram usage:        0 bytes
  9532 ;; Hardware stack levels used:    1
  9533 ;; Hardware stack levels required when called:    9
  9534 ;; This function calls:
  9535 ;;		_Update_Setup_Screen_Cursor_Forward
  9536 ;; This function is called by:
  9537 ;;		_Do_Setup_Alarm_Time
  9538 ;; This function uses a non-reentrant model
  9539 ;;
  9540                           
  9541                           	psect	text43
  9542  003C1A                     __ptext43:
  9543                           	opt stack 0
  9544  003C1A                     _Go_Next_Alarm_Field:
  9545                           	opt stack 20
  9546                           
  9547                           ;Setup_Alarm_Time.c: 102: Select_Alarm_Field++;
  9548                           
  9549                           ;incstack = 0
  9550  003C1A  2A55               	incf	_Select_Alarm_Field,f,c
  9551                           
  9552                           ;Setup_Alarm_Time.c: 103: if (Select_Alarm_Field == 3) Select_Alarm_Field = 0;
  9553  003C1C  0E03               	movlw	3
  9554  003C1E  1855               	xorwf	_Select_Alarm_Field,w,c
  9555  003C20  A4D8               	btfss	status,2,c
  9556  003C22  D003               	goto	l9872
  9557  003C24  0E00               	movlw	0
  9558  003C26  6E55               	movwf	_Select_Alarm_Field,c
  9559  003C28  D000               	goto	l9872
  9560  003C2A                     l9872:
  9561                           
  9562                           ;Setup_Alarm_Time.c: 104: Update_Setup_Screen_Cursor_Forward(Select_Alarm_Field);
  9563  003C2A  5055               	movf	_Select_Alarm_Field,w,c
  9564  003C2C  EC8F  F008         	call	_Update_Setup_Screen_Cursor_Forward
  9565  003C30  0012               	return		;funcret
  9566  003C32                     __end_of_Go_Next_Alarm_Field:
  9567                           	opt stack 0
  9568                           tblptru	equ	0xFF8
  9569                           tblptrh	equ	0xFF7
  9570                           tblptrl	equ	0xFF6
  9571                           tablat	equ	0xFF5
  9572                           prodh	equ	0xFF4
  9573                           prodl	equ	0xFF3
  9574                           intcon	equ	0xFF2
  9575                           intcon2	equ	0xFF1
  9576                           postinc0	equ	0xFEE
  9577                           wreg	equ	0xFE8
  9578                           postdec1	equ	0xFE5
  9579                           fsr1l	equ	0xFE1
  9580                           postinc2	equ	0xFDE
  9581                           fsr2h	equ	0xFDA
  9582                           fsr2l	equ	0xFD9
  9583                           status	equ	0xFD8
  9584                           
  9585 ;; *************** function _Update_Setup_Screen_Cursor_Forward *****************
  9586 ;; Defined at:
  9587 ;;		line 206 in file "Setup_Time.c"
  9588 ;; Parameters:    Size  Location     Type
  9589 ;;  field           1    wreg     unsigned char 
  9590 ;; Auto vars:     Size  Location     Type
  9591 ;;  field           1   45[COMRAM] unsigned char 
  9592 ;;  xinc            1   47[COMRAM] unsigned char 
  9593 ;;  yinc            1   46[COMRAM] unsigned char 
  9594 ;; Return value:  Size  Location     Type
  9595 ;;		None               void
  9596 ;; Registers used:
  9597 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9598 ;; Tracked objects:
  9599 ;;		On entry : 0/0
  9600 ;;		On exit  : 0/0
  9601 ;;		Unchanged: 0/0
  9602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9604 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9606 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9607 ;;Total ram usage:        3 bytes
  9608 ;; Hardware stack levels used:    1
  9609 ;; Hardware stack levels required when called:    8
  9610 ;; This function calls:
  9611 ;;		_fillRect
  9612 ;; This function is called by:
  9613 ;;		_Go_Next_Field
  9614 ;;		_Go_Next_Alarm_Field
  9615 ;; This function uses a non-reentrant model
  9616 ;;
  9617                           
  9618                           	psect	text44
  9619  00111E                     __ptext44:
  9620                           	opt stack 0
  9621  00111E                     _Update_Setup_Screen_Cursor_Forward:
  9622                           	opt stack 20
  9623                           
  9624                           ;incstack = 0
  9625                           ;Update_Setup_Screen_Cursor_Forward@field stored from wreg
  9626  00111E  6E2E               	movwf	Update_Setup_Screen_Cursor_Forward@field,c
  9627                           
  9628                           ;Setup_Time.c: 207: char xinc = 36;
  9629  001120  0E24               	movlw	36
  9630  001122  6E30               	movwf	Update_Setup_Screen_Cursor_Forward@xinc,c
  9631                           
  9632                           ;Setup_Time.c: 208: char yinc = 30;
  9633  001124  0E1E               	movlw	30
  9634  001126  6E2F               	movwf	Update_Setup_Screen_Cursor_Forward@yinc,c
  9635                           
  9636                           ;Setup_Time.c: 209: switch (field) {
  9637  001128  D0C2               	goto	l9446
  9638  00112A                     l9424:
  9639                           
  9640                           ;Setup_Time.c: 211: fillRect(15 - 1 + 2 * xinc, 52 + 16 + yinc, 25, 2, 0x0000);
  9641  00112A  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9642  00112C  0F44               	addlw	68
  9643  00112E  6E23               	movwf	fillRect@y,c
  9644  001130  0E19               	movlw	25
  9645  001132  6E24               	movwf	fillRect@w,c
  9646  001134  0E02               	movlw	2
  9647  001136  6E25               	movwf	fillRect@h,c
  9648  001138  0E00               	movlw	0
  9649  00113A  6E27               	movwf	fillRect@color+1,c
  9650  00113C  0E00               	movlw	0
  9651  00113E  6E26               	movwf	fillRect@color,c
  9652  001140  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9653  001142  0D02               	mullw	2
  9654  001144  50F3               	movf	prodl,w,c
  9655  001146  0F0E               	addlw	14
  9656  001148  EC96  F01B         	call	_fillRect
  9657                           
  9658                           ;Setup_Time.c: 212: fillRect(15 - 1 + 2 * xinc, 52 + 16, 25, 2, 0x0000);
  9659  00114C  0E44               	movlw	68
  9660  00114E  6E23               	movwf	fillRect@y,c
  9661  001150  0E19               	movlw	25
  9662  001152  6E24               	movwf	fillRect@w,c
  9663  001154  0E02               	movlw	2
  9664  001156  6E25               	movwf	fillRect@h,c
  9665  001158  0E00               	movlw	0
  9666  00115A  6E27               	movwf	fillRect@color+1,c
  9667  00115C  0E00               	movlw	0
  9668  00115E  6E26               	movwf	fillRect@color,c
  9669  001160  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9670  001162  0D02               	mullw	2
  9671  001164  50F3               	movf	prodl,w,c
  9672  001166  0F0E               	addlw	14
  9673  001168  EC96  F01B         	call	_fillRect
  9674                           
  9675                           ;Setup_Time.c: 213: fillRect(15 - 1, 52 + 16, 25, 2, 0x07FF);
  9676  00116C  0E44               	movlw	68
  9677  00116E  6E23               	movwf	fillRect@y,c
  9678  001170  0E19               	movlw	25
  9679  001172  6E24               	movwf	fillRect@w,c
  9680  001174  0E02               	movlw	2
  9681  001176  6E25               	movwf	fillRect@h,c
  9682  001178  0E07               	movlw	7
  9683  00117A  6E27               	movwf	fillRect@color+1,c
  9684  00117C  6826               	setf	fillRect@color,c
  9685  00117E  0E0E               	movlw	14
  9686  001180  EC96  F01B         	call	_fillRect
  9687                           
  9688                           ;Setup_Time.c: 214: break;
  9689  001184  D0A8               	goto	l965
  9690  001186                     l9428:
  9691                           
  9692                           ;Setup_Time.c: 217: fillRect(15 - 1, 52 + 16, 25, 2, 0x0000);
  9693  001186  0E44               	movlw	68
  9694  001188  6E23               	movwf	fillRect@y,c
  9695  00118A  0E19               	movlw	25
  9696  00118C  6E24               	movwf	fillRect@w,c
  9697  00118E  0E02               	movlw	2
  9698  001190  6E25               	movwf	fillRect@h,c
  9699  001192  0E00               	movlw	0
  9700  001194  6E27               	movwf	fillRect@color+1,c
  9701  001196  0E00               	movlw	0
  9702  001198  6E26               	movwf	fillRect@color,c
  9703  00119A  0E0E               	movlw	14
  9704  00119C  EC96  F01B         	call	_fillRect
  9705                           
  9706                           ;Setup_Time.c: 218: fillRect(15 - 1 + xinc, 52 + 16, 25, 2, 0x07FF);
  9707  0011A0  0E44               	movlw	68
  9708  0011A2  6E23               	movwf	fillRect@y,c
  9709  0011A4  0E19               	movlw	25
  9710  0011A6  6E24               	movwf	fillRect@w,c
  9711  0011A8  0E02               	movlw	2
  9712  0011AA  6E25               	movwf	fillRect@h,c
  9713  0011AC  0E07               	movlw	7
  9714  0011AE  6E27               	movwf	fillRect@color+1,c
  9715  0011B0  6826               	setf	fillRect@color,c
  9716  0011B2  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9717  0011B4  0F0E               	addlw	14
  9718  0011B6  EC96  F01B         	call	_fillRect
  9719                           
  9720                           ;Setup_Time.c: 219: break;
  9721  0011BA  D08D               	goto	l965
  9722  0011BC                     l9430:
  9723                           
  9724                           ;Setup_Time.c: 222: fillRect(15 - 1 + xinc, 52 + 16, 25, 2, 0x0000);
  9725  0011BC  0E44               	movlw	68
  9726  0011BE  6E23               	movwf	fillRect@y,c
  9727  0011C0  0E19               	movlw	25
  9728  0011C2  6E24               	movwf	fillRect@w,c
  9729  0011C4  0E02               	movlw	2
  9730  0011C6  6E25               	movwf	fillRect@h,c
  9731  0011C8  0E00               	movlw	0
  9732  0011CA  6E27               	movwf	fillRect@color+1,c
  9733  0011CC  0E00               	movlw	0
  9734  0011CE  6E26               	movwf	fillRect@color,c
  9735  0011D0  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9736  0011D2  0F0E               	addlw	14
  9737  0011D4  EC96  F01B         	call	_fillRect
  9738                           
  9739                           ;Setup_Time.c: 223: fillRect(15 - 1 + 2 * xinc, 52 + 16, 25, 2, 0x07FF);
  9740  0011D8  0E44               	movlw	68
  9741  0011DA  6E23               	movwf	fillRect@y,c
  9742  0011DC  0E19               	movlw	25
  9743  0011DE  6E24               	movwf	fillRect@w,c
  9744  0011E0  0E02               	movlw	2
  9745  0011E2  6E25               	movwf	fillRect@h,c
  9746  0011E4  0E07               	movlw	7
  9747  0011E6  6E27               	movwf	fillRect@color+1,c
  9748  0011E8  6826               	setf	fillRect@color,c
  9749  0011EA  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9750  0011EC  0D02               	mullw	2
  9751  0011EE  50F3               	movf	prodl,w,c
  9752  0011F0  0F0E               	addlw	14
  9753  0011F2  EC96  F01B         	call	_fillRect
  9754                           
  9755                           ;Setup_Time.c: 224: break;
  9756  0011F6  D06F               	goto	l965
  9757  0011F8                     l9434:
  9758                           
  9759                           ;Setup_Time.c: 227: fillRect(15 - 1 + 2 * xinc, 52 + 16, 25, 2, 0x0000);
  9760  0011F8  0E44               	movlw	68
  9761  0011FA  6E23               	movwf	fillRect@y,c
  9762  0011FC  0E19               	movlw	25
  9763  0011FE  6E24               	movwf	fillRect@w,c
  9764  001200  0E02               	movlw	2
  9765  001202  6E25               	movwf	fillRect@h,c
  9766  001204  0E00               	movlw	0
  9767  001206  6E27               	movwf	fillRect@color+1,c
  9768  001208  0E00               	movlw	0
  9769  00120A  6E26               	movwf	fillRect@color,c
  9770  00120C  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9771  00120E  0D02               	mullw	2
  9772  001210  50F3               	movf	prodl,w,c
  9773  001212  0F0E               	addlw	14
  9774  001214  EC96  F01B         	call	_fillRect
  9775                           
  9776                           ;Setup_Time.c: 228: fillRect(15 - 1, 52 + 16 + yinc, 25, 2, 0x07FF);
  9777  001218  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9778  00121A  0F44               	addlw	68
  9779  00121C  6E23               	movwf	fillRect@y,c
  9780  00121E  0E19               	movlw	25
  9781  001220  6E24               	movwf	fillRect@w,c
  9782  001222  0E02               	movlw	2
  9783  001224  6E25               	movwf	fillRect@h,c
  9784  001226  0E07               	movlw	7
  9785  001228  6E27               	movwf	fillRect@color+1,c
  9786  00122A  6826               	setf	fillRect@color,c
  9787  00122C  0E0E               	movlw	14
  9788  00122E  EC96  F01B         	call	_fillRect
  9789                           
  9790                           ;Setup_Time.c: 229: break;
  9791  001232  D051               	goto	l965
  9792  001234                     l9438:
  9793                           
  9794                           ;Setup_Time.c: 232: fillRect(15 - 1, 52 + 16 + yinc, 25, 2, 0x0000);
  9795  001234  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9796  001236  0F44               	addlw	68
  9797  001238  6E23               	movwf	fillRect@y,c
  9798  00123A  0E19               	movlw	25
  9799  00123C  6E24               	movwf	fillRect@w,c
  9800  00123E  0E02               	movlw	2
  9801  001240  6E25               	movwf	fillRect@h,c
  9802  001242  0E00               	movlw	0
  9803  001244  6E27               	movwf	fillRect@color+1,c
  9804  001246  0E00               	movlw	0
  9805  001248  6E26               	movwf	fillRect@color,c
  9806  00124A  0E0E               	movlw	14
  9807  00124C  EC96  F01B         	call	_fillRect
  9808                           
  9809                           ;Setup_Time.c: 233: fillRect(15 - 1 + xinc, 52 + 16 + yinc, 25, 2, 0x07FF);
  9810  001250  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9811  001252  0F44               	addlw	68
  9812  001254  6E23               	movwf	fillRect@y,c
  9813  001256  0E19               	movlw	25
  9814  001258  6E24               	movwf	fillRect@w,c
  9815  00125A  0E02               	movlw	2
  9816  00125C  6E25               	movwf	fillRect@h,c
  9817  00125E  0E07               	movlw	7
  9818  001260  6E27               	movwf	fillRect@color+1,c
  9819  001262  6826               	setf	fillRect@color,c
  9820  001264  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9821  001266  0F0E               	addlw	14
  9822  001268  EC96  F01B         	call	_fillRect
  9823                           
  9824                           ;Setup_Time.c: 234: break;
  9825  00126C  D034               	goto	l965
  9826  00126E                     l9440:
  9827                           
  9828                           ;Setup_Time.c: 237: fillRect(15 - 1 + xinc, 52 + 16 + yinc, 25, 2, 0x0000);
  9829  00126E  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9830  001270  0F44               	addlw	68
  9831  001272  6E23               	movwf	fillRect@y,c
  9832  001274  0E19               	movlw	25
  9833  001276  6E24               	movwf	fillRect@w,c
  9834  001278  0E02               	movlw	2
  9835  00127A  6E25               	movwf	fillRect@h,c
  9836  00127C  0E00               	movlw	0
  9837  00127E  6E27               	movwf	fillRect@color+1,c
  9838  001280  0E00               	movlw	0
  9839  001282  6E26               	movwf	fillRect@color,c
  9840  001284  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9841  001286  0F0E               	addlw	14
  9842  001288  EC96  F01B         	call	_fillRect
  9843                           
  9844                           ;Setup_Time.c: 238: fillRect(15 - 1 + 2 * xinc, 52 + 16 + yinc, 25, 2, 0x07FF);
  9845  00128C  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9846  00128E  0F44               	addlw	68
  9847  001290  6E23               	movwf	fillRect@y,c
  9848  001292  0E19               	movlw	25
  9849  001294  6E24               	movwf	fillRect@w,c
  9850  001296  0E02               	movlw	2
  9851  001298  6E25               	movwf	fillRect@h,c
  9852  00129A  0E07               	movlw	7
  9853  00129C  6E27               	movwf	fillRect@color+1,c
  9854  00129E  6826               	setf	fillRect@color,c
  9855  0012A0  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9856  0012A2  0D02               	mullw	2
  9857  0012A4  50F3               	movf	prodl,w,c
  9858  0012A6  0F0E               	addlw	14
  9859  0012A8  EC96  F01B         	call	_fillRect
  9860                           
  9861                           ;Setup_Time.c: 240: }
  9862                           
  9863                           ;Setup_Time.c: 239: break;
  9864  0012AC  D014               	goto	l965
  9865  0012AE                     l9446:
  9866  0012AE  502E               	movf	Update_Setup_Screen_Cursor_Forward@field,w,c
  9867                           
  9868                           ; Switch size 1, requested type "space"
  9869                           ; Number of cases is 6, Range of values is 0 to 5
  9870                           ; switch strategies available:
  9871                           ; Name         Instructions Cycles
  9872                           ; simple_byte           19    10 (average)
  9873                           ;	Chosen strategy is simple_byte
  9874  0012B0  0A00               	xorlw	0	; case 0
  9875  0012B2  B4D8               	btfsc	status,2,c
  9876  0012B4  D73A               	goto	l9424
  9877  0012B6  0A01               	xorlw	1	; case 1
  9878  0012B8  B4D8               	btfsc	status,2,c
  9879  0012BA  D765               	goto	l9428
  9880  0012BC  0A03               	xorlw	3	; case 2
  9881  0012BE  B4D8               	btfsc	status,2,c
  9882  0012C0  D77D               	goto	l9430
  9883  0012C2  0A01               	xorlw	1	; case 3
  9884  0012C4  B4D8               	btfsc	status,2,c
  9885  0012C6  D798               	goto	l9434
  9886  0012C8  0A07               	xorlw	7	; case 4
  9887  0012CA  B4D8               	btfsc	status,2,c
  9888  0012CC  D7B3               	goto	l9438
  9889  0012CE  0A01               	xorlw	1	; case 5
  9890  0012D0  B4D8               	btfsc	status,2,c
  9891  0012D2  D7CD               	goto	l9440
  9892  0012D4  D000               	goto	l965
  9893  0012D6                     l965:
  9894  0012D6  0012               	return		;funcret
  9895  0012D8                     __end_of_Update_Setup_Screen_Cursor_Forward:
  9896                           	opt stack 0
  9897                           tblptru	equ	0xFF8
  9898                           tblptrh	equ	0xFF7
  9899                           tblptrl	equ	0xFF6
  9900                           tablat	equ	0xFF5
  9901                           prodh	equ	0xFF4
  9902                           prodl	equ	0xFF3
  9903                           intcon	equ	0xFF2
  9904                           intcon2	equ	0xFF1
  9905                           postinc0	equ	0xFEE
  9906                           wreg	equ	0xFE8
  9907                           postdec1	equ	0xFE5
  9908                           fsr1l	equ	0xFE1
  9909                           postinc2	equ	0xFDE
  9910                           fsr2h	equ	0xFDA
  9911                           fsr2l	equ	0xFD9
  9912                           status	equ	0xFD8
  9913                           
  9914 ;; *************** function _Exit_Setup_Alarm_Time *****************
  9915 ;; Defined at:
  9916 ;;		line 113 in file "Setup_Alarm_Time.c"
  9917 ;; Parameters:    Size  Location     Type
  9918 ;;		None
  9919 ;; Auto vars:     Size  Location     Type
  9920 ;;		None
  9921 ;; Return value:  Size  Location     Type
  9922 ;;		None               void
  9923 ;; Registers used:
  9924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9925 ;; Tracked objects:
  9926 ;;		On entry : 0/0
  9927 ;;		On exit  : 0/0
  9928 ;;		Unchanged: 0/0
  9929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9934 ;;Total ram usage:        0 bytes
  9935 ;; Hardware stack levels used:    1
  9936 ;; Hardware stack levels required when called:   11
  9937 ;; This function calls:
  9938 ;;		_DS3231_Read_Time
  9939 ;;		_Initialize_Screen
  9940 ;; This function is called by:
  9941 ;;		_Do_Setup_Alarm_Time
  9942 ;; This function uses a non-reentrant model
  9943 ;;
  9944                           
  9945                           	psect	text45
  9946  003DDE                     __ptext45:
  9947                           	opt stack 0
  9948  003DDE                     _Exit_Setup_Alarm_Time:
  9949                           	opt stack 18
  9950                           
  9951                           ;Setup_Alarm_Time.c: 114: DS3231_Read_Time();
  9952                           
  9953                           ;incstack = 0
  9954  003DDE  EC0B  F019         	call	_DS3231_Read_Time	;wreg free
  9955                           
  9956                           ;Setup_Alarm_Time.c: 115: Initialize_Screen();
  9957  003DE2  EC1E  F003         	call	_Initialize_Screen	;wreg free
  9958                           
  9959                           ;Setup_Alarm_Time.c: 116: In_Alarm_Time_Setup = 0;
  9960  003DE6  0E00               	movlw	0
  9961  003DE8  0100               	movlb	0	; () banked
  9962  003DEA  6FF4               	movwf	_In_Alarm_Time_Setup& (0+255),b
  9963                           
  9964                           ; BSR set to: 0
  9965  003DEC  0012               	return		;funcret
  9966  003DEE                     __end_of_Exit_Setup_Alarm_Time:
  9967                           	opt stack 0
  9968                           tblptru	equ	0xFF8
  9969                           tblptrh	equ	0xFF7
  9970                           tblptrl	equ	0xFF6
  9971                           tablat	equ	0xFF5
  9972                           prodh	equ	0xFF4
  9973                           prodl	equ	0xFF3
  9974                           intcon	equ	0xFF2
  9975                           intcon2	equ	0xFF1
  9976                           postinc0	equ	0xFEE
  9977                           wreg	equ	0xFE8
  9978                           postdec1	equ	0xFE5
  9979                           fsr1l	equ	0xFE1
  9980                           postinc2	equ	0xFDE
  9981                           fsr2h	equ	0xFDA
  9982                           fsr2l	equ	0xFD9
  9983                           status	equ	0xFD8
  9984                           
  9985 ;; *************** function _Do_Save_New_Alarm_Time *****************
  9986 ;; Defined at:
  9987 ;;		line 119 in file "Setup_Alarm_Time.c"
  9988 ;; Parameters:    Size  Location     Type
  9989 ;;		None
  9990 ;; Auto vars:     Size  Location     Type
  9991 ;;		None
  9992 ;; Return value:  Size  Location     Type
  9993 ;;		None               void
  9994 ;; Registers used:
  9995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9996 ;; Tracked objects:
  9997 ;;		On entry : 0/0
  9998 ;;		On exit  : 0/0
  9999 ;;		Unchanged: 0/0
 10000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10005 ;;Total ram usage:        0 bytes
 10006 ;; Hardware stack levels used:    1
 10007 ;; Hardware stack levels required when called:   11
 10008 ;; This function calls:
 10009 ;;		_DS3231_Read_Alarm_Time
 10010 ;;		_DS3231_Read_Time
 10011 ;;		_DS3231_Write_Alarm_Time
 10012 ;;		_Initialize_Screen
 10013 ;; This function is called by:
 10014 ;;		_Do_Setup_Alarm_Time
 10015 ;; This function uses a non-reentrant model
 10016 ;;
 10017                           
 10018                           	psect	text46
 10019  003C32                     __ptext46:
 10020                           	opt stack 0
 10021  003C32                     _Do_Save_New_Alarm_Time:
 10022                           	opt stack 18
 10023                           
 10024                           ;Setup_Alarm_Time.c: 120: DS3231_Write_Alarm_Time();
 10025                           
 10026                           ; BSR set to: 0
 10027                           ;incstack = 0
 10028  003C32  EC18  F018         	call	_DS3231_Write_Alarm_Time	;wreg free
 10029                           
 10030                           ;Setup_Alarm_Time.c: 121: DS3231_Read_Alarm_Time();
 10031  003C36  EC4A  F01B         	call	_DS3231_Read_Alarm_Time	;wreg free
 10032                           
 10033                           ;Setup_Alarm_Time.c: 122: DS3231_Read_Time();
 10034  003C3A  EC0B  F019         	call	_DS3231_Read_Time	;wreg free
 10035                           
 10036                           ;Setup_Alarm_Time.c: 123: Initialize_Screen();
 10037  003C3E  EC1E  F003         	call	_Initialize_Screen	;wreg free
 10038                           
 10039                           ;Setup_Alarm_Time.c: 124: In_Alarm_Time_Setup = 0;
 10040  003C42  0E00               	movlw	0
 10041  003C44  0100               	movlb	0	; () banked
 10042  003C46  6FF4               	movwf	_In_Alarm_Time_Setup& (0+255),b
 10043                           
 10044                           ; BSR set to: 0
 10045  003C48  0012               	return		;funcret
 10046  003C4A                     __end_of_Do_Save_New_Alarm_Time:
 10047                           	opt stack 0
 10048                           tblptru	equ	0xFF8
 10049                           tblptrh	equ	0xFF7
 10050                           tblptrl	equ	0xFF6
 10051                           tablat	equ	0xFF5
 10052                           prodh	equ	0xFF4
 10053                           prodl	equ	0xFF3
 10054                           intcon	equ	0xFF2
 10055                           intcon2	equ	0xFF1
 10056                           postinc0	equ	0xFEE
 10057                           wreg	equ	0xFE8
 10058                           postdec1	equ	0xFE5
 10059                           fsr1l	equ	0xFE1
 10060                           postinc2	equ	0xFDE
 10061                           fsr2h	equ	0xFDA
 10062                           fsr2l	equ	0xFD9
 10063                           status	equ	0xFD8
 10064                           
 10065 ;; *************** function _Initialize_Screen *****************
 10066 ;; Defined at:
 10067 ;;		line 36 in file "Main_Screen.c"
 10068 ;; Parameters:    Size  Location     Type
 10069 ;;		None
 10070 ;; Auto vars:     Size  Location     Type
 10071 ;;		None
 10072 ;; Return value:  Size  Location     Type
 10073 ;;		None               void
 10074 ;; Registers used:
 10075 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10076 ;; Tracked objects:
 10077 ;;		On entry : 0/0
 10078 ;;		On exit  : 0/0
 10079 ;;		Unchanged: 0/0
 10080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10085 ;;Total ram usage:        0 bytes
 10086 ;; Hardware stack levels used:    1
 10087 ;; Hardware stack levels required when called:   10
 10088 ;; This function calls:
 10089 ;;		_LCD_Reset
 10090 ;;		_TFT_GreenTab_Initialize
 10091 ;;		_drawCircle
 10092 ;;		_drawtext
 10093 ;;		_fillScreen
 10094 ;;		_strcpy
 10095 ;; This function is called by:
 10096 ;;		_Do_Save_New_Time
 10097 ;;		_Exit_Time_Setup
 10098 ;;		_Exit_Setup_Fan_Temp
 10099 ;;		_Do_Save_New_Fan_Temp
 10100 ;;		_Exit_Setup_Alarm_Time
 10101 ;;		_Do_Save_New_Alarm_Time
 10102 ;;		_main
 10103 ;; This function uses a non-reentrant model
 10104 ;;
 10105                           
 10106                           	psect	text47
 10107  00063C                     __ptext47:
 10108                           	opt stack 0
 10109  00063C                     _Initialize_Screen:
 10110                           	opt stack 18
 10111                           
 10112                           ;Main_Screen.c: 38: LCD_Reset();
 10113                           
 10114                           ; BSR set to: 0
 10115                           ;incstack = 0
 10116  00063C  ECA1  F01E         	call	_LCD_Reset	;wreg free
 10117                           
 10118                           ;Main_Screen.c: 39: TFT_GreenTab_Initialize();
 10119  000640  EC1D  F01D         	call	_TFT_GreenTab_Initialize	;wreg free
 10120                           
 10121                           ;Main_Screen.c: 40: fillScreen(0x0000);
 10122  000644  0E00               	movlw	0
 10123  000646  6E25               	movwf	fillScreen@color+1,c
 10124  000648  0E00               	movlw	0
 10125  00064A  6E24               	movwf	fillScreen@color,c
 10126  00064C  ECCE  F01D         	call	_fillScreen	;wreg free
 10127                           
 10128                           ;Main_Screen.c: 42: strcpy(txt, "ECE3301L F23 Final\0");
 10129  000650  C052  F011         	movff	_txt,strcpy@to
 10130  000654  C053  F012         	movff	_txt+1,strcpy@to+1
 10131  000658  0E6A               	movlw	low STR_10
 10132  00065A  6E13               	movwf	strcpy@from,c
 10133  00065C  0EFE               	movlw	high STR_10
 10134  00065E  6E14               	movwf	strcpy@from+1,c
 10135  000660  ECD7  F01C         	call	_strcpy	;wreg free
 10136                           
 10137                           ;Main_Screen.c: 43: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
 10138  000664  0E01               	movlw	1
 10139  000666  6E39               	movwf	drawtext@y,c
 10140  000668  C052  F03A         	movff	_txt,drawtext@_text
 10141  00066C  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10142  000670  0EFF               	movlw	255
 10143  000672  6E3D               	movwf	drawtext@color+1,c
 10144  000674  683C               	setf	drawtext@color,c
 10145  000676  0E00               	movlw	0
 10146  000678  6E3F               	movwf	drawtext@bg+1,c
 10147  00067A  0E00               	movlw	0
 10148  00067C  6E3E               	movwf	drawtext@bg,c
 10149  00067E  0E01               	movlw	1
 10150  000680  6E40               	movwf	drawtext@size,c
 10151  000682  0E01               	movlw	1
 10152  000684  EC11  F00F         	call	_drawtext
 10153                           
 10154                           ;Main_Screen.c: 45: strcpy(txt, "Temperature:");
 10155  000688  C052  F011         	movff	_txt,strcpy@to
 10156  00068C  C053  F012         	movff	_txt+1,strcpy@to+1
 10157  000690  0E51               	movlw	low STR_11
 10158  000692  6E13               	movwf	strcpy@from,c
 10159  000694  0EFF               	movlw	high STR_11
 10160  000696  6E14               	movwf	strcpy@from+1,c
 10161  000698  ECD7  F01C         	call	_strcpy	;wreg free
 10162                           
 10163                           ;Main_Screen.c: 46: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
 10164  00069C  0E0B               	movlw	11
 10165  00069E  6E39               	movwf	drawtext@y,c
 10166  0006A0  C052  F03A         	movff	_txt,drawtext@_text
 10167  0006A4  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10168  0006A8  0EF8               	movlw	248
 10169  0006AA  6E3D               	movwf	drawtext@color+1,c
 10170  0006AC  0E1F               	movlw	31
 10171  0006AE  6E3C               	movwf	drawtext@color,c
 10172  0006B0  0E00               	movlw	0
 10173  0006B2  6E3F               	movwf	drawtext@bg+1,c
 10174  0006B4  0E00               	movlw	0
 10175  0006B6  6E3E               	movwf	drawtext@bg,c
 10176  0006B8  0E01               	movlw	1
 10177  0006BA  6E40               	movwf	drawtext@size,c
 10178  0006BC  0E18               	movlw	24
 10179  0006BE  EC11  F00F         	call	_drawtext
 10180                           
 10181                           ;Main_Screen.c: 47: drawCircle(40, 23 , 2 , 0xFFE0);
 10182  0006C2  0E00               	movlw	0
 10183  0006C4  6E1D               	movwf	drawCircle@x0+1,c
 10184  0006C6  0E28               	movlw	40
 10185  0006C8  6E1C               	movwf	drawCircle@x0,c
 10186  0006CA  0E00               	movlw	0
 10187  0006CC  6E1F               	movwf	drawCircle@y0+1,c
 10188  0006CE  0E17               	movlw	23
 10189  0006D0  6E1E               	movwf	drawCircle@y0,c
 10190  0006D2  0E00               	movlw	0
 10191  0006D4  6E21               	movwf	drawCircle@r+1,c
 10192  0006D6  0E02               	movlw	2
 10193  0006D8  6E20               	movwf	drawCircle@r,c
 10194  0006DA  0EFF               	movlw	255
 10195  0006DC  6E23               	movwf	drawCircle@color+1,c
 10196  0006DE  0EE0               	movlw	224
 10197  0006E0  6E22               	movwf	drawCircle@color,c
 10198  0006E2  EC46  F00A         	call	_drawCircle	;wreg free
 10199                           
 10200                           ;Main_Screen.c: 48: strcpy(txt, "C/");
 10201  0006E6  C052  F011         	movff	_txt,strcpy@to
 10202  0006EA  C053  F012         	movff	_txt+1,strcpy@to+1
 10203  0006EE  0EED               	movlw	low STR_12
 10204  0006F0  6E13               	movwf	strcpy@from,c
 10205  0006F2  0EFF               	movlw	high STR_12
 10206  0006F4  6E14               	movwf	strcpy@from+1,c
 10207  0006F6  ECD7  F01C         	call	_strcpy	;wreg free
 10208                           
 10209                           ;Main_Screen.c: 49: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
 10210  0006FA  0E17               	movlw	23
 10211  0006FC  6E39               	movwf	drawtext@y,c
 10212  0006FE  C052  F03A         	movff	_txt,drawtext@_text
 10213  000702  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10214  000706  0EFF               	movlw	255
 10215  000708  6E3D               	movwf	drawtext@color+1,c
 10216  00070A  0EE0               	movlw	224
 10217  00070C  6E3C               	movwf	drawtext@color,c
 10218  00070E  0E00               	movlw	0
 10219  000710  6E3F               	movwf	drawtext@bg+1,c
 10220  000712  0E00               	movlw	0
 10221  000714  6E3E               	movwf	drawtext@bg,c
 10222  000716  0E02               	movlw	2
 10223  000718  6E40               	movwf	drawtext@size,c
 10224  00071A  0E2D               	movlw	45
 10225  00071C  EC11  F00F         	call	_drawtext
 10226                           
 10227                           ;Main_Screen.c: 50: strcpy(txt, "F");
 10228  000720  C052  F011         	movff	_txt,strcpy@to
 10229  000724  C053  F012         	movff	_txt+1,strcpy@to+1
 10230  000728  0EE7               	movlw	low (STR_25+2)
 10231  00072A  6E13               	movwf	strcpy@from,c
 10232  00072C  0EFF               	movlw	high (STR_25+2)
 10233  00072E  6E14               	movwf	strcpy@from+1,c
 10234  000730  ECD7  F01C         	call	_strcpy	;wreg free
 10235                           
 10236                           ;Main_Screen.c: 51: drawCircle(110, 23 , 2 , 0xFFE0);
 10237  000734  0E00               	movlw	0
 10238  000736  6E1D               	movwf	drawCircle@x0+1,c
 10239  000738  0E6E               	movlw	110
 10240  00073A  6E1C               	movwf	drawCircle@x0,c
 10241  00073C  0E00               	movlw	0
 10242  00073E  6E1F               	movwf	drawCircle@y0+1,c
 10243  000740  0E17               	movlw	23
 10244  000742  6E1E               	movwf	drawCircle@y0,c
 10245  000744  0E00               	movlw	0
 10246  000746  6E21               	movwf	drawCircle@r+1,c
 10247  000748  0E02               	movlw	2
 10248  00074A  6E20               	movwf	drawCircle@r,c
 10249  00074C  0EFF               	movlw	255
 10250  00074E  6E23               	movwf	drawCircle@color+1,c
 10251  000750  0EE0               	movlw	224
 10252  000752  6E22               	movwf	drawCircle@color,c
 10253  000754  EC46  F00A         	call	_drawCircle	;wreg free
 10254                           
 10255                           ;Main_Screen.c: 52: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
 10256  000758  0E17               	movlw	23
 10257  00075A  6E39               	movwf	drawtext@y,c
 10258  00075C  C052  F03A         	movff	_txt,drawtext@_text
 10259  000760  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10260  000764  0EFF               	movlw	255
 10261  000766  6E3D               	movwf	drawtext@color+1,c
 10262  000768  0EE0               	movlw	224
 10263  00076A  6E3C               	movwf	drawtext@color,c
 10264  00076C  0E00               	movlw	0
 10265  00076E  6E3F               	movwf	drawtext@bg+1,c
 10266  000770  0E00               	movlw	0
 10267  000772  6E3E               	movwf	drawtext@bg,c
 10268  000774  0E02               	movlw	2
 10269  000776  6E40               	movwf	drawtext@size,c
 10270  000778  0E73               	movlw	115
 10271  00077A  EC11  F00F         	call	_drawtext
 10272                           
 10273                           ;Main_Screen.c: 53: strcpy(txt, "Time");
 10274  00077E  C052  F011         	movff	_txt,strcpy@to
 10275  000782  C053  F012         	movff	_txt+1,strcpy@to+1
 10276  000786  0E9F               	movlw	low (STR_16+6)
 10277  000788  6E13               	movwf	strcpy@from,c
 10278  00078A  0EFF               	movlw	high (STR_16+6)
 10279  00078C  6E14               	movwf	strcpy@from+1,c
 10280  00078E  ECD7  F01C         	call	_strcpy	;wreg free
 10281                           
 10282                           ;Main_Screen.c: 54: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
 10283  000792  0E28               	movlw	40
 10284  000794  6E39               	movwf	drawtext@y,c
 10285  000796  C052  F03A         	movff	_txt,drawtext@_text
 10286  00079A  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10287  00079E  0E00               	movlw	0
 10288  0007A0  6E3D               	movwf	drawtext@color+1,c
 10289  0007A2  0E1F               	movlw	31
 10290  0007A4  6E3C               	movwf	drawtext@color,c
 10291  0007A6  0E00               	movlw	0
 10292  0007A8  6E3F               	movwf	drawtext@bg+1,c
 10293  0007AA  0E00               	movlw	0
 10294  0007AC  6E3E               	movwf	drawtext@bg,c
 10295  0007AE  0E01               	movlw	1
 10296  0007B0  6E40               	movwf	drawtext@size,c
 10297  0007B2  0E32               	movlw	50
 10298  0007B4  EC11  F00F         	call	_drawtext
 10299                           
 10300                           ;Main_Screen.c: 55: strcpy(txt, "Date");
 10301  0007B8  C052  F011         	movff	_txt,strcpy@to
 10302  0007BC  C053  F012         	movff	_txt+1,strcpy@to+1
 10303  0007C0  0ECD               	movlw	low STR_15
 10304  0007C2  6E13               	movwf	strcpy@from,c
 10305  0007C4  0EFF               	movlw	high STR_15
 10306  0007C6  6E14               	movwf	strcpy@from+1,c
 10307  0007C8  ECD7  F01C         	call	_strcpy	;wreg free
 10308                           
 10309                           ;Main_Screen.c: 56: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
 10310  0007CC  0E47               	movlw	71
 10311  0007CE  6E39               	movwf	drawtext@y,c
 10312  0007D0  C052  F03A         	movff	_txt,drawtext@_text
 10313  0007D4  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10314  0007D8  0EF8               	movlw	248
 10315  0007DA  6E3D               	movwf	drawtext@color+1,c
 10316  0007DC  0E00               	movlw	0
 10317  0007DE  6E3C               	movwf	drawtext@color,c
 10318  0007E0  0E00               	movlw	0
 10319  0007E2  6E3F               	movwf	drawtext@bg+1,c
 10320  0007E4  0E00               	movlw	0
 10321  0007E6  6E3E               	movwf	drawtext@bg,c
 10322  0007E8  0E01               	movlw	1
 10323  0007EA  6E40               	movwf	drawtext@size,c
 10324  0007EC  0E32               	movlw	50
 10325  0007EE  EC11  F00F         	call	_drawtext
 10326                           
 10327                           ;Main_Screen.c: 57: strcpy(txt, "Alarm Time");
 10328  0007F2  C052  F011         	movff	_txt,strcpy@to
 10329  0007F6  C053  F012         	movff	_txt+1,strcpy@to+1
 10330  0007FA  0E99               	movlw	low STR_16
 10331  0007FC  6E13               	movwf	strcpy@from,c
 10332  0007FE  0EFF               	movlw	high STR_16
 10333  000800  6E14               	movwf	strcpy@from+1,c
 10334  000802  ECD7  F01C         	call	_strcpy	;wreg free
 10335                           
 10336                           ;Main_Screen.c: 58: drawtext(4 , 100 , txt, 0xFFE0, 0x0000, 1);
 10337  000806  0E64               	movlw	100
 10338  000808  6E39               	movwf	drawtext@y,c
 10339  00080A  C052  F03A         	movff	_txt,drawtext@_text
 10340  00080E  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10341  000812  0EFF               	movlw	255
 10342  000814  6E3D               	movwf	drawtext@color+1,c
 10343  000816  0EE0               	movlw	224
 10344  000818  6E3C               	movwf	drawtext@color,c
 10345  00081A  0E00               	movlw	0
 10346  00081C  6E3F               	movwf	drawtext@bg+1,c
 10347  00081E  0E00               	movlw	0
 10348  000820  6E3E               	movwf	drawtext@bg,c
 10349  000822  0E01               	movlw	1
 10350  000824  6E40               	movwf	drawtext@size,c
 10351  000826  0E04               	movlw	4
 10352  000828  EC11  F00F         	call	_drawtext
 10353                           
 10354                           ;Main_Screen.c: 59: strcpy(txt, "Alarm SW");
 10355  00082C  C052  F011         	movff	_txt,strcpy@to
 10356  000830  C053  F012         	movff	_txt+1,strcpy@to+1
 10357  000834  0EAF               	movlw	low STR_17
 10358  000836  6E13               	movwf	strcpy@from,c
 10359  000838  0EFF               	movlw	high STR_17
 10360  00083A  6E14               	movwf	strcpy@from+1,c
 10361  00083C  ECD7  F01C         	call	_strcpy	;wreg free
 10362                           
 10363                           ;Main_Screen.c: 60: drawtext(77, 100, txt, 0xFFE0, 0x0000, 1);
 10364  000840  0E64               	movlw	100
 10365  000842  6E39               	movwf	drawtext@y,c
 10366  000844  C052  F03A         	movff	_txt,drawtext@_text
 10367  000848  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10368  00084C  0EFF               	movlw	255
 10369  00084E  6E3D               	movwf	drawtext@color+1,c
 10370  000850  0EE0               	movlw	224
 10371  000852  6E3C               	movwf	drawtext@color,c
 10372  000854  0E00               	movlw	0
 10373  000856  6E3F               	movwf	drawtext@bg+1,c
 10374  000858  0E00               	movlw	0
 10375  00085A  6E3E               	movwf	drawtext@bg,c
 10376  00085C  0E01               	movlw	1
 10377  00085E  6E40               	movwf	drawtext@size,c
 10378  000860  0E4D               	movlw	77
 10379  000862  EC11  F00F         	call	_drawtext
 10380                           
 10381                           ;Main_Screen.c: 61: strcpy(txt, "HTR Set Temp");
 10382  000866  C052  F011         	movff	_txt,strcpy@to
 10383  00086A  C053  F012         	movff	_txt+1,strcpy@to+1
 10384  00086E  0E5E               	movlw	low STR_18
 10385  000870  6E13               	movwf	strcpy@from,c
 10386  000872  0EFF               	movlw	high STR_18
 10387  000874  6E14               	movwf	strcpy@from+1,c
 10388  000876  ECD7  F01C         	call	_strcpy	;wreg free
 10389                           
 10390                           ;Main_Screen.c: 62: drawtext(6, 120, txt, 0x001F , 0x0000, 1);
 10391  00087A  0E78               	movlw	120
 10392  00087C  6E39               	movwf	drawtext@y,c
 10393  00087E  C052  F03A         	movff	_txt,drawtext@_text
 10394  000882  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10395  000886  0E00               	movlw	0
 10396  000888  6E3D               	movwf	drawtext@color+1,c
 10397  00088A  0E1F               	movlw	31
 10398  00088C  6E3C               	movwf	drawtext@color,c
 10399  00088E  0E00               	movlw	0
 10400  000890  6E3F               	movwf	drawtext@bg+1,c
 10401  000892  0E00               	movlw	0
 10402  000894  6E3E               	movwf	drawtext@bg,c
 10403  000896  0E01               	movlw	1
 10404  000898  6E40               	movwf	drawtext@size,c
 10405  00089A  0E06               	movlw	6
 10406  00089C  EC11  F00F         	call	_drawtext
 10407                           
 10408                           ;Main_Screen.c: 63: strcpy(txt, "HTR SW");
 10409  0008A0  C052  F011         	movff	_txt,strcpy@to
 10410  0008A4  C053  F012         	movff	_txt+1,strcpy@to+1
 10411  0008A8  0EB8               	movlw	low STR_19
 10412  0008AA  6E13               	movwf	strcpy@from,c
 10413  0008AC  0EFF               	movlw	high STR_19
 10414  0008AE  6E14               	movwf	strcpy@from+1,c
 10415  0008B0  ECD7  F01C         	call	_strcpy	;wreg free
 10416                           
 10417                           ;Main_Screen.c: 64: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
 10418  0008B4  0E78               	movlw	120
 10419  0008B6  6E39               	movwf	drawtext@y,c
 10420  0008B8  C052  F03A         	movff	_txt,drawtext@_text
 10421  0008BC  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10422  0008C0  0E00               	movlw	0
 10423  0008C2  6E3D               	movwf	drawtext@color+1,c
 10424  0008C4  0E1F               	movlw	31
 10425  0008C6  6E3C               	movwf	drawtext@color,c
 10426  0008C8  0E00               	movlw	0
 10427  0008CA  6E3F               	movwf	drawtext@bg+1,c
 10428  0008CC  0E00               	movlw	0
 10429  0008CE  6E3E               	movwf	drawtext@bg,c
 10430  0008D0  0E01               	movlw	1
 10431  0008D2  6E40               	movwf	drawtext@size,c
 10432  0008D4  0E55               	movlw	85
 10433  0008D6  EC11  F00F         	call	_drawtext
 10434                           
 10435                           ;Main_Screen.c: 65: strcpy(txt, "DC");
 10436  0008DA  C052  F011         	movff	_txt,strcpy@to
 10437  0008DE  C053  F012         	movff	_txt+1,strcpy@to+1
 10438  0008E2  0EF0               	movlw	low STR_20
 10439  0008E4  6E13               	movwf	strcpy@from,c
 10440  0008E6  0EFF               	movlw	high STR_20
 10441  0008E8  6E14               	movwf	strcpy@from+1,c
 10442  0008EA  ECD7  F01C         	call	_strcpy	;wreg free
 10443                           
 10444                           ;Main_Screen.c: 66: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
 10445  0008EE  0E8C               	movlw	140
 10446  0008F0  6E39               	movwf	drawtext@y,c
 10447  0008F2  C052  F03A         	movff	_txt,drawtext@_text
 10448  0008F6  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10449  0008FA  0EFF               	movlw	255
 10450  0008FC  6E3D               	movwf	drawtext@color+1,c
 10451  0008FE  683C               	setf	drawtext@color,c
 10452  000900  0E00               	movlw	0
 10453  000902  6E3F               	movwf	drawtext@bg+1,c
 10454  000904  0E00               	movlw	0
 10455  000906  6E3E               	movwf	drawtext@bg,c
 10456  000908  0E01               	movlw	1
 10457  00090A  6E40               	movwf	drawtext@size,c
 10458  00090C  0E0C               	movlw	12
 10459  00090E  EC11  F00F         	call	_drawtext
 10460                           
 10461                           ;Main_Screen.c: 67: strcpy(txt, "RM");
 10462  000912  C052  F011         	movff	_txt,strcpy@to
 10463  000916  C053  F012         	movff	_txt+1,strcpy@to+1
 10464  00091A  0EF3               	movlw	low STR_21
 10465  00091C  6E13               	movwf	strcpy@from,c
 10466  00091E  0EFF               	movlw	high STR_21
 10467  000920  6E14               	movwf	strcpy@from+1,c
 10468  000922  ECD7  F01C         	call	_strcpy	;wreg free
 10469                           
 10470                           ;Main_Screen.c: 68: drawtext(33, 140, txt, 0xFFFF , 0x0000 , 1);
 10471  000926  0E8C               	movlw	140
 10472  000928  6E39               	movwf	drawtext@y,c
 10473  00092A  C052  F03A         	movff	_txt,drawtext@_text
 10474  00092E  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10475  000932  0EFF               	movlw	255
 10476  000934  6E3D               	movwf	drawtext@color+1,c
 10477  000936  683C               	setf	drawtext@color,c
 10478  000938  0E00               	movlw	0
 10479  00093A  6E3F               	movwf	drawtext@bg+1,c
 10480  00093C  0E00               	movlw	0
 10481  00093E  6E3E               	movwf	drawtext@bg,c
 10482  000940  0E01               	movlw	1
 10483  000942  6E40               	movwf	drawtext@size,c
 10484  000944  0E21               	movlw	33
 10485  000946  EC11  F00F         	call	_drawtext
 10486                           
 10487                           ;Main_Screen.c: 69: strcpy(txt, "Volt");
 10488  00094A  C052  F011         	movff	_txt,strcpy@to
 10489  00094E  C053  F012         	movff	_txt+1,strcpy@to+1
 10490  000952  0ED2               	movlw	low STR_22
 10491  000954  6E13               	movwf	strcpy@from,c
 10492  000956  0EFF               	movlw	high STR_22
 10493  000958  6E14               	movwf	strcpy@from+1,c
 10494  00095A  ECD7  F01C         	call	_strcpy	;wreg free
 10495                           
 10496                           ;Main_Screen.c: 70: drawtext(50, 140, txt, 0xFFFF , 0x0000 , 1);
 10497  00095E  0E8C               	movlw	140
 10498  000960  6E39               	movwf	drawtext@y,c
 10499  000962  C052  F03A         	movff	_txt,drawtext@_text
 10500  000966  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10501  00096A  0EFF               	movlw	255
 10502  00096C  6E3D               	movwf	drawtext@color+1,c
 10503  00096E  683C               	setf	drawtext@color,c
 10504  000970  0E00               	movlw	0
 10505  000972  6E3F               	movwf	drawtext@bg+1,c
 10506  000974  0E00               	movlw	0
 10507  000976  6E3E               	movwf	drawtext@bg,c
 10508  000978  0E01               	movlw	1
 10509  00097A  6E40               	movwf	drawtext@size,c
 10510  00097C  0E32               	movlw	50
 10511  00097E  EC11  F00F         	call	_drawtext
 10512                           
 10513                           ;Main_Screen.c: 71: strcpy(txt, "RPM");
 10514  000982  C052  F011         	movff	_txt,strcpy@to
 10515  000986  C053  F012         	movff	_txt+1,strcpy@to+1
 10516  00098A  0EE9               	movlw	low STR_23
 10517  00098C  6E13               	movwf	strcpy@from,c
 10518  00098E  0EFF               	movlw	high STR_23
 10519  000990  6E14               	movwf	strcpy@from+1,c
 10520  000992  ECD7  F01C         	call	_strcpy	;wreg free
 10521                           
 10522                           ;Main_Screen.c: 72: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
 10523  000996  0E8C               	movlw	140
 10524  000998  6E39               	movwf	drawtext@y,c
 10525  00099A  C052  F03A         	movff	_txt,drawtext@_text
 10526  00099E  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10527  0009A2  0EFF               	movlw	255
 10528  0009A4  6E3D               	movwf	drawtext@color+1,c
 10529  0009A6  683C               	setf	drawtext@color,c
 10530  0009A8  0E00               	movlw	0
 10531  0009AA  6E3F               	movwf	drawtext@bg+1,c
 10532  0009AC  0E00               	movlw	0
 10533  0009AE  6E3E               	movwf	drawtext@bg,c
 10534  0009B0  0E01               	movlw	1
 10535  0009B2  6E40               	movwf	drawtext@size,c
 10536  0009B4  0E5F               	movlw	95
 10537  0009B6  EC11  F00F         	call	_drawtext
 10538  0009BA  0012               	return		;funcret
 10539  0009BC                     __end_of_Initialize_Screen:
 10540                           	opt stack 0
 10541                           tblptru	equ	0xFF8
 10542                           tblptrh	equ	0xFF7
 10543                           tblptrl	equ	0xFF6
 10544                           tablat	equ	0xFF5
 10545                           prodh	equ	0xFF4
 10546                           prodl	equ	0xFF3
 10547                           intcon	equ	0xFF2
 10548                           intcon2	equ	0xFF1
 10549                           postinc0	equ	0xFEE
 10550                           wreg	equ	0xFE8
 10551                           postdec1	equ	0xFE5
 10552                           fsr1l	equ	0xFE1
 10553                           postinc2	equ	0xFDE
 10554                           fsr2h	equ	0xFDA
 10555                           fsr2l	equ	0xFD9
 10556                           status	equ	0xFD8
 10557                           
 10558 ;; *************** function _strcpy *****************
 10559 ;; Defined at:
 10560 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
 10561 ;; Parameters:    Size  Location     Type
 10562 ;;  to              2   16[COMRAM] PTR unsigned char 
 10563 ;;		 -> NULL(0), Fan_SW_Txt(4), Alarm_SW_Txt(4), 
 10564 ;;  from            2   18[COMRAM] PTR const unsigned char 
 10565 ;;		 -> STR_40(5), STR_39(11), STR_38(19), STR_37(15), 
 10566 ;;		 -> STR_36(12), STR_35(21), STR_34(5), STR_33(5), 
 10567 ;;		 -> STR_32(12), STR_31(20), STR_27(4), STR_26(4), 
 10568 ;;		 -> STR_25(4), STR_24(4), STR_23(4), STR_22(5), 
 10569 ;;		 -> STR_21(3), STR_20(3), STR_19(7), STR_18(13), 
 10570 ;;		 -> STR_17(9), STR_16(11), STR_15(5), STR_14(5), 
 10571 ;;		 -> STR_13(2), STR_12(3), STR_11(13), STR_10(20), 
 10572 ;; Auto vars:     Size  Location     Type
 10573 ;;  cp              2   20[COMRAM] PTR unsigned char 
 10574 ;;		 -> NULL(0), Fan_SW_Txt(4), Alarm_SW_Txt(4), 
 10575 ;; Return value:  Size  Location     Type
 10576 ;;                  2   16[COMRAM] PTR unsigned char 
 10577 ;; Registers used:
 10578 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10579 ;; Tracked objects:
 10580 ;;		On entry : 0/0
 10581 ;;		On exit  : 0/0
 10582 ;;		Unchanged: 0/0
 10583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10584 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10585 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10587 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10588 ;;Total ram usage:        6 bytes
 10589 ;; Hardware stack levels used:    1
 10590 ;; Hardware stack levels required when called:    3
 10591 ;; This function calls:
 10592 ;;		Nothing
 10593 ;; This function is called by:
 10594 ;;		_Initialize_Screen
 10595 ;;		_Update_Screen
 10596 ;;		_Initialize_Setup_Time_Screen
 10597 ;;		_Initialize_Setup_Fan_Screen
 10598 ;;		_Initialize_Setup_Alarm_Time_Screen
 10599 ;; This function uses a non-reentrant model
 10600 ;;
 10601                           
 10602                           	psect	text48
 10603  0039AE                     __ptext48:
 10604                           	opt stack 0
 10605  0039AE                     _strcpy:
 10606                           	opt stack 26
 10607                           
 10608                           ;incstack = 0
 10609  0039AE  C011  F015         	movff	strcpy@to,strcpy@cp
 10610  0039B2  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
 10611  0039B6  D005               	goto	l9206
 10612  0039B8                     l9204:
 10613  0039B8  4A15               	infsnz	strcpy@cp,f,c
 10614  0039BA  2A16               	incf	strcpy@cp+1,f,c
 10615  0039BC  4A13               	infsnz	strcpy@from,f,c
 10616  0039BE  2A14               	incf	strcpy@from+1,f,c
 10617  0039C0  D000               	goto	l9206
 10618  0039C2                     l9206:
 10619  0039C2  C013  FFF6         	movff	strcpy@from,tblptrl
 10620  0039C6  C014  FFF7         	movff	strcpy@from+1,tblptrh
 10621  0039CA                     	if	0	;tblptru may be non-zero
 10622  0039CA                     	endif
 10623  0039CA                     	if	0	;tblptru may be non-zero
 10624  0039CA                     	endif
 10625  0039CA  C015  FFD9         	movff	strcpy@cp,fsr2l
 10626  0039CE  C016  FFDA         	movff	strcpy@cp+1,fsr2h
 10627  0039D2  0008               	tblrd		*
 10628  0039D4  CFF5 FFDF          	movff	tablat,indf2
 10629  0039D8  50DF               	movf	indf2,w,c
 10630  0039DA  A4D8               	btfss	status,2,c
 10631  0039DC  D7ED               	goto	l9204
 10632                           
 10633                           ;	Return value of _strcpy is never used
 10634  0039DE  0012               	return		;funcret
 10635  0039E0                     __end_of_strcpy:
 10636                           	opt stack 0
 10637                           tblptru	equ	0xFF8
 10638                           tblptrh	equ	0xFF7
 10639                           tblptrl	equ	0xFF6
 10640                           tablat	equ	0xFF5
 10641                           prodh	equ	0xFF4
 10642                           prodl	equ	0xFF3
 10643                           intcon	equ	0xFF2
 10644                           intcon2	equ	0xFF1
 10645                           postinc0	equ	0xFEE
 10646                           wreg	equ	0xFE8
 10647                           postdec1	equ	0xFE5
 10648                           fsr1l	equ	0xFE1
 10649                           indf2	equ	0xFDF
 10650                           postinc2	equ	0xFDE
 10651                           fsr2h	equ	0xFDA
 10652                           fsr2l	equ	0xFD9
 10653                           status	equ	0xFD8
 10654                           
 10655 ;; *************** function _fillScreen *****************
 10656 ;; Defined at:
 10657 ;;		line 620 in file "ST7735_TFT.c"
 10658 ;; Parameters:    Size  Location     Type
 10659 ;;  color           2   35[COMRAM] unsigned int 
 10660 ;; Auto vars:     Size  Location     Type
 10661 ;;		None
 10662 ;; Return value:  Size  Location     Type
 10663 ;;		None               void
 10664 ;; Registers used:
 10665 ;;		wreg, status,2, status,0, cstack
 10666 ;; Tracked objects:
 10667 ;;		On entry : 0/0
 10668 ;;		On exit  : 0/0
 10669 ;;		Unchanged: 0/0
 10670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10671 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10674 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10675 ;;Total ram usage:        2 bytes
 10676 ;; Hardware stack levels used:    1
 10677 ;; Hardware stack levels required when called:    7
 10678 ;; This function calls:
 10679 ;;		_fillRectangle
 10680 ;; This function is called by:
 10681 ;;		_Initialize_Screen
 10682 ;;		_Initialize_Setup_Time_Screen
 10683 ;;		_Initialize_Setup_Fan_Screen
 10684 ;;		_Initialize_Setup_Alarm_Time_Screen
 10685 ;; This function uses a non-reentrant model
 10686 ;;
 10687                           
 10688                           	psect	text49
 10689  003B9C                     __ptext49:
 10690                           	opt stack 0
 10691  003B9C                     _fillScreen:
 10692                           	opt stack 21
 10693                           
 10694                           ;ST7735_TFT.c: 622: fillRectangle(0, 0, 128, 160, color);
 10695                           
 10696                           ;incstack = 0
 10697  003B9C  0E00               	movlw	0
 10698  003B9E  6E18               	movwf	fillRectangle@y,c
 10699  003BA0  0E80               	movlw	128
 10700  003BA2  6E19               	movwf	fillRectangle@w,c
 10701  003BA4  0EA0               	movlw	160
 10702  003BA6  6E1A               	movwf	fillRectangle@h,c
 10703  003BA8  C024  F01B         	movff	fillScreen@color,fillRectangle@color
 10704  003BAC  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
 10705  003BB0  0E00               	movlw	0
 10706  003BB2  ECD8  F012         	call	_fillRectangle
 10707  003BB6  0012               	return		;funcret
 10708  003BB8                     __end_of_fillScreen:
 10709                           	opt stack 0
 10710                           tblptru	equ	0xFF8
 10711                           tblptrh	equ	0xFF7
 10712                           tblptrl	equ	0xFF6
 10713                           tablat	equ	0xFF5
 10714                           prodh	equ	0xFF4
 10715                           prodl	equ	0xFF3
 10716                           intcon	equ	0xFF2
 10717                           intcon2	equ	0xFF1
 10718                           postinc0	equ	0xFEE
 10719                           wreg	equ	0xFE8
 10720                           postdec1	equ	0xFE5
 10721                           fsr1l	equ	0xFE1
 10722                           indf2	equ	0xFDF
 10723                           postinc2	equ	0xFDE
 10724                           fsr2h	equ	0xFDA
 10725                           fsr2l	equ	0xFD9
 10726                           status	equ	0xFD8
 10727                           
 10728 ;; *************** function _fillRectangle *****************
 10729 ;; Defined at:
 10730 ;;		line 504 in file "ST7735_TFT.c"
 10731 ;; Parameters:    Size  Location     Type
 10732 ;;  x               1    wreg     unsigned char 
 10733 ;;  y               1   23[COMRAM] unsigned char 
 10734 ;;  w               1   24[COMRAM] unsigned char 
 10735 ;;  h               1   25[COMRAM] unsigned char 
 10736 ;;  color           2   26[COMRAM] unsigned int 
 10737 ;; Auto vars:     Size  Location     Type
 10738 ;;  x               1   34[COMRAM] unsigned char 
 10739 ;;  lo              1   33[COMRAM] unsigned char 
 10740 ;;  hi              1   32[COMRAM] unsigned char 
 10741 ;; Return value:  Size  Location     Type
 10742 ;;		None               void
 10743 ;; Registers used:
 10744 ;;		wreg, status,2, status,0, cstack
 10745 ;; Tracked objects:
 10746 ;;		On entry : 0/0
 10747 ;;		On exit  : 0/0
 10748 ;;		Unchanged: 0/0
 10749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10750 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10751 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10752 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10753 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10754 ;;Total ram usage:       12 bytes
 10755 ;; Hardware stack levels used:    1
 10756 ;; Hardware stack levels required when called:    6
 10757 ;; This function calls:
 10758 ;;		_setAddrWindow
 10759 ;;		_spiwrite
 10760 ;; This function is called by:
 10761 ;;		_fillScreen
 10762 ;; This function uses a non-reentrant model
 10763 ;;
 10764                           
 10765                           	psect	text50
 10766  0025B0                     __ptext50:
 10767                           	opt stack 0
 10768  0025B0                     _fillRectangle:
 10769                           	opt stack 21
 10770                           
 10771                           ;incstack = 0
 10772                           ;fillRectangle@x stored from wreg
 10773  0025B0  6E23               	movwf	fillRectangle@x,c
 10774                           
 10775                           ;ST7735_TFT.c: 506: unsigned char hi, lo;
 10776                           ;ST7735_TFT.c: 507: if((x >= 128) || (y >= 160))
 10777  0025B2  0E80               	movlw	128
 10778  0025B4  6023               	cpfslt	fillRectangle@x,c
 10779  0025B6  D069               	goto	l148
 10780  0025B8  0E9F               	movlw	159
 10781  0025BA  6418               	cpfsgt	fillRectangle@y,c
 10782  0025BC  D001               	goto	l8498
 10783                           
 10784                           ;ST7735_TFT.c: 508: return;
 10785  0025BE  D065               	goto	l148
 10786  0025C0                     l8498:
 10787                           
 10788                           ;ST7735_TFT.c: 509: if((x + w - 1) >= 128)
 10789  0025C0  0EFF               	movlw	255
 10790  0025C2  6E1D               	movwf	??_fillRectangle& (0+255),c
 10791  0025C4  0EFF               	movlw	255
 10792  0025C6  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 10793  0025C8  5019               	movf	fillRectangle@w,w,c
 10794  0025CA  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
 10795  0025CE  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
 10796  0025D0  261F               	addwf	??_fillRectangle+2,f,c
 10797  0025D2  0E00               	movlw	0
 10798  0025D4  2220               	addwfc	??_fillRectangle+3,f,c
 10799  0025D6  501D               	movf	??_fillRectangle,w,c
 10800  0025D8  261F               	addwf	??_fillRectangle+2,f,c
 10801  0025DA  501E               	movf	??_fillRectangle+1,w,c
 10802  0025DC  2220               	addwfc	??_fillRectangle+3,f,c
 10803  0025DE  BE20               	btfsc	??_fillRectangle+3,7,c
 10804  0025E0  D00A               	goto	l149
 10805  0025E2  5020               	movf	??_fillRectangle+3,w,c
 10806  0025E4  E104               	bnz	u5850
 10807  0025E6  0E80               	movlw	128
 10808  0025E8  5C1F               	subwf	??_fillRectangle+2,w,c
 10809  0025EA  A0D8               	btfss	status,0,c
 10810  0025EC  D004               	goto	l149
 10811  0025EE                     u5850:
 10812                           
 10813                           ;ST7735_TFT.c: 510: w = 128 - x;
 10814  0025EE  5023               	movf	fillRectangle@x,w,c
 10815  0025F0  0800               	sublw	0
 10816  0025F2  0F80               	addlw	128
 10817  0025F4  6E19               	movwf	fillRectangle@w,c
 10818  0025F6                     l149:
 10819                           
 10820                           ;ST7735_TFT.c: 511: if((y + h - 1) >= 160)
 10821  0025F6  0EFF               	movlw	255
 10822  0025F8  6E1D               	movwf	??_fillRectangle& (0+255),c
 10823  0025FA  0EFF               	movlw	255
 10824  0025FC  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 10825  0025FE  501A               	movf	fillRectangle@h,w,c
 10826  002600  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
 10827  002604  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
 10828  002606  261F               	addwf	??_fillRectangle+2,f,c
 10829  002608  0E00               	movlw	0
 10830  00260A  2220               	addwfc	??_fillRectangle+3,f,c
 10831  00260C  501D               	movf	??_fillRectangle,w,c
 10832  00260E  261F               	addwf	??_fillRectangle+2,f,c
 10833  002610  501E               	movf	??_fillRectangle+1,w,c
 10834  002612  2220               	addwfc	??_fillRectangle+3,f,c
 10835  002614  BE20               	btfsc	??_fillRectangle+3,7,c
 10836  002616  D00B               	goto	l8504
 10837  002618  5020               	movf	??_fillRectangle+3,w,c
 10838  00261A  E104               	bnz	u5860
 10839  00261C  0EA0               	movlw	160
 10840  00261E  5C1F               	subwf	??_fillRectangle+2,w,c
 10841  002620  A0D8               	btfss	status,0,c
 10842  002622  D005               	goto	l8504
 10843  002624                     u5860:
 10844                           
 10845                           ;ST7735_TFT.c: 512: h = 160 - y;
 10846  002624  5018               	movf	fillRectangle@y,w,c
 10847  002626  0800               	sublw	0
 10848  002628  0FA0               	addlw	160
 10849  00262A  6E1A               	movwf	fillRectangle@h,c
 10850  00262C  D000               	goto	l8504
 10851  00262E                     l8504:
 10852                           
 10853                           ;ST7735_TFT.c: 513: setAddrWindow(x, y, x+w-1, y+h-1);
 10854  00262E  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
 10855  002632  5023               	movf	fillRectangle@x,w,c
 10856  002634  2419               	addwf	fillRectangle@w,w,c
 10857  002636  6E1D               	movwf	??_fillRectangle& (0+255),c
 10858  002638  041D               	decf	??_fillRectangle,w,c
 10859  00263A  6E15               	movwf	setAddrWindow@x1,c
 10860  00263C  5018               	movf	fillRectangle@y,w,c
 10861  00263E  241A               	addwf	fillRectangle@h,w,c
 10862  002640  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 10863  002642  041E               	decf	??_fillRectangle+1,w,c
 10864  002644  6E16               	movwf	setAddrWindow@y1,c
 10865  002646  5023               	movf	fillRectangle@x,w,c
 10866  002648  EC54  F01A         	call	_setAddrWindow
 10867                           
 10868                           ;ST7735_TFT.c: 514: hi = color >> 8; lo = color;
 10869  00264C  501C               	movf	fillRectangle@color+1,w,c
 10870  00264E  6E21               	movwf	fillRectangle@hi,c
 10871  002650  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
 10872                           
 10873                           ;ST7735_TFT.c: 515: PORTDbits.RD0 = 1;
 10874  002654  8083               	bsf	3971,0,c	;volatile
 10875                           
 10876                           ;ST7735_TFT.c: 516: PORTDbits.RD1 = 0;
 10877  002656  9283               	bcf	3971,1,c	;volatile
 10878                           
 10879                           ;ST7735_TFT.c: 518: for(y=h; y>0; y--) {
 10880  002658  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
 10881  00265C                     l8516:
 10882  00265C  5018               	movf	fillRectangle@y,w,c
 10883  00265E  B4D8               	btfsc	status,2,c
 10884  002660  D013               	goto	l152
 10885  002662  D001               	goto	l151
 10886  002664  D011               	goto	l152
 10887  002666                     l151:
 10888                           
 10889                           ;ST7735_TFT.c: 519: for(x = w; x > 0; x--) {
 10890  002666  C019  F023         	movff	fillRectangle@w,fillRectangle@x
 10891  00266A                     l8520:
 10892  00266A  5023               	movf	fillRectangle@x,w,c
 10893  00266C  B4D8               	btfsc	status,2,c
 10894  00266E  D00A               	goto	l8530
 10895  002670  D001               	goto	l8524
 10896  002672  D008               	goto	l8530
 10897  002674                     l8524:
 10898                           
 10899                           ;ST7735_TFT.c: 520: spiwrite(hi);
 10900  002674  5021               	movf	fillRectangle@hi,w,c
 10901  002676  EC84  F01E         	call	_spiwrite
 10902                           
 10903                           ;ST7735_TFT.c: 521: spiwrite(lo);
 10904  00267A  5022               	movf	fillRectangle@lo,w,c
 10905  00267C  EC84  F01E         	call	_spiwrite
 10906  002680  0623               	decf	fillRectangle@x,f,c
 10907  002682  D7F3               	goto	l8520
 10908  002684                     l8530:
 10909  002684  0618               	decf	fillRectangle@y,f,c
 10910  002686  D7EA               	goto	l8516
 10911  002688                     l152:
 10912                           
 10913                           ;ST7735_TFT.c: 522: }
 10914                           ;ST7735_TFT.c: 523: }
 10915                           ;ST7735_TFT.c: 524: PORTDbits.RD1 = 1;
 10916  002688  8283               	bsf	3971,1,c	;volatile
 10917  00268A                     l148:
 10918  00268A  0012               	return		;funcret
 10919  00268C                     __end_of_fillRectangle:
 10920                           	opt stack 0
 10921                           tblptru	equ	0xFF8
 10922                           tblptrh	equ	0xFF7
 10923                           tblptrl	equ	0xFF6
 10924                           tablat	equ	0xFF5
 10925                           prodh	equ	0xFF4
 10926                           prodl	equ	0xFF3
 10927                           intcon	equ	0xFF2
 10928                           intcon2	equ	0xFF1
 10929                           postinc0	equ	0xFEE
 10930                           wreg	equ	0xFE8
 10931                           postdec1	equ	0xFE5
 10932                           fsr1l	equ	0xFE1
 10933                           indf2	equ	0xFDF
 10934                           postinc2	equ	0xFDE
 10935                           fsr2h	equ	0xFDA
 10936                           fsr2l	equ	0xFD9
 10937                           status	equ	0xFD8
 10938                           
 10939 ;; *************** function _drawCircle *****************
 10940 ;; Defined at:
 10941 ;;		line 529 in file "ST7735_TFT.c"
 10942 ;; Parameters:    Size  Location     Type
 10943 ;;  x0              2   27[COMRAM] int 
 10944 ;;  y0              2   29[COMRAM] int 
 10945 ;;  r               2   31[COMRAM] int 
 10946 ;;  color           2   33[COMRAM] unsigned int 
 10947 ;; Auto vars:     Size  Location     Type
 10948 ;;  y               2   45[COMRAM] int 
 10949 ;;  x               2   43[COMRAM] int 
 10950 ;;  f               2   41[COMRAM] int 
 10951 ;;  ddF_y           2   39[COMRAM] int 
 10952 ;;  ddF_x           2   37[COMRAM] int 
 10953 ;; Return value:  Size  Location     Type
 10954 ;;		None               void
 10955 ;; Registers used:
 10956 ;;		wreg, status,2, status,0, cstack
 10957 ;; Tracked objects:
 10958 ;;		On entry : 0/0
 10959 ;;		On exit  : 0/0
 10960 ;;		Unchanged: 0/0
 10961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10962 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10963 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10964 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10965 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10966 ;;Total ram usage:       20 bytes
 10967 ;; Hardware stack levels used:    1
 10968 ;; Hardware stack levels required when called:    7
 10969 ;; This function calls:
 10970 ;;		_drawPixel
 10971 ;; This function is called by:
 10972 ;;		_Initialize_Screen
 10973 ;; This function uses a non-reentrant model
 10974 ;;
 10975                           
 10976                           	psect	text51
 10977  00148C                     __ptext51:
 10978                           	opt stack 0
 10979  00148C                     _drawCircle:
 10980                           	opt stack 20
 10981                           
 10982                           ;ST7735_TFT.c: 531: signed int f, ddF_x, ddF_y, x, y;
 10983                           ;ST7735_TFT.c: 532: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
 10984                           
 10985                           ;incstack = 0
 10986  00148C  C020  F024         	movff	drawCircle@r,??_drawCircle
 10987  001490  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
 10988  001494  1E24               	comf	??_drawCircle,f,c
 10989  001496  1E25               	comf	??_drawCircle+1,f,c
 10990  001498  4A24               	infsnz	??_drawCircle,f,c
 10991  00149A  2A25               	incf	??_drawCircle+1,f,c
 10992  00149C  0E01               	movlw	1
 10993  00149E  2424               	addwf	??_drawCircle,w,c
 10994  0014A0  6E2A               	movwf	drawCircle@f,c
 10995  0014A2  0E00               	movlw	0
 10996  0014A4  2025               	addwfc	??_drawCircle+1,w,c
 10997  0014A6  6E2B               	movwf	drawCircle@f+1,c
 10998  0014A8  0E00               	movlw	0
 10999  0014AA  6E27               	movwf	drawCircle@ddF_x+1,c
 11000  0014AC  0E01               	movlw	1
 11001  0014AE  6E26               	movwf	drawCircle@ddF_x,c
 11002  0014B0  C020  F024         	movff	drawCircle@r,??_drawCircle
 11003  0014B4  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
 11004  0014B8  90D8               	bcf	status,0,c
 11005  0014BA  3624               	rlcf	??_drawCircle,f,c
 11006  0014BC  3625               	rlcf	??_drawCircle+1,f,c
 11007  0014BE  1E24               	comf	??_drawCircle,f,c
 11008  0014C0  1E25               	comf	??_drawCircle+1,f,c
 11009  0014C2  4A24               	infsnz	??_drawCircle,f,c
 11010  0014C4  2A25               	incf	??_drawCircle+1,f,c
 11011  0014C6  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
 11012  0014CA  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
 11013  0014CE  0E00               	movlw	0
 11014  0014D0  6E2D               	movwf	drawCircle@x+1,c
 11015  0014D2  0E00               	movlw	0
 11016  0014D4  6E2C               	movwf	drawCircle@x,c
 11017  0014D6  C020  F02E         	movff	drawCircle@r,drawCircle@y
 11018  0014DA  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
 11019                           
 11020                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 + r, color);
 11021  0014DE  501E               	movf	drawCircle@y0,w,c
 11022  0014E0  2420               	addwf	drawCircle@r,w,c
 11023  0014E2  6E18               	movwf	drawPixel@y,c
 11024  0014E4  C022  F019         	movff	drawCircle@color,drawPixel@color
 11025  0014E8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11026  0014EC  501C               	movf	drawCircle@x0,w,c
 11027  0014EE  ECF0  F01C         	call	_drawPixel
 11028                           
 11029                           ;ST7735_TFT.c: 534: drawPixel(x0 , y0 - r, color);
 11030  0014F2  5020               	movf	drawCircle@r,w,c
 11031  0014F4  0800               	sublw	0
 11032  0014F6  241E               	addwf	drawCircle@y0,w,c
 11033  0014F8  6E18               	movwf	drawPixel@y,c
 11034  0014FA  C022  F019         	movff	drawCircle@color,drawPixel@color
 11035  0014FE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11036  001502  501C               	movf	drawCircle@x0,w,c
 11037  001504  ECF0  F01C         	call	_drawPixel
 11038                           
 11039                           ;ST7735_TFT.c: 535: drawPixel(x0+r, y0 , color);
 11040  001508  C01E  F018         	movff	drawCircle@y0,drawPixel@y
 11041  00150C  C022  F019         	movff	drawCircle@color,drawPixel@color
 11042  001510  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11043  001514  501C               	movf	drawCircle@x0,w,c
 11044  001516  2420               	addwf	drawCircle@r,w,c
 11045  001518  ECF0  F01C         	call	_drawPixel
 11046                           
 11047                           ;ST7735_TFT.c: 536: drawPixel(x0-r, y0 , color);
 11048  00151C  C01E  F018         	movff	drawCircle@y0,drawPixel@y
 11049  001520  C022  F019         	movff	drawCircle@color,drawPixel@color
 11050  001524  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11051  001528  5020               	movf	drawCircle@r,w,c
 11052  00152A  0800               	sublw	0
 11053  00152C  241C               	addwf	drawCircle@x0,w,c
 11054  00152E  ECF0  F01C         	call	_drawPixel
 11055                           
 11056                           ;ST7735_TFT.c: 537: while (x < y) {
 11057  001532  D078               	goto	l8980
 11058  001534                     l8952:
 11059                           
 11060                           ;ST7735_TFT.c: 538: if (f >= 0) {
 11061  001534  BE2B               	btfsc	drawCircle@f+1,7,c
 11062  001536  D00B               	goto	l159
 11063                           
 11064                           ;ST7735_TFT.c: 539: y--;
 11065  001538  062E               	decf	drawCircle@y,f,c
 11066  00153A  A0D8               	btfss	status,0,c
 11067  00153C  062F               	decf	drawCircle@y+1,f,c
 11068                           
 11069                           ;ST7735_TFT.c: 540: ddF_y += 2;
 11070  00153E  0E02               	movlw	2
 11071  001540  2628               	addwf	drawCircle@ddF_y,f,c
 11072  001542  0E00               	movlw	0
 11073  001544  2229               	addwfc	drawCircle@ddF_y+1,f,c
 11074                           
 11075                           ;ST7735_TFT.c: 541: f += ddF_y;
 11076  001546  5028               	movf	drawCircle@ddF_y,w,c
 11077  001548  262A               	addwf	drawCircle@f,f,c
 11078  00154A  5029               	movf	drawCircle@ddF_y+1,w,c
 11079  00154C  222B               	addwfc	drawCircle@f+1,f,c
 11080  00154E                     l159:
 11081                           
 11082                           ;ST7735_TFT.c: 542: }
 11083                           ;ST7735_TFT.c: 543: x++;
 11084  00154E  4A2C               	infsnz	drawCircle@x,f,c
 11085  001550  2A2D               	incf	drawCircle@x+1,f,c
 11086                           
 11087                           ;ST7735_TFT.c: 544: ddF_x += 2;
 11088  001552  0E02               	movlw	2
 11089  001554  2626               	addwf	drawCircle@ddF_x,f,c
 11090  001556  0E00               	movlw	0
 11091  001558  2227               	addwfc	drawCircle@ddF_x+1,f,c
 11092                           
 11093                           ;ST7735_TFT.c: 545: f += ddF_x;
 11094  00155A  5026               	movf	drawCircle@ddF_x,w,c
 11095  00155C  262A               	addwf	drawCircle@f,f,c
 11096  00155E  5027               	movf	drawCircle@ddF_x+1,w,c
 11097  001560  222B               	addwfc	drawCircle@f+1,f,c
 11098                           
 11099                           ;ST7735_TFT.c: 546: drawPixel(x0 + x, y0 + y, color);
 11100  001562  501E               	movf	drawCircle@y0,w,c
 11101  001564  242E               	addwf	drawCircle@y,w,c
 11102  001566  6E18               	movwf	drawPixel@y,c
 11103  001568  C022  F019         	movff	drawCircle@color,drawPixel@color
 11104  00156C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11105  001570  501C               	movf	drawCircle@x0,w,c
 11106  001572  242C               	addwf	drawCircle@x,w,c
 11107  001574  ECF0  F01C         	call	_drawPixel
 11108                           
 11109                           ;ST7735_TFT.c: 547: drawPixel(x0 - x, y0 + y, color);
 11110  001578  501E               	movf	drawCircle@y0,w,c
 11111  00157A  242E               	addwf	drawCircle@y,w,c
 11112  00157C  6E18               	movwf	drawPixel@y,c
 11113  00157E  C022  F019         	movff	drawCircle@color,drawPixel@color
 11114  001582  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11115  001586  502C               	movf	drawCircle@x,w,c
 11116  001588  0800               	sublw	0
 11117  00158A  241C               	addwf	drawCircle@x0,w,c
 11118  00158C  ECF0  F01C         	call	_drawPixel
 11119                           
 11120                           ;ST7735_TFT.c: 548: drawPixel(x0 + x, y0 - y, color);
 11121  001590  502E               	movf	drawCircle@y,w,c
 11122  001592  0800               	sublw	0
 11123  001594  241E               	addwf	drawCircle@y0,w,c
 11124  001596  6E18               	movwf	drawPixel@y,c
 11125  001598  C022  F019         	movff	drawCircle@color,drawPixel@color
 11126  00159C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11127  0015A0  501C               	movf	drawCircle@x0,w,c
 11128  0015A2  242C               	addwf	drawCircle@x,w,c
 11129  0015A4  ECF0  F01C         	call	_drawPixel
 11130                           
 11131                           ;ST7735_TFT.c: 549: drawPixel(x0 - x, y0 - y, color);
 11132  0015A8  502E               	movf	drawCircle@y,w,c
 11133  0015AA  0800               	sublw	0
 11134  0015AC  241E               	addwf	drawCircle@y0,w,c
 11135  0015AE  6E18               	movwf	drawPixel@y,c
 11136  0015B0  C022  F019         	movff	drawCircle@color,drawPixel@color
 11137  0015B4  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11138  0015B8  502C               	movf	drawCircle@x,w,c
 11139  0015BA  0800               	sublw	0
 11140  0015BC  241C               	addwf	drawCircle@x0,w,c
 11141  0015BE  ECF0  F01C         	call	_drawPixel
 11142                           
 11143                           ;ST7735_TFT.c: 550: drawPixel(x0 + y, y0 + x, color);
 11144  0015C2  501E               	movf	drawCircle@y0,w,c
 11145  0015C4  242C               	addwf	drawCircle@x,w,c
 11146  0015C6  6E18               	movwf	drawPixel@y,c
 11147  0015C8  C022  F019         	movff	drawCircle@color,drawPixel@color
 11148  0015CC  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11149  0015D0  501C               	movf	drawCircle@x0,w,c
 11150  0015D2  242E               	addwf	drawCircle@y,w,c
 11151  0015D4  ECF0  F01C         	call	_drawPixel
 11152                           
 11153                           ;ST7735_TFT.c: 551: drawPixel(x0 - y, y0 + x, color);
 11154  0015D8  501E               	movf	drawCircle@y0,w,c
 11155  0015DA  242C               	addwf	drawCircle@x,w,c
 11156  0015DC  6E18               	movwf	drawPixel@y,c
 11157  0015DE  C022  F019         	movff	drawCircle@color,drawPixel@color
 11158  0015E2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11159  0015E6  502E               	movf	drawCircle@y,w,c
 11160  0015E8  0800               	sublw	0
 11161  0015EA  241C               	addwf	drawCircle@x0,w,c
 11162  0015EC  ECF0  F01C         	call	_drawPixel
 11163                           
 11164                           ;ST7735_TFT.c: 552: drawPixel(x0 + y, y0 - x, color);
 11165  0015F0  502C               	movf	drawCircle@x,w,c
 11166  0015F2  0800               	sublw	0
 11167  0015F4  241E               	addwf	drawCircle@y0,w,c
 11168  0015F6  6E18               	movwf	drawPixel@y,c
 11169  0015F8  C022  F019         	movff	drawCircle@color,drawPixel@color
 11170  0015FC  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11171  001600  501C               	movf	drawCircle@x0,w,c
 11172  001602  242E               	addwf	drawCircle@y,w,c
 11173  001604  ECF0  F01C         	call	_drawPixel
 11174                           
 11175                           ;ST7735_TFT.c: 553: drawPixel(x0 - y, y0 - x, color);
 11176  001608  502C               	movf	drawCircle@x,w,c
 11177  00160A  0800               	sublw	0
 11178  00160C  241E               	addwf	drawCircle@y0,w,c
 11179  00160E  6E18               	movwf	drawPixel@y,c
 11180  001610  C022  F019         	movff	drawCircle@color,drawPixel@color
 11181  001614  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11182  001618  502E               	movf	drawCircle@y,w,c
 11183  00161A  0800               	sublw	0
 11184  00161C  241C               	addwf	drawCircle@x0,w,c
 11185  00161E  ECF0  F01C         	call	_drawPixel
 11186  001622  D000               	goto	l8980
 11187  001624                     l8980:
 11188  001624  502E               	movf	drawCircle@y,w,c
 11189  001626  5C2C               	subwf	drawCircle@x,w,c
 11190  001628  502D               	movf	drawCircle@x+1,w,c
 11191  00162A  0A80               	xorlw	128
 11192  00162C  6E24               	movwf	??_drawCircle& (0+255),c
 11193  00162E  502F               	movf	drawCircle@y+1,w,c
 11194  001630  0A80               	xorlw	128
 11195  001632  5824               	subwfb	??_drawCircle& (0+255),w,c
 11196  001634  A0D8               	btfss	status,0,c
 11197  001636  D77E               	goto	l8952
 11198  001638  0012               	return		;funcret
 11199  00163A                     __end_of_drawCircle:
 11200                           	opt stack 0
 11201                           tblptru	equ	0xFF8
 11202                           tblptrh	equ	0xFF7
 11203                           tblptrl	equ	0xFF6
 11204                           tablat	equ	0xFF5
 11205                           prodh	equ	0xFF4
 11206                           prodl	equ	0xFF3
 11207                           intcon	equ	0xFF2
 11208                           intcon2	equ	0xFF1
 11209                           postinc0	equ	0xFEE
 11210                           wreg	equ	0xFE8
 11211                           postdec1	equ	0xFE5
 11212                           fsr1l	equ	0xFE1
 11213                           indf2	equ	0xFDF
 11214                           postinc2	equ	0xFDE
 11215                           fsr2h	equ	0xFDA
 11216                           fsr2l	equ	0xFD9
 11217                           status	equ	0xFD8
 11218                           
 11219 ;; *************** function _TFT_GreenTab_Initialize *****************
 11220 ;; Defined at:
 11221 ;;		line 645 in file "ST7735_TFT.c"
 11222 ;; Parameters:    Size  Location     Type
 11223 ;;		None
 11224 ;; Auto vars:     Size  Location     Type
 11225 ;;		None
 11226 ;; Return value:  Size  Location     Type
 11227 ;;		None               void
 11228 ;; Registers used:
 11229 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11230 ;; Tracked objects:
 11231 ;;		On entry : 0/0
 11232 ;;		On exit  : 0/0
 11233 ;;		Unchanged: 0/0
 11234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11239 ;;Total ram usage:        0 bytes
 11240 ;; Hardware stack levels used:    1
 11241 ;; Hardware stack levels required when called:    6
 11242 ;; This function calls:
 11243 ;;		_Rcmd1
 11244 ;;		_Rcmd2red
 11245 ;;		_Rcmd3
 11246 ;;		_write_command
 11247 ;;		_write_data
 11248 ;; This function is called by:
 11249 ;;		_Initialize_Screen
 11250 ;; This function uses a non-reentrant model
 11251 ;;
 11252                           
 11253                           	psect	text52
 11254  003A3A                     __ptext52:
 11255                           	opt stack 0
 11256  003A3A                     _TFT_GreenTab_Initialize:
 11257                           	opt stack 21
 11258                           
 11259                           ;ST7735_TFT.c: 647: PORTDbits.RD1 = 1;
 11260                           
 11261                           ;incstack = 0
 11262  003A3A  8283               	bsf	3971,1,c	;volatile
 11263                           
 11264                           ;ST7735_TFT.c: 648: PORTDbits.RD0 = 0;
 11265  003A3C  9083               	bcf	3971,0,c	;volatile
 11266                           
 11267                           ;ST7735_TFT.c: 650: SSPSTAT=0x80;
 11268  003A3E  0E80               	movlw	128
 11269  003A40  6EC7               	movwf	4039,c	;volatile
 11270                           
 11271                           ;ST7735_TFT.c: 651: SSPCON1=0x30;
 11272  003A42  0E30               	movlw	48
 11273  003A44  6EC6               	movwf	4038,c	;volatile
 11274                           
 11275                           ;ST7735_TFT.c: 654: Rcmd1();
 11276  003A46  EC02  F00E         	call	_Rcmd1	;wreg free
 11277                           
 11278                           ;ST7735_TFT.c: 655: Rcmd2red();
 11279  003A4A  EC25  F01C         	call	_Rcmd2red	;wreg free
 11280                           
 11281                           ;ST7735_TFT.c: 656: Rcmd3();
 11282  003A4E  EC9A  F010         	call	_Rcmd3	;wreg free
 11283                           
 11284                           ;ST7735_TFT.c: 657: write_command(0x36);
 11285  003A52  0E36               	movlw	54
 11286  003A54  ECFF  F01E         	call	_write_command
 11287                           
 11288                           ;ST7735_TFT.c: 658: write_data(0xC0);
 11289  003A58  0EC0               	movlw	192
 11290  003A5A  ECF7  F01E         	call	_write_data
 11291                           
 11292                           ;ST7735_TFT.c: 659: _tft_type = 1;
 11293  003A5E  0E01               	movlw	1
 11294  003A60  6E57               	movwf	__tft_type,c
 11295  003A62  0012               	return		;funcret
 11296  003A64                     __end_of_TFT_GreenTab_Initialize:
 11297                           	opt stack 0
 11298                           tblptru	equ	0xFF8
 11299                           tblptrh	equ	0xFF7
 11300                           tblptrl	equ	0xFF6
 11301                           tablat	equ	0xFF5
 11302                           prodh	equ	0xFF4
 11303                           prodl	equ	0xFF3
 11304                           intcon	equ	0xFF2
 11305                           intcon2	equ	0xFF1
 11306                           postinc0	equ	0xFEE
 11307                           wreg	equ	0xFE8
 11308                           postdec1	equ	0xFE5
 11309                           fsr1l	equ	0xFE1
 11310                           indf2	equ	0xFDF
 11311                           postinc2	equ	0xFDE
 11312                           fsr2h	equ	0xFDA
 11313                           fsr2l	equ	0xFD9
 11314                           status	equ	0xFD8
 11315                           
 11316 ;; *************** function _Rcmd3 *****************
 11317 ;; Defined at:
 11318 ;;		line 339 in file "ST7735_TFT.c"
 11319 ;; Parameters:    Size  Location     Type
 11320 ;;		None
 11321 ;; Auto vars:     Size  Location     Type
 11322 ;;		None
 11323 ;; Return value:  Size  Location     Type
 11324 ;;		None               void
 11325 ;; Registers used:
 11326 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11327 ;; Tracked objects:
 11328 ;;		On entry : 0/0
 11329 ;;		On exit  : 0/0
 11330 ;;		Unchanged: 0/0
 11331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11336 ;;Total ram usage:        0 bytes
 11337 ;; Hardware stack levels used:    1
 11338 ;; Hardware stack levels required when called:    5
 11339 ;; This function calls:
 11340 ;;		_delay_ms
 11341 ;;		_write_command
 11342 ;;		_write_data
 11343 ;; This function is called by:
 11344 ;;		_TFT_GreenTab_Initialize
 11345 ;;		_TFT_BlackTab_Initialize
 11346 ;; This function uses a non-reentrant model
 11347 ;;
 11348                           
 11349                           	psect	text53
 11350  002134                     __ptext53:
 11351                           	opt stack 0
 11352  002134                     _Rcmd3:
 11353                           	opt stack 21
 11354                           
 11355                           ;ST7735_TFT.c: 341: write_command(0xE0);
 11356                           
 11357                           ;incstack = 0
 11358  002134  0EE0               	movlw	224
 11359  002136  ECFF  F01E         	call	_write_command
 11360                           
 11361                           ;ST7735_TFT.c: 342: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
 11362  00213A  0E02               	movlw	2
 11363  00213C  ECF7  F01E         	call	_write_data
 11364  002140  0E1C               	movlw	28
 11365  002142  ECF7  F01E         	call	_write_data
 11366  002146  0E07               	movlw	7
 11367  002148  ECF7  F01E         	call	_write_data
 11368  00214C  0E12               	movlw	18
 11369  00214E  ECF7  F01E         	call	_write_data
 11370                           
 11371                           ;ST7735_TFT.c: 343: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
 11372  002152  0E37               	movlw	55
 11373  002154  ECF7  F01E         	call	_write_data
 11374  002158  0E32               	movlw	50
 11375  00215A  ECF7  F01E         	call	_write_data
 11376  00215E  0E29               	movlw	41
 11377  002160  ECF7  F01E         	call	_write_data
 11378  002164  0E2D               	movlw	45
 11379  002166  ECF7  F01E         	call	_write_data
 11380                           
 11381                           ;ST7735_TFT.c: 344: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
 11382  00216A  0E29               	movlw	41
 11383  00216C  ECF7  F01E         	call	_write_data
 11384  002170  0E25               	movlw	37
 11385  002172  ECF7  F01E         	call	_write_data
 11386  002176  0E2B               	movlw	43
 11387  002178  ECF7  F01E         	call	_write_data
 11388  00217C  0E39               	movlw	57
 11389  00217E  ECF7  F01E         	call	_write_data
 11390                           
 11391                           ;ST7735_TFT.c: 345: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
 11392  002182  0E00               	movlw	0
 11393  002184  ECF7  F01E         	call	_write_data
 11394  002188  0E01               	movlw	1
 11395  00218A  ECF7  F01E         	call	_write_data
 11396  00218E  0E03               	movlw	3
 11397  002190  ECF7  F01E         	call	_write_data
 11398  002194  0E10               	movlw	16
 11399  002196  ECF7  F01E         	call	_write_data
 11400                           
 11401                           ;ST7735_TFT.c: 346: write_command(0xE1);
 11402  00219A  0EE1               	movlw	225
 11403  00219C  ECFF  F01E         	call	_write_command
 11404                           
 11405                           ;ST7735_TFT.c: 347: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
 11406  0021A0  0E03               	movlw	3
 11407  0021A2  ECF7  F01E         	call	_write_data
 11408  0021A6  0E1D               	movlw	29
 11409  0021A8  ECF7  F01E         	call	_write_data
 11410  0021AC  0E07               	movlw	7
 11411  0021AE  ECF7  F01E         	call	_write_data
 11412  0021B2  0E06               	movlw	6
 11413  0021B4  ECF7  F01E         	call	_write_data
 11414                           
 11415                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
 11416  0021B8  0E2E               	movlw	46
 11417  0021BA  ECF7  F01E         	call	_write_data
 11418  0021BE  0E2C               	movlw	44
 11419  0021C0  ECF7  F01E         	call	_write_data
 11420  0021C4  0E29               	movlw	41
 11421  0021C6  ECF7  F01E         	call	_write_data
 11422  0021CA  0E2D               	movlw	45
 11423  0021CC  ECF7  F01E         	call	_write_data
 11424                           
 11425                           ;ST7735_TFT.c: 349: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
 11426  0021D0  0E2E               	movlw	46
 11427  0021D2  ECF7  F01E         	call	_write_data
 11428  0021D6  0E2E               	movlw	46
 11429  0021D8  ECF7  F01E         	call	_write_data
 11430  0021DC  0E37               	movlw	55
 11431  0021DE  ECF7  F01E         	call	_write_data
 11432  0021E2  0E3F               	movlw	63
 11433  0021E4  ECF7  F01E         	call	_write_data
 11434                           
 11435                           ;ST7735_TFT.c: 350: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
 11436  0021E8  0E00               	movlw	0
 11437  0021EA  ECF7  F01E         	call	_write_data
 11438  0021EE  0E00               	movlw	0
 11439  0021F0  ECF7  F01E         	call	_write_data
 11440  0021F4  0E02               	movlw	2
 11441  0021F6  ECF7  F01E         	call	_write_data
 11442  0021FA  0E10               	movlw	16
 11443  0021FC  ECF7  F01E         	call	_write_data
 11444                           
 11445                           ;ST7735_TFT.c: 351: write_command(0x13);
 11446  002200  0E13               	movlw	19
 11447  002202  ECFF  F01E         	call	_write_command
 11448                           
 11449                           ;ST7735_TFT.c: 352: delay_ms(10);
 11450  002206  0E00               	movlw	0
 11451  002208  6E18               	movwf	delay_ms@ms+1,c
 11452  00220A  0E0A               	movlw	10
 11453  00220C  6E17               	movwf	delay_ms@ms,c
 11454  00220E  ECFA  F01A         	call	_delay_ms	;wreg free
 11455                           
 11456                           ;ST7735_TFT.c: 353: write_command(0x29);
 11457  002212  0E29               	movlw	41
 11458  002214  ECFF  F01E         	call	_write_command
 11459                           
 11460                           ;ST7735_TFT.c: 354: delay_ms(100);
 11461  002218  0E00               	movlw	0
 11462  00221A  6E18               	movwf	delay_ms@ms+1,c
 11463  00221C  0E64               	movlw	100
 11464  00221E  6E17               	movwf	delay_ms@ms,c
 11465  002220  ECFA  F01A         	call	_delay_ms	;wreg free
 11466  002224  0012               	return		;funcret
 11467  002226                     __end_of_Rcmd3:
 11468                           	opt stack 0
 11469                           tblptru	equ	0xFF8
 11470                           tblptrh	equ	0xFF7
 11471                           tblptrl	equ	0xFF6
 11472                           tablat	equ	0xFF5
 11473                           prodh	equ	0xFF4
 11474                           prodl	equ	0xFF3
 11475                           intcon	equ	0xFF2
 11476                           intcon2	equ	0xFF1
 11477                           postinc0	equ	0xFEE
 11478                           wreg	equ	0xFE8
 11479                           postdec1	equ	0xFE5
 11480                           fsr1l	equ	0xFE1
 11481                           indf2	equ	0xFDF
 11482                           postinc2	equ	0xFDE
 11483                           fsr2h	equ	0xFDA
 11484                           fsr2l	equ	0xFD9
 11485                           status	equ	0xFD8
 11486                           
 11487 ;; *************** function _Rcmd2red *****************
 11488 ;; Defined at:
 11489 ;;		line 329 in file "ST7735_TFT.c"
 11490 ;; Parameters:    Size  Location     Type
 11491 ;;		None
 11492 ;; Auto vars:     Size  Location     Type
 11493 ;;		None
 11494 ;; Return value:  Size  Location     Type
 11495 ;;		None               void
 11496 ;; Registers used:
 11497 ;;		wreg, status,2, cstack
 11498 ;; Tracked objects:
 11499 ;;		On entry : 0/0
 11500 ;;		On exit  : 0/0
 11501 ;;		Unchanged: 0/0
 11502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11507 ;;Total ram usage:        0 bytes
 11508 ;; Hardware stack levels used:    1
 11509 ;; Hardware stack levels required when called:    5
 11510 ;; This function calls:
 11511 ;;		_write_command
 11512 ;;		_write_data
 11513 ;; This function is called by:
 11514 ;;		_TFT_GreenTab_Initialize
 11515 ;; This function uses a non-reentrant model
 11516 ;;
 11517                           
 11518                           	psect	text54
 11519  00384A                     __ptext54:
 11520                           	opt stack 0
 11521  00384A                     _Rcmd2red:
 11522                           	opt stack 21
 11523                           
 11524                           ;ST7735_TFT.c: 331: write_command(0x2A);
 11525                           
 11526                           ;incstack = 0
 11527  00384A  0E2A               	movlw	42
 11528  00384C  ECFF  F01E         	call	_write_command
 11529                           
 11530                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x00);
 11531  003850  0E00               	movlw	0
 11532  003852  ECF7  F01E         	call	_write_data
 11533  003856  0E00               	movlw	0
 11534  003858  ECF7  F01E         	call	_write_data
 11535                           
 11536                           ;ST7735_TFT.c: 333: write_data(0x00); write_data(0x7F);
 11537  00385C  0E00               	movlw	0
 11538  00385E  ECF7  F01E         	call	_write_data
 11539  003862  0E7F               	movlw	127
 11540  003864  ECF7  F01E         	call	_write_data
 11541                           
 11542                           ;ST7735_TFT.c: 334: write_command(0x2B);
 11543  003868  0E2B               	movlw	43
 11544  00386A  ECFF  F01E         	call	_write_command
 11545                           
 11546                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x00);
 11547  00386E  0E00               	movlw	0
 11548  003870  ECF7  F01E         	call	_write_data
 11549  003874  0E00               	movlw	0
 11550  003876  ECF7  F01E         	call	_write_data
 11551                           
 11552                           ;ST7735_TFT.c: 336: write_data(0x00); write_data(0x9F);
 11553  00387A  0E00               	movlw	0
 11554  00387C  ECF7  F01E         	call	_write_data
 11555  003880  0E9F               	movlw	159
 11556  003882  ECF7  F01E         	call	_write_data
 11557  003886  0012               	return		;funcret
 11558  003888                     __end_of_Rcmd2red:
 11559                           	opt stack 0
 11560                           tblptru	equ	0xFF8
 11561                           tblptrh	equ	0xFF7
 11562                           tblptrl	equ	0xFF6
 11563                           tablat	equ	0xFF5
 11564                           prodh	equ	0xFF4
 11565                           prodl	equ	0xFF3
 11566                           intcon	equ	0xFF2
 11567                           intcon2	equ	0xFF1
 11568                           postinc0	equ	0xFEE
 11569                           wreg	equ	0xFE8
 11570                           postdec1	equ	0xFE5
 11571                           fsr1l	equ	0xFE1
 11572                           indf2	equ	0xFDF
 11573                           postinc2	equ	0xFDE
 11574                           fsr2h	equ	0xFDA
 11575                           fsr2l	equ	0xFD9
 11576                           status	equ	0xFD8
 11577                           
 11578 ;; *************** function _Rcmd1 *****************
 11579 ;; Defined at:
 11580 ;;		line 282 in file "ST7735_TFT.c"
 11581 ;; Parameters:    Size  Location     Type
 11582 ;;		None
 11583 ;; Auto vars:     Size  Location     Type
 11584 ;;		None
 11585 ;; Return value:  Size  Location     Type
 11586 ;;		None               void
 11587 ;; Registers used:
 11588 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11589 ;; Tracked objects:
 11590 ;;		On entry : 0/0
 11591 ;;		On exit  : 0/0
 11592 ;;		Unchanged: 0/0
 11593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11598 ;;Total ram usage:        0 bytes
 11599 ;; Hardware stack levels used:    1
 11600 ;; Hardware stack levels required when called:    5
 11601 ;; This function calls:
 11602 ;;		_delay_ms
 11603 ;;		_write_command
 11604 ;;		_write_data
 11605 ;; This function is called by:
 11606 ;;		_TFT_GreenTab_Initialize
 11607 ;;		_TFT_BlackTab_Initialize
 11608 ;; This function uses a non-reentrant model
 11609 ;;
 11610                           
 11611                           	psect	text55
 11612  001C04                     __ptext55:
 11613                           	opt stack 0
 11614  001C04                     _Rcmd1:
 11615                           	opt stack 21
 11616                           
 11617                           ;ST7735_TFT.c: 284: write_command(0x01);
 11618                           
 11619                           ;incstack = 0
 11620  001C04  0E01               	movlw	1
 11621  001C06  ECFF  F01E         	call	_write_command
 11622                           
 11623                           ;ST7735_TFT.c: 285: delay_ms(150);
 11624  001C0A  0E00               	movlw	0
 11625  001C0C  6E18               	movwf	delay_ms@ms+1,c
 11626  001C0E  0E96               	movlw	150
 11627  001C10  6E17               	movwf	delay_ms@ms,c
 11628  001C12  ECFA  F01A         	call	_delay_ms	;wreg free
 11629                           
 11630                           ;ST7735_TFT.c: 286: write_command(0x11);
 11631  001C16  0E11               	movlw	17
 11632  001C18  ECFF  F01E         	call	_write_command
 11633                           
 11634                           ;ST7735_TFT.c: 287: delay_ms(500);
 11635  001C1C  0E01               	movlw	1
 11636  001C1E  6E18               	movwf	delay_ms@ms+1,c
 11637  001C20  0EF4               	movlw	244
 11638  001C22  6E17               	movwf	delay_ms@ms,c
 11639  001C24  ECFA  F01A         	call	_delay_ms	;wreg free
 11640                           
 11641                           ;ST7735_TFT.c: 288: write_command(0xB1);
 11642  001C28  0EB1               	movlw	177
 11643  001C2A  ECFF  F01E         	call	_write_command
 11644                           
 11645                           ;ST7735_TFT.c: 289: write_data(0x01);
 11646  001C2E  0E01               	movlw	1
 11647  001C30  ECF7  F01E         	call	_write_data
 11648                           
 11649                           ;ST7735_TFT.c: 290: write_data(0x2C);
 11650  001C34  0E2C               	movlw	44
 11651  001C36  ECF7  F01E         	call	_write_data
 11652                           
 11653                           ;ST7735_TFT.c: 291: write_data(0x2D);
 11654  001C3A  0E2D               	movlw	45
 11655  001C3C  ECF7  F01E         	call	_write_data
 11656                           
 11657                           ;ST7735_TFT.c: 292: write_command(0xB2);
 11658  001C40  0EB2               	movlw	178
 11659  001C42  ECFF  F01E         	call	_write_command
 11660                           
 11661                           ;ST7735_TFT.c: 293: write_data(0x01);
 11662  001C46  0E01               	movlw	1
 11663  001C48  ECF7  F01E         	call	_write_data
 11664                           
 11665                           ;ST7735_TFT.c: 294: write_data(0x2C);
 11666  001C4C  0E2C               	movlw	44
 11667  001C4E  ECF7  F01E         	call	_write_data
 11668                           
 11669                           ;ST7735_TFT.c: 295: write_data(0x2D);
 11670  001C52  0E2D               	movlw	45
 11671  001C54  ECF7  F01E         	call	_write_data
 11672                           
 11673                           ;ST7735_TFT.c: 296: write_command(0xB3);
 11674  001C58  0EB3               	movlw	179
 11675  001C5A  ECFF  F01E         	call	_write_command
 11676                           
 11677                           ;ST7735_TFT.c: 297: write_data(0x01);
 11678  001C5E  0E01               	movlw	1
 11679  001C60  ECF7  F01E         	call	_write_data
 11680                           
 11681                           ;ST7735_TFT.c: 298: write_data(0x2C);
 11682  001C64  0E2C               	movlw	44
 11683  001C66  ECF7  F01E         	call	_write_data
 11684                           
 11685                           ;ST7735_TFT.c: 299: write_data(0x2D);
 11686  001C6A  0E2D               	movlw	45
 11687  001C6C  ECF7  F01E         	call	_write_data
 11688                           
 11689                           ;ST7735_TFT.c: 300: write_data(0x01);
 11690  001C70  0E01               	movlw	1
 11691  001C72  ECF7  F01E         	call	_write_data
 11692                           
 11693                           ;ST7735_TFT.c: 301: write_data(0x2C);
 11694  001C76  0E2C               	movlw	44
 11695  001C78  ECF7  F01E         	call	_write_data
 11696                           
 11697                           ;ST7735_TFT.c: 302: write_data(0x2D);
 11698  001C7C  0E2D               	movlw	45
 11699  001C7E  ECF7  F01E         	call	_write_data
 11700                           
 11701                           ;ST7735_TFT.c: 303: write_command(0xB4);
 11702  001C82  0EB4               	movlw	180
 11703  001C84  ECFF  F01E         	call	_write_command
 11704                           
 11705                           ;ST7735_TFT.c: 304: write_data(0x07);
 11706  001C88  0E07               	movlw	7
 11707  001C8A  ECF7  F01E         	call	_write_data
 11708                           
 11709                           ;ST7735_TFT.c: 305: write_command(0xC0);
 11710  001C8E  0EC0               	movlw	192
 11711  001C90  ECFF  F01E         	call	_write_command
 11712                           
 11713                           ;ST7735_TFT.c: 306: write_data(0xA2);
 11714  001C94  0EA2               	movlw	162
 11715  001C96  ECF7  F01E         	call	_write_data
 11716                           
 11717                           ;ST7735_TFT.c: 307: write_data(0x02);
 11718  001C9A  0E02               	movlw	2
 11719  001C9C  ECF7  F01E         	call	_write_data
 11720                           
 11721                           ;ST7735_TFT.c: 308: write_data(0x84);
 11722  001CA0  0E84               	movlw	132
 11723  001CA2  ECF7  F01E         	call	_write_data
 11724                           
 11725                           ;ST7735_TFT.c: 309: write_command(0xC1);
 11726  001CA6  0EC1               	movlw	193
 11727  001CA8  ECFF  F01E         	call	_write_command
 11728                           
 11729                           ;ST7735_TFT.c: 310: write_data(0xC5);
 11730  001CAC  0EC5               	movlw	197
 11731  001CAE  ECF7  F01E         	call	_write_data
 11732                           
 11733                           ;ST7735_TFT.c: 311: write_command(0xC2);
 11734  001CB2  0EC2               	movlw	194
 11735  001CB4  ECFF  F01E         	call	_write_command
 11736                           
 11737                           ;ST7735_TFT.c: 312: write_data(0x0A);
 11738  001CB8  0E0A               	movlw	10
 11739  001CBA  ECF7  F01E         	call	_write_data
 11740                           
 11741                           ;ST7735_TFT.c: 313: write_data(0x00);
 11742  001CBE  0E00               	movlw	0
 11743  001CC0  ECF7  F01E         	call	_write_data
 11744                           
 11745                           ;ST7735_TFT.c: 314: write_command(0xC3);
 11746  001CC4  0EC3               	movlw	195
 11747  001CC6  ECFF  F01E         	call	_write_command
 11748                           
 11749                           ;ST7735_TFT.c: 315: write_data(0x8A);
 11750  001CCA  0E8A               	movlw	138
 11751  001CCC  ECF7  F01E         	call	_write_data
 11752                           
 11753                           ;ST7735_TFT.c: 316: write_data(0x2A);
 11754  001CD0  0E2A               	movlw	42
 11755  001CD2  ECF7  F01E         	call	_write_data
 11756                           
 11757                           ;ST7735_TFT.c: 317: write_command(0xC4);
 11758  001CD6  0EC4               	movlw	196
 11759  001CD8  ECFF  F01E         	call	_write_command
 11760                           
 11761                           ;ST7735_TFT.c: 318: write_data(0x8A);
 11762  001CDC  0E8A               	movlw	138
 11763  001CDE  ECF7  F01E         	call	_write_data
 11764                           
 11765                           ;ST7735_TFT.c: 319: write_data(0xEE);
 11766  001CE2  0EEE               	movlw	238
 11767  001CE4  ECF7  F01E         	call	_write_data
 11768                           
 11769                           ;ST7735_TFT.c: 320: write_command(0xC5);
 11770  001CE8  0EC5               	movlw	197
 11771  001CEA  ECFF  F01E         	call	_write_command
 11772                           
 11773                           ;ST7735_TFT.c: 321: write_data(0x0E);
 11774  001CEE  0E0E               	movlw	14
 11775  001CF0  ECF7  F01E         	call	_write_data
 11776                           
 11777                           ;ST7735_TFT.c: 322: write_command(0x20);
 11778  001CF4  0E20               	movlw	32
 11779  001CF6  ECFF  F01E         	call	_write_command
 11780                           
 11781                           ;ST7735_TFT.c: 323: write_command(0x36);
 11782  001CFA  0E36               	movlw	54
 11783  001CFC  ECFF  F01E         	call	_write_command
 11784                           
 11785                           ;ST7735_TFT.c: 324: write_data(0xC8);
 11786  001D00  0EC8               	movlw	200
 11787  001D02  ECF7  F01E         	call	_write_data
 11788                           
 11789                           ;ST7735_TFT.c: 325: write_command(0x3A);
 11790  001D06  0E3A               	movlw	58
 11791  001D08  ECFF  F01E         	call	_write_command
 11792                           
 11793                           ;ST7735_TFT.c: 326: write_data(0x05);
 11794  001D0C  0E05               	movlw	5
 11795  001D0E  ECF7  F01E         	call	_write_data
 11796  001D12  0012               	return		;funcret
 11797  001D14                     __end_of_Rcmd1:
 11798                           	opt stack 0
 11799                           tblptru	equ	0xFF8
 11800                           tblptrh	equ	0xFF7
 11801                           tblptrl	equ	0xFF6
 11802                           tablat	equ	0xFF5
 11803                           prodh	equ	0xFF4
 11804                           prodl	equ	0xFF3
 11805                           intcon	equ	0xFF2
 11806                           intcon2	equ	0xFF1
 11807                           postinc0	equ	0xFEE
 11808                           wreg	equ	0xFE8
 11809                           postdec1	equ	0xFE5
 11810                           fsr1l	equ	0xFE1
 11811                           indf2	equ	0xFDF
 11812                           postinc2	equ	0xFDE
 11813                           fsr2h	equ	0xFDA
 11814                           fsr2l	equ	0xFD9
 11815                           status	equ	0xFD8
 11816                           
 11817 ;; *************** function _LCD_Reset *****************
 11818 ;; Defined at:
 11819 ;;		line 218 in file "ST7735_TFT.c"
 11820 ;; Parameters:    Size  Location     Type
 11821 ;;		None
 11822 ;; Auto vars:     Size  Location     Type
 11823 ;;		None
 11824 ;; Return value:  Size  Location     Type
 11825 ;;		None               void
 11826 ;; Registers used:
 11827 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11828 ;; Tracked objects:
 11829 ;;		On entry : 0/0
 11830 ;;		On exit  : 0/0
 11831 ;;		Unchanged: 0/0
 11832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11837 ;;Total ram usage:        0 bytes
 11838 ;; Hardware stack levels used:    1
 11839 ;; Hardware stack levels required when called:    5
 11840 ;; This function calls:
 11841 ;;		_delay_ms
 11842 ;; This function is called by:
 11843 ;;		_Initialize_Screen
 11844 ;; This function uses a non-reentrant model
 11845 ;;
 11846                           
 11847                           	psect	text56
 11848  003D42                     __ptext56:
 11849                           	opt stack 0
 11850  003D42                     _LCD_Reset:
 11851                           	opt stack 22
 11852                           
 11853                           ;ST7735_TFT.c: 220: PORTDbits.RD2 = 0;
 11854                           
 11855                           ;incstack = 0
 11856  003D42  9483               	bcf	3971,2,c	;volatile
 11857                           
 11858                           ;ST7735_TFT.c: 221: delay_ms(100);
 11859  003D44  0E00               	movlw	0
 11860  003D46  6E18               	movwf	delay_ms@ms+1,c
 11861  003D48  0E64               	movlw	100
 11862  003D4A  6E17               	movwf	delay_ms@ms,c
 11863  003D4C  ECFA  F01A         	call	_delay_ms	;wreg free
 11864                           
 11865                           ;ST7735_TFT.c: 222: PORTDbits.RD2 = 1;
 11866  003D50  8483               	bsf	3971,2,c	;volatile
 11867  003D52  0012               	return		;funcret
 11868  003D54                     __end_of_LCD_Reset:
 11869                           	opt stack 0
 11870                           tblptru	equ	0xFF8
 11871                           tblptrh	equ	0xFF7
 11872                           tblptrl	equ	0xFF6
 11873                           tablat	equ	0xFF5
 11874                           prodh	equ	0xFF4
 11875                           prodl	equ	0xFF3
 11876                           intcon	equ	0xFF2
 11877                           intcon2	equ	0xFF1
 11878                           postinc0	equ	0xFEE
 11879                           wreg	equ	0xFE8
 11880                           postdec1	equ	0xFE5
 11881                           fsr1l	equ	0xFE1
 11882                           indf2	equ	0xFDF
 11883                           postinc2	equ	0xFDE
 11884                           fsr2h	equ	0xFDA
 11885                           fsr2l	equ	0xFD9
 11886                           status	equ	0xFD8
 11887                           
 11888 ;; *************** function _delay_ms *****************
 11889 ;; Defined at:
 11890 ;;		line 65 in file "ST7735_TFT.c"
 11891 ;; Parameters:    Size  Location     Type
 11892 ;;  ms              2   22[COMRAM] int 
 11893 ;; Auto vars:     Size  Location     Type
 11894 ;;  count           2   26[COMRAM] int 
 11895 ;; Return value:  Size  Location     Type
 11896 ;;		None               void
 11897 ;; Registers used:
 11898 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11899 ;; Tracked objects:
 11900 ;;		On entry : 0/0
 11901 ;;		On exit  : 0/0
 11902 ;;		Unchanged: 0/0
 11903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11904 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11905 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11906 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11907 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11908 ;;Total ram usage:        6 bytes
 11909 ;; Hardware stack levels used:    1
 11910 ;; Hardware stack levels required when called:    4
 11911 ;; This function calls:
 11912 ;;		___wmul
 11913 ;; This function is called by:
 11914 ;;		_LCD_Reset
 11915 ;;		_Rcmd1
 11916 ;;		_Rcmd3
 11917 ;;		_Bcmd
 11918 ;; This function uses a non-reentrant model
 11919 ;;
 11920                           
 11921                           	psect	text57
 11922  0035F4                     __ptext57:
 11923                           	opt stack 0
 11924  0035F4                     _delay_ms:
 11925                           	opt stack 21
 11926                           
 11927                           ;ST7735_TFT.c: 71: int count;
 11928                           ;ST7735_TFT.c: 72: count = 8000000/4000/16 * ms;
 11929                           
 11930                           ;incstack = 0
 11931  0035F4  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
 11932  0035F8  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
 11933  0035FC  0E00               	movlw	0
 11934  0035FE  6E14               	movwf	___wmul@multiplicand+1,c
 11935  003600  0E7D               	movlw	125
 11936  003602  6E13               	movwf	___wmul@multiplicand,c
 11937  003604  EC32  F01D         	call	___wmul	;wreg free
 11938  003608  C011  F01B         	movff	?___wmul,delay_ms@count
 11939  00360C  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
 11940                           
 11941                           ;ST7735_TFT.c: 73: count = (0xffff - count);
 11942  003610  C01B  F019         	movff	delay_ms@count,??_delay_ms
 11943  003614  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
 11944  003618  1E19               	comf	??_delay_ms,f,c
 11945  00361A  1E1A               	comf	??_delay_ms+1,f,c
 11946  00361C  4A19               	infsnz	??_delay_ms,f,c
 11947  00361E  2A1A               	incf	??_delay_ms+1,f,c
 11948  003620  0EFF               	movlw	255
 11949  003622  2419               	addwf	??_delay_ms,w,c
 11950  003624  6E1B               	movwf	delay_ms@count,c
 11951  003626  0EFF               	movlw	255
 11952  003628  201A               	addwfc	??_delay_ms+1,w,c
 11953  00362A  6E1C               	movwf	delay_ms@count+1,c
 11954                           
 11955                           ;ST7735_TFT.c: 75: T0CON = 0x03;
 11956  00362C  0E03               	movlw	3
 11957  00362E  6ED5               	movwf	4053,c	;volatile
 11958                           
 11959                           ;ST7735_TFT.c: 77: TMR0L = count & 0x00ff;
 11960  003630  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
 11961                           
 11962                           ;ST7735_TFT.c: 78: TMR0H = count >> 8;
 11963  003634  501C               	movf	delay_ms@count+1,w,c
 11964  003636  6ED7               	movwf	4055,c	;volatile
 11965                           
 11966                           ;ST7735_TFT.c: 80: INTCONbits.TMR0IF = 0;
 11967  003638  94F2               	bcf	intcon,2,c	;volatile
 11968                           
 11969                           ;ST7735_TFT.c: 81: T0CONbits.TMR0ON = 1;
 11970  00363A  8ED5               	bsf	4053,7,c	;volatile
 11971                           
 11972                           ;ST7735_TFT.c: 83: while (INTCONbits.TMR0IF == 0);
 11973  00363C  D000               	goto	l35
 11974  00363E                     l35:
 11975  00363E  A4F2               	btfss	intcon,2,c	;volatile
 11976  003640  D7FE               	goto	l35
 11977                           
 11978                           ;ST7735_TFT.c: 84: T0CONbits.TMR0ON = 0;
 11979  003642  9ED5               	bcf	4053,7,c	;volatile
 11980  003644  0012               	return		;funcret
 11981  003646                     __end_of_delay_ms:
 11982                           	opt stack 0
 11983                           tblptru	equ	0xFF8
 11984                           tblptrh	equ	0xFF7
 11985                           tblptrl	equ	0xFF6
 11986                           tablat	equ	0xFF5
 11987                           prodh	equ	0xFF4
 11988                           prodl	equ	0xFF3
 11989                           intcon	equ	0xFF2
 11990                           intcon2	equ	0xFF1
 11991                           postinc0	equ	0xFEE
 11992                           wreg	equ	0xFE8
 11993                           postdec1	equ	0xFE5
 11994                           fsr1l	equ	0xFE1
 11995                           indf2	equ	0xFDF
 11996                           postinc2	equ	0xFDE
 11997                           fsr2h	equ	0xFDA
 11998                           fsr2l	equ	0xFD9
 11999                           status	equ	0xFD8
 12000                           
 12001 ;; *************** function _DS3231_Write_Alarm_Time *****************
 12002 ;; Defined at:
 12003 ;;		line 179 in file "I2C_Support.c"
 12004 ;; Parameters:    Size  Location     Type
 12005 ;;		None
 12006 ;; Auto vars:     Size  Location     Type
 12007 ;;  Address         1   14[BANK1 ] unsigned char 
 12008 ;;  Device          1   13[BANK1 ] unsigned char 
 12009 ;; Return value:  Size  Location     Type
 12010 ;;		None               void
 12011 ;; Registers used:
 12012 ;;		wreg, status,2, status,0, cstack
 12013 ;; Tracked objects:
 12014 ;;		On entry : 0/0
 12015 ;;		On exit  : 0/0
 12016 ;;		Unchanged: 0/0
 12017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12019 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12021 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12022 ;;Total ram usage:        2 bytes
 12023 ;; Hardware stack levels used:    1
 12024 ;; Hardware stack levels required when called:    7
 12025 ;; This function calls:
 12026 ;;		_DS3231_Read_Time
 12027 ;;		_I2C_Start
 12028 ;;		_I2C_Stop
 12029 ;;		_I2C_Write
 12030 ;;		_dec_2_bcd
 12031 ;; This function is called by:
 12032 ;;		_Do_Save_New_Alarm_Time
 12033 ;; This function uses a non-reentrant model
 12034 ;;
 12035                           
 12036                           	psect	text58
 12037  003030                     __ptext58:
 12038                           	opt stack 0
 12039  003030                     _DS3231_Write_Alarm_Time:
 12040                           	opt stack 21
 12041                           
 12042                           ;I2C_Support.c: 180: DS3231_Read_Time();
 12043                           
 12044                           ;incstack = 0
 12045  003030  EC0B  F019         	call	_DS3231_Read_Time	;wreg free
 12046                           
 12047                           ;I2C_Support.c: 181: alarm_date = day;
 12048  003034  C05C  F058         	movff	_day,_alarm_date
 12049                           
 12050                           ;I2C_Support.c: 182: char Device = 0x68;
 12051  003038  0E68               	movlw	104
 12052  00303A  0101               	movlb	1	; () banked
 12053  00303C  6F51               	movwf	DS3231_Write_Alarm_Time@Device& (0+255),b
 12054                           
 12055                           ; BSR set to: 1
 12056                           ;I2C_Support.c: 183: char Address = 0x07;
 12057  00303E  0E07               	movlw	7
 12058  003040  0101               	movlb	1	; () banked
 12059  003042  6F52               	movwf	DS3231_Write_Alarm_Time@Address& (0+255),b
 12060                           
 12061                           ;I2C_Support.c: 184: alarm_hour = dec_2_bcd(setup_alarm_hour);
 12062  003044  5063               	movf	_setup_alarm_hour,w,c
 12063  003046  EC70  F019         	call	_dec_2_bcd
 12064  00304A  0101               	movlb	1	; () banked
 12065  00304C  514A               	movf	?_dec_2_bcd& (0+255),w,b
 12066  00304E  6E59               	movwf	_alarm_hour,c
 12067                           
 12068                           ;I2C_Support.c: 185: alarm_minute = dec_2_bcd(setup_alarm_minute);
 12069  003050  5064               	movf	_setup_alarm_minute,w,c
 12070  003052  EC70  F019         	call	_dec_2_bcd
 12071  003056  0101               	movlb	1	; () banked
 12072  003058  514A               	movf	?_dec_2_bcd& (0+255),w,b
 12073  00305A  6E5A               	movwf	_alarm_minute,c
 12074                           
 12075                           ;I2C_Support.c: 186: alarm_second = dec_2_bcd(setup_alarm_second);
 12076  00305C  5065               	movf	_setup_alarm_second,w,c
 12077  00305E  EC70  F019         	call	_dec_2_bcd
 12078  003062  0101               	movlb	1	; () banked
 12079  003064  514A               	movf	?_dec_2_bcd& (0+255),w,b
 12080  003066  6E5B               	movwf	_alarm_second,c
 12081                           
 12082                           ; BSR set to: 1
 12083                           ;I2C_Support.c: 187: alarm_second = alarm_second & 0x7f;
 12084  003068  505B               	movf	_alarm_second,w,c
 12085  00306A  0B7F               	andlw	127
 12086  00306C  6E5B               	movwf	_alarm_second,c
 12087                           
 12088                           ; BSR set to: 1
 12089                           ;I2C_Support.c: 188: alarm_minute = alarm_minute & 0x7f;
 12090  00306E  505A               	movf	_alarm_minute,w,c
 12091  003070  0B7F               	andlw	127
 12092  003072  6E5A               	movwf	_alarm_minute,c
 12093                           
 12094                           ; BSR set to: 1
 12095                           ;I2C_Support.c: 189: alarm_hour = alarm_hour & 0x7f;
 12096  003074  5059               	movf	_alarm_hour,w,c
 12097  003076  0B7F               	andlw	127
 12098  003078  6E59               	movwf	_alarm_hour,c
 12099                           
 12100                           ; BSR set to: 1
 12101                           ;I2C_Support.c: 190: alarm_date = alarm_date | 0x80;
 12102  00307A  5058               	movf	_alarm_date,w,c
 12103  00307C  0980               	iorlw	128
 12104  00307E  6E58               	movwf	_alarm_date,c
 12105                           
 12106                           ; BSR set to: 1
 12107                           ;I2C_Support.c: 191: I2C_Start();
 12108  003080  ECC5  F01E         	call	_I2C_Start	;wreg free
 12109                           
 12110                           ;I2C_Support.c: 192: I2C_Write((Device << 1) | 0);
 12111  003084  0101               	movlb	1	; () banked
 12112  003086  5151               	movf	DS3231_Write_Alarm_Time@Device& (0+255),w,b
 12113  003088  2551               	addwf	DS3231_Write_Alarm_Time@Device& (0+255),w,b
 12114  00308A  EC63  F01C         	call	_I2C_Write
 12115                           
 12116                           ;I2C_Support.c: 193: I2C_Write(Address);
 12117  00308E  0101               	movlb	1	; () banked
 12118  003090  5152               	movf	DS3231_Write_Alarm_Time@Address& (0+255),w,b
 12119  003092  EC63  F01C         	call	_I2C_Write
 12120                           
 12121                           ;I2C_Support.c: 195: I2C_Write(alarm_second);
 12122  003096  505B               	movf	_alarm_second,w,c
 12123  003098  EC63  F01C         	call	_I2C_Write
 12124                           
 12125                           ;I2C_Support.c: 196: I2C_Write(alarm_minute);
 12126  00309C  505A               	movf	_alarm_minute,w,c
 12127  00309E  EC63  F01C         	call	_I2C_Write
 12128                           
 12129                           ;I2C_Support.c: 197: I2C_Write(alarm_hour);
 12130  0030A2  5059               	movf	_alarm_hour,w,c
 12131  0030A4  EC63  F01C         	call	_I2C_Write
 12132                           
 12133                           ;I2C_Support.c: 198: I2C_Write(alarm_date);
 12134  0030A8  5058               	movf	_alarm_date,w,c
 12135  0030AA  EC63  F01C         	call	_I2C_Write
 12136                           
 12137                           ;I2C_Support.c: 199: I2C_Stop();
 12138  0030AE  ECBC  F01E         	call	_I2C_Stop	;wreg free
 12139  0030B2  0012               	return		;funcret
 12140  0030B4                     __end_of_DS3231_Write_Alarm_Time:
 12141                           	opt stack 0
 12142                           tblptru	equ	0xFF8
 12143                           tblptrh	equ	0xFF7
 12144                           tblptrl	equ	0xFF6
 12145                           tablat	equ	0xFF5
 12146                           prodh	equ	0xFF4
 12147                           prodl	equ	0xFF3
 12148                           intcon	equ	0xFF2
 12149                           intcon2	equ	0xFF1
 12150                           postinc0	equ	0xFEE
 12151                           wreg	equ	0xFE8
 12152                           postdec1	equ	0xFE5
 12153                           fsr1l	equ	0xFE1
 12154                           indf2	equ	0xFDF
 12155                           postinc2	equ	0xFDE
 12156                           fsr2h	equ	0xFDA
 12157                           fsr2l	equ	0xFD9
 12158                           status	equ	0xFD8
 12159                           
 12160 ;; *************** function _dec_2_bcd *****************
 12161 ;; Defined at:
 12162 ;;		line 21 in file "utils.c"
 12163 ;; Parameters:    Size  Location     Type
 12164 ;;  dec             1    wreg     unsigned char 
 12165 ;; Auto vars:     Size  Location     Type
 12166 ;;  dec             1   12[BANK1 ] unsigned char 
 12167 ;;  bcd             2   10[BANK1 ] int 
 12168 ;; Return value:  Size  Location     Type
 12169 ;;                  2    6[BANK1 ] int 
 12170 ;; Registers used:
 12171 ;;		wreg, status,2, status,0, cstack
 12172 ;; Tracked objects:
 12173 ;;		On entry : 0/0
 12174 ;;		On exit  : 0/0
 12175 ;;		Unchanged: 0/0
 12176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12177 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12178 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12179 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12180 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12181 ;;Total ram usage:        7 bytes
 12182 ;; Hardware stack levels used:    1
 12183 ;; Hardware stack levels required when called:    4
 12184 ;; This function calls:
 12185 ;;		___awdiv
 12186 ;;		___awmod
 12187 ;; This function is called by:
 12188 ;;		_DS3231_Write_Time
 12189 ;;		_DS3231_Write_Alarm_Time
 12190 ;;		_DS3231_Write_Initial_Alarm_Time
 12191 ;; This function uses a non-reentrant model
 12192 ;;
 12193                           
 12194                           	psect	text59
 12195  0032E0                     __ptext59:
 12196                           	opt stack 0
 12197  0032E0                     _dec_2_bcd:
 12198                           	opt stack 23
 12199                           
 12200                           ;incstack = 0
 12201                           ;dec_2_bcd@dec stored from wreg
 12202  0032E0  0101               	movlb	1	; () banked
 12203  0032E2  6F50               	movwf	dec_2_bcd@dec& (0+255),b
 12204                           
 12205                           ; BSR set to: 1
 12206                           ;utils.c: 22: int bcd;
 12207                           ;utils.c: 23: bcd = ((dec / 10) << 4) + (dec % 10);
 12208  0032E4  C150  F017         	movff	dec_2_bcd@dec,___awdiv@dividend
 12209  0032E8  6A18               	clrf	___awdiv@dividend+1,c
 12210  0032EA  0E00               	movlw	0
 12211  0032EC  6E1A               	movwf	___awdiv@divisor+1,c
 12212  0032EE  0E0A               	movlw	10
 12213  0032F0  6E19               	movwf	___awdiv@divisor,c
 12214  0032F2  EC67  F016         	call	___awdiv	;wreg free
 12215  0032F6  C017  F14C         	movff	?___awdiv,??_dec_2_bcd
 12216  0032FA  C018  F14D         	movff	?___awdiv+1,??_dec_2_bcd+1
 12217  0032FE  0101               	movlb	1	; () banked
 12218  003300  3B4C               	swapf	??_dec_2_bcd& (0+255),f,b
 12219  003302  3B4D               	swapf	(??_dec_2_bcd+1)& (0+255),f,b
 12220  003304  0EF0               	movlw	240
 12221  003306  174D               	andwf	(??_dec_2_bcd+1)& (0+255),f,b
 12222  003308  514C               	movf	??_dec_2_bcd& (0+255),w,b
 12223  00330A  0B0F               	andlw	15
 12224  00330C  134D               	iorwf	(??_dec_2_bcd+1)& (0+255),f,b
 12225  00330E  0EF0               	movlw	240
 12226  003310  174C               	andwf	??_dec_2_bcd& (0+255),f,b
 12227  003312  C150  F044         	movff	dec_2_bcd@dec,___awmod@dividend
 12228  003316  6A45               	clrf	___awmod@dividend+1,c
 12229  003318  0E00               	movlw	0
 12230  00331A  6E47               	movwf	___awmod@divisor+1,c
 12231  00331C  0E0A               	movlw	10
 12232  00331E  6E46               	movwf	___awmod@divisor,c
 12233  003320  EC44  F017         	call	___awmod	;wreg free
 12234  003324  5044               	movf	?___awmod,w,c
 12235  003326  0101               	movlb	1	; () banked
 12236  003328  254C               	addwf	??_dec_2_bcd& (0+255),w,b
 12237  00332A  0101               	movlb	1	; () banked
 12238  00332C  6F4E               	movwf	dec_2_bcd@bcd& (0+255),b
 12239  00332E  5045               	movf	?___awmod+1,w,c
 12240  003330  0101               	movlb	1	; () banked
 12241  003332  214D               	addwfc	(??_dec_2_bcd+1)& (0+255),w,b
 12242  003334  0101               	movlb	1	; () banked
 12243  003336  6F4F               	movwf	(dec_2_bcd@bcd+1)& (0+255),b
 12244                           
 12245                           ; BSR set to: 1
 12246                           ;utils.c: 24: return bcd;
 12247  003338  C14E  F14A         	movff	dec_2_bcd@bcd,?_dec_2_bcd
 12248  00333C  C14F  F14B         	movff	dec_2_bcd@bcd+1,?_dec_2_bcd+1
 12249  003340  D000               	goto	l655
 12250  003342                     l655:
 12251                           
 12252                           ; BSR set to: 1
 12253  003342  0012               	return		;funcret
 12254  003344                     __end_of_dec_2_bcd:
 12255                           	opt stack 0
 12256                           tblptru	equ	0xFF8
 12257                           tblptrh	equ	0xFF7
 12258                           tblptrl	equ	0xFF6
 12259                           tablat	equ	0xFF5
 12260                           prodh	equ	0xFF4
 12261                           prodl	equ	0xFF3
 12262                           intcon	equ	0xFF2
 12263                           intcon2	equ	0xFF1
 12264                           postinc0	equ	0xFEE
 12265                           wreg	equ	0xFE8
 12266                           postdec1	equ	0xFE5
 12267                           fsr1l	equ	0xFE1
 12268                           indf2	equ	0xFDF
 12269                           postinc2	equ	0xFDE
 12270                           fsr2h	equ	0xFDA
 12271                           fsr2l	equ	0xFD9
 12272                           status	equ	0xFD8
 12273                           
 12274 ;; *************** function _DS3231_Read_Time *****************
 12275 ;; Defined at:
 12276 ;;		line 39 in file "I2C_Support.c"
 12277 ;; Parameters:    Size  Location     Type
 12278 ;;		None
 12279 ;; Auto vars:     Size  Location     Type
 12280 ;;  Device          1   20[COMRAM] unsigned char 
 12281 ;;  Address         1   19[COMRAM] unsigned char 
 12282 ;; Return value:  Size  Location     Type
 12283 ;;		None               void
 12284 ;; Registers used:
 12285 ;;		wreg, status,2, status,0, cstack
 12286 ;; Tracked objects:
 12287 ;;		On entry : 0/0
 12288 ;;		On exit  : 0/0
 12289 ;;		Unchanged: 0/0
 12290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12292 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12294 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12295 ;;Total ram usage:        2 bytes
 12296 ;; Hardware stack levels used:    1
 12297 ;; Hardware stack levels required when called:    6
 12298 ;; This function calls:
 12299 ;;		_I2C_ReStart
 12300 ;;		_I2C_Read
 12301 ;;		_I2C_Start
 12302 ;;		_I2C_Stop
 12303 ;;		_I2C_Write
 12304 ;; This function is called by:
 12305 ;;		_DS3231_Write_Alarm_Time
 12306 ;;		_Do_Setup_Time
 12307 ;;		_Do_Save_New_Time
 12308 ;;		_Exit_Time_Setup
 12309 ;;		_Exit_Setup_Fan_Temp
 12310 ;;		_Do_Save_New_Fan_Temp
 12311 ;;		_Exit_Setup_Alarm_Time
 12312 ;;		_Do_Save_New_Alarm_Time
 12313 ;;		_main
 12314 ;;		_DS3231_Write_Initial_Alarm_Time
 12315 ;; This function uses a non-reentrant model
 12316 ;;
 12317                           
 12318                           	psect	text60
 12319  003216                     __ptext60:
 12320                           	opt stack 0
 12321  003216                     _DS3231_Read_Time:
 12322                           	opt stack 22
 12323                           
 12324                           ;I2C_Support.c: 40: char Device = 0x68;
 12325                           
 12326                           ; BSR set to: 1
 12327                           ;incstack = 0
 12328  003216  0E68               	movlw	104
 12329  003218  6E15               	movwf	DS3231_Read_Time@Device,c
 12330                           
 12331                           ;I2C_Support.c: 41: char Address = 0x00;
 12332  00321A  0E00               	movlw	0
 12333  00321C  6E14               	movwf	DS3231_Read_Time@Address,c
 12334                           
 12335                           ;I2C_Support.c: 42: I2C_Start();
 12336  00321E  ECC5  F01E         	call	_I2C_Start	;wreg free
 12337                           
 12338                           ;I2C_Support.c: 43: I2C_Write((Device << 1) | 0);
 12339  003222  5015               	movf	DS3231_Read_Time@Device,w,c
 12340  003224  2415               	addwf	DS3231_Read_Time@Device,w,c
 12341  003226  EC63  F01C         	call	_I2C_Write
 12342                           
 12343                           ;I2C_Support.c: 44: I2C_Write(Address);
 12344  00322A  5014               	movf	DS3231_Read_Time@Address,w,c
 12345  00322C  EC63  F01C         	call	_I2C_Write
 12346                           
 12347                           ;I2C_Support.c: 45: I2C_ReStart();
 12348  003230  EC3D  F01E         	call	_I2C_ReStart	;wreg free
 12349                           
 12350                           ;I2C_Support.c: 46: I2C_Write((Device << 1) | 1);
 12351  003234  80D8               	bsf	status,0,c
 12352  003236  3415               	rlcf	DS3231_Read_Time@Device,w,c
 12353  003238  EC63  F01C         	call	_I2C_Write
 12354                           
 12355                           ;I2C_Support.c: 47: second = I2C_Read(1);
 12356  00323C  0E01               	movlw	1
 12357  00323E  ECDF  F01B         	call	_I2C_Read
 12358  003242  6E62               	movwf	_second,c
 12359                           
 12360                           ;I2C_Support.c: 48: minute = I2C_Read(1);
 12361  003244  0E01               	movlw	1
 12362  003246  ECDF  F01B         	call	_I2C_Read
 12363  00324A  6E60               	movwf	_minute,c
 12364                           
 12365                           ;I2C_Support.c: 49: hour = I2C_Read(1);
 12366  00324C  0E01               	movlw	1
 12367  00324E  ECDF  F01B         	call	_I2C_Read
 12368  003252  6E5F               	movwf	_hour,c
 12369                           
 12370                           ;I2C_Support.c: 50: dow = I2C_Read(1);
 12371  003254  0E01               	movlw	1
 12372  003256  ECDF  F01B         	call	_I2C_Read
 12373  00325A  0100               	movlb	0	; () banked
 12374  00325C  6FFC               	movwf	_dow& (0+255),b
 12375                           
 12376                           ; BSR set to: 0
 12377                           ;I2C_Support.c: 51: day = I2C_Read(1);
 12378  00325E  0E01               	movlw	1
 12379  003260  ECDF  F01B         	call	_I2C_Read
 12380  003264  6E5C               	movwf	_day,c
 12381                           
 12382                           ;I2C_Support.c: 52: month = I2C_Read(1);
 12383  003266  0E01               	movlw	1
 12384  003268  ECDF  F01B         	call	_I2C_Read
 12385  00326C  6E61               	movwf	_month,c
 12386                           
 12387                           ;I2C_Support.c: 53: year = I2C_Read(0);
 12388  00326E  0E00               	movlw	0
 12389  003270  ECDF  F01B         	call	_I2C_Read
 12390  003274  6E6D               	movwf	_year,c
 12391                           
 12392                           ;I2C_Support.c: 54: I2C_Stop();
 12393  003276  ECBC  F01E         	call	_I2C_Stop	;wreg free
 12394  00327A  0012               	return		;funcret
 12395  00327C                     __end_of_DS3231_Read_Time:
 12396                           	opt stack 0
 12397                           tblptru	equ	0xFF8
 12398                           tblptrh	equ	0xFF7
 12399                           tblptrl	equ	0xFF6
 12400                           tablat	equ	0xFF5
 12401                           prodh	equ	0xFF4
 12402                           prodl	equ	0xFF3
 12403                           intcon	equ	0xFF2
 12404                           intcon2	equ	0xFF1
 12405                           postinc0	equ	0xFEE
 12406                           wreg	equ	0xFE8
 12407                           postdec1	equ	0xFE5
 12408                           fsr1l	equ	0xFE1
 12409                           indf2	equ	0xFDF
 12410                           postinc2	equ	0xFDE
 12411                           fsr2h	equ	0xFDA
 12412                           fsr2l	equ	0xFD9
 12413                           status	equ	0xFD8
 12414                           
 12415 ;; *************** function _DS3231_Read_Alarm_Time *****************
 12416 ;; Defined at:
 12417 ;;		line 128 in file "I2C_Support.c"
 12418 ;; Parameters:    Size  Location     Type
 12419 ;;		None
 12420 ;; Auto vars:     Size  Location     Type
 12421 ;;  Device          1   20[COMRAM] unsigned char 
 12422 ;;  Address         1   19[COMRAM] unsigned char 
 12423 ;; Return value:  Size  Location     Type
 12424 ;;		None               void
 12425 ;; Registers used:
 12426 ;;		wreg, status,2, status,0, cstack
 12427 ;; Tracked objects:
 12428 ;;		On entry : 0/0
 12429 ;;		On exit  : 0/0
 12430 ;;		Unchanged: 0/0
 12431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12433 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12435 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12436 ;;Total ram usage:        2 bytes
 12437 ;; Hardware stack levels used:    1
 12438 ;; Hardware stack levels required when called:    6
 12439 ;; This function calls:
 12440 ;;		_I2C_ReStart
 12441 ;;		_I2C_Read
 12442 ;;		_I2C_Start
 12443 ;;		_I2C_Stop
 12444 ;;		_I2C_Write
 12445 ;; This function is called by:
 12446 ;;		_Do_Setup_Alarm_Time
 12447 ;;		_Do_Save_New_Alarm_Time
 12448 ;;		_main
 12449 ;; This function uses a non-reentrant model
 12450 ;;
 12451                           
 12452                           	psect	text61
 12453  003694                     __ptext61:
 12454                           	opt stack 0
 12455  003694                     _DS3231_Read_Alarm_Time:
 12456                           	opt stack 22
 12457                           
 12458                           ;I2C_Support.c: 129: char Device = 0x68;
 12459                           
 12460                           ;incstack = 0
 12461  003694  0E68               	movlw	104
 12462  003696  6E15               	movwf	DS3231_Read_Alarm_Time@Device,c
 12463                           
 12464                           ;I2C_Support.c: 130: char Address = 0x07;
 12465  003698  0E07               	movlw	7
 12466  00369A  6E14               	movwf	DS3231_Read_Alarm_Time@Address,c
 12467                           
 12468                           ;I2C_Support.c: 131: I2C_Start();
 12469  00369C  ECC5  F01E         	call	_I2C_Start	;wreg free
 12470                           
 12471                           ;I2C_Support.c: 132: I2C_Write((Device << 1) | 0);
 12472  0036A0  5015               	movf	DS3231_Read_Alarm_Time@Device,w,c
 12473  0036A2  2415               	addwf	DS3231_Read_Alarm_Time@Device,w,c
 12474  0036A4  EC63  F01C         	call	_I2C_Write
 12475                           
 12476                           ;I2C_Support.c: 133: I2C_Write(Address);
 12477  0036A8  5014               	movf	DS3231_Read_Alarm_Time@Address,w,c
 12478  0036AA  EC63  F01C         	call	_I2C_Write
 12479                           
 12480                           ;I2C_Support.c: 134: I2C_ReStart();
 12481  0036AE  EC3D  F01E         	call	_I2C_ReStart	;wreg free
 12482                           
 12483                           ;I2C_Support.c: 135: I2C_Write((Device << 1) | 1);
 12484  0036B2  80D8               	bsf	status,0,c
 12485  0036B4  3415               	rlcf	DS3231_Read_Alarm_Time@Device,w,c
 12486  0036B6  EC63  F01C         	call	_I2C_Write
 12487                           
 12488                           ;I2C_Support.c: 136: alarm_second = I2C_Read(1);
 12489  0036BA  0E01               	movlw	1
 12490  0036BC  ECDF  F01B         	call	_I2C_Read
 12491  0036C0  6E5B               	movwf	_alarm_second,c
 12492                           
 12493                           ;I2C_Support.c: 137: alarm_minute = I2C_Read(1);
 12494  0036C2  0E01               	movlw	1
 12495  0036C4  ECDF  F01B         	call	_I2C_Read
 12496  0036C8  6E5A               	movwf	_alarm_minute,c
 12497                           
 12498                           ;I2C_Support.c: 138: alarm_hour = I2C_Read(1);
 12499  0036CA  0E01               	movlw	1
 12500  0036CC  ECDF  F01B         	call	_I2C_Read
 12501  0036D0  6E59               	movwf	_alarm_hour,c
 12502                           
 12503                           ;I2C_Support.c: 139: alarm_date = I2C_Read(0);
 12504  0036D2  0E00               	movlw	0
 12505  0036D4  ECDF  F01B         	call	_I2C_Read
 12506  0036D8  6E58               	movwf	_alarm_date,c
 12507                           
 12508                           ;I2C_Support.c: 140: I2C_Stop();
 12509  0036DA  ECBC  F01E         	call	_I2C_Stop	;wreg free
 12510  0036DE  0012               	return		;funcret
 12511  0036E0                     __end_of_DS3231_Read_Alarm_Time:
 12512                           	opt stack 0
 12513                           tblptru	equ	0xFF8
 12514                           tblptrh	equ	0xFF7
 12515                           tblptrl	equ	0xFF6
 12516                           tablat	equ	0xFF5
 12517                           prodh	equ	0xFF4
 12518                           prodl	equ	0xFF3
 12519                           intcon	equ	0xFF2
 12520                           intcon2	equ	0xFF1
 12521                           postinc0	equ	0xFEE
 12522                           wreg	equ	0xFE8
 12523                           postdec1	equ	0xFE5
 12524                           fsr1l	equ	0xFE1
 12525                           indf2	equ	0xFDF
 12526                           postinc2	equ	0xFDE
 12527                           fsr2h	equ	0xFDA
 12528                           fsr2l	equ	0xFD9
 12529                           status	equ	0xFD8
 12530                           
 12531 ;; *************** function _Do_Beep_Good *****************
 12532 ;; Defined at:
 12533 ;;		line 35 in file "utils.c"
 12534 ;; Parameters:    Size  Location     Type
 12535 ;;		None
 12536 ;; Auto vars:     Size  Location     Type
 12537 ;;		None
 12538 ;; Return value:  Size  Location     Type
 12539 ;;		None               void
 12540 ;; Registers used:
 12541 ;;		wreg, status,2, status,0, cstack
 12542 ;; Tracked objects:
 12543 ;;		On entry : 0/0
 12544 ;;		On exit  : 0/0
 12545 ;;		Unchanged: 0/0
 12546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12551 ;;Total ram usage:        0 bytes
 12552 ;; Hardware stack levels used:    1
 12553 ;; Hardware stack levels required when called:    6
 12554 ;; This function calls:
 12555 ;;		_Activate_Buzzer_2KHz
 12556 ;;		_Deactivate_Buzzer
 12557 ;;		_Wait_One_Sec
 12558 ;;		_do_update_pwm
 12559 ;; This function is called by:
 12560 ;;		_Do_Setup_Time
 12561 ;;		_Setup_Temp_Fan
 12562 ;;		_Do_Setup_Alarm_Time
 12563 ;;		_main
 12564 ;; This function uses a non-reentrant model
 12565 ;;
 12566                           
 12567                           	psect	text62
 12568  003C4A                     __ptext62:
 12569                           	opt stack 0
 12570  003C4A                     _Do_Beep_Good:
 12571                           	opt stack 23
 12572                           
 12573                           ;utils.c: 36: Activate_Buzzer_2KHz();
 12574                           
 12575                           ;incstack = 0
 12576  003C4A  ECAA  F01E         	call	_Activate_Buzzer_2KHz	;wreg free
 12577                           
 12578                           ;utils.c: 37: Wait_One_Sec();
 12579  003C4E  EC9F  F01D         	call	_Wait_One_Sec	;wreg free
 12580                           
 12581                           ;utils.c: 38: Deactivate_Buzzer();
 12582  003C52  EC48  F01F         	call	_Deactivate_Buzzer	;wreg free
 12583                           
 12584                           ;utils.c: 39: Wait_One_Sec();
 12585  003C56  EC9F  F01D         	call	_Wait_One_Sec	;wreg free
 12586                           
 12587                           ;utils.c: 40: do_update_pwm(duty_cycle);
 12588  003C5A  505D               	movf	_duty_cycle,w,c
 12589  003C5C  EC12  F014         	call	_do_update_pwm
 12590  003C60  0012               	return		;funcret
 12591  003C62                     __end_of_Do_Beep_Good:
 12592                           	opt stack 0
 12593                           tblptru	equ	0xFF8
 12594                           tblptrh	equ	0xFF7
 12595                           tblptrl	equ	0xFF6
 12596                           tablat	equ	0xFF5
 12597                           prodh	equ	0xFF4
 12598                           prodl	equ	0xFF3
 12599                           intcon	equ	0xFF2
 12600                           intcon2	equ	0xFF1
 12601                           postinc0	equ	0xFEE
 12602                           wreg	equ	0xFE8
 12603                           postdec1	equ	0xFE5
 12604                           fsr1l	equ	0xFE1
 12605                           indf2	equ	0xFDF
 12606                           postinc2	equ	0xFDE
 12607                           fsr2h	equ	0xFDA
 12608                           fsr2l	equ	0xFD9
 12609                           status	equ	0xFD8
 12610                           
 12611 ;; *************** function _Activate_Buzzer_2KHz *****************
 12612 ;; Defined at:
 12613 ;;		line 69 in file "utils.c"
 12614 ;; Parameters:    Size  Location     Type
 12615 ;;		None
 12616 ;; Auto vars:     Size  Location     Type
 12617 ;;		None
 12618 ;; Return value:  Size  Location     Type
 12619 ;;		None               void
 12620 ;; Registers used:
 12621 ;;		wreg, status,2
 12622 ;; Tracked objects:
 12623 ;;		On entry : 0/0
 12624 ;;		On exit  : 0/0
 12625 ;;		Unchanged: 0/0
 12626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12631 ;;Total ram usage:        0 bytes
 12632 ;; Hardware stack levels used:    1
 12633 ;; Hardware stack levels required when called:    3
 12634 ;; This function calls:
 12635 ;;		Nothing
 12636 ;; This function is called by:
 12637 ;;		_Do_Beep_Good
 12638 ;; This function uses a non-reentrant model
 12639 ;;
 12640                           
 12641                           	psect	text63
 12642  003D54                     __ptext63:
 12643                           	opt stack 0
 12644  003D54                     _Activate_Buzzer_2KHz:
 12645                           	opt stack 25
 12646                           
 12647                           ;utils.c: 70: PR2 = 0b11111001;
 12648                           
 12649                           ;incstack = 0
 12650  003D54  0EF9               	movlw	249
 12651  003D56  6ECB               	movwf	4043,c	;volatile
 12652                           
 12653                           ;utils.c: 71: T2CON = 0b00000101;
 12654  003D58  0E05               	movlw	5
 12655  003D5A  6ECA               	movwf	4042,c	;volatile
 12656                           
 12657                           ;utils.c: 72: CCPR2L = 0b01111100;
 12658  003D5C  0E7C               	movlw	124
 12659  003D5E  6EBB               	movwf	4027,c	;volatile
 12660                           
 12661                           ;utils.c: 73: CCP2CON = 0b00111100;
 12662  003D60  0E3C               	movlw	60
 12663  003D62  6EBA               	movwf	4026,c	;volatile
 12664  003D64  0012               	return		;funcret
 12665  003D66                     __end_of_Activate_Buzzer_2KHz:
 12666                           	opt stack 0
 12667                           tblptru	equ	0xFF8
 12668                           tblptrh	equ	0xFF7
 12669                           tblptrl	equ	0xFF6
 12670                           tablat	equ	0xFF5
 12671                           prodh	equ	0xFF4
 12672                           prodl	equ	0xFF3
 12673                           intcon	equ	0xFF2
 12674                           intcon2	equ	0xFF1
 12675                           postinc0	equ	0xFEE
 12676                           wreg	equ	0xFE8
 12677                           postdec1	equ	0xFE5
 12678                           fsr1l	equ	0xFE1
 12679                           indf2	equ	0xFDF
 12680                           postinc2	equ	0xFDE
 12681                           fsr2h	equ	0xFDA
 12682                           fsr2l	equ	0xFD9
 12683                           status	equ	0xFD8
 12684                           
 12685 ;; *************** function _Do_Beep_Bad *****************
 12686 ;; Defined at:
 12687 ;;		line 43 in file "utils.c"
 12688 ;; Parameters:    Size  Location     Type
 12689 ;;		None
 12690 ;; Auto vars:     Size  Location     Type
 12691 ;;		None
 12692 ;; Return value:  Size  Location     Type
 12693 ;;		None               void
 12694 ;; Registers used:
 12695 ;;		wreg, status,2, status,0, cstack
 12696 ;; Tracked objects:
 12697 ;;		On entry : 0/0
 12698 ;;		On exit  : 0/0
 12699 ;;		Unchanged: 0/0
 12700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12705 ;;Total ram usage:        0 bytes
 12706 ;; Hardware stack levels used:    1
 12707 ;; Hardware stack levels required when called:    6
 12708 ;; This function calls:
 12709 ;;		_Activate_Buzzer_500Hz
 12710 ;;		_Deactivate_Buzzer
 12711 ;;		_Wait_One_Sec
 12712 ;;		_do_update_pwm
 12713 ;; This function is called by:
 12714 ;;		_Do_Setup_Time
 12715 ;;		_Setup_Temp_Fan
 12716 ;;		_Do_Setup_Alarm_Time
 12717 ;;		_main
 12718 ;; This function uses a non-reentrant model
 12719 ;;
 12720                           
 12721                           	psect	text64
 12722  003C62                     __ptext64:
 12723                           	opt stack 0
 12724  003C62                     _Do_Beep_Bad:
 12725                           	opt stack 23
 12726                           
 12727                           ;utils.c: 44: Activate_Buzzer_500Hz();
 12728                           
 12729                           ;incstack = 0
 12730  003C62  ECB3  F01E         	call	_Activate_Buzzer_500Hz	;wreg free
 12731                           
 12732                           ;utils.c: 45: Wait_One_Sec();
 12733  003C66  EC9F  F01D         	call	_Wait_One_Sec	;wreg free
 12734                           
 12735                           ;utils.c: 46: Deactivate_Buzzer();
 12736  003C6A  EC48  F01F         	call	_Deactivate_Buzzer	;wreg free
 12737                           
 12738                           ;utils.c: 47: Wait_One_Sec();
 12739  003C6E  EC9F  F01D         	call	_Wait_One_Sec	;wreg free
 12740                           
 12741                           ;utils.c: 48: do_update_pwm(duty_cycle);
 12742  003C72  505D               	movf	_duty_cycle,w,c
 12743  003C74  EC12  F014         	call	_do_update_pwm
 12744  003C78  0012               	return		;funcret
 12745  003C7A                     __end_of_Do_Beep_Bad:
 12746                           	opt stack 0
 12747                           tblptru	equ	0xFF8
 12748                           tblptrh	equ	0xFF7
 12749                           tblptrl	equ	0xFF6
 12750                           tablat	equ	0xFF5
 12751                           prodh	equ	0xFF4
 12752                           prodl	equ	0xFF3
 12753                           intcon	equ	0xFF2
 12754                           intcon2	equ	0xFF1
 12755                           postinc0	equ	0xFEE
 12756                           wreg	equ	0xFE8
 12757                           postdec1	equ	0xFE5
 12758                           fsr1l	equ	0xFE1
 12759                           indf2	equ	0xFDF
 12760                           postinc2	equ	0xFDE
 12761                           fsr2h	equ	0xFDA
 12762                           fsr2l	equ	0xFD9
 12763                           status	equ	0xFD8
 12764                           
 12765 ;; *************** function _do_update_pwm *****************
 12766 ;; Defined at:
 12767 ;;		line 75 in file "Fan_Support.c"
 12768 ;; Parameters:    Size  Location     Type
 12769 ;;  duty_cycle      1    wreg     unsigned char 
 12770 ;; Auto vars:     Size  Location     Type
 12771 ;;  duty_cycle      1    9[BANK1 ] unsigned char 
 12772 ;;  dc_f            3    6[BANK1 ] float 
 12773 ;;  dc_I            2   10[BANK1 ] int 
 12774 ;; Return value:  Size  Location     Type
 12775 ;;		None               void
 12776 ;; Registers used:
 12777 ;;		wreg, status,2, status,0, cstack
 12778 ;; Tracked objects:
 12779 ;;		On entry : 0/0
 12780 ;;		On exit  : 0/0
 12781 ;;		Unchanged: 0/0
 12782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12784 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12785 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12786 ;;      Totals:         3       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12787 ;;Total ram usage:        9 bytes
 12788 ;; Hardware stack levels used:    1
 12789 ;; Hardware stack levels required when called:    5
 12790 ;; This function calls:
 12791 ;;		___ftdiv
 12792 ;;		___ftmul
 12793 ;;		___fttol
 12794 ;;		___lbtoft
 12795 ;; This function is called by:
 12796 ;;		_Turn_On_Fan
 12797 ;;		_Monitor_Fan
 12798 ;;		_Do_Beep_Good
 12799 ;;		_Do_Beep_Bad
 12800 ;;		_Increase_Speed
 12801 ;;		_Decrease_Speed
 12802 ;;		_Do_Beep
 12803 ;; This function uses a non-reentrant model
 12804 ;;
 12805                           
 12806                           	psect	text65
 12807  002824                     __ptext65:
 12808                           	opt stack 0
 12809  002824                     _do_update_pwm:
 12810                           	opt stack 22
 12811                           
 12812                           ;incstack = 0
 12813                           ;do_update_pwm@duty_cycle stored from wreg
 12814  002824  0101               	movlb	1	; () banked
 12815  002826  6F4D               	movwf	do_update_pwm@duty_cycle& (0+255),b
 12816                           
 12817                           ; BSR set to: 1
 12818                           ;Fan_Support.c: 76: float dc_f;
 12819                           ;Fan_Support.c: 77: int dc_I;
 12820                           ;Fan_Support.c: 78: PR2 = 0b00000100;
 12821  002828  0E04               	movlw	4
 12822  00282A  6ECB               	movwf	4043,c	;volatile
 12823                           
 12824                           ;Fan_Support.c: 79: T2CON = 0b00000111;
 12825  00282C  0E07               	movlw	7
 12826  00282E  6ECA               	movwf	4042,c	;volatile
 12827                           
 12828                           ; BSR set to: 1
 12829                           ;Fan_Support.c: 80: dc_f = (4.0 * duty_cycle / 20.0);
 12830  002830  0E00               	movlw	0
 12831  002832  6E20               	movwf	___ftmul@f2,c
 12832  002834  0E80               	movlw	128
 12833  002836  6E21               	movwf	___ftmul@f2+1,c
 12834  002838  0E40               	movlw	64
 12835  00283A  6E22               	movwf	___ftmul@f2+2,c
 12836  00283C  0101               	movlb	1	; () banked
 12837  00283E  514D               	movf	do_update_pwm@duty_cycle& (0+255),w,b
 12838  002840  EC59  F01D         	call	___lbtoft
 12839  002844  C019  F01D         	movff	?___lbtoft,___ftmul@f1
 12840  002848  C01A  F01E         	movff	?___lbtoft+1,___ftmul@f1+1
 12841  00284C  C01B  F01F         	movff	?___lbtoft+2,___ftmul@f1+2
 12842  002850  EC1E  F010         	call	___ftmul	;wreg free
 12843  002854  C01D  F02C         	movff	?___ftmul,___ftdiv@f1
 12844  002858  C01E  F02D         	movff	?___ftmul+1,___ftdiv@f1+1
 12845  00285C  C01F  F02E         	movff	?___ftmul+2,___ftdiv@f1+2
 12846  002860  0E00               	movlw	0
 12847  002862  6E2F               	movwf	___ftdiv@f2,c
 12848  002864  0EA0               	movlw	160
 12849  002866  6E30               	movwf	___ftdiv@f2+1,c
 12850  002868  0E41               	movlw	65
 12851  00286A  6E31               	movwf	___ftdiv@f2+2,c
 12852  00286C  EC88  F011         	call	___ftdiv	;wreg free
 12853  002870  C02C  F14A         	movff	?___ftdiv,do_update_pwm@dc_f
 12854  002874  C02D  F14B         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
 12855  002878  C02E  F14C         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
 12856                           
 12857                           ;Fan_Support.c: 81: dc_I = (int) dc_f;
 12858  00287C  C14A  F03B         	movff	do_update_pwm@dc_f,___fttol@f1
 12859  002880  C14B  F03C         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
 12860  002884  C14C  F03D         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
 12861  002888  EC8A  F00E         	call	___fttol	;wreg free
 12862  00288C  C03B  F14E         	movff	?___fttol,do_update_pwm@dc_I
 12863  002890  C03C  F14F         	movff	?___fttol+1,do_update_pwm@dc_I+1
 12864                           
 12865                           ;Fan_Support.c: 82: if (dc_I > duty_cycle) dc_I++;
 12866  002894  0101               	movlb	1	; () banked
 12867  002896  514D               	movf	do_update_pwm@duty_cycle& (0+255),w,b
 12868  002898  6E44               	movwf	??_do_update_pwm& (0+255),c
 12869  00289A  6A45               	clrf	(??_do_update_pwm+1)& (0+255),c
 12870  00289C  0101               	movlb	1	; () banked
 12871  00289E  514E               	movf	do_update_pwm@dc_I& (0+255),w,b
 12872  0028A0  5C44               	subwf	??_do_update_pwm,w,c
 12873  0028A2  5045               	movf	??_do_update_pwm+1,w,c
 12874  0028A4  0A80               	xorlw	128
 12875  0028A6  6E46               	movwf	(??_do_update_pwm+2)& (0+255),c
 12876  0028A8  0101               	movlb	1	; () banked
 12877  0028AA  514F               	movf	(do_update_pwm@dc_I+1)& (0+255),w,b
 12878  0028AC  0A80               	xorlw	128
 12879  0028AE  5846               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
 12880  0028B0  B0D8               	btfsc	status,0,c
 12881  0028B2  D004               	goto	l9010
 12882                           
 12883                           ; BSR set to: 1
 12884  0028B4  0101               	movlb	1	; () banked
 12885  0028B6  4B4E               	infsnz	do_update_pwm@dc_I& (0+255),f,b
 12886  0028B8  2B4F               	incf	(do_update_pwm@dc_I+1)& (0+255),f,b
 12887  0028BA  D000               	goto	l9010
 12888  0028BC                     l9010:
 12889                           
 12890                           ; BSR set to: 1
 12891                           ;Fan_Support.c: 83: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
 12892  0028BC  C14E  F044         	movff	do_update_pwm@dc_I,??_do_update_pwm
 12893  0028C0  0E03               	movlw	3
 12894  0028C2  1644               	andwf	??_do_update_pwm,f,c
 12895  0028C4  3844               	swapf	??_do_update_pwm,w,c
 12896  0028C6  0BF0               	andlw	240
 12897  0028C8  090C               	iorlw	12
 12898  0028CA  6EBD               	movwf	4029,c	;volatile
 12899                           
 12900                           ; BSR set to: 1
 12901                           ;Fan_Support.c: 84: CCPR1L = (dc_I) >> 2;
 12902  0028CC  C14E  F044         	movff	do_update_pwm@dc_I,??_do_update_pwm
 12903  0028D0  C14F  F045         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
 12904  0028D4  3445               	rlcf	??_do_update_pwm+1,w,c
 12905  0028D6  3245               	rrcf	??_do_update_pwm+1,f,c
 12906  0028D8  3244               	rrcf	??_do_update_pwm,f,c
 12907  0028DA  3445               	rlcf	??_do_update_pwm+1,w,c
 12908  0028DC  3245               	rrcf	??_do_update_pwm+1,f,c
 12909  0028DE  3244               	rrcf	??_do_update_pwm,f,c
 12910  0028E0  5044               	movf	??_do_update_pwm,w,c
 12911  0028E2  6EBE               	movwf	4030,c	;volatile
 12912                           
 12913                           ; BSR set to: 1
 12914  0028E4  0012               	return		;funcret
 12915  0028E6                     __end_of_do_update_pwm:
 12916                           	opt stack 0
 12917                           tblptru	equ	0xFF8
 12918                           tblptrh	equ	0xFF7
 12919                           tblptrl	equ	0xFF6
 12920                           tablat	equ	0xFF5
 12921                           prodh	equ	0xFF4
 12922                           prodl	equ	0xFF3
 12923                           intcon	equ	0xFF2
 12924                           intcon2	equ	0xFF1
 12925                           postinc0	equ	0xFEE
 12926                           wreg	equ	0xFE8
 12927                           postdec1	equ	0xFE5
 12928                           fsr1l	equ	0xFE1
 12929                           indf2	equ	0xFDF
 12930                           postinc2	equ	0xFDE
 12931                           fsr2h	equ	0xFDA
 12932                           fsr2l	equ	0xFD9
 12933                           status	equ	0xFD8
 12934                           
 12935 ;; *************** function ___lbtoft *****************
 12936 ;; Defined at:
 12937 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
 12938 ;; Parameters:    Size  Location     Type
 12939 ;;  c               1    wreg     unsigned char 
 12940 ;; Auto vars:     Size  Location     Type
 12941 ;;  c               1   27[COMRAM] unsigned char 
 12942 ;; Return value:  Size  Location     Type
 12943 ;;                  3   24[COMRAM] float 
 12944 ;; Registers used:
 12945 ;;		wreg, status,2, status,0, cstack
 12946 ;; Tracked objects:
 12947 ;;		On entry : 0/0
 12948 ;;		On exit  : 0/0
 12949 ;;		Unchanged: 0/0
 12950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12951 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12952 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12954 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12955 ;;Total ram usage:        4 bytes
 12956 ;; Hardware stack levels used:    1
 12957 ;; Hardware stack levels required when called:    4
 12958 ;; This function calls:
 12959 ;;		___ftpack
 12960 ;; This function is called by:
 12961 ;;		_get_RPM
 12962 ;;		_do_update_pwm
 12963 ;; This function uses a non-reentrant model
 12964 ;;
 12965                           
 12966                           	psect	text66
 12967  003AB2                     __ptext66:
 12968                           	opt stack 0
 12969  003AB2                     ___lbtoft:
 12970                           	opt stack 25
 12971                           
 12972                           ; BSR set to: 1
 12973                           ;incstack = 0
 12974                           ;___lbtoft@c stored from wreg
 12975  003AB2  6E1C               	movwf	___lbtoft@c,c
 12976  003AB4  501C               	movf	___lbtoft@c,w,c
 12977  003AB6  6E11               	movwf	___ftpack@arg,c
 12978  003AB8  6A12               	clrf	___ftpack@arg+1,c
 12979  003ABA  6A13               	clrf	___ftpack@arg+2,c
 12980  003ABC  0E8E               	movlw	142
 12981  003ABE  6E14               	movwf	___ftpack@exp,c
 12982  003AC0  0E00               	movlw	0
 12983  003AC2  6E15               	movwf	___ftpack@sign,c
 12984  003AC4  ECAF  F013         	call	___ftpack	;wreg free
 12985  003AC8  C011  F019         	movff	?___ftpack,?___lbtoft
 12986  003ACC  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
 12987  003AD0  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
 12988  003AD4  D000               	goto	l2005
 12989  003AD6                     l2005:
 12990  003AD6  0012               	return		;funcret
 12991  003AD8                     __end_of___lbtoft:
 12992                           	opt stack 0
 12993                           tblptru	equ	0xFF8
 12994                           tblptrh	equ	0xFF7
 12995                           tblptrl	equ	0xFF6
 12996                           tablat	equ	0xFF5
 12997                           prodh	equ	0xFF4
 12998                           prodl	equ	0xFF3
 12999                           intcon	equ	0xFF2
 13000                           intcon2	equ	0xFF1
 13001                           postinc0	equ	0xFEE
 13002                           wreg	equ	0xFE8
 13003                           postdec1	equ	0xFE5
 13004                           fsr1l	equ	0xFE1
 13005                           indf2	equ	0xFDF
 13006                           postinc2	equ	0xFDE
 13007                           fsr2h	equ	0xFDA
 13008                           fsr2l	equ	0xFD9
 13009                           status	equ	0xFD8
 13010                           
 13011 ;; *************** function ___fttol *****************
 13012 ;; Defined at:
 13013 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
 13014 ;; Parameters:    Size  Location     Type
 13015 ;;  f1              3   58[COMRAM] float 
 13016 ;; Auto vars:     Size  Location     Type
 13017 ;;  lval            4    1[BANK1 ] unsigned long 
 13018 ;;  exp1            1    5[BANK1 ] unsigned char 
 13019 ;;  sign1           1    0[BANK1 ] unsigned char 
 13020 ;; Return value:  Size  Location     Type
 13021 ;;                  4   58[COMRAM] long 
 13022 ;; Registers used:
 13023 ;;		wreg, status,2, status,0
 13024 ;; Tracked objects:
 13025 ;;		On entry : 0/0
 13026 ;;		On exit  : 0/0
 13027 ;;		Unchanged: 0/0
 13028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13029 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13030 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13031 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13032 ;;      Totals:         9       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13033 ;;Total ram usage:       15 bytes
 13034 ;; Hardware stack levels used:    1
 13035 ;; Hardware stack levels required when called:    3
 13036 ;; This function calls:
 13037 ;;		Nothing
 13038 ;; This function is called by:
 13039 ;;		_do_update_pwm
 13040 ;;		_get_duty_cycle
 13041 ;;		_Update_Screen
 13042 ;;		_main
 13043 ;; This function uses a non-reentrant model
 13044 ;;
 13045                           
 13046                           	psect	text67
 13047  001D14                     __ptext67:
 13048                           	opt stack 0
 13049  001D14                     ___fttol:
 13050                           	opt stack 27
 13051                           
 13052                           ;incstack = 0
 13053  001D14  C03D  F03F         	movff	___fttol@f1+2,??___fttol
 13054  001D18  6A40               	clrf	(??___fttol+1)& (0+255),c
 13055  001D1A  6A41               	clrf	(??___fttol+2)& (0+255),c
 13056  001D1C  343C               	rlcf	___fttol@f1+1,w,c
 13057  001D1E  363F               	rlcf	??___fttol& (0+255),f,c
 13058  001D20  E301               	bnc	u6241
 13059  001D22  8040               	bsf	(??___fttol+1)& (0+255),0,c
 13060  001D24                     u6241:
 13061  001D24  503F               	movf	??___fttol,w,c
 13062  001D26  0101               	movlb	1	; () banked
 13063  001D28  6F49               	movwf	___fttol@exp1& (0+255),b
 13064  001D2A  0101               	movlb	1	; () banked
 13065  001D2C  5149               	movf	___fttol@exp1& (0+255),w,b
 13066  001D2E  A4D8               	btfss	status,2,c
 13067  001D30  D002               	goto	l8810
 13068  001D32  D044               	goto	l8834
 13069                           
 13070                           ; BSR set to: 1
 13071                           
 13072                           ; BSR set to: 1
 13073  001D34  D075               	goto	l1964
 13074  001D36                     l8810:
 13075                           
 13076                           ; BSR set to: 1
 13077  001D36  0E17               	movlw	23
 13078  001D38  6E3F               	movwf	??___fttol& (0+255),c
 13079  001D3A  C03B  F040         	movff	___fttol@f1,??___fttol+1
 13080  001D3E  C03C  F041         	movff	___fttol@f1+1,??___fttol+2
 13081  001D42  C03D  F042         	movff	___fttol@f1+2,??___fttol+3
 13082  001D46  283F               	incf	??___fttol,w,c
 13083  001D48  6E43               	movwf	(??___fttol+4)& (0+255),c
 13084  001D4A  D004               	goto	u6260
 13085  001D4C                     u6265:
 13086  001D4C  90D8               	bcf	status,0,c
 13087  001D4E  3242               	rrcf	??___fttol+3,f,c
 13088  001D50  3241               	rrcf	??___fttol+2,f,c
 13089  001D52  3240               	rrcf	??___fttol+1,f,c
 13090  001D54                     u6260:
 13091  001D54  2E43               	decfsz	(??___fttol+4)& (0+255),f,c
 13092  001D56  D7FA               	goto	u6265
 13093  001D58  5040               	movf	??___fttol+1,w,c
 13094  001D5A  0101               	movlb	1	; () banked
 13095  001D5C  6F44               	movwf	___fttol@sign1& (0+255),b
 13096                           
 13097                           ; BSR set to: 1
 13098  001D5E  8E3C               	bsf	___fttol@f1+1,7,c
 13099                           
 13100                           ; BSR set to: 1
 13101  001D60  0EFF               	movlw	255
 13102  001D62  163B               	andwf	___fttol@f1,f,c
 13103  001D64  0EFF               	movlw	255
 13104  001D66  163C               	andwf	___fttol@f1+1,f,c
 13105  001D68  0E00               	movlw	0
 13106  001D6A  163D               	andwf	___fttol@f1+2,f,c
 13107                           
 13108                           ; BSR set to: 1
 13109  001D6C  503B               	movf	___fttol@f1,w,c
 13110  001D6E  0101               	movlb	1	; () banked
 13111  001D70  6F45               	movwf	___fttol@lval& (0+255),b
 13112  001D72  503C               	movf	___fttol@f1+1,w,c
 13113  001D74  0101               	movlb	1	; () banked
 13114  001D76  6F46               	movwf	(___fttol@lval+1)& (0+255),b
 13115  001D78  503D               	movf	___fttol@f1+2,w,c
 13116  001D7A  0101               	movlb	1	; () banked
 13117  001D7C  6F47               	movwf	(___fttol@lval+2)& (0+255),b
 13118  001D7E  0101               	movlb	1	; () banked
 13119  001D80  6B48               	clrf	(___fttol@lval+3)& (0+255),b
 13120                           
 13121                           ; BSR set to: 1
 13122  001D82  0E8E               	movlw	142
 13123  001D84  0101               	movlb	1	; () banked
 13124  001D86  5F49               	subwf	___fttol@exp1& (0+255),f,b
 13125                           
 13126                           ; BSR set to: 1
 13127  001D88  0101               	movlb	1	; () banked
 13128  001D8A  AF49               	btfss	___fttol@exp1& (0+255),7,b
 13129  001D8C  D013               	goto	l8832
 13130                           
 13131                           ; BSR set to: 1
 13132  001D8E  0101               	movlb	1	; () banked
 13133  001D90  5149               	movf	___fttol@exp1& (0+255),w,b
 13134  001D92  0A80               	xorlw	128
 13135  001D94  0F8F               	addlw	143
 13136  001D96  B0D8               	btfsc	status,0,c
 13137  001D98  D003               	goto	l8828
 13138  001D9A  D010               	goto	l8834
 13139                           
 13140                           ; BSR set to: 1
 13141                           
 13142                           ; BSR set to: 1
 13143  001D9C  D041               	goto	l1964
 13144                           
 13145                           ; BSR set to: 1
 13146  001D9E  D000               	goto	l8828
 13147  001DA0                     l8828:
 13148                           
 13149                           ; BSR set to: 1
 13150  001DA0  0101               	movlb	1	; () banked
 13151  001DA2  90D8               	bcf	status,0,c
 13152  001DA4  3348               	rrcf	(___fttol@lval+3)& (0+255),f,b
 13153  001DA6  3347               	rrcf	(___fttol@lval+2)& (0+255),f,b
 13154  001DA8  3346               	rrcf	(___fttol@lval+1)& (0+255),f,b
 13155  001DAA  3345               	rrcf	___fttol@lval& (0+255),f,b
 13156                           
 13157                           ; BSR set to: 1
 13158  001DAC  0101               	movlb	1	; () banked
 13159  001DAE  3F49               	incfsz	___fttol@exp1& (0+255),f,b
 13160  001DB0  D7F7               	goto	l8828
 13161                           
 13162                           ; BSR set to: 1
 13163  001DB2  D01E               	goto	l8842
 13164  001DB4                     l8832:
 13165                           
 13166                           ; BSR set to: 1
 13167  001DB4  0E17               	movlw	23
 13168  001DB6  0101               	movlb	1	; () banked
 13169  001DB8  6549               	cpfsgt	___fttol@exp1& (0+255),b
 13170  001DBA  D013               	goto	l8840
 13171  001DBC                     l8834:
 13172                           
 13173                           ; BSR set to: 1
 13174  001DBC  0E00               	movlw	0
 13175  001DBE  6E3B               	movwf	?___fttol,c
 13176  001DC0  0E00               	movlw	0
 13177  001DC2  6E3C               	movwf	?___fttol+1,c
 13178  001DC4  0E00               	movlw	0
 13179  001DC6  6E3D               	movwf	?___fttol+2,c
 13180  001DC8  0E00               	movlw	0
 13181  001DCA  6E3E               	movwf	?___fttol+3,c
 13182                           
 13183                           ; BSR set to: 1
 13184  001DCC  D029               	goto	l1964
 13185                           
 13186                           ; BSR set to: 1
 13187  001DCE  D009               	goto	l8840
 13188  001DD0                     l8838:
 13189                           
 13190                           ; BSR set to: 1
 13191  001DD0  0101               	movlb	1	; () banked
 13192  001DD2  90D8               	bcf	status,0,c
 13193  001DD4  3745               	rlcf	___fttol@lval& (0+255),f,b
 13194  001DD6  3746               	rlcf	(___fttol@lval+1)& (0+255),f,b
 13195  001DD8  3747               	rlcf	(___fttol@lval+2)& (0+255),f,b
 13196  001DDA  3748               	rlcf	(___fttol@lval+3)& (0+255),f,b
 13197  001DDC  0101               	movlb	1	; () banked
 13198  001DDE  0749               	decf	___fttol@exp1& (0+255),f,b
 13199  001DE0  D000               	goto	l8840
 13200  001DE2                     l8840:
 13201                           
 13202                           ; BSR set to: 1
 13203  001DE2  0101               	movlb	1	; () banked
 13204  001DE4  5149               	movf	___fttol@exp1& (0+255),w,b
 13205  001DE6  0101               	movlb	1	; () banked
 13206  001DE8  B4D8               	btfsc	status,2,c
 13207  001DEA  D002               	goto	l8842
 13208  001DEC  D7F1               	goto	l8838
 13209                           
 13210                           ; BSR set to: 1
 13211  001DEE  D000               	goto	l8842
 13212  001DF0                     l8842:
 13213                           
 13214                           ; BSR set to: 1
 13215  001DF0  0101               	movlb	1	; () banked
 13216  001DF2  5144               	movf	___fttol@sign1& (0+255),w,b
 13217  001DF4  0101               	movlb	1	; () banked
 13218  001DF6  B4D8               	btfsc	status,2,c
 13219  001DF8  D00A               	goto	l8846
 13220                           
 13221                           ; BSR set to: 1
 13222  001DFA  0101               	movlb	1	; () banked
 13223  001DFC  1F48               	comf	(___fttol@lval+3)& (0+255),f,b
 13224  001DFE  1F47               	comf	(___fttol@lval+2)& (0+255),f,b
 13225  001E00  1F46               	comf	(___fttol@lval+1)& (0+255),f,b
 13226  001E02  6D45               	negf	___fttol@lval& (0+255),b
 13227  001E04  0E00               	movlw	0
 13228  001E06  2346               	addwfc	(___fttol@lval+1)& (0+255),f,b
 13229  001E08  2347               	addwfc	(___fttol@lval+2)& (0+255),f,b
 13230  001E0A  2348               	addwfc	(___fttol@lval+3)& (0+255),f,b
 13231  001E0C  D000               	goto	l8846
 13232  001E0E                     l8846:
 13233                           
 13234                           ; BSR set to: 1
 13235  001E0E  C145  F03B         	movff	___fttol@lval,?___fttol
 13236  001E12  C146  F03C         	movff	___fttol@lval+1,?___fttol+1
 13237  001E16  C147  F03D         	movff	___fttol@lval+2,?___fttol+2
 13238  001E1A  C148  F03E         	movff	___fttol@lval+3,?___fttol+3
 13239  001E1E  D000               	goto	l1964
 13240  001E20                     l1964:
 13241                           
 13242                           ; BSR set to: 1
 13243  001E20  0012               	return		;funcret
 13244  001E22                     __end_of___fttol:
 13245                           	opt stack 0
 13246                           tblptru	equ	0xFF8
 13247                           tblptrh	equ	0xFF7
 13248                           tblptrl	equ	0xFF6
 13249                           tablat	equ	0xFF5
 13250                           prodh	equ	0xFF4
 13251                           prodl	equ	0xFF3
 13252                           intcon	equ	0xFF2
 13253                           intcon2	equ	0xFF1
 13254                           postinc0	equ	0xFEE
 13255                           wreg	equ	0xFE8
 13256                           postdec1	equ	0xFE5
 13257                           fsr1l	equ	0xFE1
 13258                           indf2	equ	0xFDF
 13259                           postinc2	equ	0xFDE
 13260                           fsr2h	equ	0xFDA
 13261                           fsr2l	equ	0xFD9
 13262                           status	equ	0xFD8
 13263                           
 13264 ;; *************** function ___ftmul *****************
 13265 ;; Defined at:
 13266 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 13267 ;; Parameters:    Size  Location     Type
 13268 ;;  f1              3   28[COMRAM] float 
 13269 ;;  f2              3   31[COMRAM] float 
 13270 ;; Auto vars:     Size  Location     Type
 13271 ;;  f3_as_produc    3   38[COMRAM] unsigned um
 13272 ;;  sign            1   42[COMRAM] unsigned char 
 13273 ;;  cntr            1   41[COMRAM] unsigned char 
 13274 ;;  exp             1   37[COMRAM] unsigned char 
 13275 ;; Return value:  Size  Location     Type
 13276 ;;                  3   28[COMRAM] float 
 13277 ;; Registers used:
 13278 ;;		wreg, status,2, status,0, cstack
 13279 ;; Tracked objects:
 13280 ;;		On entry : 0/0
 13281 ;;		On exit  : 0/0
 13282 ;;		Unchanged: 0/0
 13283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13284 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13285 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13286 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13287 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13288 ;;Total ram usage:       15 bytes
 13289 ;; Hardware stack levels used:    1
 13290 ;; Hardware stack levels required when called:    4
 13291 ;; This function calls:
 13292 ;;		___ftpack
 13293 ;; This function is called by:
 13294 ;;		_get_RPM
 13295 ;;		_do_update_pwm
 13296 ;;		_get_duty_cycle
 13297 ;;		_Update_Screen
 13298 ;; This function uses a non-reentrant model
 13299 ;;
 13300                           
 13301                           	psect	text68
 13302  00203C                     __ptext68:
 13303                           	opt stack 0
 13304  00203C                     ___ftmul:
 13305                           	opt stack 25
 13306                           
 13307                           ; BSR set to: 1
 13308                           ;incstack = 0
 13309  00203C  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
 13310  002040  6A24               	clrf	(??___ftmul+1)& (0+255),c
 13311  002042  6A25               	clrf	(??___ftmul+2)& (0+255),c
 13312  002044  341E               	rlcf	___ftmul@f1+1,w,c
 13313  002046  3623               	rlcf	??___ftmul& (0+255),f,c
 13314  002048  E301               	bnc	u6061
 13315  00204A  8024               	bsf	(??___ftmul+1)& (0+255),0,c
 13316  00204C                     u6061:
 13317  00204C  5023               	movf	??___ftmul,w,c
 13318  00204E  6E26               	movwf	___ftmul@exp,c
 13319  002050  5026               	movf	___ftmul@exp,w,c
 13320  002052  A4D8               	btfss	status,2,c
 13321  002054  D002               	goto	l8682
 13322  002056  D00E               	goto	l8684
 13323  002058  D06C               	goto	l1943
 13324  00205A                     l8682:
 13325  00205A  C022  F023         	movff	___ftmul@f2+2,??___ftmul
 13326  00205E  6A24               	clrf	(??___ftmul+1)& (0+255),c
 13327  002060  6A25               	clrf	(??___ftmul+2)& (0+255),c
 13328  002062  3421               	rlcf	___ftmul@f2+1,w,c
 13329  002064  3623               	rlcf	??___ftmul& (0+255),f,c
 13330  002066  E301               	bnc	u6081
 13331  002068  8024               	bsf	(??___ftmul+1)& (0+255),0,c
 13332  00206A                     u6081:
 13333  00206A  5023               	movf	??___ftmul,w,c
 13334  00206C  6E2B               	movwf	___ftmul@sign,c
 13335  00206E  502B               	movf	___ftmul@sign,w,c
 13336  002070  A4D8               	btfss	status,2,c
 13337  002072  D007               	goto	l8688
 13338  002074                     l8684:
 13339  002074  0E00               	movlw	0
 13340  002076  6E1D               	movwf	?___ftmul,c
 13341  002078  0E00               	movlw	0
 13342  00207A  6E1E               	movwf	?___ftmul+1,c
 13343  00207C  0E00               	movlw	0
 13344  00207E  6E1F               	movwf	?___ftmul+2,c
 13345  002080  D058               	goto	l1943
 13346  002082                     l8688:
 13347  002082  502B               	movf	___ftmul@sign,w,c
 13348  002084  0F7B               	addlw	123
 13349  002086  2626               	addwf	___ftmul@exp,f,c
 13350  002088  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
 13351  00208C  5022               	movf	___ftmul@f2+2,w,c
 13352  00208E  1A2B               	xorwf	___ftmul@sign,f,c
 13353  002090  0E80               	movlw	128
 13354  002092  162B               	andwf	___ftmul@sign,f,c
 13355  002094  8E1E               	bsf	___ftmul@f1+1,7,c
 13356  002096  8E21               	bsf	___ftmul@f2+1,7,c
 13357  002098  0EFF               	movlw	255
 13358  00209A  1620               	andwf	___ftmul@f2,f,c
 13359  00209C  0EFF               	movlw	255
 13360  00209E  1621               	andwf	___ftmul@f2+1,f,c
 13361  0020A0  0E00               	movlw	0
 13362  0020A2  1622               	andwf	___ftmul@f2+2,f,c
 13363  0020A4  0E00               	movlw	0
 13364  0020A6  6E27               	movwf	___ftmul@f3_as_product,c
 13365  0020A8  0E00               	movlw	0
 13366  0020AA  6E28               	movwf	___ftmul@f3_as_product+1,c
 13367  0020AC  0E00               	movlw	0
 13368  0020AE  6E29               	movwf	___ftmul@f3_as_product+2,c
 13369  0020B0  0E07               	movlw	7
 13370  0020B2  6E2A               	movwf	___ftmul@cntr,c
 13371  0020B4  D000               	goto	l8702
 13372  0020B6                     l8702:
 13373  0020B6  A01D               	btfss	___ftmul@f1,0,c
 13374  0020B8  D007               	goto	l8706
 13375  0020BA  5020               	movf	___ftmul@f2,w,c
 13376  0020BC  2627               	addwf	___ftmul@f3_as_product,f,c
 13377  0020BE  5021               	movf	___ftmul@f2+1,w,c
 13378  0020C0  2228               	addwfc	___ftmul@f3_as_product+1,f,c
 13379  0020C2  5022               	movf	___ftmul@f2+2,w,c
 13380  0020C4  2229               	addwfc	___ftmul@f3_as_product+2,f,c
 13381  0020C6  D000               	goto	l8706
 13382  0020C8                     l8706:
 13383  0020C8  90D8               	bcf	status,0,c
 13384  0020CA  321F               	rrcf	___ftmul@f1+2,f,c
 13385  0020CC  321E               	rrcf	___ftmul@f1+1,f,c
 13386  0020CE  321D               	rrcf	___ftmul@f1,f,c
 13387  0020D0  90D8               	bcf	status,0,c
 13388  0020D2  3620               	rlcf	___ftmul@f2,f,c
 13389  0020D4  3621               	rlcf	___ftmul@f2+1,f,c
 13390  0020D6  3622               	rlcf	___ftmul@f2+2,f,c
 13391  0020D8  2E2A               	decfsz	___ftmul@cntr,f,c
 13392  0020DA  D7ED               	goto	l8702
 13393  0020DC  D000               	goto	l8710
 13394  0020DE                     l8710:
 13395  0020DE  0E09               	movlw	9
 13396  0020E0  6E2A               	movwf	___ftmul@cntr,c
 13397  0020E2  D000               	goto	l8712
 13398  0020E4                     l8712:
 13399  0020E4  A01D               	btfss	___ftmul@f1,0,c
 13400  0020E6  D007               	goto	l8716
 13401  0020E8  5020               	movf	___ftmul@f2,w,c
 13402  0020EA  2627               	addwf	___ftmul@f3_as_product,f,c
 13403  0020EC  5021               	movf	___ftmul@f2+1,w,c
 13404  0020EE  2228               	addwfc	___ftmul@f3_as_product+1,f,c
 13405  0020F0  5022               	movf	___ftmul@f2+2,w,c
 13406  0020F2  2229               	addwfc	___ftmul@f3_as_product+2,f,c
 13407  0020F4  D000               	goto	l8716
 13408  0020F6                     l8716:
 13409  0020F6  90D8               	bcf	status,0,c
 13410  0020F8  321F               	rrcf	___ftmul@f1+2,f,c
 13411  0020FA  321E               	rrcf	___ftmul@f1+1,f,c
 13412  0020FC  321D               	rrcf	___ftmul@f1,f,c
 13413  0020FE  90D8               	bcf	status,0,c
 13414  002100  3229               	rrcf	___ftmul@f3_as_product+2,f,c
 13415  002102  3228               	rrcf	___ftmul@f3_as_product+1,f,c
 13416  002104  3227               	rrcf	___ftmul@f3_as_product,f,c
 13417  002106  2E2A               	decfsz	___ftmul@cntr,f,c
 13418  002108  D7ED               	goto	l8712
 13419  00210A  D000               	goto	l8720
 13420  00210C                     l8720:
 13421  00210C  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
 13422  002110  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 13423  002114  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 13424  002118  C026  F014         	movff	___ftmul@exp,___ftpack@exp
 13425  00211C  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
 13426  002120  ECAF  F013         	call	___ftpack	;wreg free
 13427  002124  C011  F01D         	movff	?___ftpack,?___ftmul
 13428  002128  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
 13429  00212C  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
 13430  002130  D000               	goto	l1943
 13431  002132                     l1943:
 13432  002132  0012               	return		;funcret
 13433  002134                     __end_of___ftmul:
 13434                           	opt stack 0
 13435                           tblptru	equ	0xFF8
 13436                           tblptrh	equ	0xFF7
 13437                           tblptrl	equ	0xFF6
 13438                           tablat	equ	0xFF5
 13439                           prodh	equ	0xFF4
 13440                           prodl	equ	0xFF3
 13441                           intcon	equ	0xFF2
 13442                           intcon2	equ	0xFF1
 13443                           postinc0	equ	0xFEE
 13444                           wreg	equ	0xFE8
 13445                           postdec1	equ	0xFE5
 13446                           fsr1l	equ	0xFE1
 13447                           indf2	equ	0xFDF
 13448                           postinc2	equ	0xFDE
 13449                           fsr2h	equ	0xFDA
 13450                           fsr2l	equ	0xFD9
 13451                           status	equ	0xFD8
 13452                           
 13453 ;; *************** function ___ftdiv *****************
 13454 ;; Defined at:
 13455 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 13456 ;; Parameters:    Size  Location     Type
 13457 ;;  f1              3   43[COMRAM] float 
 13458 ;;  f2              3   46[COMRAM] float 
 13459 ;; Auto vars:     Size  Location     Type
 13460 ;;  f3              3   53[COMRAM] float 
 13461 ;;  sign            1   57[COMRAM] unsigned char 
 13462 ;;  exp             1   56[COMRAM] unsigned char 
 13463 ;;  cntr            1   52[COMRAM] unsigned char 
 13464 ;; Return value:  Size  Location     Type
 13465 ;;                  3   43[COMRAM] float 
 13466 ;; Registers used:
 13467 ;;		wreg, status,2, status,0, cstack
 13468 ;; Tracked objects:
 13469 ;;		On entry : 0/0
 13470 ;;		On exit  : 0/0
 13471 ;;		Unchanged: 0/0
 13472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13473 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13474 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13475 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13476 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13477 ;;Total ram usage:       15 bytes
 13478 ;; Hardware stack levels used:    1
 13479 ;; Hardware stack levels required when called:    4
 13480 ;; This function calls:
 13481 ;;		___ftpack
 13482 ;; This function is called by:
 13483 ;;		_do_update_pwm
 13484 ;;		_Update_Screen
 13485 ;;		_read_volt
 13486 ;; This function uses a non-reentrant model
 13487 ;;
 13488                           
 13489                           	psect	text69
 13490  002310                     __ptext69:
 13491                           	opt stack 0
 13492  002310                     ___ftdiv:
 13493                           	opt stack 25
 13494                           
 13495                           ;incstack = 0
 13496  002310  C02E  F032         	movff	___ftdiv@f1+2,??___ftdiv
 13497  002314  6A33               	clrf	(??___ftdiv+1)& (0+255),c
 13498  002316  6A34               	clrf	(??___ftdiv+2)& (0+255),c
 13499  002318  342D               	rlcf	___ftdiv@f1+1,w,c
 13500  00231A  3632               	rlcf	??___ftdiv& (0+255),f,c
 13501  00231C  E301               	bnc	u6011
 13502  00231E  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
 13503  002320                     u6011:
 13504  002320  5032               	movf	??___ftdiv,w,c
 13505  002322  6E39               	movwf	___ftdiv@exp,c
 13506  002324  5039               	movf	___ftdiv@exp,w,c
 13507  002326  A4D8               	btfss	status,2,c
 13508  002328  D002               	goto	l8636
 13509  00232A  D00E               	goto	l8638
 13510  00232C  D061               	goto	l1928
 13511  00232E                     l8636:
 13512  00232E  C031  F032         	movff	___ftdiv@f2+2,??___ftdiv
 13513  002332  6A33               	clrf	(??___ftdiv+1)& (0+255),c
 13514  002334  6A34               	clrf	(??___ftdiv+2)& (0+255),c
 13515  002336  3430               	rlcf	___ftdiv@f2+1,w,c
 13516  002338  3632               	rlcf	??___ftdiv& (0+255),f,c
 13517  00233A  E301               	bnc	u6031
 13518  00233C  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
 13519  00233E                     u6031:
 13520  00233E  5032               	movf	??___ftdiv,w,c
 13521  002340  6E3A               	movwf	___ftdiv@sign,c
 13522  002342  503A               	movf	___ftdiv@sign,w,c
 13523  002344  A4D8               	btfss	status,2,c
 13524  002346  D007               	goto	l8642
 13525  002348                     l8638:
 13526  002348  0E00               	movlw	0
 13527  00234A  6E2C               	movwf	?___ftdiv,c
 13528  00234C  0E00               	movlw	0
 13529  00234E  6E2D               	movwf	?___ftdiv+1,c
 13530  002350  0E00               	movlw	0
 13531  002352  6E2E               	movwf	?___ftdiv+2,c
 13532  002354  D04D               	goto	l1928
 13533  002356                     l8642:
 13534  002356  0E00               	movlw	0
 13535  002358  6E36               	movwf	___ftdiv@f3,c
 13536  00235A  0E00               	movlw	0
 13537  00235C  6E37               	movwf	___ftdiv@f3+1,c
 13538  00235E  0E00               	movlw	0
 13539  002360  6E38               	movwf	___ftdiv@f3+2,c
 13540  002362  503A               	movf	___ftdiv@sign,w,c
 13541  002364  0F89               	addlw	137
 13542  002366  5E39               	subwf	___ftdiv@exp,f,c
 13543  002368  C02E  F03A         	movff	___ftdiv@f1+2,___ftdiv@sign
 13544  00236C  5031               	movf	___ftdiv@f2+2,w,c
 13545  00236E  1A3A               	xorwf	___ftdiv@sign,f,c
 13546  002370  0E80               	movlw	128
 13547  002372  163A               	andwf	___ftdiv@sign,f,c
 13548  002374  8E2D               	bsf	___ftdiv@f1+1,7,c
 13549  002376  0EFF               	movlw	255
 13550  002378  162C               	andwf	___ftdiv@f1,f,c
 13551  00237A  0EFF               	movlw	255
 13552  00237C  162D               	andwf	___ftdiv@f1+1,f,c
 13553  00237E  0E00               	movlw	0
 13554  002380  162E               	andwf	___ftdiv@f1+2,f,c
 13555  002382  8E30               	bsf	___ftdiv@f2+1,7,c
 13556  002384  0EFF               	movlw	255
 13557  002386  162F               	andwf	___ftdiv@f2,f,c
 13558  002388  0EFF               	movlw	255
 13559  00238A  1630               	andwf	___ftdiv@f2+1,f,c
 13560  00238C  0E00               	movlw	0
 13561  00238E  1631               	andwf	___ftdiv@f2+2,f,c
 13562  002390  0E18               	movlw	24
 13563  002392  6E35               	movwf	___ftdiv@cntr,c
 13564  002394  D000               	goto	l8662
 13565  002396                     l8662:
 13566  002396  90D8               	bcf	status,0,c
 13567  002398  3636               	rlcf	___ftdiv@f3,f,c
 13568  00239A  3637               	rlcf	___ftdiv@f3+1,f,c
 13569  00239C  3638               	rlcf	___ftdiv@f3+2,f,c
 13570  00239E  502F               	movf	___ftdiv@f2,w,c
 13571  0023A0  5C2C               	subwf	___ftdiv@f1,w,c
 13572  0023A2  5030               	movf	___ftdiv@f2+1,w,c
 13573  0023A4  582D               	subwfb	___ftdiv@f1+1,w,c
 13574  0023A6  5031               	movf	___ftdiv@f2+2,w,c
 13575  0023A8  582E               	subwfb	___ftdiv@f1+2,w,c
 13576  0023AA  A0D8               	btfss	status,0,c
 13577  0023AC  D007               	goto	l1931
 13578  0023AE  502F               	movf	___ftdiv@f2,w,c
 13579  0023B0  5E2C               	subwf	___ftdiv@f1,f,c
 13580  0023B2  5030               	movf	___ftdiv@f2+1,w,c
 13581  0023B4  5A2D               	subwfb	___ftdiv@f1+1,f,c
 13582  0023B6  5031               	movf	___ftdiv@f2+2,w,c
 13583  0023B8  5A2E               	subwfb	___ftdiv@f1+2,f,c
 13584  0023BA  8036               	bsf	___ftdiv@f3,0,c
 13585  0023BC                     l1931:
 13586  0023BC  90D8               	bcf	status,0,c
 13587  0023BE  362C               	rlcf	___ftdiv@f1,f,c
 13588  0023C0  362D               	rlcf	___ftdiv@f1+1,f,c
 13589  0023C2  362E               	rlcf	___ftdiv@f1+2,f,c
 13590  0023C4  2E35               	decfsz	___ftdiv@cntr,f,c
 13591  0023C6  D7E7               	goto	l8662
 13592  0023C8  D000               	goto	l8672
 13593  0023CA                     l8672:
 13594  0023CA  C036  F011         	movff	___ftdiv@f3,___ftpack@arg
 13595  0023CE  C037  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
 13596  0023D2  C038  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
 13597  0023D6  C039  F014         	movff	___ftdiv@exp,___ftpack@exp
 13598  0023DA  C03A  F015         	movff	___ftdiv@sign,___ftpack@sign
 13599  0023DE  ECAF  F013         	call	___ftpack	;wreg free
 13600  0023E2  C011  F02C         	movff	?___ftpack,?___ftdiv
 13601  0023E6  C012  F02D         	movff	?___ftpack+1,?___ftdiv+1
 13602  0023EA  C013  F02E         	movff	?___ftpack+2,?___ftdiv+2
 13603  0023EE  D000               	goto	l1928
 13604  0023F0                     l1928:
 13605  0023F0  0012               	return		;funcret
 13606  0023F2                     __end_of___ftdiv:
 13607                           	opt stack 0
 13608                           tblptru	equ	0xFF8
 13609                           tblptrh	equ	0xFF7
 13610                           tblptrl	equ	0xFF6
 13611                           tablat	equ	0xFF5
 13612                           prodh	equ	0xFF4
 13613                           prodl	equ	0xFF3
 13614                           intcon	equ	0xFF2
 13615                           intcon2	equ	0xFF1
 13616                           postinc0	equ	0xFEE
 13617                           wreg	equ	0xFE8
 13618                           postdec1	equ	0xFE5
 13619                           fsr1l	equ	0xFE1
 13620                           indf2	equ	0xFDF
 13621                           postinc2	equ	0xFDE
 13622                           fsr2h	equ	0xFDA
 13623                           fsr2l	equ	0xFD9
 13624                           status	equ	0xFD8
 13625                           
 13626 ;; *************** function ___ftpack *****************
 13627 ;; Defined at:
 13628 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 13629 ;; Parameters:    Size  Location     Type
 13630 ;;  arg             3   16[COMRAM] unsigned um
 13631 ;;  exp             1   19[COMRAM] unsigned char 
 13632 ;;  sign            1   20[COMRAM] unsigned char 
 13633 ;; Auto vars:     Size  Location     Type
 13634 ;;		None
 13635 ;; Return value:  Size  Location     Type
 13636 ;;                  3   16[COMRAM] float 
 13637 ;; Registers used:
 13638 ;;		wreg, status,2, status,0
 13639 ;; Tracked objects:
 13640 ;;		On entry : 0/0
 13641 ;;		On exit  : 0/0
 13642 ;;		Unchanged: 0/0
 13643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13644 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13646 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13647 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13648 ;;Total ram usage:        8 bytes
 13649 ;; Hardware stack levels used:    1
 13650 ;; Hardware stack levels required when called:    3
 13651 ;; This function calls:
 13652 ;;		Nothing
 13653 ;; This function is called by:
 13654 ;;		___awtoft
 13655 ;;		___ftdiv
 13656 ;;		___ftmul
 13657 ;;		___lbtoft
 13658 ;; This function uses a non-reentrant model
 13659 ;;
 13660                           
 13661                           	psect	text70
 13662  00275E                     __ptext70:
 13663                           	opt stack 0
 13664  00275E                     ___ftpack:
 13665                           	opt stack 25
 13666                           
 13667                           ;incstack = 0
 13668  00275E  5014               	movf	___ftpack@exp,w,c
 13669  002760  B4D8               	btfsc	status,2,c
 13670  002762  D005               	goto	l8306
 13671  002764  5011               	movf	___ftpack@arg,w,c
 13672  002766  1012               	iorwf	___ftpack@arg+1,w,c
 13673  002768  1013               	iorwf	___ftpack@arg+2,w,c
 13674  00276A  A4D8               	btfss	status,2,c
 13675  00276C  D00E               	goto	l8312
 13676  00276E                     l8306:
 13677  00276E  0E00               	movlw	0
 13678  002770  6E11               	movwf	?___ftpack,c
 13679  002772  0E00               	movlw	0
 13680  002774  6E12               	movwf	?___ftpack+1,c
 13681  002776  0E00               	movlw	0
 13682  002778  6E13               	movwf	?___ftpack+2,c
 13683  00277A  D053               	goto	l1856
 13684  00277C  D006               	goto	l8312
 13685  00277E                     l8310:
 13686  00277E  2A14               	incf	___ftpack@exp,f,c
 13687  002780  90D8               	bcf	status,0,c
 13688  002782  3213               	rrcf	___ftpack@arg+2,f,c
 13689  002784  3212               	rrcf	___ftpack@arg+1,f,c
 13690  002786  3211               	rrcf	___ftpack@arg,f,c
 13691  002788  D000               	goto	l8312
 13692  00278A                     l8312:
 13693  00278A  0E00               	movlw	0
 13694  00278C  1411               	andwf	___ftpack@arg,w,c
 13695  00278E  6E16               	movwf	??___ftpack& (0+255),c
 13696  002790  0E00               	movlw	0
 13697  002792  1412               	andwf	___ftpack@arg+1,w,c
 13698  002794  6E17               	movwf	(??___ftpack+1)& (0+255),c
 13699  002796  0EFE               	movlw	254
 13700  002798  1413               	andwf	___ftpack@arg+2,w,c
 13701  00279A  6E18               	movwf	(??___ftpack+2)& (0+255),c
 13702  00279C  5016               	movf	??___ftpack,w,c
 13703  00279E  1017               	iorwf	??___ftpack+1,w,c
 13704  0027A0  1018               	iorwf	??___ftpack+2,w,c
 13705  0027A2  B4D8               	btfsc	status,2,c
 13706  0027A4  D00E               	goto	l8318
 13707  0027A6  D7EB               	goto	l8310
 13708  0027A8  D00C               	goto	l8318
 13709  0027AA                     l8314:
 13710  0027AA  2A14               	incf	___ftpack@exp,f,c
 13711  0027AC  0E01               	movlw	1
 13712  0027AE  2611               	addwf	___ftpack@arg,f,c
 13713  0027B0  0E00               	movlw	0
 13714  0027B2  2212               	addwfc	___ftpack@arg+1,f,c
 13715  0027B4  0E00               	movlw	0
 13716  0027B6  2213               	addwfc	___ftpack@arg+2,f,c
 13717  0027B8  90D8               	bcf	status,0,c
 13718  0027BA  3213               	rrcf	___ftpack@arg+2,f,c
 13719  0027BC  3212               	rrcf	___ftpack@arg+1,f,c
 13720  0027BE  3211               	rrcf	___ftpack@arg,f,c
 13721  0027C0  D000               	goto	l8318
 13722  0027C2                     l8318:
 13723  0027C2  0E00               	movlw	0
 13724  0027C4  1411               	andwf	___ftpack@arg,w,c
 13725  0027C6  6E16               	movwf	??___ftpack& (0+255),c
 13726  0027C8  0E00               	movlw	0
 13727  0027CA  1412               	andwf	___ftpack@arg+1,w,c
 13728  0027CC  6E17               	movwf	(??___ftpack+1)& (0+255),c
 13729  0027CE  0EFF               	movlw	255
 13730  0027D0  1413               	andwf	___ftpack@arg+2,w,c
 13731  0027D2  6E18               	movwf	(??___ftpack+2)& (0+255),c
 13732  0027D4  5016               	movf	??___ftpack,w,c
 13733  0027D6  1017               	iorwf	??___ftpack+1,w,c
 13734  0027D8  1018               	iorwf	??___ftpack+2,w,c
 13735  0027DA  B4D8               	btfsc	status,2,c
 13736  0027DC  D008               	goto	l8322
 13737  0027DE  D7E5               	goto	l8314
 13738  0027E0  D006               	goto	l8322
 13739  0027E2                     l8320:
 13740  0027E2  0614               	decf	___ftpack@exp,f,c
 13741  0027E4  90D8               	bcf	status,0,c
 13742  0027E6  3611               	rlcf	___ftpack@arg,f,c
 13743  0027E8  3612               	rlcf	___ftpack@arg+1,f,c
 13744  0027EA  3613               	rlcf	___ftpack@arg+2,f,c
 13745  0027EC  D000               	goto	l8322
 13746  0027EE                     l8322:
 13747  0027EE  BE12               	btfsc	___ftpack@arg+1,7,c
 13748  0027F0  D004               	goto	l1867
 13749  0027F2  0E02               	movlw	2
 13750  0027F4  6014               	cpfslt	___ftpack@exp,c
 13751  0027F6  D7F5               	goto	l8320
 13752  0027F8  D000               	goto	l1867
 13753  0027FA                     l1867:
 13754  0027FA  B014               	btfsc	___ftpack@exp,0,c
 13755  0027FC  D002               	goto	l8328
 13756  0027FE  9E12               	bcf	___ftpack@arg+1,7,c
 13757  002800  D000               	goto	l8328
 13758  002802                     l8328:
 13759  002802  90D8               	bcf	status,0,c
 13760  002804  3214               	rrcf	___ftpack@exp,f,c
 13761  002806  5014               	movf	___ftpack@exp,w,c
 13762  002808  1213               	iorwf	___ftpack@arg+2,f,c
 13763  00280A  5015               	movf	___ftpack@sign,w,c
 13764  00280C  B4D8               	btfsc	status,2,c
 13765  00280E  D002               	goto	l8334
 13766  002810  8E13               	bsf	___ftpack@arg+2,7,c
 13767  002812  D000               	goto	l8334
 13768  002814                     l8334:
 13769  002814  C011  F011         	movff	___ftpack@arg,?___ftpack
 13770  002818  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
 13771  00281C  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
 13772  002820  D000               	goto	l1856
 13773  002822                     l1856:
 13774  002822  0012               	return		;funcret
 13775  002824                     __end_of___ftpack:
 13776                           	opt stack 0
 13777                           tblptru	equ	0xFF8
 13778                           tblptrh	equ	0xFF7
 13779                           tblptrl	equ	0xFF6
 13780                           tablat	equ	0xFF5
 13781                           prodh	equ	0xFF4
 13782                           prodl	equ	0xFF3
 13783                           intcon	equ	0xFF2
 13784                           intcon2	equ	0xFF1
 13785                           postinc0	equ	0xFEE
 13786                           wreg	equ	0xFE8
 13787                           postdec1	equ	0xFE5
 13788                           fsr1l	equ	0xFE1
 13789                           indf2	equ	0xFDF
 13790                           postinc2	equ	0xFDE
 13791                           fsr2h	equ	0xFDA
 13792                           fsr2l	equ	0xFD9
 13793                           status	equ	0xFD8
 13794                           
 13795 ;; *************** function _Wait_One_Sec *****************
 13796 ;; Defined at:
 13797 ;;		line 51 in file "utils.c"
 13798 ;; Parameters:    Size  Location     Type
 13799 ;;		None
 13800 ;; Auto vars:     Size  Location     Type
 13801 ;;  k               2   16[COMRAM] int 
 13802 ;; Return value:  Size  Location     Type
 13803 ;;		None               void
 13804 ;; Registers used:
 13805 ;;		wreg, status,2, status,0
 13806 ;; Tracked objects:
 13807 ;;		On entry : 0/0
 13808 ;;		On exit  : 0/0
 13809 ;;		Unchanged: 0/0
 13810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13812 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13814 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13815 ;;Total ram usage:        2 bytes
 13816 ;; Hardware stack levels used:    1
 13817 ;; Hardware stack levels required when called:    3
 13818 ;; This function calls:
 13819 ;;		Nothing
 13820 ;; This function is called by:
 13821 ;;		_get_RPM
 13822 ;;		_Do_Beep_Good
 13823 ;;		_Do_Beep_Bad
 13824 ;;		_test_alarm
 13825 ;;		_Do_Beep
 13826 ;; This function uses a non-reentrant model
 13827 ;;
 13828                           
 13829                           	psect	text71
 13830  003B3E                     __ptext71:
 13831                           	opt stack 0
 13832  003B3E                     _Wait_One_Sec:
 13833                           	opt stack 26
 13834                           
 13835                           ;utils.c: 52: for (int k=0;k<0xffff;k++);
 13836                           
 13837                           ;incstack = 0
 13838  003B3E  0E00               	movlw	0
 13839  003B40  6E12               	movwf	Wait_One_Sec@k+1,c
 13840  003B42  0E00               	movlw	0
 13841  003B44  6E11               	movwf	Wait_One_Sec@k,c
 13842  003B46                     l6202:
 13843  003B46  2811               	incf	Wait_One_Sec@k,w,c
 13844  003B48  E105               	bnz	l6206
 13845  003B4A  2812               	incf	Wait_One_Sec@k+1,w,c
 13846  003B4C  B4D8               	btfsc	status,2,c
 13847  003B4E  D006               	goto	l669
 13848  003B50  D001               	goto	l6206
 13849  003B52  D004               	goto	l669
 13850  003B54                     l6206:
 13851  003B54  4A11               	infsnz	Wait_One_Sec@k,f,c
 13852  003B56  2A12               	incf	Wait_One_Sec@k+1,f,c
 13853  003B58  D7F6               	goto	l6202
 13854  003B5A  D7FC               	goto	l6206
 13855  003B5C                     l669:
 13856  003B5C  0012               	return		;funcret
 13857  003B5E                     __end_of_Wait_One_Sec:
 13858                           	opt stack 0
 13859                           tblptru	equ	0xFF8
 13860                           tblptrh	equ	0xFF7
 13861                           tblptrl	equ	0xFF6
 13862                           tablat	equ	0xFF5
 13863                           prodh	equ	0xFF4
 13864                           prodl	equ	0xFF3
 13865                           intcon	equ	0xFF2
 13866                           intcon2	equ	0xFF1
 13867                           postinc0	equ	0xFEE
 13868                           wreg	equ	0xFE8
 13869                           postdec1	equ	0xFE5
 13870                           fsr1l	equ	0xFE1
 13871                           indf2	equ	0xFDF
 13872                           postinc2	equ	0xFDE
 13873                           fsr2h	equ	0xFDA
 13874                           fsr2l	equ	0xFD9
 13875                           status	equ	0xFD8
 13876                           
 13877 ;; *************** function _Deactivate_Buzzer *****************
 13878 ;; Defined at:
 13879 ;;		line 83 in file "utils.c"
 13880 ;; Parameters:    Size  Location     Type
 13881 ;;		None
 13882 ;; Auto vars:     Size  Location     Type
 13883 ;;		None
 13884 ;; Return value:  Size  Location     Type
 13885 ;;		None               void
 13886 ;; Registers used:
 13887 ;;		wreg, status,2
 13888 ;; Tracked objects:
 13889 ;;		On entry : 0/0
 13890 ;;		On exit  : 0/0
 13891 ;;		Unchanged: 0/0
 13892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13896 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13897 ;;Total ram usage:        0 bytes
 13898 ;; Hardware stack levels used:    1
 13899 ;; Hardware stack levels required when called:    3
 13900 ;; This function calls:
 13901 ;;		Nothing
 13902 ;; This function is called by:
 13903 ;;		_Do_Beep_Good
 13904 ;;		_Do_Beep_Bad
 13905 ;;		_test_alarm
 13906 ;;		_Do_Beep
 13907 ;; This function uses a non-reentrant model
 13908 ;;
 13909                           
 13910                           	psect	text72
 13911  003E90                     __ptext72:
 13912                           	opt stack 0
 13913  003E90                     _Deactivate_Buzzer:
 13914                           	opt stack 26
 13915                           
 13916                           ;utils.c: 84: CCP2CON = 0x0;
 13917                           
 13918                           ;incstack = 0
 13919  003E90  0E00               	movlw	0
 13920  003E92  6EBA               	movwf	4026,c	;volatile
 13921                           
 13922                           ;utils.c: 85: PORTCbits.RC1 = 0;
 13923  003E94  9282               	bcf	3970,1,c	;volatile
 13924  003E96  0012               	return		;funcret
 13925  003E98                     __end_of_Deactivate_Buzzer:
 13926                           	opt stack 0
 13927                           tblptru	equ	0xFF8
 13928                           tblptrh	equ	0xFF7
 13929                           tblptrl	equ	0xFF6
 13930                           tablat	equ	0xFF5
 13931                           prodh	equ	0xFF4
 13932                           prodl	equ	0xFF3
 13933                           intcon	equ	0xFF2
 13934                           intcon2	equ	0xFF1
 13935                           postinc0	equ	0xFEE
 13936                           wreg	equ	0xFE8
 13937                           postdec1	equ	0xFE5
 13938                           fsr1l	equ	0xFE1
 13939                           indf2	equ	0xFDF
 13940                           postinc2	equ	0xFDE
 13941                           fsr2h	equ	0xFDA
 13942                           fsr2l	equ	0xFD9
 13943                           status	equ	0xFD8
 13944                           
 13945 ;; *************** function _Activate_Buzzer_500Hz *****************
 13946 ;; Defined at:
 13947 ;;		line 62 in file "utils.c"
 13948 ;; Parameters:    Size  Location     Type
 13949 ;;		None
 13950 ;; Auto vars:     Size  Location     Type
 13951 ;;		None
 13952 ;; Return value:  Size  Location     Type
 13953 ;;		None               void
 13954 ;; Registers used:
 13955 ;;		wreg, status,2
 13956 ;; Tracked objects:
 13957 ;;		On entry : 0/0
 13958 ;;		On exit  : 0/0
 13959 ;;		Unchanged: 0/0
 13960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13965 ;;Total ram usage:        0 bytes
 13966 ;; Hardware stack levels used:    1
 13967 ;; Hardware stack levels required when called:    3
 13968 ;; This function calls:
 13969 ;;		Nothing
 13970 ;; This function is called by:
 13971 ;;		_Do_Beep_Bad
 13972 ;; This function uses a non-reentrant model
 13973 ;;
 13974                           
 13975                           	psect	text73
 13976  003D66                     __ptext73:
 13977                           	opt stack 0
 13978  003D66                     _Activate_Buzzer_500Hz:
 13979                           	opt stack 25
 13980                           
 13981                           ;utils.c: 63: PR2 = 0b11111001;
 13982                           
 13983                           ;incstack = 0
 13984  003D66  0EF9               	movlw	249
 13985  003D68  6ECB               	movwf	4043,c	;volatile
 13986                           
 13987                           ;utils.c: 64: T2CON = 0b00000111;
 13988  003D6A  0E07               	movlw	7
 13989  003D6C  6ECA               	movwf	4042,c	;volatile
 13990                           
 13991                           ;utils.c: 65: CCPR2L = 0b01111100;
 13992  003D6E  0E7C               	movlw	124
 13993  003D70  6EBB               	movwf	4027,c	;volatile
 13994                           
 13995                           ;utils.c: 66: CCP2CON = 0b00111100;
 13996  003D72  0E3C               	movlw	60
 13997  003D74  6EBA               	movwf	4026,c	;volatile
 13998  003D76  0012               	return		;funcret
 13999  003D78                     __end_of_Activate_Buzzer_500Hz:
 14000                           	opt stack 0
 14001                           tblptru	equ	0xFF8
 14002                           tblptrh	equ	0xFF7
 14003                           tblptrl	equ	0xFF6
 14004                           tablat	equ	0xFF5
 14005                           prodh	equ	0xFF4
 14006                           prodl	equ	0xFF3
 14007                           intcon	equ	0xFF2
 14008                           intcon2	equ	0xFF1
 14009                           postinc0	equ	0xFEE
 14010                           wreg	equ	0xFE8
 14011                           postdec1	equ	0xFE5
 14012                           fsr1l	equ	0xFE1
 14013                           indf2	equ	0xFDF
 14014                           postinc2	equ	0xFDE
 14015                           fsr2h	equ	0xFDA
 14016                           fsr2l	equ	0xFD9
 14017                           status	equ	0xFD8
 14018                           
 14019 ;; *************** function _Decrease_Alarm_Time *****************
 14020 ;; Defined at:
 14021 ;;		line 78 in file "Setup_Alarm_Time.c"
 14022 ;; Parameters:    Size  Location     Type
 14023 ;;		None
 14024 ;; Auto vars:     Size  Location     Type
 14025 ;;		None
 14026 ;; Return value:  Size  Location     Type
 14027 ;;		None               void
 14028 ;; Registers used:
 14029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14030 ;; Tracked objects:
 14031 ;;		On entry : 0/0
 14032 ;;		On exit  : 0/0
 14033 ;;		Unchanged: 0/0
 14034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14038 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14039 ;;Total ram usage:        0 bytes
 14040 ;; Hardware stack levels used:    1
 14041 ;; Hardware stack levels required when called:   11
 14042 ;; This function calls:
 14043 ;;		_Update_Setup_Alarm_Time_Screen
 14044 ;; This function is called by:
 14045 ;;		_Do_Setup_Alarm_Time
 14046 ;; This function uses a non-reentrant model
 14047 ;;
 14048                           
 14049                           	psect	text74
 14050  003646                     __ptext74:
 14051                           	opt stack 0
 14052  003646                     _Decrease_Alarm_Time:
 14053                           	opt stack 18
 14054                           
 14055                           ;Setup_Alarm_Time.c: 79: switch (Select_Alarm_Field)
 14056                           
 14057                           ;incstack = 0
 14058  003646  D018               	goto	l9908
 14059  003648                     l9888:
 14060                           
 14061                           ;Setup_Alarm_Time.c: 82: if (setup_alarm_hour == 0) setup_alarm_hour = 23;
 14062  003648  5063               	movf	_setup_alarm_hour,w,c
 14063  00364A  A4D8               	btfss	status,2,c
 14064  00364C  D003               	goto	l9892
 14065  00364E  0E17               	movlw	23
 14066  003650  6E63               	movwf	_setup_alarm_hour,c
 14067  003652  D01D               	goto	l9910
 14068  003654                     l9892:
 14069                           
 14070                           ;Setup_Alarm_Time.c: 83: else --setup_alarm_hour;
 14071  003654  0663               	decf	_setup_alarm_hour,f,c
 14072                           
 14073                           ;Setup_Alarm_Time.c: 84: break;
 14074  003656  D01B               	goto	l9910
 14075  003658                     l9894:
 14076                           
 14077                           ;Setup_Alarm_Time.c: 86: if (setup_alarm_minute == 0) setup_alarm_minute = 59;
 14078  003658  5064               	movf	_setup_alarm_minute,w,c
 14079  00365A  A4D8               	btfss	status,2,c
 14080  00365C  D003               	goto	l9898
 14081  00365E  0E3B               	movlw	59
 14082  003660  6E64               	movwf	_setup_alarm_minute,c
 14083  003662  D015               	goto	l9910
 14084  003664                     l9898:
 14085                           
 14086                           ;Setup_Alarm_Time.c: 87: else --setup_alarm_minute;
 14087  003664  0664               	decf	_setup_alarm_minute,f,c
 14088                           
 14089                           ;Setup_Alarm_Time.c: 88: break;
 14090  003666  D013               	goto	l9910
 14091  003668                     l9900:
 14092                           
 14093                           ;Setup_Alarm_Time.c: 91: if (setup_alarm_second == 0) setup_alarm_second = 59;
 14094  003668  5065               	movf	_setup_alarm_second,w,c
 14095  00366A  A4D8               	btfss	status,2,c
 14096  00366C  D003               	goto	l9904
 14097  00366E  0E3B               	movlw	59
 14098  003670  6E65               	movwf	_setup_alarm_second,c
 14099  003672  D00D               	goto	l9910
 14100  003674                     l9904:
 14101                           
 14102                           ;Setup_Alarm_Time.c: 92: else --setup_alarm_second;
 14103  003674  0665               	decf	_setup_alarm_second,f,c
 14104                           
 14105                           ;Setup_Alarm_Time.c: 97: }
 14106                           
 14107                           ;Setup_Alarm_Time.c: 96: break;
 14108                           
 14109                           ;Setup_Alarm_Time.c: 95: default:
 14110                           
 14111                           ;Setup_Alarm_Time.c: 93: break;
 14112  003676  D00B               	goto	l9910
 14113  003678                     l9908:
 14114  003678  5055               	movf	_Select_Alarm_Field,w,c
 14115                           
 14116                           ; Switch size 1, requested type "space"
 14117                           ; Number of cases is 3, Range of values is 0 to 2
 14118                           ; switch strategies available:
 14119                           ; Name         Instructions Cycles
 14120                           ; simple_byte           10     6 (average)
 14121                           ;	Chosen strategy is simple_byte
 14122  00367A  0A00               	xorlw	0	; case 0
 14123  00367C  B4D8               	btfsc	status,2,c
 14124  00367E  D7E4               	goto	l9888
 14125  003680  0A01               	xorlw	1	; case 1
 14126  003682  B4D8               	btfsc	status,2,c
 14127  003684  D7E9               	goto	l9894
 14128  003686  0A03               	xorlw	3	; case 2
 14129  003688  B4D8               	btfsc	status,2,c
 14130  00368A  D7EE               	goto	l9900
 14131  00368C  D000               	goto	l9910
 14132  00368E                     l9910:
 14133                           
 14134                           ;Setup_Alarm_Time.c: 98: Update_Setup_Alarm_Time_Screen();
 14135  00368E  ECF9  F011         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
 14136  003692  0012               	return		;funcret
 14137  003694                     __end_of_Decrease_Alarm_Time:
 14138                           	opt stack 0
 14139                           tblptru	equ	0xFF8
 14140                           tblptrh	equ	0xFF7
 14141                           tblptrl	equ	0xFF6
 14142                           tablat	equ	0xFF5
 14143                           prodh	equ	0xFF4
 14144                           prodl	equ	0xFF3
 14145                           intcon	equ	0xFF2
 14146                           intcon2	equ	0xFF1
 14147                           postinc0	equ	0xFEE
 14148                           wreg	equ	0xFE8
 14149                           postdec1	equ	0xFE5
 14150                           fsr1l	equ	0xFE1
 14151                           indf2	equ	0xFDF
 14152                           postinc2	equ	0xFDE
 14153                           fsr2h	equ	0xFDA
 14154                           fsr2l	equ	0xFD9
 14155                           status	equ	0xFD8
 14156                           
 14157 ;; *************** function _Update_Setup_Alarm_Time_Screen *****************
 14158 ;; Defined at:
 14159 ;;		line 142 in file "Setup_Alarm_Time.c"
 14160 ;; Parameters:    Size  Location     Type
 14161 ;;		None
 14162 ;; Auto vars:     Size  Location     Type
 14163 ;;		None
 14164 ;; Return value:  Size  Location     Type
 14165 ;;		None               void
 14166 ;; Registers used:
 14167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14168 ;; Tracked objects:
 14169 ;;		On entry : 0/0
 14170 ;;		On exit  : 0/0
 14171 ;;		Unchanged: 0/0
 14172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14176 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14177 ;;Total ram usage:        0 bytes
 14178 ;; Hardware stack levels used:    1
 14179 ;; Hardware stack levels required when called:   10
 14180 ;; This function calls:
 14181 ;;		___awdiv
 14182 ;;		___awmod
 14183 ;;		_drawtext
 14184 ;;		_printf
 14185 ;; This function is called by:
 14186 ;;		_Do_Setup_Alarm_Time
 14187 ;;		_Increase_Alarm_Time
 14188 ;;		_Decrease_Alarm_Time
 14189 ;; This function uses a non-reentrant model
 14190 ;;
 14191                           
 14192                           	psect	text75
 14193  0023F2                     __ptext75:
 14194                           	opt stack 0
 14195  0023F2                     _Update_Setup_Alarm_Time_Screen:
 14196                           	opt stack 19
 14197                           
 14198                           ;Setup_Alarm_Time.c: 143: printf("%x:%x:%x\r\n", setup_alarm_hour, setup_alarm_minute, s
      +                          etup_alarm_second);
 14199                           
 14200                           ;incstack = 0
 14201  0023F2  0E83               	movlw	low STR_41
 14202  0023F4  6E1D               	movwf	printf@f,c
 14203  0023F6  0EFF               	movlw	high STR_41
 14204  0023F8  6E1E               	movwf	printf@f+1,c
 14205  0023FA  C063  F01F         	movff	_setup_alarm_hour,?_printf+2
 14206  0023FE  6A20               	clrf	?_printf+3,c
 14207  002400  C064  F021         	movff	_setup_alarm_minute,?_printf+4
 14208  002404  6A22               	clrf	?_printf+5,c
 14209  002406  C065  F023         	movff	_setup_alarm_second,?_printf+6
 14210  00240A  6A24               	clrf	?_printf+7,c
 14211  00240C  ECDE  F004         	call	_printf	;wreg free
 14212                           
 14213                           ;Setup_Alarm_Time.c: 144: setup_alarm_time[0] = (setup_alarm_hour / 10) + '0';
 14214  002410  C063  F017         	movff	_setup_alarm_hour,___awdiv@dividend
 14215  002414  6A18               	clrf	___awdiv@dividend+1,c
 14216  002416  0E00               	movlw	0
 14217  002418  6E1A               	movwf	___awdiv@divisor+1,c
 14218  00241A  0E0A               	movlw	10
 14219  00241C  6E19               	movwf	___awdiv@divisor,c
 14220  00241E  EC67  F016         	call	___awdiv	;wreg free
 14221  002422  5017               	movf	?___awdiv,w,c
 14222  002424  0F30               	addlw	48
 14223  002426  0101               	movlb	1	; () banked
 14224  002428  6F3B               	movwf	_setup_alarm_time& (0+255),b
 14225                           
 14226                           ; BSR set to: 1
 14227                           ;Setup_Alarm_Time.c: 145: setup_alarm_time[1] = (setup_alarm_hour % 10) + '0';
 14228  00242A  C063  F044         	movff	_setup_alarm_hour,___awmod@dividend
 14229  00242E  6A45               	clrf	___awmod@dividend+1,c
 14230  002430  0E00               	movlw	0
 14231  002432  6E47               	movwf	___awmod@divisor+1,c
 14232  002434  0E0A               	movlw	10
 14233  002436  6E46               	movwf	___awmod@divisor,c
 14234  002438  EC44  F017         	call	___awmod	;wreg free
 14235  00243C  5044               	movf	?___awmod,w,c
 14236  00243E  0F30               	addlw	48
 14237  002440  0101               	movlb	1	; () banked
 14238  002442  6F3C               	movwf	(_setup_alarm_time+1)& (0+255),b
 14239                           
 14240                           ; BSR set to: 1
 14241                           ;Setup_Alarm_Time.c: 146: setup_alarm_time[3] = (setup_alarm_minute / 10) + '0';
 14242  002444  C064  F017         	movff	_setup_alarm_minute,___awdiv@dividend
 14243  002448  6A18               	clrf	___awdiv@dividend+1,c
 14244  00244A  0E00               	movlw	0
 14245  00244C  6E1A               	movwf	___awdiv@divisor+1,c
 14246  00244E  0E0A               	movlw	10
 14247  002450  6E19               	movwf	___awdiv@divisor,c
 14248  002452  EC67  F016         	call	___awdiv	;wreg free
 14249  002456  5017               	movf	?___awdiv,w,c
 14250  002458  0F30               	addlw	48
 14251  00245A  0101               	movlb	1	; () banked
 14252  00245C  6F3E               	movwf	(_setup_alarm_time+3)& (0+255),b
 14253                           
 14254                           ; BSR set to: 1
 14255                           ;Setup_Alarm_Time.c: 147: setup_alarm_time[4] = (setup_alarm_minute % 10) + '0';
 14256  00245E  C064  F044         	movff	_setup_alarm_minute,___awmod@dividend
 14257  002462  6A45               	clrf	___awmod@dividend+1,c
 14258  002464  0E00               	movlw	0
 14259  002466  6E47               	movwf	___awmod@divisor+1,c
 14260  002468  0E0A               	movlw	10
 14261  00246A  6E46               	movwf	___awmod@divisor,c
 14262  00246C  EC44  F017         	call	___awmod	;wreg free
 14263  002470  5044               	movf	?___awmod,w,c
 14264  002472  0F30               	addlw	48
 14265  002474  0101               	movlb	1	; () banked
 14266  002476  6F3F               	movwf	(_setup_alarm_time+4)& (0+255),b
 14267                           
 14268                           ; BSR set to: 1
 14269                           ;Setup_Alarm_Time.c: 148: setup_alarm_time[6] = (setup_alarm_second / 10) + '0';
 14270  002478  C065  F017         	movff	_setup_alarm_second,___awdiv@dividend
 14271  00247C  6A18               	clrf	___awdiv@dividend+1,c
 14272  00247E  0E00               	movlw	0
 14273  002480  6E1A               	movwf	___awdiv@divisor+1,c
 14274  002482  0E0A               	movlw	10
 14275  002484  6E19               	movwf	___awdiv@divisor,c
 14276  002486  EC67  F016         	call	___awdiv	;wreg free
 14277  00248A  5017               	movf	?___awdiv,w,c
 14278  00248C  0F30               	addlw	48
 14279  00248E  0101               	movlb	1	; () banked
 14280  002490  6F41               	movwf	(_setup_alarm_time+6)& (0+255),b
 14281                           
 14282                           ; BSR set to: 1
 14283                           ;Setup_Alarm_Time.c: 149: setup_alarm_time[7] = (setup_alarm_second % 10) + '0';
 14284  002492  C065  F044         	movff	_setup_alarm_second,___awmod@dividend
 14285  002496  6A45               	clrf	___awmod@dividend+1,c
 14286  002498  0E00               	movlw	0
 14287  00249A  6E47               	movwf	___awmod@divisor+1,c
 14288  00249C  0E0A               	movlw	10
 14289  00249E  6E46               	movwf	___awmod@divisor,c
 14290  0024A0  EC44  F017         	call	___awmod	;wreg free
 14291  0024A4  5044               	movf	?___awmod,w,c
 14292  0024A6  0F30               	addlw	48
 14293  0024A8  0101               	movlb	1	; () banked
 14294  0024AA  6F42               	movwf	(_setup_alarm_time+7)& (0+255),b
 14295                           
 14296                           ;Setup_Alarm_Time.c: 150: drawtext(15, 52, setup_alarm_time, 0x07FF, 0x0000, 2);
 14297  0024AC  0E34               	movlw	52
 14298  0024AE  6E39               	movwf	drawtext@y,c
 14299  0024B0  0E3B               	movlw	low _setup_alarm_time
 14300  0024B2  6E3A               	movwf	drawtext@_text,c
 14301  0024B4  0E01               	movlw	high _setup_alarm_time
 14302  0024B6  6E3B               	movwf	drawtext@_text+1,c
 14303  0024B8  0E07               	movlw	7
 14304  0024BA  6E3D               	movwf	drawtext@color+1,c
 14305  0024BC  683C               	setf	drawtext@color,c
 14306  0024BE  0E00               	movlw	0
 14307  0024C0  6E3F               	movwf	drawtext@bg+1,c
 14308  0024C2  0E00               	movlw	0
 14309  0024C4  6E3E               	movwf	drawtext@bg,c
 14310  0024C6  0E02               	movlw	2
 14311  0024C8  6E40               	movwf	drawtext@size,c
 14312  0024CA  0E0F               	movlw	15
 14313  0024CC  EC11  F00F         	call	_drawtext
 14314  0024D0  0012               	return		;funcret
 14315  0024D2                     __end_of_Update_Setup_Alarm_Time_Screen:
 14316                           	opt stack 0
 14317                           tblptru	equ	0xFF8
 14318                           tblptrh	equ	0xFF7
 14319                           tblptrl	equ	0xFF6
 14320                           tablat	equ	0xFF5
 14321                           prodh	equ	0xFF4
 14322                           prodl	equ	0xFF3
 14323                           intcon	equ	0xFF2
 14324                           intcon2	equ	0xFF1
 14325                           postinc0	equ	0xFEE
 14326                           wreg	equ	0xFE8
 14327                           postdec1	equ	0xFE5
 14328                           fsr1l	equ	0xFE1
 14329                           indf2	equ	0xFDF
 14330                           postinc2	equ	0xFDE
 14331                           fsr2h	equ	0xFDA
 14332                           fsr2l	equ	0xFD9
 14333                           status	equ	0xFD8
 14334                           
 14335 ;; *************** function _printf *****************
 14336 ;; Defined at:
 14337 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 14338 ;; Parameters:    Size  Location     Type
 14339 ;;  f               2   28[COMRAM] PTR const unsigned char 
 14340 ;;		 -> STR_55(2), STR_54(2), STR_53(2), STR_52(2), 
 14341 ;;		 -> STR_51(18), STR_50(18), STR_49(19), STR_48(18), 
 14342 ;;		 -> STR_47(21), STR_46(14), STR_45(20), STR_44(22), 
 14343 ;;		 -> STR_43(21), STR_42(30), STR_41(11), STR_30(22), 
 14344 ;;		 -> STR_29(18), STR_28(19), STR_9(5), STR_8(7), 
 14345 ;;		 -> STR_7(7), STR_6(5), STR_5(19), STR_4(21), 
 14346 ;;		 -> STR_3(17), STR_2(11), STR_1(32), 
 14347 ;; Auto vars:     Size  Location     Type
 14348 ;;  idx             1   46[COMRAM] unsigned char 
 14349 ;;  tmpval          4    0        struct .
 14350 ;;  cp              3    0        PTR const unsigned char 
 14351 ;;  width           2   53[COMRAM] int 
 14352 ;;  val             2   50[COMRAM] unsigned int 
 14353 ;;  ap              2   47[COMRAM] PTR void [1]
 14354 ;;		 -> ?_printf(2), 
 14355 ;;  len             2    0        unsigned int 
 14356 ;;  c               1   55[COMRAM] char 
 14357 ;;  flag            1   52[COMRAM] unsigned char 
 14358 ;;  prec            1   49[COMRAM] char 
 14359 ;; Return value:  Size  Location     Type
 14360 ;;                  2   28[COMRAM] int 
 14361 ;; Registers used:
 14362 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14363 ;; Tracked objects:
 14364 ;;		On entry : 0/0
 14365 ;;		On exit  : 0/0
 14366 ;;		Unchanged: 0/0
 14367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14368 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14369 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14370 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14371 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14372 ;;Total ram usage:       28 bytes
 14373 ;; Hardware stack levels used:    1
 14374 ;; Hardware stack levels required when called:    4
 14375 ;; This function calls:
 14376 ;;		___lwdiv
 14377 ;;		___lwmod
 14378 ;;		___wmul
 14379 ;;		_isdigit
 14380 ;;		_putch
 14381 ;; This function is called by:
 14382 ;;		_Monitor_Fan
 14383 ;;		_get_duty_cycle
 14384 ;;		_check_for_button_input
 14385 ;;		_Update_Setup_Alarm_Time_Screen
 14386 ;;		_main
 14387 ;;		_test_alarm
 14388 ;; This function uses a non-reentrant model
 14389 ;;
 14390                           
 14391                           	psect	text76
 14392  0009BC                     __ptext76:
 14393                           	opt stack 0
 14394  0009BC                     _printf:
 14395                           	opt stack 25
 14396                           
 14397                           ;doprnt.c: 466: va_list ap;
 14398                           ;doprnt.c: 499: signed char c;
 14399                           ;doprnt.c: 501: int width;
 14400                           ;doprnt.c: 506: signed char prec;
 14401                           ;doprnt.c: 508: unsigned char flag;
 14402                           ;doprnt.c: 523: union {
 14403                           ;doprnt.c: 524: unsigned long vd;
 14404                           ;doprnt.c: 525: double integ;
 14405                           ;doprnt.c: 526: } tmpval;
 14406                           ;doprnt.c: 528: unsigned int val;
 14407                           ;doprnt.c: 529: unsigned len;
 14408                           ;doprnt.c: 530: const char * cp;
 14409                           ;doprnt.c: 533: *ap = __va_start();
 14410                           
 14411                           ;incstack = 0
 14412  0009BC  0E1F               	movlw	low (?_printf+2)
 14413  0009BE  6E30               	movwf	printf@ap,c
 14414  0009C0  0E00               	movlw	high (?_printf+2)
 14415  0009C2  6E31               	movwf	printf@ap+1,c
 14416                           
 14417                           ;doprnt.c: 536: while(c = *f++) {
 14418  0009C4  D199               	goto	l9142
 14419  0009C6                     l9016:
 14420                           
 14421                           ;doprnt.c: 538: if(c != '%')
 14422  0009C6  0E25               	movlw	37
 14423  0009C8  1838               	xorwf	printf@c,w,c
 14424  0009CA  B4D8               	btfsc	status,2,c
 14425  0009CC  D004               	goto	l9020
 14426                           
 14427                           ;doprnt.c: 540: {
 14428                           ;doprnt.c: 541: (putch(c) );
 14429  0009CE  5038               	movf	printf@c,w,c
 14430  0009D0  EC0F  F01F         	call	_putch
 14431                           
 14432                           ;doprnt.c: 542: continue;
 14433  0009D4  D191               	goto	l9142
 14434  0009D6                     l9020:
 14435                           
 14436                           ;doprnt.c: 543: }
 14437                           ;doprnt.c: 546: width = 0;
 14438  0009D6  0E00               	movlw	0
 14439  0009D8  6E37               	movwf	printf@width+1,c
 14440  0009DA  0E00               	movlw	0
 14441  0009DC  6E36               	movwf	printf@width,c
 14442                           
 14443                           ;doprnt.c: 548: flag = 0;
 14444  0009DE  0E00               	movlw	0
 14445  0009E0  6E35               	movwf	printf@flag,c
 14446                           
 14447                           ;doprnt.c: 551: switch(*f) {
 14448                           
 14449                           ;doprnt.c: 550: for(;;) {
 14450  0009E2  D005               	goto	l9026
 14451  0009E4                     l9022:
 14452                           
 14453                           ;doprnt.c: 580: flag |= 0x04;
 14454  0009E4  8435               	bsf	printf@flag,2,c
 14455                           
 14456                           ;doprnt.c: 581: f++;
 14457  0009E6  4A1D               	infsnz	printf@f,f,c
 14458  0009E8  2A1E               	incf	printf@f+1,f,c
 14459                           
 14460                           ;doprnt.c: 582: continue;
 14461  0009EA  D001               	goto	l9026
 14462                           
 14463                           ;doprnt.c: 584: }
 14464  0009EC  D00B               	goto	l9028
 14465  0009EE                     l9026:
 14466  0009EE  C01D  FFF6         	movff	printf@f,tblptrl
 14467  0009F2  C01E  FFF7         	movff	printf@f+1,tblptrh
 14468  0009F6                     	if	0	;tblptru may be non-zero
 14469  0009F6                     	endif
 14470  0009F6                     	if	0	;tblptru may be non-zero
 14471  0009F6                     	endif
 14472  0009F6  0008               	tblrd		*
 14473  0009F8  50F5               	movf	tablat,w,c
 14474                           
 14475                           ; Switch size 1, requested type "space"
 14476                           ; Number of cases is 1, Range of values is 48 to 48
 14477                           ; switch strategies available:
 14478                           ; Name         Instructions Cycles
 14479                           ; simple_byte            4     3 (average)
 14480                           ;	Chosen strategy is simple_byte
 14481  0009FA  0A30               	xorlw	48	; case 48
 14482  0009FC  B4D8               	btfsc	status,2,c
 14483  0009FE  D7F2               	goto	l9022
 14484                           
 14485                           ;doprnt.c: 585: break;
 14486  000A00  D001               	goto	l9028
 14487                           
 14488                           ;doprnt.c: 586: }
 14489  000A02  D7F5               	goto	l9026
 14490  000A04                     l9028:
 14491                           
 14492                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 14493  000A04  C01D  FFF6         	movff	printf@f,tblptrl
 14494  000A08  C01E  FFF7         	movff	printf@f+1,tblptrh
 14495  000A0C                     	if	0	;tblptru may be non-zero
 14496  000A0C                     	endif
 14497  000A0C                     	if	0	;tblptru may be non-zero
 14498  000A0C                     	endif
 14499  000A0C  0008               	tblrd		*
 14500  000A0E  50F5               	movf	tablat,w,c
 14501  000A10  EC7E  F01D         	call	_isdigit
 14502  000A14  A0D8               	btfss	status,0,c
 14503  000A16  D03B               	goto	l9044
 14504                           
 14505                           ;doprnt.c: 598: width = 0;
 14506  000A18  0E00               	movlw	0
 14507  000A1A  6E37               	movwf	printf@width+1,c
 14508  000A1C  0E00               	movlw	0
 14509  000A1E  6E36               	movwf	printf@width,c
 14510  000A20  D000               	goto	l9032
 14511  000A22                     l9032:
 14512                           
 14513                           ;doprnt.c: 600: width *= 10;
 14514  000A22  C036  F011         	movff	printf@width,___wmul@multiplier
 14515  000A26  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
 14516  000A2A  0E00               	movlw	0
 14517  000A2C  6E14               	movwf	___wmul@multiplicand+1,c
 14518  000A2E  0E0A               	movlw	10
 14519  000A30  6E13               	movwf	___wmul@multiplicand,c
 14520  000A32  EC32  F01D         	call	___wmul	;wreg free
 14521  000A36  C011  F036         	movff	?___wmul,printf@width
 14522  000A3A  C012  F037         	movff	?___wmul+1,printf@width+1
 14523                           
 14524                           ;doprnt.c: 601: width += *f++ - '0';
 14525  000A3E  0ED0               	movlw	208
 14526  000A40  6E2B               	movwf	??_printf& (0+255),c
 14527  000A42  0EFF               	movlw	255
 14528  000A44  6E2C               	movwf	(??_printf+1)& (0+255),c
 14529  000A46  C01D  FFF6         	movff	printf@f,tblptrl
 14530  000A4A  C01E  FFF7         	movff	printf@f+1,tblptrh
 14531  000A4E                     	if	0	;tblptru may be non-zero
 14532  000A4E                     	endif
 14533  000A4E                     	if	0	;tblptru may be non-zero
 14534  000A4E                     	endif
 14535  000A4E  0008               	tblrd		*
 14536  000A50  50F5               	movf	tablat,w,c
 14537  000A52  6E2D               	movwf	(??_printf+2)& (0+255),c
 14538  000A54  6A2E               	clrf	(??_printf+3)& (0+255),c
 14539  000A56  502B               	movf	??_printf,w,c
 14540  000A58  262D               	addwf	??_printf+2,f,c
 14541  000A5A  502C               	movf	??_printf+1,w,c
 14542  000A5C  222E               	addwfc	??_printf+3,f,c
 14543  000A5E  502D               	movf	??_printf+2,w,c
 14544  000A60  2636               	addwf	printf@width,f,c
 14545  000A62  502E               	movf	??_printf+3,w,c
 14546  000A64  2237               	addwfc	printf@width+1,f,c
 14547  000A66  4A1D               	infsnz	printf@f,f,c
 14548  000A68  2A1E               	incf	printf@f+1,f,c
 14549                           
 14550                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 14551  000A6A  C01D  FFF6         	movff	printf@f,tblptrl
 14552  000A6E  C01E  FFF7         	movff	printf@f+1,tblptrh
 14553  000A72                     	if	0	;tblptru may be non-zero
 14554  000A72                     	endif
 14555  000A72                     	if	0	;tblptru may be non-zero
 14556  000A72                     	endif
 14557  000A72  0008               	tblrd		*
 14558  000A74  50F5               	movf	tablat,w,c
 14559  000A76  EC7E  F01D         	call	_isdigit
 14560  000A7A  A0D8               	btfss	status,0,c
 14561  000A7C  D008               	goto	l9044
 14562  000A7E  D7D1               	goto	l9032
 14563                           
 14564                           ;doprnt.c: 608: }
 14565                           ;doprnt.c: 635: switch(c = *f++) {
 14566  000A80  D006               	goto	l9044
 14567                           
 14568                           ;doprnt.c: 638: goto alldone;
 14569                           
 14570                           ;doprnt.c: 637: case 0:
 14571  000A82  D148               	goto	l1512
 14572                           
 14573                           ;doprnt.c: 698: case 'i':
 14574                           ;doprnt.c: 699: break;
 14575                           
 14576                           ;doprnt.c: 697: case 'd':
 14577  000A84  D01B               	goto	l1475
 14578  000A86                     l9040:
 14579                           
 14580                           ;doprnt.c: 721: flag |= 0x80;
 14581  000A86  8E35               	bsf	printf@flag,7,c
 14582                           
 14583                           ;doprnt.c: 723: break;
 14584  000A88  D019               	goto	l1475
 14585                           
 14586                           ;doprnt.c: 813: continue;
 14587                           
 14588                           ;doprnt.c: 802: default:
 14589  000A8A  D136               	goto	l9142
 14590                           
 14591                           ;doprnt.c: 822: }
 14592  000A8C  D017               	goto	l1475
 14593  000A8E                     l9044:
 14594  000A8E  C01D  FFF6         	movff	printf@f,tblptrl
 14595  000A92  C01E  FFF7         	movff	printf@f+1,tblptrh
 14596  000A96  4A1D               	infsnz	printf@f,f,c
 14597  000A98  2A1E               	incf	printf@f+1,f,c
 14598  000A9A                     	if	0	;tblptru may be non-zero
 14599  000A9A                     	endif
 14600  000A9A                     	if	0	;tblptru may be non-zero
 14601  000A9A                     	endif
 14602  000A9A  0008               	tblrd		*
 14603  000A9C  CFF5 F038          	movff	tablat,printf@c
 14604  000AA0  5038               	movf	printf@c,w,c
 14605                           
 14606                           ; Switch size 1, requested type "space"
 14607                           ; Number of cases is 4, Range of values is 0 to 120
 14608                           ; switch strategies available:
 14609                           ; Name         Instructions Cycles
 14610                           ; simple_byte           13     7 (average)
 14611                           ;	Chosen strategy is simple_byte
 14612  000AA2  0A00               	xorlw	0	; case 0
 14613  000AA4  B4D8               	btfsc	status,2,c
 14614  000AA6  D136               	goto	l1512
 14615  000AA8  0A64               	xorlw	100	; case 100
 14616  000AAA  B4D8               	btfsc	status,2,c
 14617  000AAC  D007               	goto	l1475
 14618  000AAE  0A0D               	xorlw	13	; case 105
 14619  000AB0  B4D8               	btfsc	status,2,c
 14620  000AB2  D004               	goto	l1475
 14621  000AB4  0A11               	xorlw	17	; case 120
 14622  000AB6  B4D8               	btfsc	status,2,c
 14623  000AB8  D7E6               	goto	l9040
 14624  000ABA  D11E               	goto	l9142
 14625  000ABC                     l1475:
 14626                           
 14627                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 14628  000ABC  BE35               	btfsc	printf@flag,7,c
 14629  000ABE  D015               	goto	l9056
 14630                           
 14631                           ;doprnt.c: 1253: {
 14632                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 14633  000AC0  C030  FFD9         	movff	printf@ap,fsr2l
 14634  000AC4  C031  FFDA         	movff	printf@ap+1,fsr2h
 14635  000AC8  CFDE F033          	movff	postinc2,printf@val
 14636  000ACC  CFDD F034          	movff	postdec2,printf@val+1
 14637  000AD0  0E02               	movlw	2
 14638  000AD2  2630               	addwf	printf@ap,f,c
 14639  000AD4  0E00               	movlw	0
 14640  000AD6  2231               	addwfc	printf@ap+1,f,c
 14641                           
 14642                           ;doprnt.c: 1261: if((int)val < 0) {
 14643  000AD8  AE34               	btfss	printf@val+1,7,c
 14644  000ADA  D04E               	goto	l9090
 14645                           
 14646                           ;doprnt.c: 1262: flag |= 0x03;
 14647  000ADC  0E03               	movlw	3
 14648  000ADE  1235               	iorwf	printf@flag,f,c
 14649                           
 14650                           ;doprnt.c: 1263: val = -val;
 14651  000AE0  6C33               	negf	printf@val,c
 14652  000AE2  1E34               	comf	printf@val+1,f,c
 14653  000AE4  B0D8               	btfsc	status,0,c
 14654  000AE6  2A34               	incf	printf@val+1,f,c
 14655                           
 14656                           ;doprnt.c: 1264: }
 14657                           ;doprnt.c: 1266: }
 14658  000AE8  D047               	goto	l9090
 14659  000AEA                     l9056:
 14660                           
 14661                           ;doprnt.c: 1268: else
 14662                           ;doprnt.c: 1273: {
 14663                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14664  000AEA  C030  FFD9         	movff	printf@ap,fsr2l
 14665  000AEE  C031  FFDA         	movff	printf@ap+1,fsr2h
 14666  000AF2  CFDE F033          	movff	postinc2,printf@val
 14667  000AF6  CFDD F034          	movff	postdec2,printf@val+1
 14668  000AFA  0E02               	movlw	2
 14669  000AFC  2630               	addwf	printf@ap,f,c
 14670  000AFE  0E00               	movlw	0
 14671  000B00  2231               	addwfc	printf@ap+1,f,c
 14672                           
 14673                           ;doprnt.c: 1287: }
 14674                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 14675  000B02  D03A               	goto	l9090
 14676  000B04                     l9060:
 14677                           
 14678                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14679  000B04  0E01               	movlw	1
 14680  000B06  6E38               	movwf	printf@c,c
 14681  000B08                     l9062:
 14682  000B08  0E05               	movlw	5
 14683  000B0A  1838               	xorwf	printf@c,w,c
 14684  000B0C  B4D8               	btfsc	status,2,c
 14685  000B0E  D03D               	goto	l9092
 14686  000B10  D001               	goto	l9066
 14687  000B12  D03B               	goto	l9092
 14688  000B14                     l9066:
 14689                           
 14690                           ;doprnt.c: 1306: if(val < dpowers[c])
 14691  000B14  5038               	movf	printf@c,w,c
 14692  000B16  0D02               	mullw	2
 14693  000B18  0E86               	movlw	low _dpowers
 14694  000B1A  24F3               	addwf	prodl,w,c
 14695  000B1C  6EF6               	movwf	tblptrl,c
 14696  000B1E  0EFD               	movlw	high _dpowers
 14697  000B20  20F4               	addwfc	prodh,w,c
 14698  000B22  6EF7               	movwf	tblptrh,c
 14699  000B24                     	if	0	;There are less than 3 active tblptr bytes
 14700  000B24                     	endif
 14701  000B24  0009               	tblrd		*+
 14702  000B26  50F5               	movf	tablat,w,c
 14703  000B28  5C33               	subwf	printf@val,w,c
 14704  000B2A  0009               	tblrd		*+
 14705  000B2C  50F5               	movf	tablat,w,c
 14706  000B2E  5834               	subwfb	printf@val+1,w,c
 14707  000B30  A0D8               	btfss	status,0,c
 14708  000B32  D02B               	goto	l9092
 14709  000B34  D001               	goto	l9070
 14710                           
 14711                           ;doprnt.c: 1307: break;
 14712  000B36  D029               	goto	l9092
 14713  000B38                     l9070:
 14714  000B38  2A38               	incf	printf@c,f,c
 14715  000B3A  D7E6               	goto	l9062
 14716                           
 14717                           ;doprnt.c: 1309: break;
 14718  000B3C  D026               	goto	l9092
 14719  000B3E                     l9074:
 14720                           
 14721                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 14722  000B3E  0E01               	movlw	1
 14723  000B40  6E38               	movwf	printf@c,c
 14724  000B42                     l9076:
 14725  000B42  0E04               	movlw	4
 14726  000B44  1838               	xorwf	printf@c,w,c
 14727  000B46  B4D8               	btfsc	status,2,c
 14728  000B48  D020               	goto	l9092
 14729  000B4A  D001               	goto	l9080
 14730  000B4C  D01E               	goto	l9092
 14731  000B4E                     l9080:
 14732                           
 14733                           ;doprnt.c: 1317: if(val < hexpowers[c])
 14734  000B4E  5038               	movf	printf@c,w,c
 14735  000B50  0D02               	mullw	2
 14736  000B52  0E90               	movlw	low _hexpowers
 14737  000B54  24F3               	addwf	prodl,w,c
 14738  000B56  6EF6               	movwf	tblptrl,c
 14739  000B58  0EFD               	movlw	high _hexpowers
 14740  000B5A  20F4               	addwfc	prodh,w,c
 14741  000B5C  6EF7               	movwf	tblptrh,c
 14742  000B5E                     	if	0	;There are less than 3 active tblptr bytes
 14743  000B5E                     	endif
 14744  000B5E  0009               	tblrd		*+
 14745  000B60  50F5               	movf	tablat,w,c
 14746  000B62  5C33               	subwf	printf@val,w,c
 14747  000B64  0009               	tblrd		*+
 14748  000B66  50F5               	movf	tablat,w,c
 14749  000B68  5834               	subwfb	printf@val+1,w,c
 14750  000B6A  A0D8               	btfss	status,0,c
 14751  000B6C  D00E               	goto	l9092
 14752  000B6E  D001               	goto	l9084
 14753                           
 14754                           ;doprnt.c: 1318: break;
 14755  000B70  D00C               	goto	l9092
 14756  000B72                     l9084:
 14757  000B72  2A38               	incf	printf@c,f,c
 14758  000B74  D7E6               	goto	l9076
 14759                           
 14760                           ;doprnt.c: 1336: }
 14761                           
 14762                           ;doprnt.c: 1320: break;
 14763  000B76  D009               	goto	l9092
 14764  000B78                     l9090:
 14765  000B78  5035               	movf	printf@flag,w,c
 14766  000B7A  0B80               	andlw	128
 14767                           
 14768                           ; Switch size 1, requested type "space"
 14769                           ; Number of cases is 2, Range of values is 0 to 128
 14770                           ; switch strategies available:
 14771                           ; Name         Instructions Cycles
 14772                           ; simple_byte            7     4 (average)
 14773                           ;	Chosen strategy is simple_byte
 14774  000B7C  0A00               	xorlw	0	; case 0
 14775  000B7E  B4D8               	btfsc	status,2,c
 14776  000B80  D7C1               	goto	l9060
 14777  000B82  0A80               	xorlw	128	; case 128
 14778  000B84  B4D8               	btfsc	status,2,c
 14779  000B86  D7DB               	goto	l9074
 14780  000B88  D000               	goto	l9092
 14781  000B8A                     l9092:
 14782                           
 14783                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14784  000B8A  5036               	movf	printf@width,w,c
 14785  000B8C  1037               	iorwf	printf@width+1,w,c
 14786  000B8E  B4D8               	btfsc	status,2,c
 14787  000B90  D00A               	goto	l9098
 14788  000B92  C035  F02B         	movff	printf@flag,??_printf
 14789  000B96  0E03               	movlw	3
 14790  000B98  162B               	andwf	??_printf,f,c
 14791  000B9A  B4D8               	btfsc	status,2,c
 14792  000B9C  D004               	goto	l9098
 14793                           
 14794                           ;doprnt.c: 1346: width--;
 14795  000B9E  0636               	decf	printf@width,f,c
 14796  000BA0  A0D8               	btfss	status,0,c
 14797  000BA2  0637               	decf	printf@width+1,f,c
 14798  000BA4  D000               	goto	l9098
 14799  000BA6                     l9098:
 14800                           
 14801                           ;doprnt.c: 1381: if(width > c)
 14802  000BA6  0E80               	movlw	128
 14803  000BA8  BE38               	btfsc	printf@c,7,c
 14804  000BAA  0E7F               	movlw	127
 14805  000BAC  6E2B               	movwf	??_printf& (0+255),c
 14806  000BAE  5036               	movf	printf@width,w,c
 14807  000BB0  5C38               	subwf	printf@c,w,c
 14808  000BB2  5037               	movf	printf@width+1,w,c
 14809  000BB4  0A80               	xorlw	128
 14810  000BB6  582B               	subwfb	??_printf& (0+255),w,c
 14811  000BB8  B0D8               	btfsc	status,0,c
 14812  000BBA  D007               	goto	l9102
 14813                           
 14814                           ;doprnt.c: 1382: width -= c;
 14815  000BBC  5038               	movf	printf@c,w,c
 14816  000BBE  5E36               	subwf	printf@width,f,c
 14817  000BC0  0E00               	movlw	0
 14818  000BC2  BE38               	btfsc	printf@c,7,c
 14819  000BC4  0EFF               	movlw	255
 14820  000BC6  5A37               	subwfb	printf@width+1,f,c
 14821  000BC8  D005               	goto	l9104
 14822  000BCA                     l9102:
 14823                           
 14824                           ;doprnt.c: 1383: else
 14825                           ;doprnt.c: 1384: width = 0;
 14826  000BCA  0E00               	movlw	0
 14827  000BCC  6E37               	movwf	printf@width+1,c
 14828  000BCE  0E00               	movlw	0
 14829  000BD0  6E36               	movwf	printf@width,c
 14830  000BD2  D000               	goto	l9104
 14831  000BD4                     l9104:
 14832                           
 14833                           ;doprnt.c: 1387: if(flag & 0x04) {
 14834  000BD4  A435               	btfss	printf@flag,2,c
 14835  000BD6  D01A               	goto	l9116
 14836                           
 14837                           ;doprnt.c: 1392: if(flag & 0x03)
 14838  000BD8  C035  F02B         	movff	printf@flag,??_printf
 14839  000BDC  0E03               	movlw	3
 14840  000BDE  162B               	andwf	??_printf,f,c
 14841  000BE0  B4D8               	btfsc	status,2,c
 14842  000BE2  D004               	goto	l9110
 14843                           
 14844                           ;doprnt.c: 1393: (putch('-') );
 14845  000BE4  0E2D               	movlw	45
 14846  000BE6  EC0F  F01F         	call	_putch
 14847  000BEA  D000               	goto	l9110
 14848  000BEC                     l9110:
 14849                           
 14850                           ;doprnt.c: 1415: if(width)
 14851  000BEC  5036               	movf	printf@width,w,c
 14852  000BEE  1037               	iorwf	printf@width+1,w,c
 14853  000BF0  B4D8               	btfsc	status,2,c
 14854  000BF2  D026               	goto	l9126
 14855  000BF4                     l9112:
 14856                           
 14857                           ;doprnt.c: 1417: (putch('0') );
 14858  000BF4  0E30               	movlw	48
 14859  000BF6  EC0F  F01F         	call	_putch
 14860                           
 14861                           ;doprnt.c: 1418: while(--width);
 14862  000BFA  0636               	decf	printf@width,f,c
 14863  000BFC  A0D8               	btfss	status,0,c
 14864  000BFE  0637               	decf	printf@width+1,f,c
 14865  000C00  5036               	movf	printf@width,w,c
 14866  000C02  1037               	iorwf	printf@width+1,w,c
 14867  000C04  B4D8               	btfsc	status,2,c
 14868  000C06  D01C               	goto	l9126
 14869  000C08  D7F5               	goto	l9112
 14870                           
 14871                           ;doprnt.c: 1420: } else
 14872  000C0A  D01A               	goto	l9126
 14873  000C0C                     l9116:
 14874                           
 14875                           ;doprnt.c: 1422: {
 14876                           ;doprnt.c: 1424: if(width
 14877                           ;doprnt.c: 1428: )
 14878  000C0C  5036               	movf	printf@width,w,c
 14879  000C0E  1037               	iorwf	printf@width+1,w,c
 14880  000C10  B4D8               	btfsc	status,2,c
 14881  000C12  D00C               	goto	l9122
 14882  000C14                     l9118:
 14883                           
 14884                           ;doprnt.c: 1430: (putch(' ') );
 14885  000C14  0E20               	movlw	32
 14886  000C16  EC0F  F01F         	call	_putch
 14887                           
 14888                           ;doprnt.c: 1431: while(--width);
 14889  000C1A  0636               	decf	printf@width,f,c
 14890  000C1C  A0D8               	btfss	status,0,c
 14891  000C1E  0637               	decf	printf@width+1,f,c
 14892  000C20  5036               	movf	printf@width,w,c
 14893  000C22  1037               	iorwf	printf@width+1,w,c
 14894  000C24  B4D8               	btfsc	status,2,c
 14895  000C26  D002               	goto	l9122
 14896  000C28  D7F5               	goto	l9118
 14897  000C2A  D000               	goto	l9122
 14898  000C2C                     l9122:
 14899                           
 14900                           ;doprnt.c: 1438: if(flag & 0x03)
 14901  000C2C  C035  F02B         	movff	printf@flag,??_printf
 14902  000C30  0E03               	movlw	3
 14903  000C32  162B               	andwf	??_printf,f,c
 14904  000C34  B4D8               	btfsc	status,2,c
 14905  000C36  D004               	goto	l9126
 14906                           
 14907                           ;doprnt.c: 1439: (putch('-') );
 14908  000C38  0E2D               	movlw	45
 14909  000C3A  EC0F  F01F         	call	_putch
 14910  000C3E  D000               	goto	l9126
 14911  000C40                     l9126:
 14912                           
 14913                           ;doprnt.c: 1469: }
 14914                           ;doprnt.c: 1472: prec = c;
 14915  000C40  C038  F032         	movff	printf@c,printf@prec
 14916                           
 14917                           ;doprnt.c: 1474: while(prec--) {
 14918  000C44  D053               	goto	l9140
 14919                           
 14920                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
 14921  000C46  D045               	goto	l9136
 14922  000C48                     l9128:
 14923                           
 14924                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14925  000C48  5032               	movf	printf@prec,w,c
 14926  000C4A  0D02               	mullw	2
 14927  000C4C  0E86               	movlw	low _dpowers
 14928  000C4E  24F3               	addwf	prodl,w,c
 14929  000C50  6EF6               	movwf	tblptrl,c
 14930  000C52  0EFD               	movlw	high _dpowers
 14931  000C54  20F4               	addwfc	prodh,w,c
 14932  000C56  6EF7               	movwf	tblptrh,c
 14933  000C58                     	if	0	;There are less than 3 active tblptr bytes
 14934  000C58                     	endif
 14935  000C58  0009               	tblrd		*+
 14936  000C5A  CFF5 F013          	movff	tablat,___lwdiv@divisor
 14937  000C5E  000A               	tblrd		*-
 14938  000C60  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
 14939  000C64  C033  F011         	movff	printf@val,___lwdiv@dividend
 14940  000C68  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
 14941  000C6C  ECA2  F019         	call	___lwdiv	;wreg free
 14942  000C70  C011  F018         	movff	?___lwdiv,___lwmod@dividend
 14943  000C74  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
 14944  000C78  0E00               	movlw	0
 14945  000C7A  6E1B               	movwf	___lwmod@divisor+1,c
 14946  000C7C  0E0A               	movlw	10
 14947  000C7E  6E1A               	movwf	___lwmod@divisor,c
 14948  000C80  EC70  F01B         	call	___lwmod	;wreg free
 14949  000C84  5018               	movf	?___lwmod,w,c
 14950  000C86  0F30               	addlw	48
 14951  000C88  6E38               	movwf	printf@c,c
 14952                           
 14953                           ;doprnt.c: 1491: break;
 14954  000C8A  D02C               	goto	l9138
 14955  000C8C                     l9130:
 14956                           
 14957                           ;doprnt.c: 1499: {
 14958                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 14959  000C8C  C033  F011         	movff	printf@val,___lwdiv@dividend
 14960  000C90  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
 14961  000C94  5032               	movf	printf@prec,w,c
 14962  000C96  0D02               	mullw	2
 14963  000C98  0E90               	movlw	low _hexpowers
 14964  000C9A  24F3               	addwf	prodl,w,c
 14965  000C9C  6EF6               	movwf	tblptrl,c
 14966  000C9E  0EFD               	movlw	high _hexpowers
 14967  000CA0  20F4               	addwfc	prodh,w,c
 14968  000CA2  6EF7               	movwf	tblptrh,c
 14969  000CA4                     	if	0	;There are less than 3 active tblptr bytes
 14970  000CA4                     	endif
 14971  000CA4  0009               	tblrd		*+
 14972  000CA6  CFF5 F013          	movff	tablat,___lwdiv@divisor
 14973  000CAA  000A               	tblrd		*-
 14974  000CAC  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
 14975  000CB0  ECA2  F019         	call	___lwdiv	;wreg free
 14976  000CB4  5011               	movf	?___lwdiv,w,c
 14977  000CB6  0B0F               	andlw	15
 14978  000CB8  6E2F               	movwf	printf@idx,c
 14979                           
 14980                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 14981  000CBA  502F               	movf	printf@idx,w,c
 14982  000CBC  0D01               	mullw	1
 14983  000CBE  0E12               	movlw	low STR_56
 14984  000CC0  24F3               	addwf	prodl,w,c
 14985  000CC2  6EF6               	movwf	tblptrl,c
 14986  000CC4  0EFF               	movlw	high STR_56
 14987  000CC6  20F4               	addwfc	prodh,w,c
 14988  000CC8  6EF7               	movwf	tblptrh,c
 14989  000CCA                     	if	0	;There are less than 3 active tblptr bytes
 14990  000CCA                     	endif
 14991  000CCA  0008               	tblrd		*
 14992  000CCC  CFF5 F038          	movff	tablat,printf@c
 14993                           
 14994                           ;doprnt.c: 1523: }
 14995                           
 14996                           ;doprnt.c: 1508: }
 14997                           ;doprnt.c: 1510: break;
 14998  000CD0  D009               	goto	l9138
 14999  000CD2                     l9136:
 15000  000CD2  5035               	movf	printf@flag,w,c
 15001  000CD4  0B80               	andlw	128
 15002                           
 15003                           ; Switch size 1, requested type "space"
 15004                           ; Number of cases is 2, Range of values is 0 to 128
 15005                           ; switch strategies available:
 15006                           ; Name         Instructions Cycles
 15007                           ; simple_byte            7     4 (average)
 15008                           ;	Chosen strategy is simple_byte
 15009  000CD6  0A00               	xorlw	0	; case 0
 15010  000CD8  B4D8               	btfsc	status,2,c
 15011  000CDA  D7B6               	goto	l9128
 15012  000CDC  0A80               	xorlw	128	; case 128
 15013  000CDE  B4D8               	btfsc	status,2,c
 15014  000CE0  D7D5               	goto	l9130
 15015  000CE2  D000               	goto	l9138
 15016  000CE4                     l9138:
 15017                           
 15018                           ;doprnt.c: 1524: (putch(c) );
 15019  000CE4  5038               	movf	printf@c,w,c
 15020  000CE6  EC0F  F01F         	call	_putch
 15021  000CEA  D000               	goto	l9140
 15022  000CEC                     l9140:
 15023  000CEC  0632               	decf	printf@prec,f,c
 15024  000CEE  2832               	incf	printf@prec,w,c
 15025  000CF0  B4D8               	btfsc	status,2,c
 15026  000CF2  D002               	goto	l9142
 15027  000CF4  D7EE               	goto	l9136
 15028  000CF6  D000               	goto	l9142
 15029  000CF8                     l9142:
 15030  000CF8  C01D  FFF6         	movff	printf@f,tblptrl
 15031  000CFC  C01E  FFF7         	movff	printf@f+1,tblptrh
 15032  000D00  4A1D               	infsnz	printf@f,f,c
 15033  000D02  2A1E               	incf	printf@f+1,f,c
 15034  000D04                     	if	0	;tblptru may be non-zero
 15035  000D04                     	endif
 15036  000D04                     	if	0	;tblptru may be non-zero
 15037  000D04                     	endif
 15038  000D04  0008               	tblrd		*
 15039  000D06  CFF5 F038          	movff	tablat,printf@c
 15040  000D0A  5038               	movf	printf@c,w,c
 15041  000D0C  B4D8               	btfsc	status,2,c
 15042  000D0E  D002               	goto	l1512
 15043  000D10  D65A               	goto	l9016
 15044  000D12  D000               	goto	l1512
 15045  000D14                     l1512:
 15046  000D14  0012               	return		;funcret
 15047  000D16                     __end_of_printf:
 15048                           	opt stack 0
 15049                           tblptru	equ	0xFF8
 15050                           tblptrh	equ	0xFF7
 15051                           tblptrl	equ	0xFF6
 15052                           tablat	equ	0xFF5
 15053                           prodh	equ	0xFF4
 15054                           prodl	equ	0xFF3
 15055                           intcon	equ	0xFF2
 15056                           intcon2	equ	0xFF1
 15057                           postinc0	equ	0xFEE
 15058                           wreg	equ	0xFE8
 15059                           postdec1	equ	0xFE5
 15060                           fsr1l	equ	0xFE1
 15061                           indf2	equ	0xFDF
 15062                           postinc2	equ	0xFDE
 15063                           postdec2	equ	0xFDD
 15064                           fsr2h	equ	0xFDA
 15065                           fsr2l	equ	0xFD9
 15066                           status	equ	0xFD8
 15067                           
 15068 ;; *************** function _putch *****************
 15069 ;; Defined at:
 15070 ;;		line 73 in file "Main.c"
 15071 ;; Parameters:    Size  Location     Type
 15072 ;;  c               1    wreg     unsigned char 
 15073 ;; Auto vars:     Size  Location     Type
 15074 ;;  c               1   16[COMRAM] unsigned char 
 15075 ;; Return value:  Size  Location     Type
 15076 ;;		None               void
 15077 ;; Registers used:
 15078 ;;		wreg
 15079 ;; Tracked objects:
 15080 ;;		On entry : 0/0
 15081 ;;		On exit  : 0/0
 15082 ;;		Unchanged: 0/0
 15083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15085 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15087 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15088 ;;Total ram usage:        1 bytes
 15089 ;; Hardware stack levels used:    1
 15090 ;; Hardware stack levels required when called:    3
 15091 ;; This function calls:
 15092 ;;		Nothing
 15093 ;; This function is called by:
 15094 ;;		_printf
 15095 ;; This function uses a non-reentrant model
 15096 ;;
 15097                           
 15098                           	psect	text77
 15099  003E1E                     __ptext77:
 15100                           	opt stack 0
 15101  003E1E                     _putch:
 15102                           	opt stack 25
 15103                           
 15104                           ;incstack = 0
 15105                           ;putch@c stored from wreg
 15106  003E1E  6E11               	movwf	putch@c,c
 15107                           
 15108                           ;Main.c: 74: while (!TRMT);
 15109  003E20  D000               	goto	l1405
 15110  003E22                     l1405:
 15111  003E22  A2AC               	btfss	4012,1,c	;volatile
 15112  003E24  D7FE               	goto	l1405
 15113                           
 15114                           ;Main.c: 75: TXREG = c;
 15115  003E26  C011  FFAD         	movff	putch@c,4013	;volatile
 15116  003E2A  0012               	return		;funcret
 15117  003E2C                     __end_of_putch:
 15118                           	opt stack 0
 15119                           tblptru	equ	0xFF8
 15120                           tblptrh	equ	0xFF7
 15121                           tblptrl	equ	0xFF6
 15122                           tablat	equ	0xFF5
 15123                           prodh	equ	0xFF4
 15124                           prodl	equ	0xFF3
 15125                           intcon	equ	0xFF2
 15126                           intcon2	equ	0xFF1
 15127                           postinc0	equ	0xFEE
 15128                           wreg	equ	0xFE8
 15129                           postdec1	equ	0xFE5
 15130                           fsr1l	equ	0xFE1
 15131                           indf2	equ	0xFDF
 15132                           postinc2	equ	0xFDE
 15133                           postdec2	equ	0xFDD
 15134                           fsr2h	equ	0xFDA
 15135                           fsr2l	equ	0xFD9
 15136                           status	equ	0xFD8
 15137                           
 15138 ;; *************** function _isdigit *****************
 15139 ;; Defined at:
 15140 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
 15141 ;; Parameters:    Size  Location     Type
 15142 ;;  c               1    wreg     unsigned char 
 15143 ;; Auto vars:     Size  Location     Type
 15144 ;;  c               1   18[COMRAM] unsigned char 
 15145 ;; Return value:  Size  Location     Type
 15146 ;;		None               void
 15147 ;; Registers used:
 15148 ;;		wreg, status,2, status,0
 15149 ;; Tracked objects:
 15150 ;;		On entry : 0/0
 15151 ;;		On exit  : 0/0
 15152 ;;		Unchanged: 0/0
 15153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15155 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15156 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15157 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15158 ;;Total ram usage:        3 bytes
 15159 ;; Hardware stack levels used:    1
 15160 ;; Hardware stack levels required when called:    3
 15161 ;; This function calls:
 15162 ;;		Nothing
 15163 ;; This function is called by:
 15164 ;;		_printf
 15165 ;; This function uses a non-reentrant model
 15166 ;;
 15167                           
 15168                           	psect	text78
 15169  003AFC                     __ptext78:
 15170                           	opt stack 0
 15171  003AFC                     _isdigit:
 15172                           	opt stack 25
 15173                           
 15174                           ;incstack = 0
 15175                           ;isdigit@c stored from wreg
 15176  003AFC  6E13               	movwf	isdigit@c,c
 15177  003AFE  0E00               	movlw	0
 15178  003B00  6E12               	movwf	_isdigit$2887,c
 15179  003B02  0E3A               	movlw	58
 15180  003B04  6013               	cpfslt	isdigit@c,c
 15181  003B06  D006               	goto	l8626
 15182  003B08  0E2F               	movlw	47
 15183  003B0A  6413               	cpfsgt	isdigit@c,c
 15184  003B0C  D003               	goto	l8626
 15185  003B0E  0E01               	movlw	1
 15186  003B10  6E12               	movwf	_isdigit$2887,c
 15187  003B12  D000               	goto	l8626
 15188  003B14                     l8626:
 15189  003B14  C012  F011         	movff	_isdigit$2887,??_isdigit
 15190  003B18  3011               	rrcf	??_isdigit,w,c
 15191  003B1A  D000               	goto	l1979
 15192  003B1C                     l1979:
 15193  003B1C  0012               	return		;funcret
 15194  003B1E                     __end_of_isdigit:
 15195                           	opt stack 0
 15196                           tblptru	equ	0xFF8
 15197                           tblptrh	equ	0xFF7
 15198                           tblptrl	equ	0xFF6
 15199                           tablat	equ	0xFF5
 15200                           prodh	equ	0xFF4
 15201                           prodl	equ	0xFF3
 15202                           intcon	equ	0xFF2
 15203                           intcon2	equ	0xFF1
 15204                           postinc0	equ	0xFEE
 15205                           wreg	equ	0xFE8
 15206                           postdec1	equ	0xFE5
 15207                           fsr1l	equ	0xFE1
 15208                           indf2	equ	0xFDF
 15209                           postinc2	equ	0xFDE
 15210                           postdec2	equ	0xFDD
 15211                           fsr2h	equ	0xFDA
 15212                           fsr2l	equ	0xFD9
 15213                           status	equ	0xFD8
 15214                           
 15215 ;; *************** function ___lwmod *****************
 15216 ;; Defined at:
 15217 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
 15218 ;; Parameters:    Size  Location     Type
 15219 ;;  dividend        2   23[COMRAM] unsigned int 
 15220 ;;  divisor         2   25[COMRAM] unsigned int 
 15221 ;; Auto vars:     Size  Location     Type
 15222 ;;  counter         1   27[COMRAM] unsigned char 
 15223 ;; Return value:  Size  Location     Type
 15224 ;;                  2   23[COMRAM] unsigned int 
 15225 ;; Registers used:
 15226 ;;		wreg, status,2, status,0
 15227 ;; Tracked objects:
 15228 ;;		On entry : 0/0
 15229 ;;		On exit  : 0/0
 15230 ;;		Unchanged: 0/0
 15231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15232 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15233 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15235 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15236 ;;Total ram usage:        5 bytes
 15237 ;; Hardware stack levels used:    1
 15238 ;; Hardware stack levels required when called:    3
 15239 ;; This function calls:
 15240 ;;		Nothing
 15241 ;; This function is called by:
 15242 ;;		_printf
 15243 ;; This function uses a non-reentrant model
 15244 ;;
 15245                           
 15246                           	psect	text79
 15247  0036E0                     __ptext79:
 15248                           	opt stack 0
 15249  0036E0                     ___lwmod:
 15250                           	opt stack 25
 15251                           
 15252                           ;incstack = 0
 15253  0036E0  501A               	movf	___lwmod@divisor,w,c
 15254  0036E2  101B               	iorwf	___lwmod@divisor+1,w,c
 15255  0036E4  B4D8               	btfsc	status,2,c
 15256  0036E6  D01D               	goto	l2081
 15257  0036E8  0E01               	movlw	1
 15258  0036EA  6E1C               	movwf	___lwmod@counter,c
 15259  0036EC  D005               	goto	l8882
 15260  0036EE                     l8880:
 15261  0036EE  90D8               	bcf	status,0,c
 15262  0036F0  361A               	rlcf	___lwmod@divisor,f,c
 15263  0036F2  361B               	rlcf	___lwmod@divisor+1,f,c
 15264  0036F4  2A1C               	incf	___lwmod@counter,f,c
 15265  0036F6  D000               	goto	l8882
 15266  0036F8                     l8882:
 15267  0036F8  BE1B               	btfsc	___lwmod@divisor+1,7,c
 15268  0036FA  D002               	goto	l8884
 15269  0036FC  D7F8               	goto	l8880
 15270  0036FE  D000               	goto	l8884
 15271  003700                     l8884:
 15272  003700  501A               	movf	___lwmod@divisor,w,c
 15273  003702  5C18               	subwf	___lwmod@dividend,w,c
 15274  003704  501B               	movf	___lwmod@divisor+1,w,c
 15275  003706  5819               	subwfb	___lwmod@dividend+1,w,c
 15276  003708  A0D8               	btfss	status,0,c
 15277  00370A  D005               	goto	l8888
 15278  00370C  501A               	movf	___lwmod@divisor,w,c
 15279  00370E  5E18               	subwf	___lwmod@dividend,f,c
 15280  003710  501B               	movf	___lwmod@divisor+1,w,c
 15281  003712  5A19               	subwfb	___lwmod@dividend+1,f,c
 15282  003714  D000               	goto	l8888
 15283  003716                     l8888:
 15284  003716  90D8               	bcf	status,0,c
 15285  003718  321B               	rrcf	___lwmod@divisor+1,f,c
 15286  00371A  321A               	rrcf	___lwmod@divisor,f,c
 15287  00371C  2E1C               	decfsz	___lwmod@counter,f,c
 15288  00371E  D7F0               	goto	l8884
 15289  003720  D000               	goto	l2081
 15290  003722                     l2081:
 15291  003722  C018  F018         	movff	___lwmod@dividend,?___lwmod
 15292  003726  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
 15293  00372A  0012               	return		;funcret
 15294  00372C                     __end_of___lwmod:
 15295                           	opt stack 0
 15296                           tblptru	equ	0xFF8
 15297                           tblptrh	equ	0xFF7
 15298                           tblptrl	equ	0xFF6
 15299                           tablat	equ	0xFF5
 15300                           prodh	equ	0xFF4
 15301                           prodl	equ	0xFF3
 15302                           intcon	equ	0xFF2
 15303                           intcon2	equ	0xFF1
 15304                           postinc0	equ	0xFEE
 15305                           wreg	equ	0xFE8
 15306                           postdec1	equ	0xFE5
 15307                           fsr1l	equ	0xFE1
 15308                           indf2	equ	0xFDF
 15309                           postinc2	equ	0xFDE
 15310                           postdec2	equ	0xFDD
 15311                           fsr2h	equ	0xFDA
 15312                           fsr2l	equ	0xFD9
 15313                           status	equ	0xFD8
 15314                           
 15315 ;; *************** function ___lwdiv *****************
 15316 ;; Defined at:
 15317 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 15318 ;; Parameters:    Size  Location     Type
 15319 ;;  dividend        2   16[COMRAM] unsigned int 
 15320 ;;  divisor         2   18[COMRAM] unsigned int 
 15321 ;; Auto vars:     Size  Location     Type
 15322 ;;  quotient        2   21[COMRAM] unsigned int 
 15323 ;;  counter         1   20[COMRAM] unsigned char 
 15324 ;; Return value:  Size  Location     Type
 15325 ;;                  2   16[COMRAM] unsigned int 
 15326 ;; Registers used:
 15327 ;;		wreg, status,2, status,0
 15328 ;; Tracked objects:
 15329 ;;		On entry : 0/0
 15330 ;;		On exit  : 0/0
 15331 ;;		Unchanged: 0/0
 15332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15333 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15334 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15336 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15337 ;;Total ram usage:        7 bytes
 15338 ;; Hardware stack levels used:    1
 15339 ;; Hardware stack levels required when called:    3
 15340 ;; This function calls:
 15341 ;;		Nothing
 15342 ;; This function is called by:
 15343 ;;		_printf
 15344 ;; This function uses a non-reentrant model
 15345 ;;
 15346                           
 15347                           	psect	text80
 15348  003344                     __ptext80:
 15349                           	opt stack 0
 15350  003344                     ___lwdiv:
 15351                           	opt stack 25
 15352                           
 15353                           ;incstack = 0
 15354  003344  0E00               	movlw	0
 15355  003346  6E17               	movwf	___lwdiv@quotient+1,c
 15356  003348  0E00               	movlw	0
 15357  00334A  6E16               	movwf	___lwdiv@quotient,c
 15358  00334C  5013               	movf	___lwdiv@divisor,w,c
 15359  00334E  1014               	iorwf	___lwdiv@divisor+1,w,c
 15360  003350  B4D8               	btfsc	status,2,c
 15361  003352  D021               	goto	l2071
 15362  003354  0E01               	movlw	1
 15363  003356  6E15               	movwf	___lwdiv@counter,c
 15364  003358  D005               	goto	l8862
 15365  00335A                     l8860:
 15366  00335A  90D8               	bcf	status,0,c
 15367  00335C  3613               	rlcf	___lwdiv@divisor,f,c
 15368  00335E  3614               	rlcf	___lwdiv@divisor+1,f,c
 15369  003360  2A15               	incf	___lwdiv@counter,f,c
 15370  003362  D000               	goto	l8862
 15371  003364                     l8862:
 15372  003364  BE14               	btfsc	___lwdiv@divisor+1,7,c
 15373  003366  D002               	goto	l8864
 15374  003368  D7F8               	goto	l8860
 15375  00336A  D000               	goto	l8864
 15376  00336C                     l8864:
 15377  00336C  90D8               	bcf	status,0,c
 15378  00336E  3616               	rlcf	___lwdiv@quotient,f,c
 15379  003370  3617               	rlcf	___lwdiv@quotient+1,f,c
 15380  003372  5013               	movf	___lwdiv@divisor,w,c
 15381  003374  5C11               	subwf	___lwdiv@dividend,w,c
 15382  003376  5014               	movf	___lwdiv@divisor+1,w,c
 15383  003378  5812               	subwfb	___lwdiv@dividend+1,w,c
 15384  00337A  A0D8               	btfss	status,0,c
 15385  00337C  D006               	goto	l8872
 15386  00337E  5013               	movf	___lwdiv@divisor,w,c
 15387  003380  5E11               	subwf	___lwdiv@dividend,f,c
 15388  003382  5014               	movf	___lwdiv@divisor+1,w,c
 15389  003384  5A12               	subwfb	___lwdiv@dividend+1,f,c
 15390  003386  8016               	bsf	___lwdiv@quotient,0,c
 15391  003388  D000               	goto	l8872
 15392  00338A                     l8872:
 15393  00338A  90D8               	bcf	status,0,c
 15394  00338C  3214               	rrcf	___lwdiv@divisor+1,f,c
 15395  00338E  3213               	rrcf	___lwdiv@divisor,f,c
 15396  003390  2E15               	decfsz	___lwdiv@counter,f,c
 15397  003392  D7EC               	goto	l8864
 15398  003394  D000               	goto	l2071
 15399  003396                     l2071:
 15400  003396  C016  F011         	movff	___lwdiv@quotient,?___lwdiv
 15401  00339A  C017  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
 15402  00339E  0012               	return		;funcret
 15403  0033A0                     __end_of___lwdiv:
 15404                           	opt stack 0
 15405                           tblptru	equ	0xFF8
 15406                           tblptrh	equ	0xFF7
 15407                           tblptrl	equ	0xFF6
 15408                           tablat	equ	0xFF5
 15409                           prodh	equ	0xFF4
 15410                           prodl	equ	0xFF3
 15411                           intcon	equ	0xFF2
 15412                           intcon2	equ	0xFF1
 15413                           postinc0	equ	0xFEE
 15414                           wreg	equ	0xFE8
 15415                           postdec1	equ	0xFE5
 15416                           fsr1l	equ	0xFE1
 15417                           indf2	equ	0xFDF
 15418                           postinc2	equ	0xFDE
 15419                           postdec2	equ	0xFDD
 15420                           fsr2h	equ	0xFDA
 15421                           fsr2l	equ	0xFD9
 15422                           status	equ	0xFD8
 15423                           
 15424 ;; *************** function _drawtext *****************
 15425 ;; Defined at:
 15426 ;;		line 475 in file "ST7735_TFT.c"
 15427 ;; Parameters:    Size  Location     Type
 15428 ;;  x               1    wreg     unsigned char 
 15429 ;;  y               1   56[COMRAM] unsigned char 
 15430 ;;  _text           2   57[COMRAM] PTR unsigned char 
 15431 ;;		 -> NULL(0), setup_alarm_time(9), setup_fan_set_text(5), setup_date(9), 
 15432 ;;		 -> setup_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 15433 ;;		 -> RTC_ALARM_Txt(2), Fan_SW_Txt(4), Fan_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 15434 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 15435 ;;		 -> tempC(4), 
 15436 ;;  color           2   59[COMRAM] unsigned int 
 15437 ;;  bg              2   61[COMRAM] unsigned int 
 15438 ;;  size            1   63[COMRAM] unsigned char 
 15439 ;; Auto vars:     Size  Location     Type
 15440 ;;  x               1    0[BANK1 ] unsigned char 
 15441 ;;  i               2    3[BANK1 ] unsigned int 
 15442 ;;  textsize        2    1[BANK1 ] unsigned int 
 15443 ;;  cursor_x        1    6[BANK1 ] unsigned char 
 15444 ;;  cursor_y        1    5[BANK1 ] unsigned char 
 15445 ;; Return value:  Size  Location     Type
 15446 ;;		None               void
 15447 ;; Registers used:
 15448 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15449 ;; Tracked objects:
 15450 ;;		On entry : 0/0
 15451 ;;		On exit  : 0/0
 15452 ;;		Unchanged: 0/0
 15453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15454 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15455 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15456 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15457 ;;      Totals:        10       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15458 ;;Total ram usage:       17 bytes
 15459 ;; Hardware stack levels used:    1
 15460 ;; Hardware stack levels required when called:    9
 15461 ;; This function calls:
 15462 ;;		_drawChar
 15463 ;;		_strlen
 15464 ;; This function is called by:
 15465 ;;		_Initialize_Screen
 15466 ;;		_Update_Screen
 15467 ;;		_Initialize_Setup_Time_Screen
 15468 ;;		_Update_Setup_Time_Screen
 15469 ;;		_Initialize_Setup_Fan_Screen
 15470 ;;		_Update_Setup_Fan_Screen
 15471 ;;		_Initialize_Setup_Alarm_Time_Screen
 15472 ;;		_Update_Setup_Alarm_Time_Screen
 15473 ;; This function uses a non-reentrant model
 15474 ;;
 15475                           
 15476                           	psect	text81
 15477  001E22                     __ptext81:
 15478                           	opt stack 0
 15479  001E22                     _drawtext:
 15480                           	opt stack 20
 15481                           
 15482                           ;incstack = 0
 15483                           ;drawtext@x stored from wreg
 15484  001E22  0101               	movlb	1	; () banked
 15485  001E24  6F44               	movwf	drawtext@x& (0+255),b
 15486                           
 15487                           ; BSR set to: 1
 15488                           ;ST7735_TFT.c: 477: unsigned char cursor_x, cursor_y;
 15489                           ;ST7735_TFT.c: 478: unsigned int textsize, i;
 15490                           ;ST7735_TFT.c: 479: cursor_x = x, cursor_y = y;
 15491  001E26  C144  F14A         	movff	drawtext@x,drawtext@cursor_x
 15492                           
 15493                           ; BSR set to: 1
 15494  001E2A  C039  F149         	movff	drawtext@y,drawtext@cursor_y
 15495                           
 15496                           ; BSR set to: 1
 15497                           ;ST7735_TFT.c: 480: textsize = strlen(_text);
 15498  001E2E  C03A  F011         	movff	drawtext@_text,strlen@s
 15499  001E32  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
 15500  001E36  EC44  F01C         	call	_strlen	;wreg free
 15501  001E3A  C011  F145         	movff	?_strlen,drawtext@textsize
 15502  001E3E  C012  F146         	movff	?_strlen+1,drawtext@textsize+1
 15503                           
 15504                           ;ST7735_TFT.c: 481: for(i = 0; i < textsize; i++){
 15505  001E42  0E00               	movlw	0
 15506  001E44  0101               	movlb	1	; () banked
 15507  001E46  6F48               	movwf	(drawtext@i+1)& (0+255),b
 15508  001E48  0E00               	movlw	0
 15509  001E4A  6F47               	movwf	drawtext@i& (0+255),b
 15510  001E4C  D066               	goto	l8932
 15511  001E4E                     l8906:
 15512                           
 15513                           ; BSR set to: 1
 15514                           ;ST7735_TFT.c: 482: if(wrap && ((cursor_x + size * 5) > 128)){
 15515  001E4E  0100               	movlb	0	; () banked
 15516  001E50  5181               	movf	_wrap& (0+255),w,b
 15517  001E52  0100               	movlb	0	; () banked
 15518  001E54  B4D8               	btfsc	status,2,c
 15519  001E56  D034               	goto	l8922
 15520                           
 15521                           ; BSR set to: 0
 15522  001E58  5040               	movf	drawtext@size,w,c
 15523  001E5A  0D05               	mullw	5
 15524  001E5C  0101               	movlb	1	; () banked
 15525  001E5E  514A               	movf	drawtext@cursor_x& (0+255),w,b
 15526  001E60  6E41               	movwf	??_drawtext& (0+255),c
 15527  001E62  6A42               	clrf	(??_drawtext+1)& (0+255),c
 15528  001E64  50F3               	movf	prodl,w,c
 15529  001E66  2641               	addwf	??_drawtext,f,c
 15530  001E68  50F4               	movf	prodh,w,c
 15531  001E6A  2242               	addwfc	??_drawtext+1,f,c
 15532  001E6C  BE42               	btfsc	??_drawtext+1,7,c
 15533  001E6E  D028               	goto	l8922
 15534  001E70  5042               	movf	??_drawtext+1,w,c
 15535  001E72  E104               	bnz	u6390
 15536  001E74  0E81               	movlw	129
 15537  001E76  5C41               	subwf	??_drawtext,w,c
 15538  001E78  A0D8               	btfss	status,0,c
 15539  001E7A  D022               	goto	l8922
 15540  001E7C                     u6390:
 15541                           
 15542                           ; BSR set to: 1
 15543                           ;ST7735_TFT.c: 483: cursor_x = 0;
 15544  001E7C  0E00               	movlw	0
 15545  001E7E  0101               	movlb	1	; () banked
 15546  001E80  6F4A               	movwf	drawtext@cursor_x& (0+255),b
 15547                           
 15548                           ; BSR set to: 1
 15549                           ;ST7735_TFT.c: 484: cursor_y = cursor_y + size * 7 + 3 ;
 15550  001E82  5040               	movf	drawtext@size,w,c
 15551  001E84  0D07               	mullw	7
 15552  001E86  50F3               	movf	prodl,w,c
 15553  001E88  0101               	movlb	1	; () banked
 15554  001E8A  2549               	addwf	drawtext@cursor_y& (0+255),w,b
 15555  001E8C  0F03               	addlw	3
 15556  001E8E  0101               	movlb	1	; () banked
 15557  001E90  6F49               	movwf	drawtext@cursor_y& (0+255),b
 15558                           
 15559                           ; BSR set to: 1
 15560                           ;ST7735_TFT.c: 485: if(cursor_y > 160) cursor_y = 160;
 15561  001E92  0EA0               	movlw	160
 15562  001E94  0101               	movlb	1	; () banked
 15563  001E96  6549               	cpfsgt	drawtext@cursor_y& (0+255),b
 15564  001E98  D004               	goto	l8918
 15565                           
 15566                           ; BSR set to: 1
 15567  001E9A  0EA0               	movlw	160
 15568  001E9C  0101               	movlb	1	; () banked
 15569  001E9E  6F49               	movwf	drawtext@cursor_y& (0+255),b
 15570  001EA0  D000               	goto	l8918
 15571  001EA2                     l8918:
 15572                           
 15573                           ; BSR set to: 1
 15574                           ;ST7735_TFT.c: 486: if(_text[i] == 0x20) goto _skip; }
 15575  001EA2  0101               	movlb	1	; () banked
 15576  001EA4  5147               	movf	drawtext@i& (0+255),w,b
 15577  001EA6  243A               	addwf	drawtext@_text,w,c
 15578  001EA8  6ED9               	movwf	fsr2l,c
 15579  001EAA  0101               	movlb	1	; () banked
 15580  001EAC  5148               	movf	(drawtext@i+1)& (0+255),w,b
 15581  001EAE  203B               	addwfc	drawtext@_text+1,w,c
 15582  001EB0  6EDA               	movwf	fsr2h,c
 15583  001EB2  0E20               	movlw	32
 15584  001EB4  18DE               	xorwf	postinc2,w,c
 15585  001EB6  B4D8               	btfsc	status,2,c
 15586  001EB8  D02C               	goto	l8930
 15587  001EBA  D002               	goto	l8922
 15588                           
 15589                           ; BSR set to: 1
 15590  001EBC  D02A               	goto	l8930
 15591                           
 15592                           ; BSR set to: 1
 15593  001EBE  D000               	goto	l8922
 15594  001EC0                     l8922:
 15595                           
 15596                           ;ST7735_TFT.c: 487: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 15597  001EC0  C149  F02E         	movff	drawtext@cursor_y,drawChar@y
 15598  001EC4  0101               	movlb	1	; () banked
 15599  001EC6  5147               	movf	drawtext@i& (0+255),w,b
 15600  001EC8  243A               	addwf	drawtext@_text,w,c
 15601  001ECA  6ED9               	movwf	fsr2l,c
 15602  001ECC  0101               	movlb	1	; () banked
 15603  001ECE  5148               	movf	(drawtext@i+1)& (0+255),w,b
 15604  001ED0  203B               	addwfc	drawtext@_text+1,w,c
 15605  001ED2  6EDA               	movwf	fsr2h,c
 15606  001ED4  50DF               	movf	indf2,w,c
 15607  001ED6  6E2F               	movwf	drawChar@c,c
 15608  001ED8  C03C  F030         	movff	drawtext@color,drawChar@color
 15609  001EDC  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
 15610  001EE0  C03E  F032         	movff	drawtext@bg,drawChar@bg
 15611  001EE4  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
 15612  001EE8  C040  F034         	movff	drawtext@size,drawChar@size
 15613  001EEC  0101               	movlb	1	; () banked
 15614  001EEE  514A               	movf	drawtext@cursor_x& (0+255),w,b
 15615  001EF0  EC57  F00D         	call	_drawChar
 15616                           
 15617                           ;ST7735_TFT.c: 488: cursor_x = cursor_x + size * 6;
 15618  001EF4  5040               	movf	drawtext@size,w,c
 15619  001EF6  0D06               	mullw	6
 15620  001EF8  50F3               	movf	prodl,w,c
 15621  001EFA  0101               	movlb	1	; () banked
 15622  001EFC  254A               	addwf	drawtext@cursor_x& (0+255),w,b
 15623  001EFE  0101               	movlb	1	; () banked
 15624  001F00  6F4A               	movwf	drawtext@cursor_x& (0+255),b
 15625                           
 15626                           ; BSR set to: 1
 15627                           ;ST7735_TFT.c: 489: if(cursor_x > 128) cursor_x = 128;
 15628  001F02  0E80               	movlw	128
 15629  001F04  0101               	movlb	1	; () banked
 15630  001F06  654A               	cpfsgt	drawtext@cursor_x& (0+255),b
 15631  001F08  D004               	goto	l8930
 15632                           
 15633                           ; BSR set to: 1
 15634  001F0A  0E80               	movlw	128
 15635  001F0C  0101               	movlb	1	; () banked
 15636  001F0E  6F4A               	movwf	drawtext@cursor_x& (0+255),b
 15637                           
 15638                           ; BSR set to: 1
 15639  001F10  D000               	goto	l8930
 15640  001F12                     l8930:
 15641                           
 15642                           ; BSR set to: 1
 15643  001F12  0101               	movlb	1	; () banked
 15644  001F14  4B47               	infsnz	drawtext@i& (0+255),f,b
 15645  001F16  2B48               	incf	(drawtext@i+1)& (0+255),f,b
 15646  001F18  D000               	goto	l8932
 15647  001F1A                     l8932:
 15648                           
 15649                           ; BSR set to: 1
 15650  001F1A  0101               	movlb	1	; () banked
 15651  001F1C  5145               	movf	drawtext@textsize& (0+255),w,b
 15652  001F1E  0101               	movlb	1	; () banked
 15653  001F20  5D47               	subwf	drawtext@i& (0+255),w,b
 15654  001F22  0101               	movlb	1	; () banked
 15655  001F24  5146               	movf	(drawtext@textsize+1)& (0+255),w,b
 15656  001F26  0101               	movlb	1	; () banked
 15657  001F28  5948               	subwfb	(drawtext@i+1)& (0+255),w,b
 15658  001F2A  A0D8               	btfss	status,0,c
 15659  001F2C  D790               	goto	l8906
 15660                           
 15661                           ; BSR set to: 1
 15662                           
 15663                           ; BSR set to: 1
 15664  001F2E  0012               	return		;funcret
 15665  001F30                     __end_of_drawtext:
 15666                           	opt stack 0
 15667                           tblptru	equ	0xFF8
 15668                           tblptrh	equ	0xFF7
 15669                           tblptrl	equ	0xFF6
 15670                           tablat	equ	0xFF5
 15671                           prodh	equ	0xFF4
 15672                           prodl	equ	0xFF3
 15673                           intcon	equ	0xFF2
 15674                           intcon2	equ	0xFF1
 15675                           postinc0	equ	0xFEE
 15676                           wreg	equ	0xFE8
 15677                           postdec1	equ	0xFE5
 15678                           fsr1l	equ	0xFE1
 15679                           indf2	equ	0xFDF
 15680                           postinc2	equ	0xFDE
 15681                           postdec2	equ	0xFDD
 15682                           fsr2h	equ	0xFDA
 15683                           fsr2l	equ	0xFD9
 15684                           status	equ	0xFD8
 15685                           
 15686 ;; *************** function _strlen *****************
 15687 ;; Defined at:
 15688 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
 15689 ;; Parameters:    Size  Location     Type
 15690 ;;  s               2   16[COMRAM] PTR const unsigned char 
 15691 ;;		 -> NULL(0), setup_alarm_time(9), setup_fan_set_text(5), setup_date(9), 
 15692 ;;		 -> setup_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 15693 ;;		 -> RTC_ALARM_Txt(2), Fan_SW_Txt(4), Fan_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 15694 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 15695 ;;		 -> tempC(4), 
 15696 ;; Auto vars:     Size  Location     Type
 15697 ;;  cp              2   20[COMRAM] PTR const unsigned char 
 15698 ;;		 -> NULL(0), setup_alarm_time(9), setup_fan_set_text(5), setup_date(9), 
 15699 ;;		 -> setup_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 15700 ;;		 -> RTC_ALARM_Txt(2), Fan_SW_Txt(4), Fan_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 15701 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 15702 ;;		 -> tempC(4), 
 15703 ;; Return value:  Size  Location     Type
 15704 ;;                  2   16[COMRAM] unsigned int 
 15705 ;; Registers used:
 15706 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15707 ;; Tracked objects:
 15708 ;;		On entry : 0/0
 15709 ;;		On exit  : 0/0
 15710 ;;		Unchanged: 0/0
 15711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15712 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15713 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15714 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15715 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15716 ;;Total ram usage:        6 bytes
 15717 ;; Hardware stack levels used:    1
 15718 ;; Hardware stack levels required when called:    3
 15719 ;; This function calls:
 15720 ;;		Nothing
 15721 ;; This function is called by:
 15722 ;;		_drawtext
 15723 ;; This function uses a non-reentrant model
 15724 ;;
 15725                           
 15726                           	psect	text82
 15727  003888                     __ptext82:
 15728                           	opt stack 0
 15729  003888                     _strlen:
 15730                           	opt stack 25
 15731                           
 15732                           ; BSR set to: 1
 15733                           ;incstack = 0
 15734  003888  C011  F015         	movff	strlen@s,strlen@cp
 15735  00388C  C012  F016         	movff	strlen@s+1,strlen@cp+1
 15736  003890  D003               	goto	l8488
 15737  003892                     l8486:
 15738  003892  4A15               	infsnz	strlen@cp,f,c
 15739  003894  2A16               	incf	strlen@cp+1,f,c
 15740  003896  D000               	goto	l8488
 15741  003898                     l8488:
 15742  003898  C015  FFD9         	movff	strlen@cp,fsr2l
 15743  00389C  C016  FFDA         	movff	strlen@cp+1,fsr2h
 15744  0038A0  50DF               	movf	indf2,w,c
 15745  0038A2  A4D8               	btfss	status,2,c
 15746  0038A4  D7F6               	goto	l8486
 15747  0038A6  C011  F013         	movff	strlen@s,??_strlen
 15748  0038AA  C012  F014         	movff	strlen@s+1,??_strlen+1
 15749  0038AE  1E13               	comf	??_strlen,f,c
 15750  0038B0  1E14               	comf	??_strlen+1,f,c
 15751  0038B2  4A13               	infsnz	??_strlen,f,c
 15752  0038B4  2A14               	incf	??_strlen+1,f,c
 15753  0038B6  5015               	movf	strlen@cp,w,c
 15754  0038B8  2413               	addwf	??_strlen,w,c
 15755  0038BA  6E11               	movwf	?_strlen,c
 15756  0038BC  5016               	movf	strlen@cp+1,w,c
 15757  0038BE  2014               	addwfc	??_strlen+1,w,c
 15758  0038C0  6E12               	movwf	?_strlen+1,c
 15759  0038C2  D000               	goto	l2110
 15760  0038C4                     l2110:
 15761  0038C4  0012               	return		;funcret
 15762  0038C6                     __end_of_strlen:
 15763                           	opt stack 0
 15764                           tblptru	equ	0xFF8
 15765                           tblptrh	equ	0xFF7
 15766                           tblptrl	equ	0xFF6
 15767                           tablat	equ	0xFF5
 15768                           prodh	equ	0xFF4
 15769                           prodl	equ	0xFF3
 15770                           intcon	equ	0xFF2
 15771                           intcon2	equ	0xFF1
 15772                           postinc0	equ	0xFEE
 15773                           wreg	equ	0xFE8
 15774                           postdec1	equ	0xFE5
 15775                           fsr1l	equ	0xFE1
 15776                           indf2	equ	0xFDF
 15777                           postinc2	equ	0xFDE
 15778                           postdec2	equ	0xFDD
 15779                           fsr2h	equ	0xFDA
 15780                           fsr2l	equ	0xFD9
 15781                           status	equ	0xFD8
 15782                           
 15783 ;; *************** function _drawChar *****************
 15784 ;; Defined at:
 15785 ;;		line 448 in file "ST7735_TFT.c"
 15786 ;; Parameters:    Size  Location     Type
 15787 ;;  x               1    wreg     unsigned char 
 15788 ;;  y               1   45[COMRAM] unsigned char 
 15789 ;;  c               1   46[COMRAM] unsigned char 
 15790 ;;  color           2   47[COMRAM] unsigned int 
 15791 ;;  bg              2   49[COMRAM] unsigned int 
 15792 ;;  size            1   51[COMRAM] unsigned char 
 15793 ;; Auto vars:     Size  Location     Type
 15794 ;;  x               1   53[COMRAM] unsigned char 
 15795 ;;  line            1   52[COMRAM] unsigned char 
 15796 ;;  i               1   55[COMRAM] unsigned char 
 15797 ;;  j               1   54[COMRAM] unsigned char 
 15798 ;; Return value:  Size  Location     Type
 15799 ;;		None               void
 15800 ;; Registers used:
 15801 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15802 ;; Tracked objects:
 15803 ;;		On entry : 0/0
 15804 ;;		On exit  : 0/0
 15805 ;;		Unchanged: 0/0
 15806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15807 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15808 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15810 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15811 ;;Total ram usage:       11 bytes
 15812 ;; Hardware stack levels used:    1
 15813 ;; Hardware stack levels required when called:    8
 15814 ;; This function calls:
 15815 ;;		___wmul
 15816 ;;		_drawPixel
 15817 ;;		_fillRect
 15818 ;; This function is called by:
 15819 ;;		_drawtext
 15820 ;; This function uses a non-reentrant model
 15821 ;;
 15822                           
 15823                           	psect	text83
 15824  001AAE                     __ptext83:
 15825                           	opt stack 0
 15826  001AAE                     _drawChar:
 15827                           	opt stack 20
 15828                           
 15829                           ;incstack = 0
 15830                           ;drawChar@x stored from wreg
 15831  001AAE  6E36               	movwf	drawChar@x,c
 15832                           
 15833                           ;ST7735_TFT.c: 450: char i, j;
 15834                           ;ST7735_TFT.c: 451: if((x >= 128) || (y >= 160))
 15835  001AB0  0E80               	movlw	128
 15836  001AB2  6036               	cpfslt	drawChar@x,c
 15837  001AB4  D0A6               	goto	l111
 15838  001AB6  0E9F               	movlw	159
 15839  001AB8  642E               	cpfsgt	drawChar@y,c
 15840  001ABA  D001               	goto	l8434
 15841                           
 15842                           ;ST7735_TFT.c: 452: return;
 15843  001ABC  D0A2               	goto	l111
 15844  001ABE                     l8434:
 15845                           
 15846                           ;ST7735_TFT.c: 453: if(size < 1) size = 1;
 15847  001ABE  5034               	movf	drawChar@size,w,c
 15848  001AC0  A4D8               	btfss	status,2,c
 15849  001AC2  D003               	goto	l8438
 15850  001AC4  0E01               	movlw	1
 15851  001AC6  6E34               	movwf	drawChar@size,c
 15852  001AC8  D000               	goto	l8438
 15853  001ACA                     l8438:
 15854                           
 15855                           ;ST7735_TFT.c: 454: if((c < ' ') || (c > '~'))
 15856  001ACA  0E1F               	movlw	31
 15857  001ACC  642F               	cpfsgt	drawChar@c,c
 15858  001ACE  D004               	goto	l8442
 15859  001AD0  0E7E               	movlw	126
 15860  001AD2  642F               	cpfsgt	drawChar@c,c
 15861  001AD4  D003               	goto	l113
 15862  001AD6  D000               	goto	l8442
 15863  001AD8                     l8442:
 15864                           
 15865                           ;ST7735_TFT.c: 455: c = '?';
 15866  001AD8  0E3F               	movlw	63
 15867  001ADA  6E2F               	movwf	drawChar@c,c
 15868  001ADC                     l113:
 15869                           
 15870                           ;ST7735_TFT.c: 456: for(i=0; i<5; i++ ) {
 15871  001ADC  0E00               	movlw	0
 15872  001ADE  6E38               	movwf	drawChar@i,c
 15873  001AE0                     l8444:
 15874  001AE0  0E04               	movlw	4
 15875  001AE2  6438               	cpfsgt	drawChar@i,c
 15876  001AE4  D001               	goto	l8448
 15877  001AE6  D08D               	goto	l111
 15878  001AE8                     l8448:
 15879                           
 15880                           ;ST7735_TFT.c: 457: unsigned char line;
 15881                           ;ST7735_TFT.c: 458: if(c < 'S')
 15882  001AE8  0E53               	movlw	83
 15883  001AEA  602F               	cpfslt	drawChar@c,c
 15884  001AEC  D015               	goto	l8452
 15885                           
 15886                           ;ST7735_TFT.c: 459: line = font[(c - 32)*5 + i];
 15887  001AEE  0EE0               	movlw	224
 15888  001AF0  242F               	addwf	drawChar@c,w,c
 15889  001AF2  6E11               	movwf	___wmul@multiplier,c
 15890  001AF4  6A12               	clrf	___wmul@multiplier+1,c
 15891  001AF6  0EFF               	movlw	255
 15892  001AF8  2212               	addwfc	___wmul@multiplier+1,f,c
 15893  001AFA  0E00               	movlw	0
 15894  001AFC  6E14               	movwf	___wmul@multiplicand+1,c
 15895  001AFE  0E05               	movlw	5
 15896  001B00  6E13               	movwf	___wmul@multiplicand,c
 15897  001B02  EC32  F01D         	call	___wmul	;wreg free
 15898  001B06  5038               	movf	drawChar@i,w,c
 15899  001B08  2611               	addwf	?___wmul,f,c
 15900  001B0A  0E00               	movlw	0
 15901  001B0C  2212               	addwfc	?___wmul+1,f,c
 15902  001B0E  0EAB               	movlw	low _font
 15903  001B10  2411               	addwf	?___wmul,w,c
 15904  001B12  6EF6               	movwf	tblptrl,c
 15905  001B14  0EFB               	movlw	high _font
 15906  001B16  D014               	goto	L5
 15907  001B18                     l8452:
 15908                           
 15909                           ;ST7735_TFT.c: 460: else
 15910                           ;ST7735_TFT.c: 461: line = font2[(c - 'S')*5 + i];
 15911  001B18  0EAD               	movlw	173
 15912  001B1A  242F               	addwf	drawChar@c,w,c
 15913  001B1C  6E11               	movwf	___wmul@multiplier,c
 15914  001B1E  6A12               	clrf	___wmul@multiplier+1,c
 15915  001B20  0EFF               	movlw	255
 15916  001B22  2212               	addwfc	___wmul@multiplier+1,f,c
 15917  001B24  0E00               	movlw	0
 15918  001B26  6E14               	movwf	___wmul@multiplicand+1,c
 15919  001B28  0E05               	movlw	5
 15920  001B2A  6E13               	movwf	___wmul@multiplicand,c
 15921  001B2C  EC32  F01D         	call	___wmul	;wreg free
 15922  001B30  5038               	movf	drawChar@i,w,c
 15923  001B32  2611               	addwf	?___wmul,f,c
 15924  001B34  0E00               	movlw	0
 15925  001B36  2212               	addwfc	?___wmul+1,f,c
 15926  001B38  0EAA               	movlw	low _font2
 15927  001B3A  2411               	addwf	?___wmul,w,c
 15928  001B3C  6EF6               	movwf	tblptrl,c
 15929  001B3E  0EFC               	movlw	high _font2
 15930  001B40                     L5:
 15931  001B40  2012               	addwfc	?___wmul+1,w,c
 15932  001B42  6EF7               	movwf	tblptrh,c
 15933  001B44                     	if	0	;There are less than 3 active tblptr bytes
 15934  001B44                     	endif
 15935  001B44  0008               	tblrd		*
 15936  001B46  CFF5 F035          	movff	tablat,drawChar@line
 15937  001B4A  D000               	goto	l8454
 15938  001B4C                     l8454:
 15939                           
 15940                           ;ST7735_TFT.c: 462: for(j=0; j<7; j++, line >>= 1) {
 15941  001B4C  0E00               	movlw	0
 15942  001B4E  6E37               	movwf	drawChar@j,c
 15943  001B50                     l8456:
 15944  001B50  0E06               	movlw	6
 15945  001B52  6437               	cpfsgt	drawChar@j,c
 15946  001B54  D001               	goto	l120
 15947  001B56  D053               	goto	l8480
 15948  001B58                     l120:
 15949                           
 15950                           ;ST7735_TFT.c: 463: if(line & 0x01) {
 15951  001B58  A035               	btfss	drawChar@line,0,c
 15952  001B5A  D023               	goto	l8466
 15953                           
 15954                           ;ST7735_TFT.c: 464: if(size == 1) drawPixel(x+i, y+j, color);
 15955  001B5C  0434               	decf	drawChar@size,w,c
 15956  001B5E  A4D8               	btfss	status,2,c
 15957  001B60  D00C               	goto	l8464
 15958  001B62  502E               	movf	drawChar@y,w,c
 15959  001B64  2437               	addwf	drawChar@j,w,c
 15960  001B66  6E18               	movwf	drawPixel@y,c
 15961  001B68  C030  F019         	movff	drawChar@color,drawPixel@color
 15962  001B6C  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
 15963  001B70  5036               	movf	drawChar@x,w,c
 15964  001B72  2438               	addwf	drawChar@i,w,c
 15965  001B74  ECF0  F01C         	call	_drawPixel
 15966  001B78  D03E               	goto	l8474
 15967  001B7A                     l8464:
 15968                           
 15969                           ;ST7735_TFT.c: 465: else fillRect(x+(i*size), y+(j*size), size, size, color);
 15970  001B7A  5037               	movf	drawChar@j,w,c
 15971  001B7C  0234               	mulwf	drawChar@size,c
 15972  001B7E  50F3               	movf	prodl,w,c
 15973  001B80  242E               	addwf	drawChar@y,w,c
 15974  001B82  6E23               	movwf	fillRect@y,c
 15975  001B84  C034  F024         	movff	drawChar@size,fillRect@w
 15976  001B88  C034  F025         	movff	drawChar@size,fillRect@h
 15977  001B8C  C030  F026         	movff	drawChar@color,fillRect@color
 15978  001B90  C031  F027         	movff	drawChar@color+1,fillRect@color+1
 15979  001B94  5038               	movf	drawChar@i,w,c
 15980  001B96  0234               	mulwf	drawChar@size,c
 15981  001B98  50F3               	movf	prodl,w,c
 15982  001B9A  2436               	addwf	drawChar@x,w,c
 15983  001B9C  EC96  F01B         	call	_fillRect
 15984                           
 15985                           ;ST7735_TFT.c: 466: }
 15986  001BA0  D02A               	goto	l8474
 15987  001BA2                     l8466:
 15988                           
 15989                           ;ST7735_TFT.c: 467: else if(bg != color) {
 15990  001BA2  5030               	movf	drawChar@color,w,c
 15991  001BA4  1832               	xorwf	drawChar@bg,w,c
 15992  001BA6  E104               	bnz	u5780
 15993  001BA8  5031               	movf	drawChar@color+1,w,c
 15994  001BAA  1833               	xorwf	drawChar@bg+1,w,c
 15995  001BAC  B4D8               	btfsc	status,2,c
 15996  001BAE  D023               	goto	l8474
 15997  001BB0                     u5780:
 15998                           
 15999                           ;ST7735_TFT.c: 468: if(size == 1) drawPixel(x+i, y+j, bg);
 16000  001BB0  0434               	decf	drawChar@size,w,c
 16001  001BB2  A4D8               	btfss	status,2,c
 16002  001BB4  D00C               	goto	l8472
 16003  001BB6  502E               	movf	drawChar@y,w,c
 16004  001BB8  2437               	addwf	drawChar@j,w,c
 16005  001BBA  6E18               	movwf	drawPixel@y,c
 16006  001BBC  C032  F019         	movff	drawChar@bg,drawPixel@color
 16007  001BC0  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
 16008  001BC4  5036               	movf	drawChar@x,w,c
 16009  001BC6  2438               	addwf	drawChar@i,w,c
 16010  001BC8  ECF0  F01C         	call	_drawPixel
 16011  001BCC  D014               	goto	l8474
 16012  001BCE                     l8472:
 16013                           
 16014                           ;ST7735_TFT.c: 469: else fillRect(x+i*size, y+j*size, size, size, bg);
 16015  001BCE  5037               	movf	drawChar@j,w,c
 16016  001BD0  0234               	mulwf	drawChar@size,c
 16017  001BD2  50F3               	movf	prodl,w,c
 16018  001BD4  242E               	addwf	drawChar@y,w,c
 16019  001BD6  6E23               	movwf	fillRect@y,c
 16020  001BD8  C034  F024         	movff	drawChar@size,fillRect@w
 16021  001BDC  C034  F025         	movff	drawChar@size,fillRect@h
 16022  001BE0  C032  F026         	movff	drawChar@bg,fillRect@color
 16023  001BE4  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
 16024  001BE8  5038               	movf	drawChar@i,w,c
 16025  001BEA  0234               	mulwf	drawChar@size,c
 16026  001BEC  50F3               	movf	prodl,w,c
 16027  001BEE  2436               	addwf	drawChar@x,w,c
 16028  001BF0  EC96  F01B         	call	_fillRect
 16029  001BF4  D000               	goto	l8474
 16030  001BF6                     l8474:
 16031  001BF6  2A37               	incf	drawChar@j,f,c
 16032  001BF8  90D8               	bcf	status,0,c
 16033  001BFA  3235               	rrcf	drawChar@line,f,c
 16034  001BFC  D7A9               	goto	l8456
 16035  001BFE                     l8480:
 16036  001BFE  2A38               	incf	drawChar@i,f,c
 16037  001C00  D76F               	goto	l8444
 16038  001C02                     l111:
 16039  001C02  0012               	return		;funcret
 16040  001C04                     __end_of_drawChar:
 16041                           	opt stack 0
 16042                           tblptru	equ	0xFF8
 16043                           tblptrh	equ	0xFF7
 16044                           tblptrl	equ	0xFF6
 16045                           tablat	equ	0xFF5
 16046                           prodh	equ	0xFF4
 16047                           prodl	equ	0xFF3
 16048                           intcon	equ	0xFF2
 16049                           intcon2	equ	0xFF1
 16050                           postinc0	equ	0xFEE
 16051                           wreg	equ	0xFE8
 16052                           postdec1	equ	0xFE5
 16053                           fsr1l	equ	0xFE1
 16054                           indf2	equ	0xFDF
 16055                           postinc2	equ	0xFDE
 16056                           postdec2	equ	0xFDD
 16057                           fsr2h	equ	0xFDA
 16058                           fsr2l	equ	0xFD9
 16059                           status	equ	0xFD8
 16060                           
 16061 ;; *************** function _fillRect *****************
 16062 ;; Defined at:
 16063 ;;		line 438 in file "ST7735_TFT.c"
 16064 ;; Parameters:    Size  Location     Type
 16065 ;;  x               1    wreg     unsigned char 
 16066 ;;  y               1   34[COMRAM] unsigned char 
 16067 ;;  w               1   35[COMRAM] unsigned char 
 16068 ;;  h               1   36[COMRAM] unsigned char 
 16069 ;;  color           2   37[COMRAM] unsigned int 
 16070 ;; Auto vars:     Size  Location     Type
 16071 ;;  x               1   42[COMRAM] unsigned char 
 16072 ;;  i               2   43[COMRAM] int 
 16073 ;; Return value:  Size  Location     Type
 16074 ;;		None               void
 16075 ;; Registers used:
 16076 ;;		wreg, status,2, status,0, cstack
 16077 ;; Tracked objects:
 16078 ;;		On entry : 0/0
 16079 ;;		On exit  : 0/0
 16080 ;;		Unchanged: 0/0
 16081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16082 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16083 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16084 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16085 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16086 ;;Total ram usage:       11 bytes
 16087 ;; Hardware stack levels used:    1
 16088 ;; Hardware stack levels required when called:    7
 16089 ;; This function calls:
 16090 ;;		_drawFastVLine
 16091 ;; This function is called by:
 16092 ;;		_drawChar
 16093 ;;		_Initialize_Setup_Time_Screen
 16094 ;;		_Update_Setup_Screen_Cursor_Forward
 16095 ;;		_Update_Setup_Screen_Cursor_Backward
 16096 ;;		_Initialize_Setup_Alarm_Time_Screen
 16097 ;; This function uses a non-reentrant model
 16098 ;;
 16099                           
 16100                           	psect	text84
 16101  00372C                     __ptext84:
 16102                           	opt stack 0
 16103  00372C                     _fillRect:
 16104                           	opt stack 20
 16105                           
 16106                           ;incstack = 0
 16107                           ;fillRect@x stored from wreg
 16108  00372C  6E2B               	movwf	fillRect@x,c
 16109                           
 16110                           ;ST7735_TFT.c: 440: signed int i;
 16111                           ;ST7735_TFT.c: 442: for (i = x; i < x + w; i++)
 16112  00372E  C02B  F02C         	movff	fillRect@x,fillRect@i
 16113  003732  6A2D               	clrf	fillRect@i+1,c
 16114  003734  D00E               	goto	l8288
 16115  003736                     l8284:
 16116                           
 16117                           ;ST7735_TFT.c: 443: {
 16118                           ;ST7735_TFT.c: 444: drawFastVLine(i, y, h, color);
 16119  003736  C023  F018         	movff	fillRect@y,drawFastVLine@y
 16120  00373A  C025  F019         	movff	fillRect@h,drawFastVLine@h
 16121  00373E  C026  F01A         	movff	fillRect@color,drawFastVLine@color
 16122  003742  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
 16123  003746  502C               	movf	fillRect@i,w,c
 16124  003748  ECD4  F017         	call	_drawFastVLine
 16125  00374C  4A2C               	infsnz	fillRect@i,f,c
 16126  00374E  2A2D               	incf	fillRect@i+1,f,c
 16127  003750  D000               	goto	l8288
 16128  003752                     l8288:
 16129  003752  5024               	movf	fillRect@w,w,c
 16130  003754  C02B  F028         	movff	fillRect@x,??_fillRect
 16131  003758  6A29               	clrf	(??_fillRect+1)& (0+255),c
 16132  00375A  2628               	addwf	??_fillRect,f,c
 16133  00375C  0E00               	movlw	0
 16134  00375E  2229               	addwfc	??_fillRect+1,f,c
 16135  003760  5028               	movf	??_fillRect,w,c
 16136  003762  5C2C               	subwf	fillRect@i,w,c
 16137  003764  502D               	movf	fillRect@i+1,w,c
 16138  003766  0A80               	xorlw	128
 16139  003768  6E2A               	movwf	(??_fillRect+2)& (0+255),c
 16140  00376A  5029               	movf	??_fillRect+1,w,c
 16141  00376C  0A80               	xorlw	128
 16142  00376E  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
 16143  003770  A0D8               	btfss	status,0,c
 16144  003772  D7E1               	goto	l8284
 16145  003774  0012               	return		;funcret
 16146  003776                     __end_of_fillRect:
 16147                           	opt stack 0
 16148                           tblptru	equ	0xFF8
 16149                           tblptrh	equ	0xFF7
 16150                           tblptrl	equ	0xFF6
 16151                           tablat	equ	0xFF5
 16152                           prodh	equ	0xFF4
 16153                           prodl	equ	0xFF3
 16154                           intcon	equ	0xFF2
 16155                           intcon2	equ	0xFF1
 16156                           postinc0	equ	0xFEE
 16157                           wreg	equ	0xFE8
 16158                           postdec1	equ	0xFE5
 16159                           fsr1l	equ	0xFE1
 16160                           indf2	equ	0xFDF
 16161                           postinc2	equ	0xFDE
 16162                           postdec2	equ	0xFDD
 16163                           fsr2h	equ	0xFDA
 16164                           fsr2l	equ	0xFD9
 16165                           status	equ	0xFD8
 16166                           
 16167 ;; *************** function _drawFastVLine *****************
 16168 ;; Defined at:
 16169 ;;		line 417 in file "ST7735_TFT.c"
 16170 ;; Parameters:    Size  Location     Type
 16171 ;;  x               1    wreg     unsigned char 
 16172 ;;  y               1   23[COMRAM] unsigned char 
 16173 ;;  h               1   24[COMRAM] unsigned char 
 16174 ;;  color           2   25[COMRAM] unsigned int 
 16175 ;; Auto vars:     Size  Location     Type
 16176 ;;  x               1   33[COMRAM] unsigned char 
 16177 ;;  lo              1   32[COMRAM] unsigned char 
 16178 ;;  hi              1   31[COMRAM] unsigned char 
 16179 ;; Return value:  Size  Location     Type
 16180 ;;		None               void
 16181 ;; Registers used:
 16182 ;;		wreg, status,2, status,0, cstack
 16183 ;; Tracked objects:
 16184 ;;		On entry : 0/0
 16185 ;;		On exit  : 0/0
 16186 ;;		Unchanged: 0/0
 16187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16188 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16189 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16190 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16191 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16192 ;;Total ram usage:       11 bytes
 16193 ;; Hardware stack levels used:    1
 16194 ;; Hardware stack levels required when called:    6
 16195 ;; This function calls:
 16196 ;;		_setAddrWindow
 16197 ;;		_spiwrite
 16198 ;; This function is called by:
 16199 ;;		_fillRect
 16200 ;;		_fillCircleHelper
 16201 ;;		_fillCircle
 16202 ;;		_drawRect
 16203 ;; This function uses a non-reentrant model
 16204 ;;
 16205                           
 16206                           	psect	text85
 16207  002FA8                     __ptext85:
 16208                           	opt stack 0
 16209  002FA8                     _drawFastVLine:
 16210                           	opt stack 20
 16211                           
 16212                           ;incstack = 0
 16213                           ;drawFastVLine@x stored from wreg
 16214  002FA8  6E22               	movwf	drawFastVLine@x,c
 16215                           
 16216                           ;ST7735_TFT.c: 419: unsigned char hi, lo;
 16217                           ;ST7735_TFT.c: 420: if((x >= 128) || (y >= 160))
 16218  002FAA  0E80               	movlw	128
 16219  002FAC  6022               	cpfslt	drawFastVLine@x,c
 16220  002FAE  D03F               	goto	l95
 16221  002FB0  0E9F               	movlw	159
 16222  002FB2  6418               	cpfsgt	drawFastVLine@y,c
 16223  002FB4  D001               	goto	l8224
 16224                           
 16225                           ;ST7735_TFT.c: 421: return;
 16226  002FB6  D03B               	goto	l95
 16227  002FB8                     l8224:
 16228                           
 16229                           ;ST7735_TFT.c: 422: if((y + h - 1) >= 160)
 16230  002FB8  0EFF               	movlw	255
 16231  002FBA  6E1C               	movwf	??_drawFastVLine& (0+255),c
 16232  002FBC  0EFF               	movlw	255
 16233  002FBE  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
 16234  002FC0  5019               	movf	drawFastVLine@h,w,c
 16235  002FC2  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
 16236  002FC6  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
 16237  002FC8  261E               	addwf	??_drawFastVLine+2,f,c
 16238  002FCA  0E00               	movlw	0
 16239  002FCC  221F               	addwfc	??_drawFastVLine+3,f,c
 16240  002FCE  501C               	movf	??_drawFastVLine,w,c
 16241  002FD0  261E               	addwf	??_drawFastVLine+2,f,c
 16242  002FD2  501D               	movf	??_drawFastVLine+1,w,c
 16243  002FD4  221F               	addwfc	??_drawFastVLine+3,f,c
 16244  002FD6  BE1F               	btfsc	??_drawFastVLine+3,7,c
 16245  002FD8  D00B               	goto	l8228
 16246  002FDA  501F               	movf	??_drawFastVLine+3,w,c
 16247  002FDC  E104               	bnz	u5540
 16248  002FDE  0EA0               	movlw	160
 16249  002FE0  5C1E               	subwf	??_drawFastVLine+2,w,c
 16250  002FE2  A0D8               	btfss	status,0,c
 16251  002FE4  D005               	goto	l8228
 16252  002FE6                     u5540:
 16253                           
 16254                           ;ST7735_TFT.c: 423: h = 160 - y;
 16255  002FE6  5018               	movf	drawFastVLine@y,w,c
 16256  002FE8  0800               	sublw	0
 16257  002FEA  0FA0               	addlw	160
 16258  002FEC  6E19               	movwf	drawFastVLine@h,c
 16259  002FEE  D000               	goto	l8228
 16260  002FF0                     l8228:
 16261                           
 16262                           ;ST7735_TFT.c: 424: hi = color >> 8; lo = color;
 16263  002FF0  501B               	movf	drawFastVLine@color+1,w,c
 16264  002FF2  6E20               	movwf	drawFastVLine@hi,c
 16265  002FF4  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
 16266                           
 16267                           ;ST7735_TFT.c: 425: setAddrWindow(x, y, x, y + h - 1);
 16268  002FF8  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
 16269  002FFC  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
 16270  003000  5018               	movf	drawFastVLine@y,w,c
 16271  003002  2419               	addwf	drawFastVLine@h,w,c
 16272  003004  6E1C               	movwf	??_drawFastVLine& (0+255),c
 16273  003006  041C               	decf	??_drawFastVLine,w,c
 16274  003008  6E16               	movwf	setAddrWindow@y1,c
 16275  00300A  5022               	movf	drawFastVLine@x,w,c
 16276  00300C  EC54  F01A         	call	_setAddrWindow
 16277                           
 16278                           ;ST7735_TFT.c: 426: PORTDbits.RD0 = 1;
 16279  003010  8083               	bsf	3971,0,c	;volatile
 16280                           
 16281                           ;ST7735_TFT.c: 427: PORTDbits.RD1 = 0;
 16282  003012  9283               	bcf	3971,1,c	;volatile
 16283                           
 16284                           ;ST7735_TFT.c: 429: while (h--) {
 16285  003014  D007               	goto	l8240
 16286  003016                     l8238:
 16287                           
 16288                           ;ST7735_TFT.c: 430: spiwrite(hi);
 16289  003016  5020               	movf	drawFastVLine@hi,w,c
 16290  003018  EC84  F01E         	call	_spiwrite
 16291                           
 16292                           ;ST7735_TFT.c: 431: spiwrite(lo);
 16293  00301C  5021               	movf	drawFastVLine@lo,w,c
 16294  00301E  EC84  F01E         	call	_spiwrite
 16295  003022  D000               	goto	l8240
 16296  003024                     l8240:
 16297  003024  0619               	decf	drawFastVLine@h,f,c
 16298  003026  2819               	incf	drawFastVLine@h,w,c
 16299  003028  A4D8               	btfss	status,2,c
 16300  00302A  D7F5               	goto	l8238
 16301                           
 16302                           ;ST7735_TFT.c: 432: }
 16303                           ;ST7735_TFT.c: 433: PORTDbits.RD1 = 1;
 16304  00302C  8283               	bsf	3971,1,c	;volatile
 16305  00302E                     l95:
 16306  00302E  0012               	return		;funcret
 16307  003030                     __end_of_drawFastVLine:
 16308                           	opt stack 0
 16309                           tblptru	equ	0xFF8
 16310                           tblptrh	equ	0xFF7
 16311                           tblptrl	equ	0xFF6
 16312                           tablat	equ	0xFF5
 16313                           prodh	equ	0xFF4
 16314                           prodl	equ	0xFF3
 16315                           intcon	equ	0xFF2
 16316                           intcon2	equ	0xFF1
 16317                           postinc0	equ	0xFEE
 16318                           wreg	equ	0xFE8
 16319                           postdec1	equ	0xFE5
 16320                           fsr1l	equ	0xFE1
 16321                           indf2	equ	0xFDF
 16322                           postinc2	equ	0xFDE
 16323                           postdec2	equ	0xFDD
 16324                           fsr2h	equ	0xFDA
 16325                           fsr2l	equ	0xFD9
 16326                           status	equ	0xFD8
 16327                           
 16328 ;; *************** function _drawPixel *****************
 16329 ;; Defined at:
 16330 ;;		line 408 in file "ST7735_TFT.c"
 16331 ;; Parameters:    Size  Location     Type
 16332 ;;  x               1    wreg     unsigned char 
 16333 ;;  y               1   23[COMRAM] unsigned char 
 16334 ;;  color           2   24[COMRAM] unsigned int 
 16335 ;; Auto vars:     Size  Location     Type
 16336 ;;  x               1   26[COMRAM] unsigned char 
 16337 ;; Return value:  Size  Location     Type
 16338 ;;		None               void
 16339 ;; Registers used:
 16340 ;;		wreg, status,2, status,0, cstack
 16341 ;; Tracked objects:
 16342 ;;		On entry : 0/0
 16343 ;;		On exit  : 0/0
 16344 ;;		Unchanged: 0/0
 16345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16346 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16347 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16349 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16350 ;;Total ram usage:        4 bytes
 16351 ;; Hardware stack levels used:    1
 16352 ;; Hardware stack levels required when called:    6
 16353 ;; This function calls:
 16354 ;;		_setAddrWindow
 16355 ;;		_write_data
 16356 ;; This function is called by:
 16357 ;;		_drawChar
 16358 ;;		_drawCircle
 16359 ;;		_drawCircleHelper
 16360 ;; This function uses a non-reentrant model
 16361 ;;
 16362                           
 16363                           	psect	text86
 16364  0039E0                     __ptext86:
 16365                           	opt stack 0
 16366  0039E0                     _drawPixel:
 16367                           	opt stack 21
 16368                           
 16369                           ;incstack = 0
 16370                           ;drawPixel@x stored from wreg
 16371  0039E0  6E1B               	movwf	drawPixel@x,c
 16372                           
 16373                           ;ST7735_TFT.c: 410: if((x >= 128) || (y >= 160))
 16374  0039E2  0E80               	movlw	128
 16375  0039E4  601B               	cpfslt	drawPixel@x,c
 16376  0039E6  D013               	goto	l89
 16377  0039E8  0E9F               	movlw	159
 16378  0039EA  6418               	cpfsgt	drawPixel@y,c
 16379  0039EC  D001               	goto	l8276
 16380                           
 16381                           ;ST7735_TFT.c: 411: return;
 16382  0039EE  D00F               	goto	l89
 16383  0039F0                     l8276:
 16384                           
 16385                           ;ST7735_TFT.c: 412: setAddrWindow(x,y,x+1,y+1);
 16386  0039F0  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
 16387  0039F4  281B               	incf	drawPixel@x,w,c
 16388  0039F6  6E15               	movwf	setAddrWindow@x1,c
 16389  0039F8  2818               	incf	drawPixel@y,w,c
 16390  0039FA  6E16               	movwf	setAddrWindow@y1,c
 16391  0039FC  501B               	movf	drawPixel@x,w,c
 16392  0039FE  EC54  F01A         	call	_setAddrWindow
 16393                           
 16394                           ;ST7735_TFT.c: 413: write_data(color >> 8);
 16395  003A02  501A               	movf	drawPixel@color+1,w,c
 16396  003A04  ECF7  F01E         	call	_write_data
 16397                           
 16398                           ;ST7735_TFT.c: 414: write_data(color & 0xFF);
 16399  003A08  5019               	movf	drawPixel@color,w,c
 16400  003A0A  ECF7  F01E         	call	_write_data
 16401  003A0E                     l89:
 16402  003A0E  0012               	return		;funcret
 16403  003A10                     __end_of_drawPixel:
 16404                           	opt stack 0
 16405                           tblptru	equ	0xFF8
 16406                           tblptrh	equ	0xFF7
 16407                           tblptrl	equ	0xFF6
 16408                           tablat	equ	0xFF5
 16409                           prodh	equ	0xFF4
 16410                           prodl	equ	0xFF3
 16411                           intcon	equ	0xFF2
 16412                           intcon2	equ	0xFF1
 16413                           postinc0	equ	0xFEE
 16414                           wreg	equ	0xFE8
 16415                           postdec1	equ	0xFE5
 16416                           fsr1l	equ	0xFE1
 16417                           indf2	equ	0xFDF
 16418                           postinc2	equ	0xFDE
 16419                           postdec2	equ	0xFDD
 16420                           fsr2h	equ	0xFDA
 16421                           fsr2l	equ	0xFD9
 16422                           status	equ	0xFD8
 16423                           
 16424 ;; *************** function _setAddrWindow *****************
 16425 ;; Defined at:
 16426 ;;		line 393 in file "ST7735_TFT.c"
 16427 ;; Parameters:    Size  Location     Type
 16428 ;;  x0              1    wreg     unsigned char 
 16429 ;;  y0              1   19[COMRAM] unsigned char 
 16430 ;;  x1              1   20[COMRAM] unsigned char 
 16431 ;;  y1              1   21[COMRAM] unsigned char 
 16432 ;; Auto vars:     Size  Location     Type
 16433 ;;  x0              1   22[COMRAM] unsigned char 
 16434 ;; Return value:  Size  Location     Type
 16435 ;;		None               void
 16436 ;; Registers used:
 16437 ;;		wreg, status,2, status,0, cstack
 16438 ;; Tracked objects:
 16439 ;;		On entry : 0/0
 16440 ;;		On exit  : 0/0
 16441 ;;		Unchanged: 0/0
 16442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16443 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16444 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16446 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16447 ;;Total ram usage:        4 bytes
 16448 ;; Hardware stack levels used:    1
 16449 ;; Hardware stack levels required when called:    5
 16450 ;; This function calls:
 16451 ;;		_write_command
 16452 ;;		_write_data
 16453 ;; This function is called by:
 16454 ;;		_drawPixel
 16455 ;;		_drawFastVLine
 16456 ;;		_fillRectangle
 16457 ;;		_drawFastHLine
 16458 ;; This function uses a non-reentrant model
 16459 ;;
 16460                           
 16461                           	psect	text87
 16462  0034A8                     __ptext87:
 16463                           	opt stack 0
 16464  0034A8                     _setAddrWindow:
 16465                           	opt stack 20
 16466                           
 16467                           ;incstack = 0
 16468                           ;setAddrWindow@x0 stored from wreg
 16469  0034A8  6E17               	movwf	setAddrWindow@x0,c
 16470                           
 16471                           ;ST7735_TFT.c: 395: write_command(0x2A);
 16472  0034AA  0E2A               	movlw	42
 16473  0034AC  ECFF  F01E         	call	_write_command
 16474                           
 16475                           ;ST7735_TFT.c: 396: write_data(0);
 16476  0034B0  0E00               	movlw	0
 16477  0034B2  ECF7  F01E         	call	_write_data
 16478                           
 16479                           ;ST7735_TFT.c: 397: write_data(x0 + colstart);
 16480  0034B6  5017               	movf	setAddrWindow@x0,w,c
 16481  0034B8  0100               	movlb	0	; () banked
 16482  0034BA  25FB               	addwf	_colstart& (0+255),w,b
 16483  0034BC  ECF7  F01E         	call	_write_data
 16484                           
 16485                           ;ST7735_TFT.c: 398: write_data(0);
 16486  0034C0  0E00               	movlw	0
 16487  0034C2  ECF7  F01E         	call	_write_data
 16488                           
 16489                           ;ST7735_TFT.c: 399: write_data(x1 + colstart);
 16490  0034C6  5015               	movf	setAddrWindow@x1,w,c
 16491  0034C8  0100               	movlb	0	; () banked
 16492  0034CA  25FB               	addwf	_colstart& (0+255),w,b
 16493  0034CC  ECF7  F01E         	call	_write_data
 16494                           
 16495                           ;ST7735_TFT.c: 400: write_command(0x2B);
 16496  0034D0  0E2B               	movlw	43
 16497  0034D2  ECFF  F01E         	call	_write_command
 16498                           
 16499                           ;ST7735_TFT.c: 401: write_data(0);
 16500  0034D6  0E00               	movlw	0
 16501  0034D8  ECF7  F01E         	call	_write_data
 16502                           
 16503                           ;ST7735_TFT.c: 402: write_data(y0 + rowstart);
 16504  0034DC  5014               	movf	setAddrWindow@y0,w,c
 16505  0034DE  0100               	movlb	0	; () banked
 16506  0034E0  25FD               	addwf	_rowstart& (0+255),w,b
 16507  0034E2  ECF7  F01E         	call	_write_data
 16508                           
 16509                           ;ST7735_TFT.c: 403: write_data(0);
 16510  0034E6  0E00               	movlw	0
 16511  0034E8  ECF7  F01E         	call	_write_data
 16512                           
 16513                           ;ST7735_TFT.c: 404: write_data(y1 + rowstart);
 16514  0034EC  5016               	movf	setAddrWindow@y1,w,c
 16515  0034EE  0100               	movlb	0	; () banked
 16516  0034F0  25FD               	addwf	_rowstart& (0+255),w,b
 16517  0034F2  ECF7  F01E         	call	_write_data
 16518                           
 16519                           ;ST7735_TFT.c: 405: write_command(0x2C);
 16520  0034F6  0E2C               	movlw	44
 16521  0034F8  ECFF  F01E         	call	_write_command
 16522  0034FC  0012               	return		;funcret
 16523  0034FE                     __end_of_setAddrWindow:
 16524                           	opt stack 0
 16525                           tblptru	equ	0xFF8
 16526                           tblptrh	equ	0xFF7
 16527                           tblptrl	equ	0xFF6
 16528                           tablat	equ	0xFF5
 16529                           prodh	equ	0xFF4
 16530                           prodl	equ	0xFF3
 16531                           intcon	equ	0xFF2
 16532                           intcon2	equ	0xFF1
 16533                           postinc0	equ	0xFEE
 16534                           wreg	equ	0xFE8
 16535                           postdec1	equ	0xFE5
 16536                           fsr1l	equ	0xFE1
 16537                           indf2	equ	0xFDF
 16538                           postinc2	equ	0xFDE
 16539                           postdec2	equ	0xFDD
 16540                           fsr2h	equ	0xFDA
 16541                           fsr2l	equ	0xFD9
 16542                           status	equ	0xFD8
 16543                           
 16544 ;; *************** function _write_data *****************
 16545 ;; Defined at:
 16546 ;;		line 210 in file "ST7735_TFT.c"
 16547 ;; Parameters:    Size  Location     Type
 16548 ;;  data_           1    wreg     unsigned char 
 16549 ;; Auto vars:     Size  Location     Type
 16550 ;;  data_           1   18[COMRAM] unsigned char 
 16551 ;; Return value:  Size  Location     Type
 16552 ;;		None               void
 16553 ;; Registers used:
 16554 ;;		wreg, status,2, cstack
 16555 ;; Tracked objects:
 16556 ;;		On entry : 0/0
 16557 ;;		On exit  : 0/0
 16558 ;;		Unchanged: 0/0
 16559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16561 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16563 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16564 ;;Total ram usage:        1 bytes
 16565 ;; Hardware stack levels used:    1
 16566 ;; Hardware stack levels required when called:    4
 16567 ;; This function calls:
 16568 ;;		_spiwrite
 16569 ;; This function is called by:
 16570 ;;		_Rcmd1
 16571 ;;		_Rcmd2red
 16572 ;;		_Rcmd3
 16573 ;;		_setAddrWindow
 16574 ;;		_drawPixel
 16575 ;;		_TFT_GreenTab_Initialize
 16576 ;;		_Bcmd
 16577 ;;		_setScrollDefinition
 16578 ;;		_Rcmd2green
 16579 ;;		_VerticalScroll
 16580 ;; This function uses a non-reentrant model
 16581 ;;
 16582                           
 16583                           	psect	text88
 16584  003DEE                     __ptext88:
 16585                           	opt stack 0
 16586  003DEE                     _write_data:
 16587                           	opt stack 20
 16588                           
 16589                           ;incstack = 0
 16590                           ;write_data@data_ stored from wreg
 16591  003DEE  6E13               	movwf	write_data@data_,c
 16592                           
 16593                           ;ST7735_TFT.c: 212: PORTDbits.RD1 = 0;
 16594  003DF0  9283               	bcf	3971,1,c	;volatile
 16595                           
 16596                           ;ST7735_TFT.c: 213: PORTDbits.RD0 = 1;
 16597  003DF2  8083               	bsf	3971,0,c	;volatile
 16598                           
 16599                           ;ST7735_TFT.c: 214: spiwrite(data_);
 16600  003DF4  5013               	movf	write_data@data_,w,c
 16601  003DF6  EC84  F01E         	call	_spiwrite
 16602                           
 16603                           ;ST7735_TFT.c: 215: PORTDbits.RD1 = 1;
 16604  003DFA  8283               	bsf	3971,1,c	;volatile
 16605  003DFC  0012               	return		;funcret
 16606  003DFE                     __end_of_write_data:
 16607                           	opt stack 0
 16608                           tblptru	equ	0xFF8
 16609                           tblptrh	equ	0xFF7
 16610                           tblptrl	equ	0xFF6
 16611                           tablat	equ	0xFF5
 16612                           prodh	equ	0xFF4
 16613                           prodl	equ	0xFF3
 16614                           intcon	equ	0xFF2
 16615                           intcon2	equ	0xFF1
 16616                           postinc0	equ	0xFEE
 16617                           wreg	equ	0xFE8
 16618                           postdec1	equ	0xFE5
 16619                           fsr1l	equ	0xFE1
 16620                           indf2	equ	0xFDF
 16621                           postinc2	equ	0xFDE
 16622                           postdec2	equ	0xFDD
 16623                           fsr2h	equ	0xFDA
 16624                           fsr2l	equ	0xFD9
 16625                           status	equ	0xFD8
 16626                           
 16627 ;; *************** function _write_command *****************
 16628 ;; Defined at:
 16629 ;;		line 199 in file "ST7735_TFT.c"
 16630 ;; Parameters:    Size  Location     Type
 16631 ;;  cmd_            1    wreg     unsigned char 
 16632 ;; Auto vars:     Size  Location     Type
 16633 ;;  cmd_            1   18[COMRAM] unsigned char 
 16634 ;; Return value:  Size  Location     Type
 16635 ;;		None               void
 16636 ;; Registers used:
 16637 ;;		wreg, status,2, cstack
 16638 ;; Tracked objects:
 16639 ;;		On entry : 0/0
 16640 ;;		On exit  : 0/0
 16641 ;;		Unchanged: 0/0
 16642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16644 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16646 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16647 ;;Total ram usage:        1 bytes
 16648 ;; Hardware stack levels used:    1
 16649 ;; Hardware stack levels required when called:    4
 16650 ;; This function calls:
 16651 ;;		_spiwrite
 16652 ;; This function is called by:
 16653 ;;		_Rcmd1
 16654 ;;		_Rcmd2red
 16655 ;;		_Rcmd3
 16656 ;;		_setAddrWindow
 16657 ;;		_TFT_GreenTab_Initialize
 16658 ;;		_Bcmd
 16659 ;;		_setScrollDefinition
 16660 ;;		_Rcmd2green
 16661 ;;		_VerticalScroll
 16662 ;; This function uses a non-reentrant model
 16663 ;;
 16664                           
 16665                           	psect	text89
 16666  003DFE                     __ptext89:
 16667                           	opt stack 0
 16668  003DFE                     _write_command:
 16669                           	opt stack 20
 16670                           
 16671                           ;incstack = 0
 16672                           ;write_command@cmd_ stored from wreg
 16673  003DFE  6E13               	movwf	write_command@cmd_,c
 16674                           
 16675                           ;ST7735_TFT.c: 201: PORTDbits.RD1 = 0;
 16676  003E00  9283               	bcf	3971,1,c	;volatile
 16677                           
 16678                           ;ST7735_TFT.c: 203: PORTDbits.RD0 = 0;
 16679  003E02  9083               	bcf	3971,0,c	;volatile
 16680                           
 16681                           ;ST7735_TFT.c: 204: spiwrite(cmd_);
 16682  003E04  5013               	movf	write_command@cmd_,w,c
 16683  003E06  EC84  F01E         	call	_spiwrite
 16684                           
 16685                           ;ST7735_TFT.c: 206: PORTDbits.RD1 = 1;
 16686  003E0A  8283               	bsf	3971,1,c	;volatile
 16687  003E0C  0012               	return		;funcret
 16688  003E0E                     __end_of_write_command:
 16689                           	opt stack 0
 16690                           tblptru	equ	0xFF8
 16691                           tblptrh	equ	0xFF7
 16692                           tblptrl	equ	0xFF6
 16693                           tablat	equ	0xFF5
 16694                           prodh	equ	0xFF4
 16695                           prodl	equ	0xFF3
 16696                           intcon	equ	0xFF2
 16697                           intcon2	equ	0xFF1
 16698                           postinc0	equ	0xFEE
 16699                           wreg	equ	0xFE8
 16700                           postdec1	equ	0xFE5
 16701                           fsr1l	equ	0xFE1
 16702                           indf2	equ	0xFDF
 16703                           postinc2	equ	0xFDE
 16704                           postdec2	equ	0xFDD
 16705                           fsr2h	equ	0xFDA
 16706                           fsr2l	equ	0xFD9
 16707                           status	equ	0xFD8
 16708                           
 16709 ;; *************** function _spiwrite *****************
 16710 ;; Defined at:
 16711 ;;		line 190 in file "ST7735_TFT.c"
 16712 ;; Parameters:    Size  Location     Type
 16713 ;;  spidata         1    wreg     unsigned char 
 16714 ;; Auto vars:     Size  Location     Type
 16715 ;;  spidata         1   17[COMRAM] unsigned char 
 16716 ;;  x               1   16[COMRAM] unsigned char 
 16717 ;; Return value:  Size  Location     Type
 16718 ;;		None               void
 16719 ;; Registers used:
 16720 ;;		wreg
 16721 ;; Tracked objects:
 16722 ;;		On entry : 0/0
 16723 ;;		On exit  : 0/0
 16724 ;;		Unchanged: 0/0
 16725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16727 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16729 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16730 ;;Total ram usage:        2 bytes
 16731 ;; Hardware stack levels used:    1
 16732 ;; Hardware stack levels required when called:    3
 16733 ;; This function calls:
 16734 ;;		Nothing
 16735 ;; This function is called by:
 16736 ;;		_write_command
 16737 ;;		_write_data
 16738 ;;		_drawFastVLine
 16739 ;;		_fillRectangle
 16740 ;;		_drawFastHLine
 16741 ;; This function uses a non-reentrant model
 16742 ;;
 16743                           
 16744                           	psect	text90
 16745  003D08                     __ptext90:
 16746                           	opt stack 0
 16747  003D08                     _spiwrite:
 16748                           	opt stack 22
 16749                           
 16750                           ;incstack = 0
 16751                           ;spiwrite@spidata stored from wreg
 16752  003D08  6E12               	movwf	spiwrite@spidata,c
 16753                           
 16754                           ;ST7735_TFT.c: 192: char x;
 16755                           ;ST7735_TFT.c: 193: PIR1bits.SSPIF = 0;
 16756  003D0A  969E               	bcf	3998,3,c	;volatile
 16757                           
 16758                           ;ST7735_TFT.c: 194: x = SSPBUF;
 16759  003D0C  CFC9 F011          	movff	4041,spiwrite@x	;volatile
 16760                           
 16761                           ;ST7735_TFT.c: 195: SSPBUF = spidata;
 16762  003D10  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
 16763                           
 16764                           ;ST7735_TFT.c: 196: while (!SSPSTATbits.BF);
 16765  003D14  D000               	goto	l45
 16766  003D16                     l45:
 16767  003D16  A0C7               	btfss	4039,0,c	;volatile
 16768  003D18  D7FE               	goto	l45
 16769  003D1A  0012               	return		;funcret
 16770  003D1C                     __end_of_spiwrite:
 16771                           	opt stack 0
 16772                           tblptru	equ	0xFF8
 16773                           tblptrh	equ	0xFF7
 16774                           tblptrl	equ	0xFF6
 16775                           tablat	equ	0xFF5
 16776                           prodh	equ	0xFF4
 16777                           prodl	equ	0xFF3
 16778                           intcon	equ	0xFF2
 16779                           intcon2	equ	0xFF1
 16780                           postinc0	equ	0xFEE
 16781                           wreg	equ	0xFE8
 16782                           postdec1	equ	0xFE5
 16783                           fsr1l	equ	0xFE1
 16784                           indf2	equ	0xFDF
 16785                           postinc2	equ	0xFDE
 16786                           postdec2	equ	0xFDD
 16787                           fsr2h	equ	0xFDA
 16788                           fsr2l	equ	0xFD9
 16789                           status	equ	0xFD8
 16790                           
 16791 ;; *************** function ___wmul *****************
 16792 ;; Defined at:
 16793 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 16794 ;; Parameters:    Size  Location     Type
 16795 ;;  multiplier      2   16[COMRAM] unsigned int 
 16796 ;;  multiplicand    2   18[COMRAM] unsigned int 
 16797 ;; Auto vars:     Size  Location     Type
 16798 ;;  product         2   20[COMRAM] unsigned int 
 16799 ;; Return value:  Size  Location     Type
 16800 ;;                  2   16[COMRAM] unsigned int 
 16801 ;; Registers used:
 16802 ;;		wreg, status,2, status,0, prodl, prodh
 16803 ;; Tracked objects:
 16804 ;;		On entry : 0/0
 16805 ;;		On exit  : 0/0
 16806 ;;		Unchanged: 0/0
 16807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16808 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16809 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16811 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16812 ;;Total ram usage:        6 bytes
 16813 ;; Hardware stack levels used:    1
 16814 ;; Hardware stack levels required when called:    3
 16815 ;; This function calls:
 16816 ;;		Nothing
 16817 ;; This function is called by:
 16818 ;;		_delay_ms
 16819 ;;		_drawChar
 16820 ;;		_read_volt
 16821 ;;		_main
 16822 ;;		_printf
 16823 ;; This function uses a non-reentrant model
 16824 ;;
 16825                           
 16826                           	psect	text91
 16827  003A64                     __ptext91:
 16828                           	opt stack 0
 16829  003A64                     ___wmul:
 16830                           	opt stack 25
 16831                           
 16832                           ;incstack = 0
 16833  003A64  5011               	movf	___wmul@multiplier,w,c
 16834  003A66  0213               	mulwf	___wmul@multiplicand,c
 16835  003A68  CFF3 F015          	movff	prodl,___wmul@product
 16836  003A6C  CFF4 F016          	movff	prodh,___wmul@product+1
 16837  003A70  5011               	movf	___wmul@multiplier,w,c
 16838  003A72  0214               	mulwf	___wmul@multiplicand+1,c
 16839  003A74  50F3               	movf	prodl,w,c
 16840  003A76  2616               	addwf	___wmul@product+1,f,c
 16841  003A78  5012               	movf	___wmul@multiplier+1,w,c
 16842  003A7A  0213               	mulwf	___wmul@multiplicand,c
 16843  003A7C  50F3               	movf	prodl,w,c
 16844  003A7E  2616               	addwf	___wmul@product+1,f,c
 16845  003A80  C015  F011         	movff	___wmul@product,?___wmul
 16846  003A84  C016  F012         	movff	___wmul@product+1,?___wmul+1
 16847  003A88  D000               	goto	l1548
 16848  003A8A                     l1548:
 16849  003A8A  0012               	return		;funcret
 16850  003A8C                     __end_of___wmul:
 16851                           	opt stack 0
 16852                           tblptru	equ	0xFF8
 16853                           tblptrh	equ	0xFF7
 16854                           tblptrl	equ	0xFF6
 16855                           tablat	equ	0xFF5
 16856                           prodh	equ	0xFF4
 16857                           prodl	equ	0xFF3
 16858                           intcon	equ	0xFF2
 16859                           intcon2	equ	0xFF1
 16860                           postinc0	equ	0xFEE
 16861                           wreg	equ	0xFE8
 16862                           postdec1	equ	0xFE5
 16863                           fsr1l	equ	0xFE1
 16864                           indf2	equ	0xFDF
 16865                           postinc2	equ	0xFDE
 16866                           postdec2	equ	0xFDD
 16867                           fsr2h	equ	0xFDA
 16868                           fsr2l	equ	0xFD9
 16869                           status	equ	0xFD8
 16870                           
 16871 ;; *************** function ___awmod *****************
 16872 ;; Defined at:
 16873 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
 16874 ;; Parameters:    Size  Location     Type
 16875 ;;  dividend        2   67[COMRAM] int 
 16876 ;;  divisor         2   69[COMRAM] int 
 16877 ;; Auto vars:     Size  Location     Type
 16878 ;;  sign            1    1[BANK0 ] unsigned char 
 16879 ;;  counter         1    0[BANK0 ] unsigned char 
 16880 ;; Return value:  Size  Location     Type
 16881 ;;                  2   67[COMRAM] int 
 16882 ;; Registers used:
 16883 ;;		wreg, status,2, status,0
 16884 ;; Tracked objects:
 16885 ;;		On entry : 0/0
 16886 ;;		On exit  : 0/0
 16887 ;;		Unchanged: 0/0
 16888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16889 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16890 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16892 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16893 ;;Total ram usage:        6 bytes
 16894 ;; Hardware stack levels used:    1
 16895 ;; Hardware stack levels required when called:    3
 16896 ;; This function calls:
 16897 ;;		Nothing
 16898 ;; This function is called by:
 16899 ;;		_Update_Screen
 16900 ;;		_dec_2_bcd
 16901 ;;		_Update_Setup_Time_Screen
 16902 ;;		_Update_Setup_Fan_Screen
 16903 ;;		_Update_Setup_Alarm_Time_Screen
 16904 ;; This function uses a non-reentrant model
 16905 ;;
 16906                           
 16907                           	psect	text92
 16908  002E88                     __ptext92:
 16909                           	opt stack 0
 16910  002E88                     ___awmod:
 16911                           	opt stack 26
 16912                           
 16913                           ;incstack = 0
 16914  002E88  0E00               	movlw	0
 16915  002E8A  0100               	movlb	0	; () banked
 16916  002E8C  6FFF               	movwf	___awmod@sign& (0+255),b
 16917                           
 16918                           ; BSR set to: 0
 16919  002E8E  AE45               	btfss	___awmod@dividend+1,7,c
 16920  002E90  D008               	goto	l8776
 16921                           
 16922                           ; BSR set to: 0
 16923  002E92  6C44               	negf	___awmod@dividend,c
 16924  002E94  1E45               	comf	___awmod@dividend+1,f,c
 16925  002E96  B0D8               	btfsc	status,0,c
 16926  002E98  2A45               	incf	___awmod@dividend+1,f,c
 16927                           
 16928                           ; BSR set to: 0
 16929  002E9A  0E01               	movlw	1
 16930  002E9C  0100               	movlb	0	; () banked
 16931  002E9E  6FFF               	movwf	___awmod@sign& (0+255),b
 16932  002EA0  D000               	goto	l8776
 16933  002EA2                     l8776:
 16934                           
 16935                           ; BSR set to: 0
 16936  002EA2  AE47               	btfss	___awmod@divisor+1,7,c
 16937  002EA4  D005               	goto	l8780
 16938                           
 16939                           ; BSR set to: 0
 16940  002EA6  6C46               	negf	___awmod@divisor,c
 16941  002EA8  1E47               	comf	___awmod@divisor+1,f,c
 16942  002EAA  B0D8               	btfsc	status,0,c
 16943  002EAC  2A47               	incf	___awmod@divisor+1,f,c
 16944  002EAE  D000               	goto	l8780
 16945  002EB0                     l8780:
 16946                           
 16947                           ; BSR set to: 0
 16948  002EB0  5046               	movf	___awmod@divisor,w,c
 16949  002EB2  1047               	iorwf	___awmod@divisor+1,w,c
 16950  002EB4  B4D8               	btfsc	status,2,c
 16951  002EB6  D020               	goto	l8796
 16952                           
 16953                           ; BSR set to: 0
 16954  002EB8  0E01               	movlw	1
 16955  002EBA  0100               	movlb	0	; () banked
 16956  002EBC  6FFE               	movwf	___awmod@counter& (0+255),b
 16957  002EBE  D006               	goto	l8786
 16958  002EC0                     l8784:
 16959                           
 16960                           ; BSR set to: 0
 16961  002EC0  90D8               	bcf	status,0,c
 16962  002EC2  3646               	rlcf	___awmod@divisor,f,c
 16963  002EC4  3647               	rlcf	___awmod@divisor+1,f,c
 16964  002EC6  0100               	movlb	0	; () banked
 16965  002EC8  2BFE               	incf	___awmod@counter& (0+255),f,b
 16966  002ECA  D000               	goto	l8786
 16967  002ECC                     l8786:
 16968                           
 16969                           ; BSR set to: 0
 16970  002ECC  BE47               	btfsc	___awmod@divisor+1,7,c
 16971  002ECE  D002               	goto	l8788
 16972  002ED0  D7F7               	goto	l8784
 16973                           
 16974                           ; BSR set to: 0
 16975  002ED2  D000               	goto	l8788
 16976  002ED4                     l8788:
 16977                           
 16978                           ; BSR set to: 0
 16979  002ED4  5046               	movf	___awmod@divisor,w,c
 16980  002ED6  5C44               	subwf	___awmod@dividend,w,c
 16981  002ED8  5047               	movf	___awmod@divisor+1,w,c
 16982  002EDA  5845               	subwfb	___awmod@dividend+1,w,c
 16983  002EDC  A0D8               	btfss	status,0,c
 16984  002EDE  D005               	goto	l8792
 16985                           
 16986                           ; BSR set to: 0
 16987  002EE0  5046               	movf	___awmod@divisor,w,c
 16988  002EE2  5E44               	subwf	___awmod@dividend,f,c
 16989  002EE4  5047               	movf	___awmod@divisor+1,w,c
 16990  002EE6  5A45               	subwfb	___awmod@dividend+1,f,c
 16991  002EE8  D000               	goto	l8792
 16992  002EEA                     l8792:
 16993                           
 16994                           ; BSR set to: 0
 16995  002EEA  90D8               	bcf	status,0,c
 16996  002EEC  3247               	rrcf	___awmod@divisor+1,f,c
 16997  002EEE  3246               	rrcf	___awmod@divisor,f,c
 16998                           
 16999                           ; BSR set to: 0
 17000  002EF0  0100               	movlb	0	; () banked
 17001  002EF2  2FFE               	decfsz	___awmod@counter& (0+255),f,b
 17002  002EF4  D7EF               	goto	l8788
 17003                           
 17004                           ; BSR set to: 0
 17005  002EF6  D000               	goto	l8796
 17006  002EF8                     l8796:
 17007                           
 17008                           ; BSR set to: 0
 17009  002EF8  0100               	movlb	0	; () banked
 17010  002EFA  51FF               	movf	___awmod@sign& (0+255),w,b
 17011  002EFC  0100               	movlb	0	; () banked
 17012  002EFE  B4D8               	btfsc	status,2,c
 17013  002F00  D005               	goto	l8800
 17014                           
 17015                           ; BSR set to: 0
 17016  002F02  6C44               	negf	___awmod@dividend,c
 17017  002F04  1E45               	comf	___awmod@dividend+1,f,c
 17018  002F06  B0D8               	btfsc	status,0,c
 17019  002F08  2A45               	incf	___awmod@dividend+1,f,c
 17020  002F0A  D000               	goto	l8800
 17021  002F0C                     l8800:
 17022                           
 17023                           ; BSR set to: 0
 17024  002F0C  C044  F044         	movff	___awmod@dividend,?___awmod
 17025  002F10  C045  F045         	movff	___awmod@dividend+1,?___awmod+1
 17026  002F14  D000               	goto	l1754
 17027  002F16                     l1754:
 17028                           
 17029                           ; BSR set to: 0
 17030  002F16  0012               	return		;funcret
 17031  002F18                     __end_of___awmod:
 17032                           	opt stack 0
 17033                           tblptru	equ	0xFF8
 17034                           tblptrh	equ	0xFF7
 17035                           tblptrl	equ	0xFF6
 17036                           tablat	equ	0xFF5
 17037                           prodh	equ	0xFF4
 17038                           prodl	equ	0xFF3
 17039                           intcon	equ	0xFF2
 17040                           intcon2	equ	0xFF1
 17041                           postinc0	equ	0xFEE
 17042                           wreg	equ	0xFE8
 17043                           postdec1	equ	0xFE5
 17044                           fsr1l	equ	0xFE1
 17045                           indf2	equ	0xFDF
 17046                           postinc2	equ	0xFDE
 17047                           postdec2	equ	0xFDD
 17048                           fsr2h	equ	0xFDA
 17049                           fsr2l	equ	0xFD9
 17050                           status	equ	0xFD8
 17051                           
 17052 ;; *************** function ___awdiv *****************
 17053 ;; Defined at:
 17054 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 17055 ;; Parameters:    Size  Location     Type
 17056 ;;  dividend        2   22[COMRAM] int 
 17057 ;;  divisor         2   24[COMRAM] int 
 17058 ;; Auto vars:     Size  Location     Type
 17059 ;;  quotient        2   28[COMRAM] int 
 17060 ;;  sign            1   27[COMRAM] unsigned char 
 17061 ;;  counter         1   26[COMRAM] unsigned char 
 17062 ;; Return value:  Size  Location     Type
 17063 ;;                  2   22[COMRAM] int 
 17064 ;; Registers used:
 17065 ;;		wreg, status,2, status,0
 17066 ;; Tracked objects:
 17067 ;;		On entry : 0/0
 17068 ;;		On exit  : 0/0
 17069 ;;		Unchanged: 0/0
 17070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17071 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17072 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17074 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17075 ;;Total ram usage:        8 bytes
 17076 ;; Hardware stack levels used:    1
 17077 ;; Hardware stack levels required when called:    3
 17078 ;; This function calls:
 17079 ;;		Nothing
 17080 ;; This function is called by:
 17081 ;;		_Update_Screen
 17082 ;;		_dec_2_bcd
 17083 ;;		_Update_Setup_Time_Screen
 17084 ;;		_Update_Setup_Fan_Screen
 17085 ;;		_Update_Setup_Alarm_Time_Screen
 17086 ;;		_main
 17087 ;;		_Set_DC_RGB
 17088 ;;		_Set_RPM_RGB
 17089 ;; This function uses a non-reentrant model
 17090 ;;
 17091                           
 17092                           	psect	text93
 17093  002CCE                     __ptext93:
 17094                           	opt stack 0
 17095  002CCE                     ___awdiv:
 17096                           	opt stack 27
 17097                           
 17098                           ; BSR set to: 0
 17099                           ;incstack = 0
 17100  002CCE  0E00               	movlw	0
 17101  002CD0  6E1C               	movwf	___awdiv@sign,c
 17102  002CD2  AE1A               	btfss	___awdiv@divisor+1,7,c
 17103  002CD4  D007               	goto	l8732
 17104  002CD6  6C19               	negf	___awdiv@divisor,c
 17105  002CD8  1E1A               	comf	___awdiv@divisor+1,f,c
 17106  002CDA  B0D8               	btfsc	status,0,c
 17107  002CDC  2A1A               	incf	___awdiv@divisor+1,f,c
 17108  002CDE  0E01               	movlw	1
 17109  002CE0  6E1C               	movwf	___awdiv@sign,c
 17110  002CE2  D000               	goto	l8732
 17111  002CE4                     l8732:
 17112  002CE4  AE18               	btfss	___awdiv@dividend+1,7,c
 17113  002CE6  D007               	goto	l8738
 17114  002CE8  6C17               	negf	___awdiv@dividend,c
 17115  002CEA  1E18               	comf	___awdiv@dividend+1,f,c
 17116  002CEC  B0D8               	btfsc	status,0,c
 17117  002CEE  2A18               	incf	___awdiv@dividend+1,f,c
 17118  002CF0  0E01               	movlw	1
 17119  002CF2  1A1C               	xorwf	___awdiv@sign,f,c
 17120  002CF4  D000               	goto	l8738
 17121  002CF6                     l8738:
 17122  002CF6  0E00               	movlw	0
 17123  002CF8  6E1E               	movwf	___awdiv@quotient+1,c
 17124  002CFA  0E00               	movlw	0
 17125  002CFC  6E1D               	movwf	___awdiv@quotient,c
 17126  002CFE  5019               	movf	___awdiv@divisor,w,c
 17127  002D00  101A               	iorwf	___awdiv@divisor+1,w,c
 17128  002D02  B4D8               	btfsc	status,2,c
 17129  002D04  D021               	goto	l8760
 17130  002D06  0E01               	movlw	1
 17131  002D08  6E1B               	movwf	___awdiv@counter,c
 17132  002D0A  D005               	goto	l8746
 17133  002D0C                     l8744:
 17134  002D0C  90D8               	bcf	status,0,c
 17135  002D0E  3619               	rlcf	___awdiv@divisor,f,c
 17136  002D10  361A               	rlcf	___awdiv@divisor+1,f,c
 17137  002D12  2A1B               	incf	___awdiv@counter,f,c
 17138  002D14  D000               	goto	l8746
 17139  002D16                     l8746:
 17140  002D16  BE1A               	btfsc	___awdiv@divisor+1,7,c
 17141  002D18  D002               	goto	l8748
 17142  002D1A  D7F8               	goto	l8744
 17143  002D1C  D000               	goto	l8748
 17144  002D1E                     l8748:
 17145  002D1E  90D8               	bcf	status,0,c
 17146  002D20  361D               	rlcf	___awdiv@quotient,f,c
 17147  002D22  361E               	rlcf	___awdiv@quotient+1,f,c
 17148  002D24  5019               	movf	___awdiv@divisor,w,c
 17149  002D26  5C17               	subwf	___awdiv@dividend,w,c
 17150  002D28  501A               	movf	___awdiv@divisor+1,w,c
 17151  002D2A  5818               	subwfb	___awdiv@dividend+1,w,c
 17152  002D2C  A0D8               	btfss	status,0,c
 17153  002D2E  D006               	goto	l8756
 17154  002D30  5019               	movf	___awdiv@divisor,w,c
 17155  002D32  5E17               	subwf	___awdiv@dividend,f,c
 17156  002D34  501A               	movf	___awdiv@divisor+1,w,c
 17157  002D36  5A18               	subwfb	___awdiv@dividend+1,f,c
 17158  002D38  801D               	bsf	___awdiv@quotient,0,c
 17159  002D3A  D000               	goto	l8756
 17160  002D3C                     l8756:
 17161  002D3C  90D8               	bcf	status,0,c
 17162  002D3E  321A               	rrcf	___awdiv@divisor+1,f,c
 17163  002D40  3219               	rrcf	___awdiv@divisor,f,c
 17164  002D42  2E1B               	decfsz	___awdiv@counter,f,c
 17165  002D44  D7EC               	goto	l8748
 17166  002D46  D000               	goto	l8760
 17167  002D48                     l8760:
 17168  002D48  501C               	movf	___awdiv@sign,w,c
 17169  002D4A  B4D8               	btfsc	status,2,c
 17170  002D4C  D005               	goto	l8764
 17171  002D4E  6C1D               	negf	___awdiv@quotient,c
 17172  002D50  1E1E               	comf	___awdiv@quotient+1,f,c
 17173  002D52  B0D8               	btfsc	status,0,c
 17174  002D54  2A1E               	incf	___awdiv@quotient+1,f,c
 17175  002D56  D000               	goto	l8764
 17176  002D58                     l8764:
 17177  002D58  C01D  F017         	movff	___awdiv@quotient,?___awdiv
 17178  002D5C  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
 17179  002D60  D000               	goto	l1741
 17180  002D62                     l1741:
 17181  002D62  0012               	return		;funcret
 17182  002D64                     __end_of___awdiv:
 17183                           	opt stack 0
 17184                           tblptru	equ	0xFF8
 17185                           tblptrh	equ	0xFF7
 17186                           tblptrl	equ	0xFF6
 17187                           tablat	equ	0xFF5
 17188                           prodh	equ	0xFF4
 17189                           prodl	equ	0xFF3
 17190                           intcon	equ	0xFF2
 17191                           intcon2	equ	0xFF1
 17192                           postinc0	equ	0xFEE
 17193                           wreg	equ	0xFE8
 17194                           postdec1	equ	0xFE5
 17195                           fsr1l	equ	0xFE1
 17196                           indf2	equ	0xFDF
 17197                           postinc2	equ	0xFDE
 17198                           postdec2	equ	0xFDD
 17199                           fsr2h	equ	0xFDA
 17200                           fsr2l	equ	0xFD9
 17201                           status	equ	0xFD8
 17202                           
 17203 ;; *************** function _Do_Init *****************
 17204 ;; Defined at:
 17205 ;;		line 84 in file "Main.c"
 17206 ;; Parameters:    Size  Location     Type
 17207 ;;		None
 17208 ;; Auto vars:     Size  Location     Type
 17209 ;;		None
 17210 ;; Return value:  Size  Location     Type
 17211 ;;		None               void
 17212 ;; Registers used:
 17213 ;;		wreg, status,2, status,0, cstack
 17214 ;; Tracked objects:
 17215 ;;		On entry : 0/0
 17216 ;;		On exit  : 0/0
 17217 ;;		Unchanged: 0/0
 17218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17223 ;;Total ram usage:        0 bytes
 17224 ;; Hardware stack levels used:    1
 17225 ;; Hardware stack levels required when called:    7
 17226 ;; This function calls:
 17227 ;;		_DS1621_Init
 17228 ;;		_I2C_Init
 17229 ;;		_Init_ADC
 17230 ;;		_Turn_Off_Fan
 17231 ;;		_init_INTERRUPT
 17232 ;;		_init_UART
 17233 ;; This function is called by:
 17234 ;;		_main
 17235 ;; This function uses a non-reentrant model
 17236 ;;
 17237                           
 17238                           	psect	text94
 17239  0033FA                     __ptext94:
 17240                           	opt stack 0
 17241  0033FA                     _Do_Init:
 17242                           	opt stack 23
 17243                           
 17244                           ;Main.c: 85: init_UART();
 17245                           
 17246                           ;incstack = 0
 17247  0033FA  EC8E  F01E         	call	_init_UART	;wreg free
 17248                           
 17249                           ;Main.c: 86: Init_ADC();
 17250  0033FE  EC16  F01F         	call	_Init_ADC	;wreg free
 17251                           
 17252                           ;Main.c: 87: OSCCON = 0x70;
 17253  003402  0E70               	movlw	112
 17254  003404  6ED3               	movwf	4051,c	;volatile
 17255                           
 17256                           ;Main.c: 88: ADCON1 = 0x0E;
 17257  003406  0E0E               	movlw	14
 17258  003408  6EC1               	movwf	4033,c	;volatile
 17259                           
 17260                           ;Main.c: 89: TRISA = 0x01;
 17261  00340A  0E01               	movlw	1
 17262  00340C  6E92               	movwf	3986,c	;volatile
 17263                           
 17264                           ;Main.c: 90: TRISB = 0x07;
 17265  00340E  0E07               	movlw	7
 17266  003410  6E93               	movwf	3987,c	;volatile
 17267                           
 17268                           ;Main.c: 91: TRISC = 0x01;
 17269  003412  0E01               	movlw	1
 17270  003414  6E94               	movwf	3988,c	;volatile
 17271                           
 17272                           ;Main.c: 97: TRISD = 0x20;
 17273  003416  0E20               	movlw	32
 17274  003418  6E95               	movwf	3989,c	;volatile
 17275                           
 17276                           ;Main.c: 98: TRISE = 0x00;
 17277  00341A  0E00               	movlw	0
 17278  00341C  6E96               	movwf	3990,c	;volatile
 17279                           
 17280                           ;Main.c: 99: FAN = 0;
 17281  00341E  0E00               	movlw	0
 17282  003420  6E54               	movwf	_FAN,c
 17283                           
 17284                           ;Main.c: 100: RBPU = 0;
 17285  003422  9EF1               	bcf	intcon2,7,c	;volatile
 17286                           
 17287                           ;Main.c: 101: TMR3L = 0x00;
 17288  003424  0E00               	movlw	0
 17289  003426  6EB2               	movwf	4018,c	;volatile
 17290                           
 17291                           ;Main.c: 102: T3CON = 0x03;
 17292  003428  0E03               	movlw	3
 17293  00342A  6EB1               	movwf	4017,c	;volatile
 17294                           
 17295                           ;Main.c: 103: I2C_Init(100000);
 17296  00342C  0EA0               	movlw	160
 17297  00342E  6E11               	movwf	I2C_Init@c,c
 17298  003430  0E86               	movlw	134
 17299  003432  6E12               	movwf	I2C_Init@c+1,c
 17300  003434  0E01               	movlw	1
 17301  003436  6E13               	movwf	I2C_Init@c+2,c
 17302  003438  0E00               	movlw	0
 17303  00343A  6E14               	movwf	I2C_Init@c+3,c
 17304  00343C  EC34  F01F         	call	_I2C_Init	;wreg free
 17305                           
 17306                           ;Main.c: 104: DS1621_Init();
 17307  003440  ECBF  F01D         	call	_DS1621_Init	;wreg free
 17308                           
 17309                           ;Main.c: 105: init_INTERRUPT();
 17310  003444  EC6C  F01D         	call	_init_INTERRUPT	;wreg free
 17311                           
 17312                           ;Main.c: 106: Turn_Off_Fan();
 17313  003448  EC2F  F01F         	call	_Turn_Off_Fan	;wreg free
 17314                           
 17315                           ;Main.c: 107: fan_set_temp = 75;
 17316  00344C  0E4B               	movlw	75
 17317  00344E  6E6E               	movwf	_fan_set_temp,c
 17318  003450  0012               	return		;funcret
 17319  003452                     __end_of_Do_Init:
 17320                           	opt stack 0
 17321                           tblptru	equ	0xFF8
 17322                           tblptrh	equ	0xFF7
 17323                           tblptrl	equ	0xFF6
 17324                           tablat	equ	0xFF5
 17325                           prodh	equ	0xFF4
 17326                           prodl	equ	0xFF3
 17327                           intcon	equ	0xFF2
 17328                           intcon2	equ	0xFF1
 17329                           postinc0	equ	0xFEE
 17330                           wreg	equ	0xFE8
 17331                           postdec1	equ	0xFE5
 17332                           fsr1l	equ	0xFE1
 17333                           indf2	equ	0xFDF
 17334                           postinc2	equ	0xFDE
 17335                           postdec2	equ	0xFDD
 17336                           fsr2h	equ	0xFDA
 17337                           fsr2l	equ	0xFD9
 17338                           status	equ	0xFD8
 17339                           
 17340 ;; *************** function _init_UART *****************
 17341 ;; Defined at:
 17342 ;;		line 78 in file "Main.c"
 17343 ;; Parameters:    Size  Location     Type
 17344 ;;		None
 17345 ;; Auto vars:     Size  Location     Type
 17346 ;;		None
 17347 ;; Return value:  Size  Location     Type
 17348 ;;		None               void
 17349 ;; Registers used:
 17350 ;;		wreg, status,2, cstack
 17351 ;; Tracked objects:
 17352 ;;		On entry : 0/0
 17353 ;;		On exit  : 0/0
 17354 ;;		Unchanged: 0/0
 17355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17360 ;;Total ram usage:        0 bytes
 17361 ;; Hardware stack levels used:    1
 17362 ;; Hardware stack levels required when called:    4
 17363 ;; This function calls:
 17364 ;;		_OpenUSART
 17365 ;; This function is called by:
 17366 ;;		_Do_Init
 17367 ;; This function uses a non-reentrant model
 17368 ;;
 17369                           
 17370                           	psect	text95
 17371  003D1C                     __ptext95:
 17372                           	opt stack 0
 17373  003D1C                     _init_UART:
 17374                           	opt stack 25
 17375                           
 17376                           ;Main.c: 79: OpenUSART(0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b11111111 & 
      +                          0b11111111, 25);
 17377                           
 17378                           ;incstack = 0
 17379  003D1C  0E00               	movlw	0
 17380  003D1E  6E12               	movwf	OpenUSART@spbrg+1,c
 17381  003D20  0E19               	movlw	25
 17382  003D22  6E11               	movwf	OpenUSART@spbrg,c
 17383  003D24  0E3C               	movlw	60
 17384  003D26  ECD3  F018         	call	_OpenUSART
 17385                           
 17386                           ;Main.c: 80: OSCCON = 0x70;
 17387  003D2A  0E70               	movlw	112
 17388  003D2C  6ED3               	movwf	4051,c	;volatile
 17389  003D2E  0012               	return		;funcret
 17390  003D30                     __end_of_init_UART:
 17391                           	opt stack 0
 17392                           tblptru	equ	0xFF8
 17393                           tblptrh	equ	0xFF7
 17394                           tblptrl	equ	0xFF6
 17395                           tablat	equ	0xFF5
 17396                           prodh	equ	0xFF4
 17397                           prodl	equ	0xFF3
 17398                           intcon	equ	0xFF2
 17399                           intcon2	equ	0xFF1
 17400                           postinc0	equ	0xFEE
 17401                           wreg	equ	0xFE8
 17402                           postdec1	equ	0xFE5
 17403                           fsr1l	equ	0xFE1
 17404                           indf2	equ	0xFDF
 17405                           postinc2	equ	0xFDE
 17406                           postdec2	equ	0xFDD
 17407                           fsr2h	equ	0xFDA
 17408                           fsr2l	equ	0xFD9
 17409                           status	equ	0xFD8
 17410                           
 17411 ;; *************** function _OpenUSART *****************
 17412 ;; Defined at:
 17413 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
 17414 ;; Parameters:    Size  Location     Type
 17415 ;;  config          1    wreg     unsigned char 
 17416 ;;  spbrg           2   16[COMRAM] unsigned int 
 17417 ;; Auto vars:     Size  Location     Type
 17418 ;;  config          1   18[COMRAM] unsigned char 
 17419 ;; Return value:  Size  Location     Type
 17420 ;;		None               void
 17421 ;; Registers used:
 17422 ;;		wreg, status,2
 17423 ;; Tracked objects:
 17424 ;;		On entry : 0/0
 17425 ;;		On exit  : 0/0
 17426 ;;		Unchanged: 0/0
 17427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17428 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17429 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17431 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17432 ;;Total ram usage:        3 bytes
 17433 ;; Hardware stack levels used:    1
 17434 ;; Hardware stack levels required when called:    3
 17435 ;; This function calls:
 17436 ;;		Nothing
 17437 ;; This function is called by:
 17438 ;;		_init_UART
 17439 ;; This function uses a non-reentrant model
 17440 ;;
 17441                           
 17442                           	psect	text96
 17443  0031A6                     __ptext96:
 17444                           	opt stack 0
 17445  0031A6                     _OpenUSART:
 17446                           	opt stack 25
 17447                           
 17448                           ;incstack = 0
 17449                           ;OpenUSART@config stored from wreg
 17450  0031A6  6E13               	movwf	OpenUSART@config,c
 17451  0031A8  0E00               	movlw	0
 17452  0031AA  6EAC               	movwf	4012,c	;volatile
 17453  0031AC  0E00               	movlw	0
 17454  0031AE  6EAB               	movwf	4011,c	;volatile
 17455  0031B0  A013               	btfss	OpenUSART@config,0,c
 17456  0031B2  D002               	goto	l6520
 17457  0031B4  88AC               	bsf	4012,4,c	;volatile
 17458  0031B6  D000               	goto	l6520
 17459  0031B8                     l6520:
 17460  0031B8  A213               	btfss	OpenUSART@config,1,c
 17461  0031BA  D003               	goto	l6524
 17462  0031BC  8CAC               	bsf	4012,6,c	;volatile
 17463  0031BE  8CAB               	bsf	4011,6,c	;volatile
 17464  0031C0  D000               	goto	l6524
 17465  0031C2                     l6524:
 17466  0031C2  A413               	btfss	OpenUSART@config,2,c
 17467  0031C4  D002               	goto	l6528
 17468  0031C6  8EAC               	bsf	4012,7,c	;volatile
 17469  0031C8  D000               	goto	l6528
 17470  0031CA                     l6528:
 17471  0031CA  A613               	btfss	OpenUSART@config,3,c
 17472  0031CC  D002               	goto	l1536
 17473  0031CE  88AB               	bsf	4011,4,c	;volatile
 17474  0031D0  D002               	goto	l6532
 17475  0031D2                     l1536:
 17476  0031D2  8AAB               	bsf	4011,5,c	;volatile
 17477  0031D4  D000               	goto	l6532
 17478  0031D6                     l6532:
 17479  0031D6  B813               	btfsc	OpenUSART@config,4,c
 17480  0031D8  84AC               	bsf	4012,2,c	;volatile
 17481  0031DA  989E               	bcf	3998,4,c	;volatile
 17482  0031DC  AA13               	btfss	OpenUSART@config,5,c
 17483  0031DE  D002               	goto	l6540
 17484  0031E0  86AB               	bsf	4011,3,c	;volatile
 17485  0031E2  D000               	goto	l6540
 17486  0031E4                     l6540:
 17487  0031E4  AC13               	btfss	OpenUSART@config,6,c
 17488  0031E6  D002               	goto	l1540
 17489  0031E8  8A9D               	bsf	3997,5,c	;volatile
 17490  0031EA  D001               	goto	l1541
 17491  0031EC                     l1540:
 17492  0031EC  9A9D               	bcf	3997,5,c	;volatile
 17493  0031EE                     l1541:
 17494  0031EE  9A9E               	bcf	3998,5,c	;volatile
 17495  0031F0  AE13               	btfss	OpenUSART@config,7,c
 17496  0031F2  D002               	goto	l1542
 17497  0031F4  889D               	bsf	3997,4,c	;volatile
 17498  0031F6  D001               	goto	l1543
 17499  0031F8                     l1542:
 17500  0031F8  989D               	bcf	3997,4,c	;volatile
 17501  0031FA                     l1543:
 17502  0031FA  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 17503  0031FE  5012               	movf	OpenUSART@spbrg+1,w,c
 17504  003200  6EB0               	movwf	4016,c	;volatile
 17505  003202  8AAC               	bsf	4012,5,c	;volatile
 17506  003204  8EAB               	bsf	4011,7,c	;volatile
 17507  003206  9C94               	bcf	3988,6,c	;volatile
 17508  003208  8E94               	bsf	3988,7,c	;volatile
 17509  00320A  B8AC               	btfsc	4012,4,c	;volatile
 17510  00320C  BEAC               	btfsc	4012,7,c	;volatile
 17511  00320E  D002               	goto	l1545
 17512  003210  8C94               	bsf	3988,6,c	;volatile
 17513  003212  D000               	goto	l1545
 17514  003214                     l1545:
 17515  003214  0012               	return		;funcret
 17516  003216                     __end_of_OpenUSART:
 17517                           	opt stack 0
 17518                           tblptru	equ	0xFF8
 17519                           tblptrh	equ	0xFF7
 17520                           tblptrl	equ	0xFF6
 17521                           tablat	equ	0xFF5
 17522                           prodh	equ	0xFF4
 17523                           prodl	equ	0xFF3
 17524                           intcon	equ	0xFF2
 17525                           intcon2	equ	0xFF1
 17526                           postinc0	equ	0xFEE
 17527                           wreg	equ	0xFE8
 17528                           postdec1	equ	0xFE5
 17529                           fsr1l	equ	0xFE1
 17530                           indf2	equ	0xFDF
 17531                           postinc2	equ	0xFDE
 17532                           postdec2	equ	0xFDD
 17533                           fsr2h	equ	0xFDA
 17534                           fsr2l	equ	0xFD9
 17535                           status	equ	0xFD8
 17536                           
 17537 ;; *************** function _init_INTERRUPT *****************
 17538 ;; Defined at:
 17539 ;;		line 20 in file "Interrupt2.c"
 17540 ;; Parameters:    Size  Location     Type
 17541 ;;		None
 17542 ;; Auto vars:     Size  Location     Type
 17543 ;;		None
 17544 ;; Return value:  Size  Location     Type
 17545 ;;		None               void
 17546 ;; Registers used:
 17547 ;;		wreg, status,2
 17548 ;; Tracked objects:
 17549 ;;		On entry : 0/0
 17550 ;;		On exit  : 0/0
 17551 ;;		Unchanged: 0/0
 17552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17557 ;;Total ram usage:        0 bytes
 17558 ;; Hardware stack levels used:    1
 17559 ;; Hardware stack levels required when called:    3
 17560 ;; This function calls:
 17561 ;;		Nothing
 17562 ;; This function is called by:
 17563 ;;		_Do_Init
 17564 ;; This function uses a non-reentrant model
 17565 ;;
 17566                           
 17567                           	psect	text97
 17568  003AD8                     __ptext97:
 17569                           	opt stack 0
 17570  003AD8                     _init_INTERRUPT:
 17571                           	opt stack 26
 17572                           
 17573                           ;Interrupt2.c: 21: TMR1H = 0;
 17574                           
 17575                           ;incstack = 0
 17576  003AD8  0E00               	movlw	0
 17577  003ADA  6ECF               	movwf	4047,c	;volatile
 17578                           
 17579                           ;Interrupt2.c: 22: TMR1L = 0;
 17580  003ADC  0E00               	movlw	0
 17581  003ADE  6ECE               	movwf	4046,c	;volatile
 17582                           
 17583                           ;Interrupt2.c: 23: PIR1bits.TMR1IF = 0;
 17584  003AE0  909E               	bcf	3998,0,c	;volatile
 17585                           
 17586                           ;Interrupt2.c: 24: PIE1bits.TMR1IE = 1;
 17587  003AE2  809D               	bsf	3997,0,c	;volatile
 17588                           
 17589                           ;Interrupt2.c: 25: INTCON2bits.INTEDG0 = 0;
 17590  003AE4  9CF1               	bcf	intcon2,6,c	;volatile
 17591                           
 17592                           ;Interrupt2.c: 26: INTCON2bits.INTEDG1 = 0;
 17593  003AE6  9AF1               	bcf	intcon2,5,c	;volatile
 17594                           
 17595                           ;Interrupt2.c: 27: INTCON2bits.INTEDG2 = 0;
 17596  003AE8  98F1               	bcf	intcon2,4,c	;volatile
 17597                           
 17598                           ;Interrupt2.c: 28: INTCONbits.INT0IF = 0;
 17599  003AEA  92F2               	bcf	intcon,1,c	;volatile
 17600                           
 17601                           ;Interrupt2.c: 29: INTCON3bits.INT1IF = 0;
 17602  003AEC  90F0               	bcf	intcon3,0,c	;volatile
 17603                           
 17604                           ;Interrupt2.c: 30: INTCON3bits.INT2IF = 0;
 17605  003AEE  92F0               	bcf	intcon3,1,c	;volatile
 17606                           
 17607                           ;Interrupt2.c: 31: INTCONbits.INT0IE = 1;
 17608  003AF0  88F2               	bsf	intcon,4,c	;volatile
 17609                           
 17610                           ;Interrupt2.c: 32: INTCON3bits.INT1IE = 1;
 17611  003AF2  86F0               	bsf	intcon3,3,c	;volatile
 17612                           
 17613                           ;Interrupt2.c: 33: INTCON3bits.INT2IE = 1;
 17614  003AF4  88F0               	bsf	intcon3,4,c	;volatile
 17615                           
 17616                           ;Interrupt2.c: 34: INTCONbits.PEIE = 1;
 17617  003AF6  8CF2               	bsf	intcon,6,c	;volatile
 17618                           
 17619                           ;Interrupt2.c: 35: INTCONbits.GIE = 1;
 17620  003AF8  8EF2               	bsf	intcon,7,c	;volatile
 17621  003AFA  0012               	return		;funcret
 17622  003AFC                     __end_of_init_INTERRUPT:
 17623                           	opt stack 0
 17624                           tblptru	equ	0xFF8
 17625                           tblptrh	equ	0xFF7
 17626                           tblptrl	equ	0xFF6
 17627                           tablat	equ	0xFF5
 17628                           prodh	equ	0xFF4
 17629                           prodl	equ	0xFF3
 17630                           intcon	equ	0xFF2
 17631                           intcon2	equ	0xFF1
 17632                           intcon3	equ	0xFF0
 17633                           postinc0	equ	0xFEE
 17634                           wreg	equ	0xFE8
 17635                           postdec1	equ	0xFE5
 17636                           fsr1l	equ	0xFE1
 17637                           indf2	equ	0xFDF
 17638                           postinc2	equ	0xFDE
 17639                           postdec2	equ	0xFDD
 17640                           fsr2h	equ	0xFDA
 17641                           fsr2l	equ	0xFD9
 17642                           status	equ	0xFD8
 17643                           
 17644 ;; *************** function _Turn_Off_Fan *****************
 17645 ;; Defined at:
 17646 ;;		line 42 in file "Fan_Support.c"
 17647 ;; Parameters:    Size  Location     Type
 17648 ;;		None
 17649 ;; Auto vars:     Size  Location     Type
 17650 ;;		None
 17651 ;; Return value:  Size  Location     Type
 17652 ;;		None               void
 17653 ;; Registers used:
 17654 ;;		wreg, status,2
 17655 ;; Tracked objects:
 17656 ;;		On entry : 0/0
 17657 ;;		On exit  : 0/0
 17658 ;;		Unchanged: 0/0
 17659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17664 ;;Total ram usage:        0 bytes
 17665 ;; Hardware stack levels used:    1
 17666 ;; Hardware stack levels required when called:    3
 17667 ;; This function calls:
 17668 ;;		Nothing
 17669 ;; This function is called by:
 17670 ;;		_Toggle_Fan
 17671 ;;		_Do_Init
 17672 ;; This function uses a non-reentrant model
 17673 ;;
 17674                           
 17675                           	psect	text98
 17676  003E5E                     __ptext98:
 17677                           	opt stack 0
 17678  003E5E                     _Turn_Off_Fan:
 17679                           	opt stack 25
 17680                           
 17681                           ;Fan_Support.c: 43: FAN = 0;
 17682                           
 17683                           ;incstack = 0
 17684  003E5E  0E00               	movlw	0
 17685  003E60  6E54               	movwf	_FAN,c
 17686                           
 17687                           ;Fan_Support.c: 44: PORTAbits.RA5 = 0;
 17688  003E62  9A80               	bcf	3968,5,c	;volatile
 17689                           
 17690                           ;Fan_Support.c: 45: PORTAbits.RA4 = 0;
 17691  003E64  9880               	bcf	3968,4,c	;volatile
 17692  003E66  0012               	return		;funcret
 17693  003E68                     __end_of_Turn_Off_Fan:
 17694                           	opt stack 0
 17695                           tblptru	equ	0xFF8
 17696                           tblptrh	equ	0xFF7
 17697                           tblptrl	equ	0xFF6
 17698                           tablat	equ	0xFF5
 17699                           prodh	equ	0xFF4
 17700                           prodl	equ	0xFF3
 17701                           intcon	equ	0xFF2
 17702                           intcon2	equ	0xFF1
 17703                           intcon3	equ	0xFF0
 17704                           postinc0	equ	0xFEE
 17705                           wreg	equ	0xFE8
 17706                           postdec1	equ	0xFE5
 17707                           fsr1l	equ	0xFE1
 17708                           indf2	equ	0xFDF
 17709                           postinc2	equ	0xFDE
 17710                           postdec2	equ	0xFDD
 17711                           fsr2h	equ	0xFDA
 17712                           fsr2l	equ	0xFD9
 17713                           status	equ	0xFD8
 17714                           
 17715 ;; *************** function _Init_ADC *****************
 17716 ;; Defined at:
 17717 ;;		line 124 in file "utils.c"
 17718 ;; Parameters:    Size  Location     Type
 17719 ;;		None
 17720 ;; Auto vars:     Size  Location     Type
 17721 ;;		None
 17722 ;; Return value:  Size  Location     Type
 17723 ;;		None               void
 17724 ;; Registers used:
 17725 ;;		wreg, status,2
 17726 ;; Tracked objects:
 17727 ;;		On entry : 0/0
 17728 ;;		On exit  : 0/0
 17729 ;;		Unchanged: 0/0
 17730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17735 ;;Total ram usage:        0 bytes
 17736 ;; Hardware stack levels used:    1
 17737 ;; Hardware stack levels required when called:    3
 17738 ;; This function calls:
 17739 ;;		Nothing
 17740 ;; This function is called by:
 17741 ;;		_Do_Init
 17742 ;; This function uses a non-reentrant model
 17743 ;;
 17744                           
 17745                           	psect	text99
 17746  003E2C                     __ptext99:
 17747                           	opt stack 0
 17748  003E2C                     _Init_ADC:
 17749                           	opt stack 26
 17750                           
 17751                           ;utils.c: 125: ADCON0 = 0x01;
 17752                           
 17753                           ;incstack = 0
 17754  003E2C  0E01               	movlw	1
 17755  003E2E  6EC2               	movwf	4034,c	;volatile
 17756                           
 17757                           ;utils.c: 126: ADCON1 = 0x0E;
 17758  003E30  0E0E               	movlw	14
 17759  003E32  6EC1               	movwf	4033,c	;volatile
 17760                           
 17761                           ;utils.c: 127: ADCON2 = 0xA9;
 17762  003E34  0EA9               	movlw	169
 17763  003E36  6EC0               	movwf	4032,c	;volatile
 17764  003E38  0012               	return		;funcret
 17765  003E3A                     __end_of_Init_ADC:
 17766                           	opt stack 0
 17767                           tblptru	equ	0xFF8
 17768                           tblptrh	equ	0xFF7
 17769                           tblptrl	equ	0xFF6
 17770                           tablat	equ	0xFF5
 17771                           prodh	equ	0xFF4
 17772                           prodl	equ	0xFF3
 17773                           intcon	equ	0xFF2
 17774                           intcon2	equ	0xFF1
 17775                           intcon3	equ	0xFF0
 17776                           postinc0	equ	0xFEE
 17777                           wreg	equ	0xFE8
 17778                           postdec1	equ	0xFE5
 17779                           fsr1l	equ	0xFE1
 17780                           indf2	equ	0xFDF
 17781                           postinc2	equ	0xFDE
 17782                           postdec2	equ	0xFDD
 17783                           fsr2h	equ	0xFDA
 17784                           fsr2l	equ	0xFD9
 17785                           status	equ	0xFD8
 17786                           
 17787 ;; *************** function _I2C_Init *****************
 17788 ;; Defined at:
 17789 ;;		line 8 in file "I2C_Soft.c"
 17790 ;; Parameters:    Size  Location     Type
 17791 ;;  c               4   16[COMRAM] unsigned long 
 17792 ;; Auto vars:     Size  Location     Type
 17793 ;;		None
 17794 ;; Return value:  Size  Location     Type
 17795 ;;		None               void
 17796 ;; Registers used:
 17797 ;;		wreg, cstack
 17798 ;; Tracked objects:
 17799 ;;		On entry : 0/0
 17800 ;;		On exit  : 0/0
 17801 ;;		Unchanged: 0/0
 17802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17803 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17806 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17807 ;;Total ram usage:        4 bytes
 17808 ;; Hardware stack levels used:    1
 17809 ;; Hardware stack levels required when called:    4
 17810 ;; This function calls:
 17811 ;;		_i2cHighScl
 17812 ;;		_i2cHighSda
 17813 ;; This function is called by:
 17814 ;;		_Do_Init
 17815 ;; This function uses a non-reentrant model
 17816 ;;
 17817                           
 17818                           	psect	text100
 17819  003E68                     __ptext100:
 17820                           	opt stack 0
 17821  003E68                     _I2C_Init:
 17822                           	opt stack 25
 17823                           
 17824                           ;I2C_Soft.c: 9: i2cHighScl();
 17825                           
 17826                           ;incstack = 0
 17827  003E68  EC1D  F01F         	call	_i2cHighScl	;wreg free
 17828                           
 17829                           ;I2C_Soft.c: 10: i2cHighSda();
 17830  003E6C  EC50  F01F         	call	_i2cHighSda	;wreg free
 17831  003E70  0012               	return		;funcret
 17832  003E72                     __end_of_I2C_Init:
 17833                           	opt stack 0
 17834                           tblptru	equ	0xFF8
 17835                           tblptrh	equ	0xFF7
 17836                           tblptrl	equ	0xFF6
 17837                           tablat	equ	0xFF5
 17838                           prodh	equ	0xFF4
 17839                           prodl	equ	0xFF3
 17840                           intcon	equ	0xFF2
 17841                           intcon2	equ	0xFF1
 17842                           intcon3	equ	0xFF0
 17843                           postinc0	equ	0xFEE
 17844                           wreg	equ	0xFE8
 17845                           postdec1	equ	0xFE5
 17846                           fsr1l	equ	0xFE1
 17847                           indf2	equ	0xFDF
 17848                           postinc2	equ	0xFDE
 17849                           postdec2	equ	0xFDD
 17850                           fsr2h	equ	0xFDA
 17851                           fsr2l	equ	0xFD9
 17852                           status	equ	0xFD8
 17853                           
 17854 ;; *************** function _DS1621_Init *****************
 17855 ;; Defined at:
 17856 ;;		line 19 in file "I2C_Support.c"
 17857 ;; Parameters:    Size  Location     Type
 17858 ;;		None
 17859 ;; Auto vars:     Size  Location     Type
 17860 ;;  Device          1   21[COMRAM] unsigned char 
 17861 ;; Return value:  Size  Location     Type
 17862 ;;		None               void
 17863 ;; Registers used:
 17864 ;;		wreg, status,2, status,0, cstack
 17865 ;; Tracked objects:
 17866 ;;		On entry : 0/0
 17867 ;;		On exit  : 0/0
 17868 ;;		Unchanged: 0/0
 17869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17871 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17873 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17874 ;;Total ram usage:        1 bytes
 17875 ;; Hardware stack levels used:    1
 17876 ;; Hardware stack levels required when called:    6
 17877 ;; This function calls:
 17878 ;;		_I2C_Write_Cmd_Only
 17879 ;;		_I2C_Write_Cmd_Write_Data
 17880 ;; This function is called by:
 17881 ;;		_Do_Init
 17882 ;; This function uses a non-reentrant model
 17883 ;;
 17884                           
 17885                           	psect	text101
 17886  003B7E                     __ptext101:
 17887                           	opt stack 0
 17888  003B7E                     _DS1621_Init:
 17889                           	opt stack 23
 17890                           
 17891                           ;I2C_Support.c: 20: char Device = 0x48;
 17892                           
 17893                           ;incstack = 0
 17894  003B7E  0E48               	movlw	72
 17895  003B80  6E16               	movwf	DS1621_Init@Device,c
 17896                           
 17897                           ;I2C_Support.c: 21: I2C_Write_Cmd_Write_Data(Device, 0xAC, 0x02);
 17898  003B82  0EAC               	movlw	172
 17899  003B84  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
 17900  003B86  0E02               	movlw	2
 17901  003B88  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
 17902  003B8A  5016               	movf	DS1621_Init@Device,w,c
 17903  003B8C  ECAF  F01D         	call	_I2C_Write_Cmd_Write_Data
 17904                           
 17905                           ;I2C_Support.c: 22: I2C_Write_Cmd_Only(Device, 0xEE);
 17906  003B90  0EEE               	movlw	238
 17907  003B92  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
 17908  003B94  5016               	movf	DS1621_Init@Device,w,c
 17909  003B96  ECDC  F01D         	call	_I2C_Write_Cmd_Only
 17910  003B9A  0012               	return		;funcret
 17911  003B9C                     __end_of_DS1621_Init:
 17912                           	opt stack 0
 17913                           tblptru	equ	0xFF8
 17914                           tblptrh	equ	0xFF7
 17915                           tblptrl	equ	0xFF6
 17916                           tablat	equ	0xFF5
 17917                           prodh	equ	0xFF4
 17918                           prodl	equ	0xFF3
 17919                           intcon	equ	0xFF2
 17920                           intcon2	equ	0xFF1
 17921                           intcon3	equ	0xFF0
 17922                           postinc0	equ	0xFEE
 17923                           wreg	equ	0xFE8
 17924                           postdec1	equ	0xFE5
 17925                           fsr1l	equ	0xFE1
 17926                           indf2	equ	0xFDF
 17927                           postinc2	equ	0xFDE
 17928                           postdec2	equ	0xFDD
 17929                           fsr2h	equ	0xFDA
 17930                           fsr2l	equ	0xFD9
 17931                           status	equ	0xFD8
 17932                           
 17933 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
 17934 ;; Defined at:
 17935 ;;		line 128 in file "I2C_Soft.c"
 17936 ;; Parameters:    Size  Location     Type
 17937 ;;  Device          1    wreg     unsigned char 
 17938 ;;  Cmd             1   18[COMRAM] unsigned char 
 17939 ;;  Data_Out        1   19[COMRAM] unsigned char 
 17940 ;; Auto vars:     Size  Location     Type
 17941 ;;  Device          1   20[COMRAM] unsigned char 
 17942 ;; Return value:  Size  Location     Type
 17943 ;;		None               void
 17944 ;; Registers used:
 17945 ;;		wreg, status,2, status,0, cstack
 17946 ;; Tracked objects:
 17947 ;;		On entry : 0/0
 17948 ;;		On exit  : 0/0
 17949 ;;		Unchanged: 0/0
 17950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17951 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17952 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17954 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17955 ;;Total ram usage:        3 bytes
 17956 ;; Hardware stack levels used:    1
 17957 ;; Hardware stack levels required when called:    5
 17958 ;; This function calls:
 17959 ;;		_I2C_Start
 17960 ;;		_I2C_Stop
 17961 ;;		_I2C_Write
 17962 ;; This function is called by:
 17963 ;;		_DS1621_Init
 17964 ;; This function uses a non-reentrant model
 17965 ;;
 17966                           
 17967                           	psect	text102
 17968  003B5E                     __ptext102:
 17969                           	opt stack 0
 17970  003B5E                     _I2C_Write_Cmd_Write_Data:
 17971                           	opt stack 23
 17972                           
 17973                           ;incstack = 0
 17974                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
 17975  003B5E  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
 17976                           
 17977                           ;I2C_Soft.c: 129: I2C_Start();
 17978  003B60  ECC5  F01E         	call	_I2C_Start	;wreg free
 17979                           
 17980                           ;I2C_Soft.c: 130: I2C_Write((Device << 1) | 0);
 17981  003B64  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
 17982  003B66  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
 17983  003B68  EC63  F01C         	call	_I2C_Write
 17984                           
 17985                           ;I2C_Soft.c: 131: I2C_Write(Cmd);
 17986  003B6C  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
 17987  003B6E  EC63  F01C         	call	_I2C_Write
 17988                           
 17989                           ;I2C_Soft.c: 132: I2C_Write(Data_Out);
 17990  003B72  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
 17991  003B74  EC63  F01C         	call	_I2C_Write
 17992                           
 17993                           ;I2C_Soft.c: 133: I2C_Stop();
 17994  003B78  ECBC  F01E         	call	_I2C_Stop	;wreg free
 17995  003B7C  0012               	return		;funcret
 17996  003B7E                     __end_of_I2C_Write_Cmd_Write_Data:
 17997                           	opt stack 0
 17998                           tblptru	equ	0xFF8
 17999                           tblptrh	equ	0xFF7
 18000                           tblptrl	equ	0xFF6
 18001                           tablat	equ	0xFF5
 18002                           prodh	equ	0xFF4
 18003                           prodl	equ	0xFF3
 18004                           intcon	equ	0xFF2
 18005                           intcon2	equ	0xFF1
 18006                           intcon3	equ	0xFF0
 18007                           postinc0	equ	0xFEE
 18008                           wreg	equ	0xFE8
 18009                           postdec1	equ	0xFE5
 18010                           fsr1l	equ	0xFE1
 18011                           indf2	equ	0xFDF
 18012                           postinc2	equ	0xFDE
 18013                           postdec2	equ	0xFDD
 18014                           fsr2h	equ	0xFDA
 18015                           fsr2l	equ	0xFD9
 18016                           status	equ	0xFD8
 18017                           
 18018 ;; *************** function _I2C_Write_Cmd_Only *****************
 18019 ;; Defined at:
 18020 ;;		line 121 in file "I2C_Soft.c"
 18021 ;; Parameters:    Size  Location     Type
 18022 ;;  Device          1    wreg     unsigned char 
 18023 ;;  Cmd             1   18[COMRAM] unsigned char 
 18024 ;; Auto vars:     Size  Location     Type
 18025 ;;  Device          1   19[COMRAM] unsigned char 
 18026 ;; Return value:  Size  Location     Type
 18027 ;;		None               void
 18028 ;; Registers used:
 18029 ;;		wreg, status,2, status,0, cstack
 18030 ;; Tracked objects:
 18031 ;;		On entry : 0/0
 18032 ;;		On exit  : 0/0
 18033 ;;		Unchanged: 0/0
 18034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18035 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18036 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18038 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18039 ;;Total ram usage:        2 bytes
 18040 ;; Hardware stack levels used:    1
 18041 ;; Hardware stack levels required when called:    5
 18042 ;; This function calls:
 18043 ;;		_I2C_Start
 18044 ;;		_I2C_Stop
 18045 ;;		_I2C_Write
 18046 ;; This function is called by:
 18047 ;;		_DS1621_Init
 18048 ;; This function uses a non-reentrant model
 18049 ;;
 18050                           
 18051                           	psect	text103
 18052  003BB8                     __ptext103:
 18053                           	opt stack 0
 18054  003BB8                     _I2C_Write_Cmd_Only:
 18055                           	opt stack 23
 18056                           
 18057                           ;incstack = 0
 18058                           ;I2C_Write_Cmd_Only@Device stored from wreg
 18059  003BB8  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
 18060                           
 18061                           ;I2C_Soft.c: 122: I2C_Start();
 18062  003BBA  ECC5  F01E         	call	_I2C_Start	;wreg free
 18063                           
 18064                           ;I2C_Soft.c: 123: I2C_Write((Device << 1) | 0);
 18065  003BBE  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
 18066  003BC0  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
 18067  003BC2  EC63  F01C         	call	_I2C_Write
 18068                           
 18069                           ;I2C_Soft.c: 124: I2C_Write(Cmd);
 18070  003BC6  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
 18071  003BC8  EC63  F01C         	call	_I2C_Write
 18072                           
 18073                           ;I2C_Soft.c: 125: I2C_Stop();
 18074  003BCC  ECBC  F01E         	call	_I2C_Stop	;wreg free
 18075  003BD0  0012               	return		;funcret
 18076  003BD2                     __end_of_I2C_Write_Cmd_Only:
 18077                           	opt stack 0
 18078                           tblptru	equ	0xFF8
 18079                           tblptrh	equ	0xFF7
 18080                           tblptrl	equ	0xFF6
 18081                           tablat	equ	0xFF5
 18082                           prodh	equ	0xFF4
 18083                           prodl	equ	0xFF3
 18084                           intcon	equ	0xFF2
 18085                           intcon2	equ	0xFF1
 18086                           intcon3	equ	0xFF0
 18087                           postinc0	equ	0xFEE
 18088                           wreg	equ	0xFE8
 18089                           postdec1	equ	0xFE5
 18090                           fsr1l	equ	0xFE1
 18091                           indf2	equ	0xFDF
 18092                           postinc2	equ	0xFDE
 18093                           postdec2	equ	0xFDD
 18094                           fsr2h	equ	0xFDA
 18095                           fsr2l	equ	0xFD9
 18096                           status	equ	0xFD8
 18097                           
 18098 ;; *************** function _DS1621_Read_Temp *****************
 18099 ;; Defined at:
 18100 ;;		line 25 in file "I2C_Support.c"
 18101 ;; Parameters:    Size  Location     Type
 18102 ;;		None
 18103 ;; Auto vars:     Size  Location     Type
 18104 ;;  Device          1   23[COMRAM] unsigned char 
 18105 ;;  Data_Ret        1   22[COMRAM] unsigned char 
 18106 ;;  Cmd             1   21[COMRAM] unsigned char 
 18107 ;; Return value:  Size  Location     Type
 18108 ;;                  2   19[COMRAM] int 
 18109 ;; Registers used:
 18110 ;;		wreg, status,2, status,0, cstack
 18111 ;; Tracked objects:
 18112 ;;		On entry : 0/0
 18113 ;;		On exit  : 0/0
 18114 ;;		Unchanged: 0/0
 18115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18116 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18117 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18119 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18120 ;;Total ram usage:        5 bytes
 18121 ;; Hardware stack levels used:    1
 18122 ;; Hardware stack levels required when called:    6
 18123 ;; This function calls:
 18124 ;;		_I2C_ReStart
 18125 ;;		_I2C_Read
 18126 ;;		_I2C_Start
 18127 ;;		_I2C_Stop
 18128 ;;		_I2C_Write
 18129 ;; This function is called by:
 18130 ;;		_main
 18131 ;; This function uses a non-reentrant model
 18132 ;;
 18133                           
 18134                           	psect	text104
 18135  003940                     __ptext104:
 18136                           	opt stack 0
 18137  003940                     _DS1621_Read_Temp:
 18138                           	opt stack 24
 18139                           
 18140                           ;I2C_Support.c: 26: char Device = 0x48;
 18141                           
 18142                           ;incstack = 0
 18143  003940  0E48               	movlw	72
 18144  003942  6E18               	movwf	DS1621_Read_Temp@Device,c
 18145                           
 18146                           ;I2C_Support.c: 27: char Cmd = 0xAA;
 18147  003944  0EAA               	movlw	170
 18148  003946  6E16               	movwf	DS1621_Read_Temp@Cmd,c
 18149                           
 18150                           ;I2C_Support.c: 28: char Data_Ret;
 18151                           ;I2C_Support.c: 29: I2C_Start();
 18152  003948  ECC5  F01E         	call	_I2C_Start	;wreg free
 18153                           
 18154                           ;I2C_Support.c: 30: I2C_Write((Device << 1) | 0);
 18155  00394C  5018               	movf	DS1621_Read_Temp@Device,w,c
 18156  00394E  2418               	addwf	DS1621_Read_Temp@Device,w,c
 18157  003950  EC63  F01C         	call	_I2C_Write
 18158                           
 18159                           ;I2C_Support.c: 31: I2C_Write(Cmd);
 18160  003954  5016               	movf	DS1621_Read_Temp@Cmd,w,c
 18161  003956  EC63  F01C         	call	_I2C_Write
 18162                           
 18163                           ;I2C_Support.c: 32: I2C_ReStart();
 18164  00395A  EC3D  F01E         	call	_I2C_ReStart	;wreg free
 18165                           
 18166                           ;I2C_Support.c: 33: I2C_Write((Device << 1) | 1);
 18167  00395E  80D8               	bsf	status,0,c
 18168  003960  3418               	rlcf	DS1621_Read_Temp@Device,w,c
 18169  003962  EC63  F01C         	call	_I2C_Write
 18170                           
 18171                           ;I2C_Support.c: 34: Data_Ret = I2C_Read(0);
 18172  003966  0E00               	movlw	0
 18173  003968  ECDF  F01B         	call	_I2C_Read
 18174  00396C  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
 18175                           
 18176                           ;I2C_Support.c: 35: I2C_Stop();
 18177  00396E  ECBC  F01E         	call	_I2C_Stop	;wreg free
 18178                           
 18179                           ;I2C_Support.c: 36: return Data_Ret;
 18180  003972  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 18181  003976  6A15               	clrf	?_DS1621_Read_Temp+1,c
 18182  003978  D000               	goto	l453
 18183  00397A                     l453:
 18184  00397A  0012               	return		;funcret
 18185  00397C                     __end_of_DS1621_Read_Temp:
 18186                           	opt stack 0
 18187                           tblptru	equ	0xFF8
 18188                           tblptrh	equ	0xFF7
 18189                           tblptrl	equ	0xFF6
 18190                           tablat	equ	0xFF5
 18191                           prodh	equ	0xFF4
 18192                           prodl	equ	0xFF3
 18193                           intcon	equ	0xFF2
 18194                           intcon2	equ	0xFF1
 18195                           intcon3	equ	0xFF0
 18196                           postinc0	equ	0xFEE
 18197                           wreg	equ	0xFE8
 18198                           postdec1	equ	0xFE5
 18199                           fsr1l	equ	0xFE1
 18200                           indf2	equ	0xFDF
 18201                           postinc2	equ	0xFDE
 18202                           postdec2	equ	0xFDD
 18203                           fsr2h	equ	0xFDA
 18204                           fsr2l	equ	0xFD9
 18205                           status	equ	0xFD8
 18206                           
 18207 ;; *************** function _I2C_Write *****************
 18208 ;; Defined at:
 18209 ;;		line 31 in file "I2C_Soft.c"
 18210 ;; Parameters:    Size  Location     Type
 18211 ;;  outByte         1    wreg     unsigned char 
 18212 ;; Auto vars:     Size  Location     Type
 18213 ;;  outByte         1   16[COMRAM] unsigned char 
 18214 ;;  n               1   17[COMRAM] unsigned char 
 18215 ;; Return value:  Size  Location     Type
 18216 ;;		None               void
 18217 ;; Registers used:
 18218 ;;		wreg, status,2, status,0, cstack
 18219 ;; Tracked objects:
 18220 ;;		On entry : 0/0
 18221 ;;		On exit  : 0/0
 18222 ;;		Unchanged: 0/0
 18223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18225 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18227 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18228 ;;Total ram usage:        2 bytes
 18229 ;; Hardware stack levels used:    1
 18230 ;; Hardware stack levels required when called:    4
 18231 ;; This function calls:
 18232 ;;		_i2cHighScl
 18233 ;;		_i2cHighSda
 18234 ;;		_i2cLowScl
 18235 ;;		_i2cLowSda
 18236 ;; This function is called by:
 18237 ;;		_I2C_Write_Address_Read_One_Byte
 18238 ;;		_I2C_Write_Address_Write_One_Byte
 18239 ;;		_I2C_Write_Cmd_Only
 18240 ;;		_I2C_Write_Cmd_Write_Data
 18241 ;;		_DS1621_Read_Temp
 18242 ;;		_DS3231_Read_Time
 18243 ;;		_DS3231_Write_Time
 18244 ;;		_DS3231_Read_Alarm_Time
 18245 ;;		_DS3231_Init
 18246 ;;		_DS3231_Write_Alarm_Time
 18247 ;;		_I2C_Write_Cmd_Read_One_Byte
 18248 ;;		_DS3231_Setup_Time
 18249 ;;		_DS3231_Write_Initial_Alarm_Time
 18250 ;; This function uses a non-reentrant model
 18251 ;;
 18252                           
 18253                           	psect	text105
 18254  0038C6                     __ptext105:
 18255                           	opt stack 0
 18256  0038C6                     _I2C_Write:
 18257                           	opt stack 23
 18258                           
 18259                           ;incstack = 0
 18260                           ;I2C_Write@outByte stored from wreg
 18261  0038C6  6E11               	movwf	I2C_Write@outByte,c
 18262                           
 18263                           ;I2C_Soft.c: 32: unsigned char n;
 18264                           ;I2C_Soft.c: 33: for (n = 0; n < 8; n++){
 18265  0038C8  0E00               	movlw	0
 18266  0038CA  6E12               	movwf	I2C_Write@n,c
 18267  0038CC                     l8568:
 18268  0038CC  0E07               	movlw	7
 18269  0038CE  6412               	cpfsgt	I2C_Write@n,c
 18270  0038D0  D001               	goto	l341
 18271  0038D2  D011               	goto	l8586
 18272  0038D4                     l341:
 18273                           
 18274                           ;I2C_Soft.c: 34: if (outByte & 0x80) i2cHighSda();
 18275  0038D4  AE11               	btfss	I2C_Write@outByte,7,c
 18276  0038D6  D003               	goto	l8574
 18277  0038D8  EC50  F01F         	call	_i2cHighSda	;wreg free
 18278  0038DC  D003               	goto	l8576
 18279  0038DE                     l8574:
 18280                           
 18281                           ;I2C_Soft.c: 35: else i2cLowSda();
 18282  0038DE  EC3E  F01F         	call	_i2cLowSda	;wreg free
 18283  0038E2  D000               	goto	l8576
 18284  0038E4                     l8576:
 18285                           
 18286                           ;I2C_Soft.c: 36: i2cHighScl();
 18287  0038E4  EC1D  F01F         	call	_i2cHighScl	;wreg free
 18288                           
 18289                           ;I2C_Soft.c: 37: i2cLowScl();
 18290  0038E8  EC4C  F01F         	call	_i2cLowScl	;wreg free
 18291                           
 18292                           ;I2C_Soft.c: 38: outByte = outByte << 1;
 18293  0038EC  5011               	movf	I2C_Write@outByte,w,c
 18294  0038EE  2411               	addwf	I2C_Write@outByte,w,c
 18295  0038F0  6E11               	movwf	I2C_Write@outByte,c
 18296  0038F2  2A12               	incf	I2C_Write@n,f,c
 18297  0038F4  D7EB               	goto	l8568
 18298  0038F6                     l8586:
 18299                           
 18300                           ;I2C_Soft.c: 39: }
 18301                           ;I2C_Soft.c: 40: i2cHighSda();
 18302  0038F6  EC50  F01F         	call	_i2cHighSda	;wreg free
 18303                           
 18304                           ;I2C_Soft.c: 41: i2cHighScl();
 18305  0038FA  EC1D  F01F         	call	_i2cHighScl	;wreg free
 18306                           
 18307                           ;I2C_Soft.c: 42: i2cLowScl();
 18308  0038FE  EC4C  F01F         	call	_i2cLowScl	;wreg free
 18309  003902  0012               	return		;funcret
 18310  003904                     __end_of_I2C_Write:
 18311                           	opt stack 0
 18312                           tblptru	equ	0xFF8
 18313                           tblptrh	equ	0xFF7
 18314                           tblptrl	equ	0xFF6
 18315                           tablat	equ	0xFF5
 18316                           prodh	equ	0xFF4
 18317                           prodl	equ	0xFF3
 18318                           intcon	equ	0xFF2
 18319                           intcon2	equ	0xFF1
 18320                           intcon3	equ	0xFF0
 18321                           postinc0	equ	0xFEE
 18322                           wreg	equ	0xFE8
 18323                           postdec1	equ	0xFE5
 18324                           fsr1l	equ	0xFE1
 18325                           indf2	equ	0xFDF
 18326                           postinc2	equ	0xFDE
 18327                           postdec2	equ	0xFDD
 18328                           fsr2h	equ	0xFDA
 18329                           fsr2l	equ	0xFD9
 18330                           status	equ	0xFD8
 18331                           
 18332 ;; *************** function _I2C_Stop *****************
 18333 ;; Defined at:
 18334 ;;		line 72 in file "I2C_Soft.c"
 18335 ;; Parameters:    Size  Location     Type
 18336 ;;		None
 18337 ;; Auto vars:     Size  Location     Type
 18338 ;;		None
 18339 ;; Return value:  Size  Location     Type
 18340 ;;		None               void
 18341 ;; Registers used:
 18342 ;;		wreg, cstack
 18343 ;; Tracked objects:
 18344 ;;		On entry : 0/0
 18345 ;;		On exit  : 0/0
 18346 ;;		Unchanged: 0/0
 18347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18352 ;;Total ram usage:        0 bytes
 18353 ;; Hardware stack levels used:    1
 18354 ;; Hardware stack levels required when called:    4
 18355 ;; This function calls:
 18356 ;;		_i2cHighScl
 18357 ;;		_i2cHighSda
 18358 ;;		_i2cLowScl
 18359 ;;		_i2cLowSda
 18360 ;; This function is called by:
 18361 ;;		_I2C_Write_Address_Read_One_Byte
 18362 ;;		_I2C_Write_Address_Write_One_Byte
 18363 ;;		_I2C_Write_Cmd_Only
 18364 ;;		_I2C_Write_Cmd_Write_Data
 18365 ;;		_DS1621_Read_Temp
 18366 ;;		_DS3231_Read_Time
 18367 ;;		_DS3231_Write_Time
 18368 ;;		_DS3231_Read_Alarm_Time
 18369 ;;		_DS3231_Init
 18370 ;;		_DS3231_Write_Alarm_Time
 18371 ;;		_I2C_Write_Cmd_Read_One_Byte
 18372 ;;		_DS3231_Setup_Time
 18373 ;;		_DS3231_Write_Initial_Alarm_Time
 18374 ;; This function uses a non-reentrant model
 18375 ;;
 18376                           
 18377                           	psect	text106
 18378  003D78                     __ptext106:
 18379                           	opt stack 0
 18380  003D78                     _I2C_Stop:
 18381                           	opt stack 23
 18382                           
 18383                           ;I2C_Soft.c: 73: i2cLowScl();
 18384                           
 18385                           ;incstack = 0
 18386  003D78  EC4C  F01F         	call	_i2cLowScl	;wreg free
 18387                           
 18388                           ;I2C_Soft.c: 74: i2cLowSda();
 18389  003D7C  EC3E  F01F         	call	_i2cLowSda	;wreg free
 18390                           
 18391                           ;I2C_Soft.c: 75: i2cHighScl();
 18392  003D80  EC1D  F01F         	call	_i2cHighScl	;wreg free
 18393                           
 18394                           ;I2C_Soft.c: 76: i2cHighSda();
 18395  003D84  EC50  F01F         	call	_i2cHighSda	;wreg free
 18396  003D88  0012               	return		;funcret
 18397  003D8A                     __end_of_I2C_Stop:
 18398                           	opt stack 0
 18399                           tblptru	equ	0xFF8
 18400                           tblptrh	equ	0xFF7
 18401                           tblptrl	equ	0xFF6
 18402                           tablat	equ	0xFF5
 18403                           prodh	equ	0xFF4
 18404                           prodl	equ	0xFF3
 18405                           intcon	equ	0xFF2
 18406                           intcon2	equ	0xFF1
 18407                           intcon3	equ	0xFF0
 18408                           postinc0	equ	0xFEE
 18409                           wreg	equ	0xFE8
 18410                           postdec1	equ	0xFE5
 18411                           fsr1l	equ	0xFE1
 18412                           indf2	equ	0xFDF
 18413                           postinc2	equ	0xFDE
 18414                           postdec2	equ	0xFDD
 18415                           fsr2h	equ	0xFDA
 18416                           fsr2l	equ	0xFD9
 18417                           status	equ	0xFD8
 18418                           
 18419 ;; *************** function _I2C_Start *****************
 18420 ;; Defined at:
 18421 ;;		line 57 in file "I2C_Soft.c"
 18422 ;; Parameters:    Size  Location     Type
 18423 ;;		None
 18424 ;; Auto vars:     Size  Location     Type
 18425 ;;		None
 18426 ;; Return value:  Size  Location     Type
 18427 ;;		None               void
 18428 ;; Registers used:
 18429 ;;		wreg, cstack
 18430 ;; Tracked objects:
 18431 ;;		On entry : 0/0
 18432 ;;		On exit  : 0/0
 18433 ;;		Unchanged: 0/0
 18434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18439 ;;Total ram usage:        0 bytes
 18440 ;; Hardware stack levels used:    1
 18441 ;; Hardware stack levels required when called:    4
 18442 ;; This function calls:
 18443 ;;		_i2cHighScl
 18444 ;;		_i2cHighSda
 18445 ;;		_i2cLowScl
 18446 ;;		_i2cLowSda
 18447 ;; This function is called by:
 18448 ;;		_I2C_Write_Address_Read_One_Byte
 18449 ;;		_I2C_Write_Address_Write_One_Byte
 18450 ;;		_I2C_Write_Cmd_Only
 18451 ;;		_I2C_Write_Cmd_Write_Data
 18452 ;;		_DS1621_Read_Temp
 18453 ;;		_DS3231_Read_Time
 18454 ;;		_DS3231_Write_Time
 18455 ;;		_DS3231_Read_Alarm_Time
 18456 ;;		_DS3231_Init
 18457 ;;		_DS3231_Write_Alarm_Time
 18458 ;;		_I2C_Write_Cmd_Read_One_Byte
 18459 ;;		_DS3231_Setup_Time
 18460 ;;		_DS3231_Write_Initial_Alarm_Time
 18461 ;; This function uses a non-reentrant model
 18462 ;;
 18463                           
 18464                           	psect	text107
 18465  003D8A                     __ptext107:
 18466                           	opt stack 0
 18467  003D8A                     _I2C_Start:
 18468                           	opt stack 23
 18469                           
 18470                           ;I2C_Soft.c: 58: i2cHighSda();
 18471                           
 18472                           ;incstack = 0
 18473  003D8A  EC50  F01F         	call	_i2cHighSda	;wreg free
 18474                           
 18475                           ;I2C_Soft.c: 59: i2cHighScl();
 18476  003D8E  EC1D  F01F         	call	_i2cHighScl	;wreg free
 18477                           
 18478                           ;I2C_Soft.c: 60: i2cLowSda();
 18479  003D92  EC3E  F01F         	call	_i2cLowSda	;wreg free
 18480                           
 18481                           ;I2C_Soft.c: 61: i2cLowScl();
 18482  003D96  EC4C  F01F         	call	_i2cLowScl	;wreg free
 18483  003D9A  0012               	return		;funcret
 18484  003D9C                     __end_of_I2C_Start:
 18485                           	opt stack 0
 18486                           tblptru	equ	0xFF8
 18487                           tblptrh	equ	0xFF7
 18488                           tblptrl	equ	0xFF6
 18489                           tablat	equ	0xFF5
 18490                           prodh	equ	0xFF4
 18491                           prodl	equ	0xFF3
 18492                           intcon	equ	0xFF2
 18493                           intcon2	equ	0xFF1
 18494                           intcon3	equ	0xFF0
 18495                           postinc0	equ	0xFEE
 18496                           wreg	equ	0xFE8
 18497                           postdec1	equ	0xFE5
 18498                           fsr1l	equ	0xFE1
 18499                           indf2	equ	0xFDF
 18500                           postinc2	equ	0xFDE
 18501                           postdec2	equ	0xFDD
 18502                           fsr2h	equ	0xFDA
 18503                           fsr2l	equ	0xFD9
 18504                           status	equ	0xFD8
 18505                           
 18506 ;; *************** function _I2C_Read *****************
 18507 ;; Defined at:
 18508 ;;		line 13 in file "I2C_Soft.c"
 18509 ;; Parameters:    Size  Location     Type
 18510 ;;  ack             1    wreg     unsigned char 
 18511 ;; Auto vars:     Size  Location     Type
 18512 ;;  ack             1   16[COMRAM] unsigned char 
 18513 ;;  inByte          1   18[COMRAM] unsigned char 
 18514 ;;  n               1   17[COMRAM] unsigned char 
 18515 ;; Return value:  Size  Location     Type
 18516 ;;                  1    wreg      unsigned char 
 18517 ;; Registers used:
 18518 ;;		wreg, status,2, status,0, cstack
 18519 ;; Tracked objects:
 18520 ;;		On entry : 0/0
 18521 ;;		On exit  : 0/0
 18522 ;;		Unchanged: 0/0
 18523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18525 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18527 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18528 ;;Total ram usage:        3 bytes
 18529 ;; Hardware stack levels used:    1
 18530 ;; Hardware stack levels required when called:    5
 18531 ;; This function calls:
 18532 ;;		_i2cAck
 18533 ;;		_i2cHighScl
 18534 ;;		_i2cHighSda
 18535 ;;		_i2cLowScl
 18536 ;;		_i2cNack
 18537 ;; This function is called by:
 18538 ;;		_I2C_Write_Address_Read_One_Byte
 18539 ;;		_DS1621_Read_Temp
 18540 ;;		_DS3231_Read_Time
 18541 ;;		_DS3231_Read_Alarm_Time
 18542 ;;		_DS3231_Init
 18543 ;;		_I2C_Write_Cmd_Read_One_Byte
 18544 ;; This function uses a non-reentrant model
 18545 ;;
 18546                           
 18547                           	psect	text108
 18548  0037BE                     __ptext108:
 18549                           	opt stack 0
 18550  0037BE                     _I2C_Read:
 18551                           	opt stack 22
 18552                           
 18553                           ;incstack = 0
 18554                           ;I2C_Read@ack stored from wreg
 18555  0037BE  6E11               	movwf	I2C_Read@ack,c
 18556                           
 18557                           ;I2C_Soft.c: 14: unsigned char inByte, n;
 18558                           ;I2C_Soft.c: 15: i2cHighSda();
 18559  0037C0  EC50  F01F         	call	_i2cHighSda	;wreg free
 18560                           
 18561                           ;I2C_Soft.c: 16: for (n = 0; n < 8; n++){
 18562  0037C4  0E00               	movlw	0
 18563  0037C6  6E12               	movwf	I2C_Read@n,c
 18564  0037C8                     l8538:
 18565  0037C8  0E07               	movlw	7
 18566  0037CA  6412               	cpfsgt	I2C_Read@n,c
 18567  0037CC  D001               	goto	l8542
 18568  0037CE  D00F               	goto	l8556
 18569  0037D0                     l8542:
 18570                           
 18571                           ;I2C_Soft.c: 17: i2cHighScl();
 18572  0037D0  EC1D  F01F         	call	_i2cHighScl	;wreg free
 18573                           
 18574                           ;I2C_Soft.c: 19: if (PORTDbits.RD7)
 18575  0037D4  AE83               	btfss	3971,7,c	;volatile
 18576  0037D6  D003               	goto	l8548
 18577                           
 18578                           ;I2C_Soft.c: 20: inByte = (inByte << 1) | 0x01;
 18579  0037D8  80D8               	bsf	status,0,c
 18580  0037DA  3613               	rlcf	I2C_Read@inByte,f,c
 18581  0037DC  D004               	goto	l8550
 18582  0037DE                     l8548:
 18583                           
 18584                           ;I2C_Soft.c: 21: else
 18585                           ;I2C_Soft.c: 22: inByte = inByte << 1;
 18586  0037DE  5013               	movf	I2C_Read@inByte,w,c
 18587  0037E0  2413               	addwf	I2C_Read@inByte,w,c
 18588  0037E2  6E13               	movwf	I2C_Read@inByte,c
 18589  0037E4  D000               	goto	l8550
 18590  0037E6                     l8550:
 18591                           
 18592                           ;I2C_Soft.c: 23: i2cLowScl();
 18593  0037E6  EC4C  F01F         	call	_i2cLowScl	;wreg free
 18594  0037EA  2A12               	incf	I2C_Read@n,f,c
 18595  0037EC  D7ED               	goto	l8538
 18596  0037EE                     l8556:
 18597                           
 18598                           ;I2C_Soft.c: 24: }
 18599                           ;I2C_Soft.c: 25: if (ack) i2cAck();
 18600  0037EE  5011               	movf	I2C_Read@ack,w,c
 18601  0037F0  B4D8               	btfsc	status,2,c
 18602  0037F2  D003               	goto	l8560
 18603  0037F4  ECCE  F01E         	call	_i2cAck	;wreg free
 18604  0037F8  D003               	goto	l8562
 18605  0037FA                     l8560:
 18606                           
 18607                           ;I2C_Soft.c: 26: else i2cNack();
 18608  0037FA  EC39  F01F         	call	_i2cNack	;wreg free
 18609  0037FE  D000               	goto	l8562
 18610  003800                     l8562:
 18611                           
 18612                           ;I2C_Soft.c: 28: return (inByte);
 18613  003800  5013               	movf	I2C_Read@inByte,w,c
 18614  003802  D000               	goto	l338
 18615  003804                     l338:
 18616  003804  0012               	return		;funcret
 18617  003806                     __end_of_I2C_Read:
 18618                           	opt stack 0
 18619                           tblptru	equ	0xFF8
 18620                           tblptrh	equ	0xFF7
 18621                           tblptrl	equ	0xFF6
 18622                           tablat	equ	0xFF5
 18623                           prodh	equ	0xFF4
 18624                           prodl	equ	0xFF3
 18625                           intcon	equ	0xFF2
 18626                           intcon2	equ	0xFF1
 18627                           intcon3	equ	0xFF0
 18628                           postinc0	equ	0xFEE
 18629                           wreg	equ	0xFE8
 18630                           postdec1	equ	0xFE5
 18631                           fsr1l	equ	0xFE1
 18632                           indf2	equ	0xFDF
 18633                           postinc2	equ	0xFDE
 18634                           postdec2	equ	0xFDD
 18635                           fsr2h	equ	0xFDA
 18636                           fsr2l	equ	0xFD9
 18637                           status	equ	0xFD8
 18638                           
 18639 ;; *************** function _i2cNack *****************
 18640 ;; Defined at:
 18641 ;;		line 45 in file "I2C_Soft.c"
 18642 ;; Parameters:    Size  Location     Type
 18643 ;;		None
 18644 ;; Auto vars:     Size  Location     Type
 18645 ;;		None
 18646 ;; Return value:  Size  Location     Type
 18647 ;;		None               void
 18648 ;; Registers used:
 18649 ;;		wreg, cstack
 18650 ;; Tracked objects:
 18651 ;;		On entry : 0/0
 18652 ;;		On exit  : 0/0
 18653 ;;		Unchanged: 0/0
 18654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18659 ;;Total ram usage:        0 bytes
 18660 ;; Hardware stack levels used:    1
 18661 ;; Hardware stack levels required when called:    4
 18662 ;; This function calls:
 18663 ;;		_i2cHighScl
 18664 ;;		_i2cLowScl
 18665 ;; This function is called by:
 18666 ;;		_I2C_Read
 18667 ;; This function uses a non-reentrant model
 18668 ;;
 18669                           
 18670                           	psect	text109
 18671  003E72                     __ptext109:
 18672                           	opt stack 0
 18673  003E72                     _i2cNack:
 18674                           	opt stack 22
 18675                           
 18676                           ;I2C_Soft.c: 46: i2cHighScl();
 18677                           
 18678                           ;incstack = 0
 18679  003E72  EC1D  F01F         	call	_i2cHighScl	;wreg free
 18680                           
 18681                           ;I2C_Soft.c: 47: i2cLowScl();
 18682  003E76  EC4C  F01F         	call	_i2cLowScl	;wreg free
 18683  003E7A  0012               	return		;funcret
 18684  003E7C                     __end_of_i2cNack:
 18685                           	opt stack 0
 18686                           tblptru	equ	0xFF8
 18687                           tblptrh	equ	0xFF7
 18688                           tblptrl	equ	0xFF6
 18689                           tablat	equ	0xFF5
 18690                           prodh	equ	0xFF4
 18691                           prodl	equ	0xFF3
 18692                           intcon	equ	0xFF2
 18693                           intcon2	equ	0xFF1
 18694                           intcon3	equ	0xFF0
 18695                           postinc0	equ	0xFEE
 18696                           wreg	equ	0xFE8
 18697                           postdec1	equ	0xFE5
 18698                           fsr1l	equ	0xFE1
 18699                           indf2	equ	0xFDF
 18700                           postinc2	equ	0xFDE
 18701                           postdec2	equ	0xFDD
 18702                           fsr2h	equ	0xFDA
 18703                           fsr2l	equ	0xFD9
 18704                           status	equ	0xFD8
 18705                           
 18706 ;; *************** function _i2cAck *****************
 18707 ;; Defined at:
 18708 ;;		line 50 in file "I2C_Soft.c"
 18709 ;; Parameters:    Size  Location     Type
 18710 ;;		None
 18711 ;; Auto vars:     Size  Location     Type
 18712 ;;		None
 18713 ;; Return value:  Size  Location     Type
 18714 ;;		None               void
 18715 ;; Registers used:
 18716 ;;		wreg, cstack
 18717 ;; Tracked objects:
 18718 ;;		On entry : 0/0
 18719 ;;		On exit  : 0/0
 18720 ;;		Unchanged: 0/0
 18721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18726 ;;Total ram usage:        0 bytes
 18727 ;; Hardware stack levels used:    1
 18728 ;; Hardware stack levels required when called:    4
 18729 ;; This function calls:
 18730 ;;		_i2cHighScl
 18731 ;;		_i2cHighSda
 18732 ;;		_i2cLowScl
 18733 ;;		_i2cLowSda
 18734 ;; This function is called by:
 18735 ;;		_I2C_Read
 18736 ;; This function uses a non-reentrant model
 18737 ;;
 18738                           
 18739                           	psect	text110
 18740  003D9C                     __ptext110:
 18741                           	opt stack 0
 18742  003D9C                     _i2cAck:
 18743                           	opt stack 22
 18744                           
 18745                           ;I2C_Soft.c: 51: i2cLowSda();
 18746                           
 18747                           ;incstack = 0
 18748  003D9C  EC3E  F01F         	call	_i2cLowSda	;wreg free
 18749                           
 18750                           ;I2C_Soft.c: 52: i2cHighScl();
 18751  003DA0  EC1D  F01F         	call	_i2cHighScl	;wreg free
 18752                           
 18753                           ;I2C_Soft.c: 53: i2cLowScl();
 18754  003DA4  EC4C  F01F         	call	_i2cLowScl	;wreg free
 18755                           
 18756                           ;I2C_Soft.c: 54: i2cHighSda();
 18757  003DA8  EC50  F01F         	call	_i2cHighSda	;wreg free
 18758  003DAC  0012               	return		;funcret
 18759  003DAE                     __end_of_i2cAck:
 18760                           	opt stack 0
 18761                           tblptru	equ	0xFF8
 18762                           tblptrh	equ	0xFF7
 18763                           tblptrl	equ	0xFF6
 18764                           tablat	equ	0xFF5
 18765                           prodh	equ	0xFF4
 18766                           prodl	equ	0xFF3
 18767                           intcon	equ	0xFF2
 18768                           intcon2	equ	0xFF1
 18769                           intcon3	equ	0xFF0
 18770                           postinc0	equ	0xFEE
 18771                           wreg	equ	0xFE8
 18772                           postdec1	equ	0xFE5
 18773                           fsr1l	equ	0xFE1
 18774                           indf2	equ	0xFDF
 18775                           postinc2	equ	0xFDE
 18776                           postdec2	equ	0xFDD
 18777                           fsr2h	equ	0xFDA
 18778                           fsr2l	equ	0xFD9
 18779                           status	equ	0xFD8
 18780                           
 18781 ;; *************** function _I2C_ReStart *****************
 18782 ;; Defined at:
 18783 ;;		line 64 in file "I2C_Soft.c"
 18784 ;; Parameters:    Size  Location     Type
 18785 ;;		None
 18786 ;; Auto vars:     Size  Location     Type
 18787 ;;		None
 18788 ;; Return value:  Size  Location     Type
 18789 ;;		None               void
 18790 ;; Registers used:
 18791 ;;		wreg, cstack
 18792 ;; Tracked objects:
 18793 ;;		On entry : 0/0
 18794 ;;		On exit  : 0/0
 18795 ;;		Unchanged: 0/0
 18796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18801 ;;Total ram usage:        0 bytes
 18802 ;; Hardware stack levels used:    1
 18803 ;; Hardware stack levels required when called:    4
 18804 ;; This function calls:
 18805 ;;		_i2cHighScl
 18806 ;;		_i2cHighSda
 18807 ;;		_i2cLowScl
 18808 ;;		_i2cLowSda
 18809 ;; This function is called by:
 18810 ;;		_I2C_Write_Address_Read_One_Byte
 18811 ;;		_DS1621_Read_Temp
 18812 ;;		_DS3231_Read_Time
 18813 ;;		_DS3231_Read_Alarm_Time
 18814 ;;		_DS3231_Init
 18815 ;;		_I2C_Write_Cmd_Read_One_Byte
 18816 ;; This function uses a non-reentrant model
 18817 ;;
 18818                           
 18819                           	psect	text111
 18820  003C7A                     __ptext111:
 18821                           	opt stack 0
 18822  003C7A                     _I2C_ReStart:
 18823                           	opt stack 23
 18824                           
 18825                           ;I2C_Soft.c: 65: i2cLowScl();
 18826                           
 18827                           ;incstack = 0
 18828  003C7A  EC4C  F01F         	call	_i2cLowScl	;wreg free
 18829                           
 18830                           ;I2C_Soft.c: 66: i2cHighSda();
 18831  003C7E  EC50  F01F         	call	_i2cHighSda	;wreg free
 18832                           
 18833                           ;I2C_Soft.c: 67: i2cHighScl();
 18834  003C82  EC1D  F01F         	call	_i2cHighScl	;wreg free
 18835                           
 18836                           ;I2C_Soft.c: 68: i2cLowSda();
 18837  003C86  EC3E  F01F         	call	_i2cLowSda	;wreg free
 18838                           
 18839                           ;I2C_Soft.c: 69: i2cLowScl();
 18840  003C8A  EC4C  F01F         	call	_i2cLowScl	;wreg free
 18841  003C8E  0012               	return		;funcret
 18842  003C90                     __end_of_I2C_ReStart:
 18843                           	opt stack 0
 18844                           tblptru	equ	0xFF8
 18845                           tblptrh	equ	0xFF7
 18846                           tblptrl	equ	0xFF6
 18847                           tablat	equ	0xFF5
 18848                           prodh	equ	0xFF4
 18849                           prodl	equ	0xFF3
 18850                           intcon	equ	0xFF2
 18851                           intcon2	equ	0xFF1
 18852                           intcon3	equ	0xFF0
 18853                           postinc0	equ	0xFEE
 18854                           wreg	equ	0xFE8
 18855                           postdec1	equ	0xFE5
 18856                           fsr1l	equ	0xFE1
 18857                           indf2	equ	0xFDF
 18858                           postinc2	equ	0xFDE
 18859                           postdec2	equ	0xFDD
 18860                           fsr2h	equ	0xFDA
 18861                           fsr2l	equ	0xFD9
 18862                           status	equ	0xFD8
 18863                           
 18864 ;; *************** function _i2cLowSda *****************
 18865 ;; Defined at:
 18866 ;;		line 84 in file "I2C_Soft.c"
 18867 ;; Parameters:    Size  Location     Type
 18868 ;;		None
 18869 ;; Auto vars:     Size  Location     Type
 18870 ;;		None
 18871 ;; Return value:  Size  Location     Type
 18872 ;;		None               void
 18873 ;; Registers used:
 18874 ;;		None
 18875 ;; Tracked objects:
 18876 ;;		On entry : 0/0
 18877 ;;		On exit  : 0/0
 18878 ;;		Unchanged: 0/0
 18879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18884 ;;Total ram usage:        0 bytes
 18885 ;; Hardware stack levels used:    1
 18886 ;; Hardware stack levels required when called:    3
 18887 ;; This function calls:
 18888 ;;		Nothing
 18889 ;; This function is called by:
 18890 ;;		_I2C_Write
 18891 ;;		_i2cAck
 18892 ;;		_I2C_Start
 18893 ;;		_I2C_ReStart
 18894 ;;		_I2C_Stop
 18895 ;; This function uses a non-reentrant model
 18896 ;;
 18897                           
 18898                           	psect	text112
 18899  003E7C                     __ptext112:
 18900                           	opt stack 0
 18901  003E7C                     _i2cLowSda:
 18902                           	opt stack 23
 18903                           
 18904                           ;I2C_Soft.c: 85: PORTDbits.RD7 = 0;
 18905                           
 18906                           ;incstack = 0
 18907  003E7C  9E83               	bcf	3971,7,c	;volatile
 18908                           
 18909                           ;I2C_Soft.c: 86: TRISDbits.RD7 = 0;
 18910  003E7E  9E95               	bcf	3989,7,c	;volatile
 18911                           
 18912                           ;I2C_Soft.c: 87: _delay((unsigned long)((2)*(8000000/4000000.0)));
 18913  003E80  D000               	nop2		;2 cycle nop
 18914  003E82  D000               	nop2		;2 cycle nop
 18915  003E84  0012               	return		;funcret
 18916  003E86                     __end_of_i2cLowSda:
 18917                           	opt stack 0
 18918                           tblptru	equ	0xFF8
 18919                           tblptrh	equ	0xFF7
 18920                           tblptrl	equ	0xFF6
 18921                           tablat	equ	0xFF5
 18922                           prodh	equ	0xFF4
 18923                           prodl	equ	0xFF3
 18924                           intcon	equ	0xFF2
 18925                           intcon2	equ	0xFF1
 18926                           intcon3	equ	0xFF0
 18927                           postinc0	equ	0xFEE
 18928                           wreg	equ	0xFE8
 18929                           postdec1	equ	0xFE5
 18930                           fsr1l	equ	0xFE1
 18931                           indf2	equ	0xFDF
 18932                           postinc2	equ	0xFDE
 18933                           postdec2	equ	0xFDD
 18934                           fsr2h	equ	0xFDA
 18935                           fsr2l	equ	0xFD9
 18936                           status	equ	0xFD8
 18937                           
 18938 ;; *************** function _i2cLowScl *****************
 18939 ;; Defined at:
 18940 ;;		line 95 in file "I2C_Soft.c"
 18941 ;; Parameters:    Size  Location     Type
 18942 ;;		None
 18943 ;; Auto vars:     Size  Location     Type
 18944 ;;		None
 18945 ;; Return value:  Size  Location     Type
 18946 ;;		None               void
 18947 ;; Registers used:
 18948 ;;		None
 18949 ;; Tracked objects:
 18950 ;;		On entry : 0/0
 18951 ;;		On exit  : 0/0
 18952 ;;		Unchanged: 0/0
 18953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18958 ;;Total ram usage:        0 bytes
 18959 ;; Hardware stack levels used:    1
 18960 ;; Hardware stack levels required when called:    3
 18961 ;; This function calls:
 18962 ;;		Nothing
 18963 ;; This function is called by:
 18964 ;;		_I2C_Read
 18965 ;;		_I2C_Write
 18966 ;;		_i2cNack
 18967 ;;		_i2cAck
 18968 ;;		_I2C_Start
 18969 ;;		_I2C_ReStart
 18970 ;;		_I2C_Stop
 18971 ;; This function uses a non-reentrant model
 18972 ;;
 18973                           
 18974                           	psect	text113
 18975  003E98                     __ptext113:
 18976                           	opt stack 0
 18977  003E98                     _i2cLowScl:
 18978                           	opt stack 23
 18979                           
 18980                           ;I2C_Soft.c: 96: PORTDbits.RD6 = 0;
 18981                           
 18982                           ;incstack = 0
 18983  003E98  9C83               	bcf	3971,6,c	;volatile
 18984                           
 18985                           ;I2C_Soft.c: 97: TRISDbits.RD6 = 0;
 18986  003E9A  9C95               	bcf	3989,6,c	;volatile
 18987                           
 18988                           ;I2C_Soft.c: 98: _delay((unsigned long)((1)*(8000000/4000000.0)));
 18989  003E9C  D000               	nop2		;2 cycle nop
 18990  003E9E  0012               	return		;funcret
 18991  003EA0                     __end_of_i2cLowScl:
 18992                           	opt stack 0
 18993                           tblptru	equ	0xFF8
 18994                           tblptrh	equ	0xFF7
 18995                           tblptrl	equ	0xFF6
 18996                           tablat	equ	0xFF5
 18997                           prodh	equ	0xFF4
 18998                           prodl	equ	0xFF3
 18999                           intcon	equ	0xFF2
 19000                           intcon2	equ	0xFF1
 19001                           intcon3	equ	0xFF0
 19002                           postinc0	equ	0xFEE
 19003                           wreg	equ	0xFE8
 19004                           postdec1	equ	0xFE5
 19005                           fsr1l	equ	0xFE1
 19006                           indf2	equ	0xFDF
 19007                           postinc2	equ	0xFDE
 19008                           postdec2	equ	0xFDD
 19009                           fsr2h	equ	0xFDA
 19010                           fsr2l	equ	0xFD9
 19011                           status	equ	0xFD8
 19012                           
 19013 ;; *************** function _i2cHighSda *****************
 19014 ;; Defined at:
 19015 ;;		line 79 in file "I2C_Soft.c"
 19016 ;; Parameters:    Size  Location     Type
 19017 ;;		None
 19018 ;; Auto vars:     Size  Location     Type
 19019 ;;		None
 19020 ;; Return value:  Size  Location     Type
 19021 ;;		None               void
 19022 ;; Registers used:
 19023 ;;		None
 19024 ;; Tracked objects:
 19025 ;;		On entry : 0/0
 19026 ;;		On exit  : 0/0
 19027 ;;		Unchanged: 0/0
 19028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19033 ;;Total ram usage:        0 bytes
 19034 ;; Hardware stack levels used:    1
 19035 ;; Hardware stack levels required when called:    3
 19036 ;; This function calls:
 19037 ;;		Nothing
 19038 ;; This function is called by:
 19039 ;;		_I2C_Init
 19040 ;;		_I2C_Read
 19041 ;;		_I2C_Write
 19042 ;;		_i2cAck
 19043 ;;		_I2C_Start
 19044 ;;		_I2C_ReStart
 19045 ;;		_I2C_Stop
 19046 ;; This function uses a non-reentrant model
 19047 ;;
 19048                           
 19049                           	psect	text114
 19050  003EA0                     __ptext114:
 19051                           	opt stack 0
 19052  003EA0                     _i2cHighSda:
 19053                           	opt stack 23
 19054                           
 19055                           ;I2C_Soft.c: 80: TRISDbits.RD7 = 1;
 19056                           
 19057                           ;incstack = 0
 19058  003EA0  8E95               	bsf	3989,7,c	;volatile
 19059                           
 19060                           ;I2C_Soft.c: 81: _delay((unsigned long)((2)*(8000000/4000000.0)));
 19061  003EA2  D000               	nop2		;2 cycle nop
 19062  003EA4  D000               	nop2		;2 cycle nop
 19063  003EA6  0012               	return		;funcret
 19064  003EA8                     __end_of_i2cHighSda:
 19065                           	opt stack 0
 19066                           tblptru	equ	0xFF8
 19067                           tblptrh	equ	0xFF7
 19068                           tblptrl	equ	0xFF6
 19069                           tablat	equ	0xFF5
 19070                           prodh	equ	0xFF4
 19071                           prodl	equ	0xFF3
 19072                           intcon	equ	0xFF2
 19073                           intcon2	equ	0xFF1
 19074                           intcon3	equ	0xFF0
 19075                           postinc0	equ	0xFEE
 19076                           wreg	equ	0xFE8
 19077                           postdec1	equ	0xFE5
 19078                           fsr1l	equ	0xFE1
 19079                           indf2	equ	0xFDF
 19080                           postinc2	equ	0xFDE
 19081                           postdec2	equ	0xFDD
 19082                           fsr2h	equ	0xFDA
 19083                           fsr2l	equ	0xFD9
 19084                           status	equ	0xFD8
 19085                           
 19086 ;; *************** function _i2cHighScl *****************
 19087 ;; Defined at:
 19088 ;;		line 90 in file "I2C_Soft.c"
 19089 ;; Parameters:    Size  Location     Type
 19090 ;;		None
 19091 ;; Auto vars:     Size  Location     Type
 19092 ;;		None
 19093 ;; Return value:  Size  Location     Type
 19094 ;;		None               void
 19095 ;; Registers used:
 19096 ;;		wreg
 19097 ;; Tracked objects:
 19098 ;;		On entry : 0/0
 19099 ;;		On exit  : 0/0
 19100 ;;		Unchanged: 0/0
 19101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19106 ;;Total ram usage:        0 bytes
 19107 ;; Hardware stack levels used:    1
 19108 ;; Hardware stack levels required when called:    3
 19109 ;; This function calls:
 19110 ;;		Nothing
 19111 ;; This function is called by:
 19112 ;;		_I2C_Init
 19113 ;;		_I2C_Read
 19114 ;;		_I2C_Write
 19115 ;;		_i2cNack
 19116 ;;		_i2cAck
 19117 ;;		_I2C_Start
 19118 ;;		_I2C_ReStart
 19119 ;;		_I2C_Stop
 19120 ;; This function uses a non-reentrant model
 19121 ;;
 19122                           
 19123                           	psect	text115
 19124  003E3A                     __ptext115:
 19125                           	opt stack 0
 19126  003E3A                     _i2cHighScl:
 19127                           	opt stack 23
 19128                           
 19129                           ;I2C_Soft.c: 91: TRISDbits.RD6 = 1;
 19130                           
 19131                           ;incstack = 0
 19132  003E3A  8C95               	bsf	3989,6,c	;volatile
 19133                           
 19134                           ;I2C_Soft.c: 92: _delay((unsigned long)((10)*(8000000/4000000.0)));
 19135  003E3C  0E06               	movlw	6
 19136  003E3E                     u7957:
 19137  003E3E  2EE8               	decfsz	wreg,f,c
 19138  003E40  D7FE               	goto	u7957
 19139  003E42  D000               	nop2		;nop
 19140  003E44  0012               	return		;funcret
 19141  003E46                     __end_of_i2cHighScl:
 19142                           	opt stack 0
 19143                           tblptru	equ	0xFF8
 19144                           tblptrh	equ	0xFF7
 19145                           tblptrl	equ	0xFF6
 19146                           tablat	equ	0xFF5
 19147                           prodh	equ	0xFF4
 19148                           prodl	equ	0xFF3
 19149                           intcon	equ	0xFF2
 19150                           intcon2	equ	0xFF1
 19151                           intcon3	equ	0xFF0
 19152                           postinc0	equ	0xFEE
 19153                           wreg	equ	0xFE8
 19154                           postdec1	equ	0xFE5
 19155                           fsr1l	equ	0xFE1
 19156                           indf2	equ	0xFDF
 19157                           postinc2	equ	0xFDE
 19158                           postdec2	equ	0xFDD
 19159                           fsr2h	equ	0xFDA
 19160                           fsr2l	equ	0xFD9
 19161                           status	equ	0xFD8
 19162                           
 19163 ;; *************** function _chkisr *****************
 19164 ;; Defined at:
 19165 ;;		line 38 in file "Interrupt2.c"
 19166 ;; Parameters:    Size  Location     Type
 19167 ;;		None
 19168 ;; Auto vars:     Size  Location     Type
 19169 ;;		None
 19170 ;; Return value:  Size  Location     Type
 19171 ;;		None               void
 19172 ;; Registers used:
 19173 ;;		wreg, status,2, status,0, cstack
 19174 ;; Tracked objects:
 19175 ;;		On entry : 0/0
 19176 ;;		On exit  : 0/0
 19177 ;;		Unchanged: 0/0
 19178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19181 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19182 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19183 ;;Total ram usage:       14 bytes
 19184 ;; Hardware stack levels used:    1
 19185 ;; Hardware stack levels required when called:    2
 19186 ;; This function calls:
 19187 ;;		_INT0_isr
 19188 ;;		_INT1_isr
 19189 ;;		_INT2_isr
 19190 ;;		_TIMER1_isr
 19191 ;; This function is called by:
 19192 ;;		Interrupt level 2
 19193 ;; This function uses a non-reentrant model
 19194 ;;
 19195                           
 19196                           	psect	intcode
 19197  000008                     __pintcode:
 19198                           	opt stack 0
 19199  000008                     _chkisr:
 19200                           	opt stack 18
 19201                           
 19202                           ;incstack = 0
 19203  000008  CFFA F003          	movff	pclath,??_chkisr
 19204  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 19205  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 19206  000014  ED8C  F017         	call	int_func,f	;refresh shadow registers
 19207                           pclatu	equ	0xFFB
 19208                           pclath	equ	0xFFA
 19209                           tblptru	equ	0xFF8
 19210                           tblptrh	equ	0xFF7
 19211                           tblptrl	equ	0xFF6
 19212                           tablat	equ	0xFF5
 19213                           prodh	equ	0xFF4
 19214                           prodl	equ	0xFF3
 19215                           intcon	equ	0xFF2
 19216                           intcon2	equ	0xFF1
 19217                           intcon3	equ	0xFF0
 19218                           postinc0	equ	0xFEE
 19219                           fsr0l	equ	0xFE9
 19220                           wreg	equ	0xFE8
 19221                           postdec1	equ	0xFE5
 19222                           fsr1l	equ	0xFE1
 19223                           indf2	equ	0xFDF
 19224                           postinc2	equ	0xFDE
 19225                           postdec2	equ	0xFDD
 19226                           fsr2h	equ	0xFDA
 19227                           fsr2l	equ	0xFD9
 19228                           status	equ	0xFD8
 19229                           
 19230                           	psect	intcode_body
 19231  002F18                     __pintcode_body:
 19232                           	opt stack 18
 19233  002F18                     int_func:
 19234                           	opt stack 18
 19235  002F18  0006               	pop		; remove dummy address from shadow register refresh
 19236  002F1A  CFEA F006          	movff	fsr0h,??_chkisr+3
 19237  002F1E  CFE1 F007          	movff	fsr1l,??_chkisr+4
 19238  002F22  CFE2 F008          	movff	fsr1h,??_chkisr+5
 19239  002F26  CFD9 F009          	movff	fsr2l,??_chkisr+6
 19240  002F2A  CFDA F00A          	movff	fsr2h,??_chkisr+7
 19241  002F2E  CFF3 F00B          	movff	prodl,??_chkisr+8
 19242  002F32  CFF4 F00C          	movff	prodh,??_chkisr+9
 19243  002F36  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 19244  002F3A  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 19245  002F3E  CFF8 F00F          	movff	tblptru,??_chkisr+12
 19246  002F42  CFF5 F010          	movff	tablat,??_chkisr+13
 19247                           
 19248                           ;Interrupt2.c: 39: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 19249  002F46  A09E               	btfss	3998,0,c	;volatile
 19250  002F48  D003               	goto	i2l8090
 19251  002F4A  EC07  F01F         	call	_TIMER1_isr	;wreg free
 19252  002F4E  D000               	goto	i2l8090
 19253  002F50                     i2l8090:
 19254                           
 19255                           ;Interrupt2.c: 40: if (INTCONbits.INT0IF == 1) INT0_isr();
 19256  002F50  A2F2               	btfss	intcon,1,c	;volatile
 19257  002F52  D003               	goto	i2l8094
 19258  002F54  ECDF  F00B         	call	_INT0_isr	;wreg free
 19259  002F58  D000               	goto	i2l8094
 19260  002F5A                     i2l8094:
 19261                           
 19262                           ;Interrupt2.c: 41: if (INTCON3bits.INT1IF == 1) INT1_isr();
 19263  002F5A  A0F0               	btfss	intcon3,0,c	;volatile
 19264  002F5C  D003               	goto	i2l8098
 19265  002F5E  EC29  F01F         	call	_INT1_isr	;wreg free
 19266  002F62  D000               	goto	i2l8098
 19267  002F64                     i2l8098:
 19268                           
 19269                           ;Interrupt2.c: 42: if (INTCON3bits.INT2IF == 1) INT2_isr();
 19270  002F64  A2F0               	btfss	intcon3,1,c	;volatile
 19271  002F66  D003               	goto	i2l760
 19272  002F68  EC23  F01F         	call	_INT2_isr	;wreg free
 19273  002F6C  D000               	goto	i2l760
 19274  002F6E                     i2l760:
 19275  002F6E  C010  FFF5         	movff	??_chkisr+13,tablat
 19276  002F72  C00F  FFF8         	movff	??_chkisr+12,tblptru
 19277  002F76  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 19278  002F7A  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 19279  002F7E  C00C  FFF4         	movff	??_chkisr+9,prodh
 19280  002F82  C00B  FFF3         	movff	??_chkisr+8,prodl
 19281  002F86  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 19282  002F8A  C009  FFD9         	movff	??_chkisr+6,fsr2l
 19283  002F8E  C008  FFE2         	movff	??_chkisr+5,fsr1h
 19284  002F92  C007  FFE1         	movff	??_chkisr+4,fsr1l
 19285  002F96  C006  FFEA         	movff	??_chkisr+3,fsr0h
 19286  002F9A  C005  FFE9         	movff	??_chkisr+2,fsr0l
 19287  002F9E  C004  FFFB         	movff	??_chkisr+1,pclatu
 19288  002FA2  C003  FFFA         	movff	??_chkisr,pclath
 19289  002FA6  0011               	retfie		f
 19290  002FA8                     __end_of_chkisr:
 19291                           	opt stack 0
 19292                           pclatu	equ	0xFFB
 19293                           pclath	equ	0xFFA
 19294                           tblptru	equ	0xFF8
 19295                           tblptrh	equ	0xFF7
 19296                           tblptrl	equ	0xFF6
 19297                           tablat	equ	0xFF5
 19298                           prodh	equ	0xFF4
 19299                           prodl	equ	0xFF3
 19300                           intcon	equ	0xFF2
 19301                           intcon2	equ	0xFF1
 19302                           intcon3	equ	0xFF0
 19303                           postinc0	equ	0xFEE
 19304                           fsr0h	equ	0xFEA
 19305                           fsr0l	equ	0xFE9
 19306                           wreg	equ	0xFE8
 19307                           postdec1	equ	0xFE5
 19308                           fsr1h	equ	0xFE2
 19309                           fsr1l	equ	0xFE1
 19310                           indf2	equ	0xFDF
 19311                           postinc2	equ	0xFDE
 19312                           postdec2	equ	0xFDD
 19313                           fsr2h	equ	0xFDA
 19314                           fsr2l	equ	0xFD9
 19315                           status	equ	0xFD8
 19316                           
 19317 ;; *************** function _TIMER1_isr *****************
 19318 ;; Defined at:
 19319 ;;		line 62 in file "Interrupt2.c"
 19320 ;; Parameters:    Size  Location     Type
 19321 ;;		None
 19322 ;; Auto vars:     Size  Location     Type
 19323 ;;		None
 19324 ;; Return value:  Size  Location     Type
 19325 ;;                  2  724[None  ] int 
 19326 ;; Registers used:
 19327 ;;		wreg, status,2
 19328 ;; Tracked objects:
 19329 ;;		On entry : 0/0
 19330 ;;		On exit  : 0/0
 19331 ;;		Unchanged: 0/0
 19332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19336 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19337 ;;Total ram usage:        0 bytes
 19338 ;; Hardware stack levels used:    1
 19339 ;; This function calls:
 19340 ;;		Nothing
 19341 ;; This function is called by:
 19342 ;;		_chkisr
 19343 ;; This function uses a non-reentrant model
 19344 ;;
 19345                           
 19346                           	psect	text117
 19347  003E0E                     __ptext117:
 19348                           	opt stack 0
 19349  003E0E                     _TIMER1_isr:
 19350                           	opt stack 19
 19351                           
 19352                           ;Interrupt2.c: 63: Nec_State = 0;
 19353                           
 19354                           ;incstack = 0
 19355  003E0E  0E00               	movlw	0
 19356  003E10  0100               	movlb	0	; () banked
 19357  003E12  6FF7               	movwf	_Nec_State& (0+255),b
 19358                           
 19359                           ; BSR set to: 0
 19360                           ;Interrupt2.c: 64: INTCON2bits.INTEDG0 = 0;
 19361  003E14  9CF1               	bcf	intcon2,6,c	;volatile
 19362                           
 19363                           ; BSR set to: 0
 19364                           ;Interrupt2.c: 65: T1CONbits.TMR1ON = 0;
 19365  003E16  90CD               	bcf	4045,0,c	;volatile
 19366                           
 19367                           ; BSR set to: 0
 19368                           ;Interrupt2.c: 66: PIR1bits.TMR1IF = 0;
 19369  003E18  909E               	bcf	3998,0,c	;volatile
 19370  003E1A  D000               	goto	i2l772
 19371  003E1C                     i2l772:
 19372                           
 19373                           ; BSR set to: 0
 19374  003E1C  0012               	return		;funcret
 19375  003E1E                     __end_of_TIMER1_isr:
 19376                           	opt stack 0
 19377                           pclatu	equ	0xFFB
 19378                           pclath	equ	0xFFA
 19379                           tblptru	equ	0xFF8
 19380                           tblptrh	equ	0xFF7
 19381                           tblptrl	equ	0xFF6
 19382                           tablat	equ	0xFF5
 19383                           prodh	equ	0xFF4
 19384                           prodl	equ	0xFF3
 19385                           intcon	equ	0xFF2
 19386                           intcon2	equ	0xFF1
 19387                           intcon3	equ	0xFF0
 19388                           postinc0	equ	0xFEE
 19389                           fsr0h	equ	0xFEA
 19390                           fsr0l	equ	0xFE9
 19391                           wreg	equ	0xFE8
 19392                           postdec1	equ	0xFE5
 19393                           fsr1h	equ	0xFE2
 19394                           fsr1l	equ	0xFE1
 19395                           indf2	equ	0xFDF
 19396                           postinc2	equ	0xFDE
 19397                           postdec2	equ	0xFDD
 19398                           fsr2h	equ	0xFDA
 19399                           fsr2l	equ	0xFD9
 19400                           status	equ	0xFD8
 19401                           
 19402 ;; *************** function _INT2_isr *****************
 19403 ;; Defined at:
 19404 ;;		line 51 in file "Interrupt2.c"
 19405 ;; Parameters:    Size  Location     Type
 19406 ;;		None
 19407 ;; Auto vars:     Size  Location     Type
 19408 ;;		None
 19409 ;; Return value:  Size  Location     Type
 19410 ;;                  2  730[None  ] int 
 19411 ;; Registers used:
 19412 ;;		wreg, status,2
 19413 ;; Tracked objects:
 19414 ;;		On entry : 0/0
 19415 ;;		On exit  : 0/0
 19416 ;;		Unchanged: 0/0
 19417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19422 ;;Total ram usage:        0 bytes
 19423 ;; Hardware stack levels used:    1
 19424 ;; This function calls:
 19425 ;;		Nothing
 19426 ;; This function is called by:
 19427 ;;		_chkisr
 19428 ;; This function uses a non-reentrant model
 19429 ;;
 19430                           
 19431                           	psect	text118
 19432  003E46                     __ptext118:
 19433                           	opt stack 0
 19434  003E46                     _INT2_isr:
 19435                           	opt stack 19
 19436                           
 19437                           ;Interrupt2.c: 52: INTCON3bits.INT2IF = 0;
 19438                           
 19439                           ; BSR set to: 0
 19440                           ;incstack = 0
 19441  003E46  92F0               	bcf	intcon3,1,c	;volatile
 19442                           
 19443                           ;Interrupt2.c: 53: INT2_flag = 1;
 19444  003E48  0E01               	movlw	1
 19445  003E4A  0100               	movlb	0	; () banked
 19446  003E4C  6FF3               	movwf	_INT2_flag& (0+255),b
 19447  003E4E  D000               	goto	i2l766
 19448  003E50                     i2l766:
 19449                           
 19450                           ; BSR set to: 0
 19451  003E50  0012               	return		;funcret
 19452  003E52                     __end_of_INT2_isr:
 19453                           	opt stack 0
 19454                           pclatu	equ	0xFFB
 19455                           pclath	equ	0xFFA
 19456                           tblptru	equ	0xFF8
 19457                           tblptrh	equ	0xFF7
 19458                           tblptrl	equ	0xFF6
 19459                           tablat	equ	0xFF5
 19460                           prodh	equ	0xFF4
 19461                           prodl	equ	0xFF3
 19462                           intcon	equ	0xFF2
 19463                           intcon2	equ	0xFF1
 19464                           intcon3	equ	0xFF0
 19465                           postinc0	equ	0xFEE
 19466                           fsr0h	equ	0xFEA
 19467                           fsr0l	equ	0xFE9
 19468                           wreg	equ	0xFE8
 19469                           postdec1	equ	0xFE5
 19470                           fsr1h	equ	0xFE2
 19471                           fsr1l	equ	0xFE1
 19472                           indf2	equ	0xFDF
 19473                           postinc2	equ	0xFDE
 19474                           postdec2	equ	0xFDD
 19475                           fsr2h	equ	0xFDA
 19476                           fsr2l	equ	0xFD9
 19477                           status	equ	0xFD8
 19478                           
 19479 ;; *************** function _INT1_isr *****************
 19480 ;; Defined at:
 19481 ;;		line 45 in file "Interrupt2.c"
 19482 ;; Parameters:    Size  Location     Type
 19483 ;;		None
 19484 ;; Auto vars:     Size  Location     Type
 19485 ;;		None
 19486 ;; Return value:  Size  Location     Type
 19487 ;;                  2  728[None  ] int 
 19488 ;; Registers used:
 19489 ;;		wreg, status,2
 19490 ;; Tracked objects:
 19491 ;;		On entry : 0/0
 19492 ;;		On exit  : 0/0
 19493 ;;		Unchanged: 0/0
 19494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19499 ;;Total ram usage:        0 bytes
 19500 ;; Hardware stack levels used:    1
 19501 ;; This function calls:
 19502 ;;		Nothing
 19503 ;; This function is called by:
 19504 ;;		_chkisr
 19505 ;; This function uses a non-reentrant model
 19506 ;;
 19507                           
 19508                           	psect	text119
 19509  003E52                     __ptext119:
 19510                           	opt stack 0
 19511  003E52                     _INT1_isr:
 19512                           	opt stack 19
 19513                           
 19514                           ;Interrupt2.c: 46: INTCON3bits.INT1IF = 0;
 19515                           
 19516                           ; BSR set to: 0
 19517                           ;incstack = 0
 19518  003E52  90F0               	bcf	intcon3,0,c	;volatile
 19519                           
 19520                           ;Interrupt2.c: 47: INT1_flag = 1;
 19521  003E54  0E01               	movlw	1
 19522  003E56  0100               	movlb	0	; () banked
 19523  003E58  6FF2               	movwf	_INT1_flag& (0+255),b
 19524  003E5A  D000               	goto	i2l763
 19525  003E5C                     i2l763:
 19526                           
 19527                           ; BSR set to: 0
 19528  003E5C  0012               	return		;funcret
 19529  003E5E                     __end_of_INT1_isr:
 19530                           	opt stack 0
 19531                           pclatu	equ	0xFFB
 19532                           pclath	equ	0xFFA
 19533                           tblptru	equ	0xFF8
 19534                           tblptrh	equ	0xFF7
 19535                           tblptrl	equ	0xFF6
 19536                           tablat	equ	0xFF5
 19537                           prodh	equ	0xFF4
 19538                           prodl	equ	0xFF3
 19539                           intcon	equ	0xFF2
 19540                           intcon2	equ	0xFF1
 19541                           intcon3	equ	0xFF0
 19542                           postinc0	equ	0xFEE
 19543                           fsr0h	equ	0xFEA
 19544                           fsr0l	equ	0xFE9
 19545                           wreg	equ	0xFE8
 19546                           postdec1	equ	0xFE5
 19547                           fsr1h	equ	0xFE2
 19548                           fsr1l	equ	0xFE1
 19549                           indf2	equ	0xFDF
 19550                           postinc2	equ	0xFDE
 19551                           postdec2	equ	0xFDD
 19552                           fsr2h	equ	0xFDA
 19553                           fsr2l	equ	0xFD9
 19554                           status	equ	0xFD8
 19555                           
 19556 ;; *************** function _INT0_isr *****************
 19557 ;; Defined at:
 19558 ;;		line 75 in file "Interrupt2.c"
 19559 ;; Parameters:    Size  Location     Type
 19560 ;;		None
 19561 ;; Auto vars:     Size  Location     Type
 19562 ;;		None
 19563 ;; Return value:  Size  Location     Type
 19564 ;;                  2  726[None  ] int 
 19565 ;; Registers used:
 19566 ;;		wreg, status,2, status,0, cstack
 19567 ;; Tracked objects:
 19568 ;;		On entry : 0/0
 19569 ;;		On exit  : 0/0
 19570 ;;		Unchanged: 0/0
 19571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19574 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19575 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19576 ;;Total ram usage:        2 bytes
 19577 ;; Hardware stack levels used:    1
 19578 ;; Hardware stack levels required when called:    1
 19579 ;; This function calls:
 19580 ;;		_Reset_Nec_State
 19581 ;; This function is called by:
 19582 ;;		_chkisr
 19583 ;; This function uses a non-reentrant model
 19584 ;;
 19585                           
 19586                           	psect	text120
 19587  0017BE                     __ptext120:
 19588                           	opt stack 0
 19589  0017BE                     _INT0_isr:
 19590                           	opt stack 18
 19591                           
 19592                           ;Interrupt2.c: 76: INTCONbits.INT0IF = 0;
 19593                           
 19594                           ; BSR set to: 0
 19595                           ;incstack = 0
 19596  0017BE  92F2               	bcf	intcon,1,c	;volatile
 19597                           
 19598                           ;Interrupt2.c: 77: if (Nec_State != 0) {
 19599  0017C0  0100               	movlb	0	; () banked
 19600  0017C2  51F7               	movf	_Nec_State& (0+255),w,b
 19601  0017C4  B4D8               	btfsc	status,2,c
 19602  0017C6  D0A8               	goto	i2l7434
 19603                           
 19604                           ; BSR set to: 0
 19605                           ;Interrupt2.c: 78: Time_Elapsed = (TMR1H << 8) | TMR1L;
 19606  0017C8  50CE               	movf	4046,w,c	;volatile
 19607  0017CA  CFCF F001          	movff	4047,??_INT0_isr	;volatile
 19608  0017CE  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
 19609  0017D0  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
 19610  0017D4  6A01               	clrf	??_INT0_isr,c
 19611  0017D6  1001               	iorwf	??_INT0_isr,w,c
 19612  0017D8  6E4E               	movwf	_Time_Elapsed,c
 19613  0017DA  5002               	movf	??_INT0_isr+1,w,c
 19614  0017DC  6E4F               	movwf	_Time_Elapsed+1,c
 19615                           
 19616                           ; BSR set to: 0
 19617                           ;Interrupt2.c: 79: TMR1H = 0;
 19618  0017DE  0E00               	movlw	0
 19619  0017E0  6ECF               	movwf	4047,c	;volatile
 19620                           
 19621                           ; BSR set to: 0
 19622                           ;Interrupt2.c: 80: TMR1L = 0;
 19623  0017E2  0E00               	movlw	0
 19624  0017E4  6ECE               	movwf	4046,c	;volatile
 19625                           
 19626                           ; BSR set to: 0
 19627                           ;Interrupt2.c: 81: }
 19628                           ;Interrupt2.c: 82: switch (Nec_State) {
 19629  0017E6  D098               	goto	i2l7434
 19630  0017E8                     i2l7364:
 19631                           
 19632                           ; BSR set to: 0
 19633                           ;Interrupt2.c: 84: {
 19634                           ;Interrupt2.c: 86: TMR1H = 0;
 19635  0017E8  0E00               	movlw	0
 19636  0017EA  6ECF               	movwf	4047,c	;volatile
 19637                           
 19638                           ;Interrupt2.c: 87: TMR1L = 0;
 19639  0017EC  0E00               	movlw	0
 19640  0017EE  6ECE               	movwf	4046,c	;volatile
 19641                           
 19642                           ; BSR set to: 0
 19643                           ;Interrupt2.c: 88: PIR1bits.TMR1IF = 0;
 19644  0017F0  909E               	bcf	3998,0,c	;volatile
 19645                           
 19646                           ;Interrupt2.c: 89: T1CON = 0x90;
 19647  0017F2  0E90               	movlw	144
 19648  0017F4  6ECD               	movwf	4045,c	;volatile
 19649                           
 19650                           ; BSR set to: 0
 19651                           ;Interrupt2.c: 90: T1CONbits.TMR1ON = 1;
 19652  0017F6  80CD               	bsf	4045,0,c	;volatile
 19653                           
 19654                           ;Interrupt2.c: 91: bit_count = 0;
 19655  0017F8  0E00               	movlw	0
 19656  0017FA  0100               	movlb	0	; () banked
 19657  0017FC  6FFA               	movwf	_bit_count& (0+255),b
 19658                           
 19659                           ;Interrupt2.c: 92: Nec_code = 0;
 19660  0017FE  0E00               	movlw	0
 19661  001800  0100               	movlb	0	; () banked
 19662  001802  6FDA               	movwf	_Nec_code& (0+255),b
 19663  001804  0E00               	movlw	0
 19664  001806  6FDB               	movwf	(_Nec_code+1)& (0+255),b
 19665  001808  0E00               	movlw	0
 19666  00180A  6FDC               	movwf	(_Nec_code+2)& (0+255),b
 19667  00180C  0E00               	movlw	0
 19668  00180E  6FDD               	movwf	(_Nec_code+3)& (0+255),b
 19669                           
 19670                           ;Interrupt2.c: 93: Nec_State = 1;
 19671  001810  0E01               	movlw	1
 19672  001812  0100               	movlb	0	; () banked
 19673  001814  6FF7               	movwf	_Nec_State& (0+255),b
 19674  001816  D07E               	goto	i2l7432
 19675                           
 19676                           ; BSR set to: 0
 19677                           ;Interrupt2.c: 95: return;
 19678                           
 19679                           ; BSR set to: 0
 19680                           ;Interrupt2.c: 94: INTCON2bits.INTEDG0 = 1;
 19681  001818  D091               	goto	i2l781
 19682  00181A                     i2l7374:
 19683                           
 19684                           ; BSR set to: 0
 19685                           ;Interrupt2.c: 98: {
 19686                           ;Interrupt2.c: 99: if (Time_Elapsed > 8500 && Time_Elapsed < 9500) {
 19687  00181A  0E35               	movlw	53
 19688  00181C  5C4E               	subwf	_Time_Elapsed,w,c
 19689  00181E  0E21               	movlw	33
 19690  001820  584F               	subwfb	_Time_Elapsed+1,w,c
 19691  001822  A0D8               	btfss	status,0,c
 19692  001824  D00A               	goto	i2l7380
 19693                           
 19694                           ; BSR set to: 0
 19695  001826  0E1C               	movlw	28
 19696  001828  5C4E               	subwf	_Time_Elapsed,w,c
 19697  00182A  0E25               	movlw	37
 19698  00182C  584F               	subwfb	_Time_Elapsed+1,w,c
 19699  00182E  B0D8               	btfsc	status,0,c
 19700  001830  D004               	goto	i2l7380
 19701                           
 19702                           ; BSR set to: 0
 19703                           ;Interrupt2.c: 100: Nec_State = 2;
 19704  001832  0E02               	movlw	2
 19705  001834  0100               	movlb	0	; () banked
 19706  001836  6FF7               	movwf	_Nec_State& (0+255),b
 19707                           
 19708                           ;Interrupt2.c: 101: } else Reset_Nec_State();
 19709  001838  D029               	goto	i2l7406
 19710  00183A                     i2l7380:
 19711                           
 19712                           ; BSR set to: 0
 19713  00183A  EC43  F01F         	call	_Reset_Nec_State	;wreg free
 19714  00183E  D026               	goto	i2l7406
 19715  001840  D025               	goto	i2l7406
 19716                           
 19717                           ;Interrupt2.c: 104: return;
 19718                           
 19719                           ;Interrupt2.c: 103: INTCON2bits.INTEDG0 = 0;
 19720  001842  D07C               	goto	i2l781
 19721  001844                     i2l7386:
 19722                           
 19723                           ;Interrupt2.c: 107: {
 19724                           ;Interrupt2.c: 108: if (Time_Elapsed > 4000 && Time_Elapsed < 5000) {
 19725  001844  0EA1               	movlw	161
 19726  001846  5C4E               	subwf	_Time_Elapsed,w,c
 19727  001848  0E0F               	movlw	15
 19728  00184A  584F               	subwfb	_Time_Elapsed+1,w,c
 19729  00184C  A0D8               	btfss	status,0,c
 19730  00184E  D008               	goto	i2l7392
 19731  001850  0E88               	movlw	136
 19732  001852  5C4E               	subwf	_Time_Elapsed,w,c
 19733  001854  0E13               	movlw	19
 19734  001856  584F               	subwfb	_Time_Elapsed+1,w,c
 19735  001858  B0D8               	btfsc	status,0,c
 19736  00185A  D002               	goto	i2l7392
 19737  00185C                     
 19738                           ;Interrupt2.c: 109: Nec_State = 3;
 19739  00185C  0E03               	movlw	3
 19740  00185E  D054               	goto	L6
 19741  001860                     i2l7392:
 19742  001860  EC43  F01F         	call	_Reset_Nec_State	;wreg free
 19743  001864  D057               	goto	i2l7432
 19744  001866  D056               	goto	i2l7432
 19745                           
 19746                           ;Interrupt2.c: 112: return;
 19747                           
 19748                           ;Interrupt2.c: 111: INTCON2bits.INTEDG0 = 1;
 19749  001868  D069               	goto	i2l781
 19750  00186A                     i2l7398:
 19751                           
 19752                           ;Interrupt2.c: 115: {
 19753                           ;Interrupt2.c: 116: if (Time_Elapsed > 400 && Time_Elapsed < 700) {
 19754  00186A  0E91               	movlw	145
 19755  00186C  5C4E               	subwf	_Time_Elapsed,w,c
 19756  00186E  0E01               	movlw	1
 19757  001870  584F               	subwfb	_Time_Elapsed+1,w,c
 19758  001872  A0D8               	btfss	status,0,c
 19759  001874  D008               	goto	i2l7404
 19760  001876  0EBC               	movlw	188
 19761  001878  5C4E               	subwf	_Time_Elapsed,w,c
 19762  00187A  0E02               	movlw	2
 19763  00187C  584F               	subwfb	_Time_Elapsed+1,w,c
 19764  00187E  B0D8               	btfsc	status,0,c
 19765  001880  D002               	goto	i2l7404
 19766                           
 19767                           ;Interrupt2.c: 117: Nec_State = 4;
 19768  001882  0E04               	movlw	4
 19769  001884  D7D7               	goto	L7
 19770  001886                     i2l7404:
 19771  001886  EC43  F01F         	call	_Reset_Nec_State	;wreg free
 19772  00188A  D000               	goto	i2l7406
 19773  00188C                     i2l7406:
 19774                           
 19775                           ;Interrupt2.c: 119: INTCON2bits.INTEDG0 = 0;
 19776  00188C  9CF1               	bcf	intcon2,6,c	;volatile
 19777                           
 19778                           ;Interrupt2.c: 120: return;
 19779  00188E  D056               	goto	i2l781
 19780  001890                     i2l7410:
 19781                           
 19782                           ;Interrupt2.c: 123: {
 19783                           ;Interrupt2.c: 124: if (Time_Elapsed > 400 && Time_Elapsed < 1800) {
 19784  001890  0E91               	movlw	145
 19785  001892  5C4E               	subwf	_Time_Elapsed,w,c
 19786  001894  0E01               	movlw	1
 19787  001896  584F               	subwfb	_Time_Elapsed+1,w,c
 19788  001898  A0D8               	btfss	status,0,c
 19789  00189A  D039               	goto	i2l7430
 19790  00189C  0E08               	movlw	8
 19791  00189E  5C4E               	subwf	_Time_Elapsed,w,c
 19792  0018A0  0E07               	movlw	7
 19793  0018A2  584F               	subwfb	_Time_Elapsed+1,w,c
 19794  0018A4  B0D8               	btfsc	status,0,c
 19795  0018A6  D033               	goto	i2l7430
 19796                           
 19797                           ;Interrupt2.c: 125: Nec_code = Nec_code << 1;
 19798  0018A8  90D8               	bcf	status,0,c
 19799  0018AA  0100               	movlb	0	; () banked
 19800  0018AC  35DA               	rlcf	_Nec_code& (0+255),w,b
 19801  0018AE  0100               	movlb	0	; () banked
 19802  0018B0  6FDA               	movwf	_Nec_code& (0+255),b
 19803  0018B2  0100               	movlb	0	; () banked
 19804  0018B4  35DB               	rlcf	(_Nec_code+1)& (0+255),w,b
 19805  0018B6  0100               	movlb	0	; () banked
 19806  0018B8  6FDB               	movwf	(_Nec_code+1)& (0+255),b
 19807  0018BA  0100               	movlb	0	; () banked
 19808  0018BC  35DC               	rlcf	(_Nec_code+2)& (0+255),w,b
 19809  0018BE  0100               	movlb	0	; () banked
 19810  0018C0  6FDC               	movwf	(_Nec_code+2)& (0+255),b
 19811  0018C2  0100               	movlb	0	; () banked
 19812  0018C4  35DD               	rlcf	(_Nec_code+3)& (0+255),w,b
 19813  0018C6  0100               	movlb	0	; () banked
 19814  0018C8  6FDD               	movwf	(_Nec_code+3)& (0+255),b
 19815                           
 19816                           ;Interrupt2.c: 126: if (Time_Elapsed > 1000) {
 19817  0018CA  0EE9               	movlw	233
 19818  0018CC  5C4E               	subwf	_Time_Elapsed,w,c
 19819  0018CE  0E03               	movlw	3
 19820  0018D0  584F               	subwfb	_Time_Elapsed+1,w,c
 19821  0018D2  A0D8               	btfss	status,0,c
 19822  0018D4  D008               	goto	i2l7418
 19823                           
 19824                           ; BSR set to: 0
 19825                           ;Interrupt2.c: 127: Nec_code++;
 19826  0018D6  0E01               	movlw	1
 19827  0018D8  0100               	movlb	0	; () banked
 19828  0018DA  27DA               	addwf	_Nec_code& (0+255),f,b
 19829  0018DC  0E00               	movlw	0
 19830  0018DE  23DB               	addwfc	(_Nec_code+1)& (0+255),f,b
 19831  0018E0  23DC               	addwfc	(_Nec_code+2)& (0+255),f,b
 19832  0018E2  23DD               	addwfc	(_Nec_code+3)& (0+255),f,b
 19833  0018E4  D000               	goto	i2l7418
 19834  0018E6                     i2l7418:
 19835                           
 19836                           ; BSR set to: 0
 19837                           ;Interrupt2.c: 128: }
 19838                           ;Interrupt2.c: 129: bit_count++;
 19839  0018E6  0100               	movlb	0	; () banked
 19840  0018E8  2BFA               	incf	_bit_count& (0+255),f,b
 19841                           
 19842                           ; BSR set to: 0
 19843                           ;Interrupt2.c: 130: if (bit_count > 31) {
 19844  0018EA  0E1F               	movlw	31
 19845  0018EC  0100               	movlb	0	; () banked
 19846  0018EE  65FA               	cpfsgt	_bit_count& (0+255),b
 19847  0018F0  D7B5               	goto	L8
 19848                           
 19849                           ; BSR set to: 0
 19850                           ;Interrupt2.c: 131: Nec_ok = 1;
 19851  0018F2  0E00               	movlw	0
 19852  0018F4  0100               	movlb	0	; () banked
 19853  0018F6  6FE4               	movwf	(_Nec_ok+1)& (0+255),b
 19854  0018F8  0E01               	movlw	1
 19855  0018FA  6FE3               	movwf	_Nec_ok& (0+255),b
 19856                           
 19857                           ; BSR set to: 0
 19858                           ;Interrupt2.c: 132: INTCONbits.INT0IE = 0;
 19859  0018FC  98F2               	bcf	intcon,4,c	;volatile
 19860                           
 19861                           ; BSR set to: 0
 19862                           ;Interrupt2.c: 133: Nec_button = Nec_code >> 8;
 19863  0018FE  C0DB  F0F8         	movff	_Nec_code+1,_Nec_button
 19864                           
 19865                           ;Interrupt2.c: 134: Nec_State = 0;
 19866  001902  0E00               	movlw	0
 19867  001904  D001               	goto	L6
 19868                           
 19869                           ; BSR set to: 0
 19870                           
 19871                           ;Interrupt2.c: 135: } else Nec_State = 3;
 19872  001906  D7AA               	goto	L8
 19873  001908                     L6:
 19874  001908  0100               	movlb	0	; () banked
 19875  00190A  6FF7               	movwf	_Nec_State& (0+255),b
 19876                           
 19877                           ; BSR set to: 0
 19878                           ;Interrupt2.c: 137: } else Reset_Nec_State();
 19879  00190C  D003               	goto	i2l7432
 19880  00190E                     i2l7430:
 19881  00190E  EC43  F01F         	call	_Reset_Nec_State	;wreg free
 19882  001912  D000               	goto	i2l7432
 19883  001914                     i2l7432:
 19884                           
 19885                           ;Interrupt2.c: 138: INTCON2bits.INTEDG0 = 1;
 19886  001914  8CF1               	bsf	intcon2,6,c	;volatile
 19887                           
 19888                           ;Interrupt2.c: 139: }
 19889                           ;Interrupt2.c: 140: }
 19890  001916  D012               	goto	i2l781
 19891  001918                     i2l7434:
 19892  001918  0100               	movlb	0	; () banked
 19893  00191A  51F7               	movf	_Nec_State& (0+255),w,b
 19894                           
 19895                           ; Switch size 1, requested type "space"
 19896                           ; Number of cases is 5, Range of values is 0 to 4
 19897                           ; switch strategies available:
 19898                           ; Name         Instructions Cycles
 19899                           ; simple_byte           16     9 (average)
 19900                           ;	Chosen strategy is simple_byte
 19901  00191C  0A00               	xorlw	0	; case 0
 19902  00191E  B4D8               	btfsc	status,2,c
 19903  001920  D763               	goto	i2l7364
 19904  001922  0A01               	xorlw	1	; case 1
 19905  001924  B4D8               	btfsc	status,2,c
 19906  001926  D779               	goto	i2l7374
 19907  001928  0A03               	xorlw	3	; case 2
 19908  00192A  B4D8               	btfsc	status,2,c
 19909  00192C  D78B               	goto	i2l7386
 19910  00192E  0A01               	xorlw	1	; case 3
 19911  001930  B4D8               	btfsc	status,2,c
 19912  001932  D79B               	goto	i2l7398
 19913  001934  0A07               	xorlw	7	; case 4
 19914  001936  B4D8               	btfsc	status,2,c
 19915  001938  D7AB               	goto	i2l7410
 19916  00193A  D000               	goto	i2l781
 19917  00193C                     i2l781:
 19918  00193C  0012               	return		;funcret
 19919  00193E                     __end_of_INT0_isr:
 19920                           	opt stack 0
 19921                           pclatu	equ	0xFFB
 19922                           pclath	equ	0xFFA
 19923                           tblptru	equ	0xFF8
 19924                           tblptrh	equ	0xFF7
 19925                           tblptrl	equ	0xFF6
 19926                           tablat	equ	0xFF5
 19927                           prodh	equ	0xFF4
 19928                           prodl	equ	0xFF3
 19929                           intcon	equ	0xFF2
 19930                           intcon2	equ	0xFF1
 19931                           intcon3	equ	0xFF0
 19932                           postinc0	equ	0xFEE
 19933                           fsr0h	equ	0xFEA
 19934                           fsr0l	equ	0xFE9
 19935                           wreg	equ	0xFE8
 19936                           postdec1	equ	0xFE5
 19937                           fsr1h	equ	0xFE2
 19938                           fsr1l	equ	0xFE1
 19939                           indf2	equ	0xFDF
 19940                           postinc2	equ	0xFDE
 19941                           postdec2	equ	0xFDD
 19942                           fsr2h	equ	0xFDA
 19943                           fsr2l	equ	0xFD9
 19944                           status	equ	0xFD8
 19945                           
 19946 ;; *************** function _Reset_Nec_State *****************
 19947 ;; Defined at:
 19948 ;;		line 70 in file "Interrupt2.c"
 19949 ;; Parameters:    Size  Location     Type
 19950 ;;		None
 19951 ;; Auto vars:     Size  Location     Type
 19952 ;;		None
 19953 ;; Return value:  Size  Location     Type
 19954 ;;		None               void
 19955 ;; Registers used:
 19956 ;;		wreg, status,2
 19957 ;; Tracked objects:
 19958 ;;		On entry : 0/0
 19959 ;;		On exit  : 0/0
 19960 ;;		Unchanged: 0/0
 19961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19966 ;;Total ram usage:        0 bytes
 19967 ;; Hardware stack levels used:    1
 19968 ;; This function calls:
 19969 ;;		Nothing
 19970 ;; This function is called by:
 19971 ;;		_INT0_isr
 19972 ;; This function uses a non-reentrant model
 19973 ;;
 19974                           
 19975                           	psect	text121
 19976  003E86                     __ptext121:
 19977                           	opt stack 0
 19978  003E86                     _Reset_Nec_State:
 19979                           	opt stack 18
 19980                           
 19981                           ;Interrupt2.c: 71: Nec_State = 0;
 19982                           
 19983                           ;incstack = 0
 19984  003E86  0E00               	movlw	0
 19985  003E88  0100               	movlb	0	; () banked
 19986  003E8A  6FF7               	movwf	_Nec_State& (0+255),b
 19987                           
 19988                           ; BSR set to: 0
 19989                           ;Interrupt2.c: 72: T1CONbits.TMR1ON = 0;
 19990  003E8C  90CD               	bcf	4045,0,c	;volatile
 19991                           
 19992                           ; BSR set to: 0
 19993  003E8E  0012               	return		;funcret
 19994  003E90                     __end_of_Reset_Nec_State:
 19995                           	opt stack 0
 19996                           pclatu	equ	0xFFB
 19997                           pclath	equ	0xFFA
 19998                           tblptru	equ	0xFF8
 19999                           tblptrh	equ	0xFF7
 20000                           tblptrl	equ	0xFF6
 20001                           tablat	equ	0xFF5
 20002                           prodh	equ	0xFF4
 20003                           prodl	equ	0xFF3
 20004                           intcon	equ	0xFF2
 20005                           intcon2	equ	0xFF1
 20006                           intcon3	equ	0xFF0
 20007                           postinc0	equ	0xFEE
 20008                           fsr0h	equ	0xFEA
 20009                           fsr0l	equ	0xFE9
 20010                           wreg	equ	0xFE8
 20011                           postdec1	equ	0xFE5
 20012                           fsr1h	equ	0xFE2
 20013                           fsr1l	equ	0xFE1
 20014                           indf2	equ	0xFDF
 20015                           postinc2	equ	0xFDE
 20016                           postdec2	equ	0xFDD
 20017                           fsr2h	equ	0xFDA
 20018                           fsr2l	equ	0xFD9
 20019                           status	equ	0xFD8
 20020                           pclatu	equ	0xFFB
 20021                           pclath	equ	0xFFA
 20022                           tblptru	equ	0xFF8
 20023                           tblptrh	equ	0xFF7
 20024                           tblptrl	equ	0xFF6
 20025                           tablat	equ	0xFF5
 20026                           prodh	equ	0xFF4
 20027                           prodl	equ	0xFF3
 20028                           intcon	equ	0xFF2
 20029                           intcon2	equ	0xFF1
 20030                           intcon3	equ	0xFF0
 20031                           postinc0	equ	0xFEE
 20032                           fsr0h	equ	0xFEA
 20033                           fsr0l	equ	0xFE9
 20034                           wreg	equ	0xFE8
 20035                           postdec1	equ	0xFE5
 20036                           fsr1h	equ	0xFE2
 20037                           fsr1l	equ	0xFE1
 20038                           indf2	equ	0xFDF
 20039                           postinc2	equ	0xFDE
 20040                           postdec2	equ	0xFDD
 20041                           fsr2h	equ	0xFDA
 20042                           fsr2l	equ	0xFD9
 20043                           status	equ	0xFD8
 20044                           
 20045                           	psect	rparam
 20046  0000                     pclatu	equ	0xFFB
 20047                           pclath	equ	0xFFA
 20048                           tblptru	equ	0xFF8
 20049                           tblptrh	equ	0xFF7
 20050                           tblptrl	equ	0xFF6
 20051                           tablat	equ	0xFF5
 20052                           prodh	equ	0xFF4
 20053                           prodl	equ	0xFF3
 20054                           intcon	equ	0xFF2
 20055                           intcon2	equ	0xFF1
 20056                           intcon3	equ	0xFF0
 20057                           postinc0	equ	0xFEE
 20058                           fsr0h	equ	0xFEA
 20059                           fsr0l	equ	0xFE9
 20060                           wreg	equ	0xFE8
 20061                           postdec1	equ	0xFE5
 20062                           fsr1h	equ	0xFE2
 20063                           fsr1l	equ	0xFE1
 20064                           indf2	equ	0xFDF
 20065                           postinc2	equ	0xFDE
 20066                           postdec2	equ	0xFDD
 20067                           fsr2h	equ	0xFDA
 20068                           fsr2l	equ	0xFD9
 20069                           status	equ	0xFD8


Data Sizes:
    Strings     614
    Constant    493
    Data        159
    BSS         74
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     71     110
    BANK0           128      2     128
    BANK1           256     15      83
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_alarm_time(BANK1[9]), setup_fan_set_text(BANK0[5]), setup_date(BANK0[9]), 
		 -> setup_time(BANK0[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK0[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Fan_SW_Txt(BANK0[4]), Fan_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK0[9]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_alarm_time(BANK1[9]), setup_fan_set_text(BANK0[5]), setup_date(BANK0[9]), 
		 -> setup_time(BANK0[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK0[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Fan_SW_Txt(BANK0[4]), Fan_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK0[9]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_40(CODE[5]), STR_39(CODE[11]), STR_38(CODE[19]), STR_37(CODE[15]), 
		 -> STR_36(CODE[12]), STR_35(CODE[21]), STR_34(CODE[5]), STR_33(CODE[5]), 
		 -> STR_32(CODE[12]), STR_31(CODE[20]), STR_27(CODE[4]), STR_26(CODE[4]), 
		 -> STR_25(CODE[4]), STR_24(CODE[4]), STR_23(CODE[4]), STR_22(CODE[5]), 
		 -> STR_21(CODE[3]), STR_20(CODE[3]), STR_19(CODE[7]), STR_18(CODE[13]), 
		 -> STR_17(CODE[9]), STR_16(CODE[11]), STR_15(CODE[5]), STR_14(CODE[5]), 
		 -> STR_13(CODE[2]), STR_12(CODE[3]), STR_11(CODE[13]), STR_10(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 32
		 -> STR_55(CODE[2]), STR_54(CODE[2]), STR_53(CODE[2]), STR_52(CODE[2]), 
		 -> STR_51(CODE[18]), STR_50(CODE[18]), STR_49(CODE[19]), STR_48(CODE[18]), 
		 -> STR_47(CODE[21]), STR_46(CODE[14]), STR_45(CODE[20]), STR_44(CODE[22]), 
		 -> STR_43(CODE[21]), STR_42(CODE[30]), STR_41(CODE[11]), STR_30(CODE[22]), 
		 -> STR_29(CODE[18]), STR_28(CODE[19]), STR_9(CODE[5]), STR_8(CODE[7]), 
		 -> STR_7(CODE[7]), STR_6(CODE[5]), STR_5(CODE[19]), STR_4(CODE[21]), 
		 -> STR_3(CODE[17]), STR_2(CODE[11]), STR_1(CODE[32]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    txt	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_alarm_time(BANK1[9]), setup_fan_set_text(BANK0[5]), setup_date(BANK0[9]), 
		 -> setup_time(BANK0[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK0[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Fan_SW_Txt(BANK0[4]), Fan_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK0[9]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 


Critical Paths under _main in COMRAM

    _test_alarm->_printf
    _DS3231_Turn_On_Alarm->_DS3231_Init
    _DS3231_Turn_Off_Alarm->_DS3231_Init
    _DS3231_Init->_I2C_Write_Address_Read_One_Byte
    _I2C_Write_Address_Write_One_Byte->_I2C_Write
    _I2C_Write_Address_Read_One_Byte->_I2C_Read
    _read_volt->___ftdiv
    _get_RPM->___ftmul
    _Update_Screen->___awmod
    _Turn_On_Fan->_do_update_pwm
    _Initialize_Setup_Fan_Screen->_drawtext
    _Update_Setup_Fan_Screen->___awmod
    _Monitor_Fan->_get_duty_cycle
    _get_duty_cycle->___fttol
    ___awtoft->___ftpack
    _Initialize_Setup_Time_Screen->_drawtext
    _Go_Prev_Field->_Update_Setup_Screen_Cursor_Backward
    _Go_Next_Field->_Update_Setup_Screen_Cursor_Forward
    _Update_Setup_Time_Screen->___awmod
    _check_for_button_input->_printf
    _Initialize_Setup_Alarm_Time_Screen->_drawtext
    _Go_Prev_Alarm_Field->_Update_Setup_Screen_Cursor_Backward
    _Update_Setup_Screen_Cursor_Backward->_fillRect
    _Go_Next_Alarm_Field->_Update_Setup_Screen_Cursor_Forward
    _Update_Setup_Screen_Cursor_Forward->_fillRect
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawCircle->_drawPixel
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _dec_2_bcd->___awmod
    _DS3231_Read_Time->_I2C_Read
    _DS3231_Read_Alarm_Time->_I2C_Read
    _Do_Beep_Good->_do_update_pwm
    _Do_Beep_Bad->_do_update_pwm
    _do_update_pwm->___fttol
    ___lbtoft->___ftpack
    ___fttol->___ftdiv
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _Update_Setup_Alarm_Time_Screen->___awmod
    _printf->___lwmod
    ___lwmod->___lwdiv
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    ___awmod->___fttol
    ___awdiv->___wmul
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _Update_Screen->___awmod
    _Update_Setup_Fan_Screen->___awmod
    _Monitor_Fan->_get_duty_cycle
    _Update_Setup_Time_Screen->___awmod
    _dec_2_bcd->___awmod
    _Update_Setup_Alarm_Time_Screen->___awmod

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    _Update_Screen->_drawtext
    _Turn_On_Fan->_do_update_pwm
    _Initialize_Setup_Fan_Screen->_drawtext
    _Increase_Fan_Temp->_Update_Setup_Fan_Screen
    _Decrease_Fan_Temp->_Update_Setup_Fan_Screen
    _Update_Setup_Fan_Screen->_drawtext
    _Monitor_Fan->_get_duty_cycle
    _get_duty_cycle->___fttol
    _Initialize_Setup_Time_Screen->_drawtext
    _Do_Save_New_Time->_DS3231_Write_Time
    _DS3231_Write_Time->_dec_2_bcd
    _Update_Setup_Time_Screen->_drawtext
    _Initialize_Setup_Alarm_Time_Screen->_drawtext
    _Do_Save_New_Alarm_Time->_DS3231_Write_Alarm_Time
    _Initialize_Screen->_drawtext
    _DS3231_Write_Alarm_Time->_dec_2_bcd
    _Do_Beep_Good->_do_update_pwm
    _Do_Beep_Bad->_do_update_pwm
    _do_update_pwm->___fttol
    _Update_Setup_Alarm_Time_Screen->_drawtext
    ___awmod->___fttol

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0 1179159
                   _DS1621_Read_Temp
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
              _DS3231_Turn_Off_Alarm
                        _Do_Beep_Bad
                       _Do_Beep_Good
                            _Do_Init
                _Do_Setup_Alarm_Time
                      _Do_Setup_Time
                  _Initialize_Screen
                        _Monitor_Fan
                     _Setup_Temp_Fan
                         _Toggle_Fan
                 _Toggle_Fan_Monitor
                      _Update_Screen
                            ___awdiv
                            ___fttol
                             ___wmul
             _check_for_button_input
                            _get_RPM
                             _printf
                          _read_volt
                         _test_alarm
 ---------------------------------------------------------------------------------
 (1) _test_alarm                                           4     4      0   14537
                                             56 COMRAM     4     4      0
                    _Activate_Buzzer
              _DS3231_Turn_Off_Alarm
               _DS3231_Turn_On_Alarm
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                             ___ftge
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     348
                                             16 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _DS3231_Turn_On_Alarm                                 5     5      0    4432
                                             26 COMRAM     5     5      0
                        _DS3231_Init
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (2) _DS3231_Turn_Off_Alarm                                5     5      0    4432
                                             26 COMRAM     5     5      0
                        _DS3231_Init
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (3) _DS3231_Init                                          4     4      0    2380
                                             22 COMRAM     4     4      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Address_Write_One_Byte                     3     1      2     876
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Address_Read_One_Byte                      3     2      1     783
                                             19 COMRAM     3     2      1
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_volt                                            8     5      3    6402
                                             58 COMRAM     8     5      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (2) _get_full_ADC                                         6     4      2      23
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              6     3      3    5735
                                             43 COMRAM     6     3      3
                       _Wait_One_Sec
                            ___ftmul
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        4     4      0   50828
                                              7 BANK1      4     4      0
                            ___awdiv
                            ___awmod
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _Toggle_Fan_Monitor                                   0     0      0    9709
                         _Toggle_Fan
 ---------------------------------------------------------------------------------
 (2) _Toggle_Fan                                           0     0      0    9709
                       _Turn_Off_Fan
                        _Turn_On_Fan
 ---------------------------------------------------------------------------------
 (3) _Turn_On_Fan                                          0     0      0    9709
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _Setup_Temp_Fan                                       0     0      0  286338
                  _Decrease_Fan_Temp
                        _Do_Beep_Bad
                       _Do_Beep_Good
               _Do_Save_New_Fan_Temp
                _Exit_Setup_Fan_Temp
                  _Increase_Fan_Temp
        _Initialize_Setup_Fan_Screen
            _Update_Setup_Fan_Screen
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Fan_Screen                          0     0      0   38227
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Fan_Temp                                    0     0      0   39701
            _Update_Setup_Fan_Screen
 ---------------------------------------------------------------------------------
 (2) _Exit_Setup_Fan_Temp                                  0     0      0   52077
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Fan_Temp                                 0     0      0   52077
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Decrease_Fan_Temp                                    0     0      0   39701
            _Update_Setup_Fan_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Fan_Screen                              3     3      0   39701
                                              7 BANK1      3     3      0
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Monitor_Fan                                          0     0      0   27643
                      _do_update_pwm
                     _get_duty_cycle
                             _printf
 ---------------------------------------------------------------------------------
 (2) _get_duty_cycle                                      15    11      4   12723
                                             67 COMRAM     4     0      4
                                              0 BANK0      2     2      0
                                              6 BANK1      9     9      0
                           ___awtoft
                            ___ftmul
                            ___fttol
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2331
                                             24 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Time                                        0     0      0  328775
                   _DS3231_Read_Time
                      _Decrease_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
                   _Do_Save_New_Time
                    _Exit_Time_Setup
                      _Go_Next_Field
                      _Go_Prev_Field
                      _Increase_Time
       _Initialize_Setup_Time_Screen
           _Update_Setup_Time_Screen
                          _bcd_2_dec
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Time_Screen                         0     0      0   49383
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Time                                        0     0      0   39599
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Field                                        0     0      0   11627
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Field                                        0     0      0   11658
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (2) _Exit_Time_Setup                                      0     0      0   52077
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Time                                     0     0      0   59882
                   _DS3231_Read_Time
                  _DS3231_Write_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Time                                    2     2      0    7805
                                             13 BANK1      2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (2) _Decrease_Time                                        0     0      0   39599
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Time_Screen                             0     0      0   39599
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Alarm_Time                                  0     0      0  345268
             _DS3231_Read_Alarm_Time
                _Decrease_Alarm_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
             _Do_Save_New_Alarm_Time
              _Exit_Setup_Alarm_Time
                _Go_Next_Alarm_Field
                _Go_Prev_Alarm_Field
                _Increase_Alarm_Time
 _Initialize_Setup_Alarm_Time_Screen
     _Update_Setup_Alarm_Time_Screen
                          _bcd_2_dec
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (1) _check_for_button_input                               3     3      0    5344
                                             56 COMRAM     3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _bcd_2_dec                                            5     5      0      67
                                             16 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Alarm_Time_Screen                   0     0      0   49383
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Alarm_Time                                  0     0      0   44810
     _Update_Setup_Alarm_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Alarm_Field                                  0     0      0   11627
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Backward                  3     3      0   11627
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Alarm_Field                                  0     0      0   11658
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Forward                   3     3      0   11658
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Exit_Setup_Alarm_Time                                0     0      0   52077
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Alarm_Time                               0     0      0   60742
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
            _DS3231_Write_Alarm_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (3) _Initialize_Screen                                    0     0      0   51647
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    3749
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _fillScreen                                           2     0      2    2387
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (4) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8    6744
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (4) _TFT_GreenTab_Initialize                              0     0      0    4624
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _Rcmd3                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _Rcmd1                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0    2052
                           _delay_ms
 ---------------------------------------------------------------------------------
 (6) _delay_ms                                             6     4      2    2052
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Alarm_Time                              2     2      0    8235
                                             13 BANK1      2     2      0
                   _DS3231_Read_Time
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (4) _dec_2_bcd                                            7     5      2    7604
                                              6 BANK1      7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Time                                     2     2      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Alarm_Time                               2     2      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Good                                         0     0      0    9755
               _Activate_Buzzer_2KHz
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_2KHz                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Bad                                          0     0      0    9755
              _Activate_Buzzer_500Hz
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (4) _do_update_pwm                                        9     9      0    9709
                                             67 COMRAM     3     3      0
                                              6 BANK1      6     6      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2099
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             15    11      4     891
                                             58 COMRAM     9     5      4
                                              0 BANK1      6     6      0
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            _get_RPM (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3556
                                             28 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2968
                                             43 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2068
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _Wait_One_Sec                                         2     2      0      46
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_500Hz                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Decrease_Alarm_Time                                  0     0      0   44810
     _Update_Setup_Alarm_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Alarm_Time_Screen                       0     0      0   44810
                            ___awdiv
                            ___awmod
                           _drawtext
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              37    23     14    5211
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     362
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     501
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   32091
                                             56 COMRAM    10     2      8
                                              0 BANK1      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   18184
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5   11156
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1012
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    3683
                                             67 COMRAM     4     0      4
                                              0 BANK0      2     2      0
                            ___awdiv (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4    3825
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1019
                        _DS1621_Init
                           _I2C_Init
                           _Init_ADC
                       _Turn_Off_Fan
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     273
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Turn_Off_Fan                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (5) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (5) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _chkisr                                             14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                           _INT1_isr
                           _INT2_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (12) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT2_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT1_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                    _Reset_Nec_State
 ---------------------------------------------------------------------------------
 (13) _Reset_Nec_State                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Alarm_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Turn_Off_Alarm
     _DS3231_Init
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Write_Address_Read_One_Byte
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _I2C_Write_Address_Write_One_Byte
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
   _Do_Beep_Bad
     _Activate_Buzzer_500Hz
     _Deactivate_Buzzer
     _Wait_One_Sec
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         _get_RPM (ARG)
           _Wait_One_Sec
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft
             ___ftpack
       ___lbtoft
         ___ftpack
   _Do_Beep_Good
     _Activate_Buzzer_2KHz
     _Deactivate_Buzzer
     _Wait_One_Sec
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         _get_RPM (ARG)
           _Wait_One_Sec
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft
             ___ftpack
       ___lbtoft
         ___ftpack
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Init_ADC
     _Turn_Off_Fan
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Do_Setup_Alarm_Time
     _DS3231_Read_Alarm_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Alarm_Time
       _Update_Setup_Alarm_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             _get_RPM (ARG)
               _Wait_One_Sec
               ___ftmul
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___lbtoft
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           _get_RPM (ARG)
             _Wait_One_Sec
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___lbtoft
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           _get_RPM (ARG)
             _Wait_One_Sec
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___lbtoft
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Save_New_Alarm_Time
       _DS3231_Read_Alarm_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Alarm_Time
         _DS3231_Read_Time
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               _get_RPM (ARG)
                 _Wait_One_Sec
                 ___ftmul
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                 ___lbtoft
                   ___ftpack
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Setup_Alarm_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Alarm_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Alarm_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Alarm_Time
       _Update_Setup_Alarm_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             _get_RPM (ARG)
               _Wait_One_Sec
               ___ftmul
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___lbtoft
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
     _Initialize_Setup_Alarm_Time_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Alarm_Time_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           _get_RPM (ARG)
             _Wait_One_Sec
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___lbtoft
               ___ftpack
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Do_Setup_Time
     _DS3231_Read_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             _get_RPM (ARG)
               _Wait_One_Sec
               ___ftmul
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___lbtoft
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           _get_RPM (ARG)
             _Wait_One_Sec
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___lbtoft
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           _get_RPM (ARG)
             _Wait_One_Sec
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___lbtoft
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Save_New_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Time
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               _get_RPM (ARG)
                 _Wait_One_Sec
                 ___ftmul
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                 ___lbtoft
                   ___ftpack
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Time_Setup
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             _get_RPM (ARG)
               _Wait_One_Sec
               ___ftmul
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___lbtoft
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Time_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Time_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           _get_RPM (ARG)
             _Wait_One_Sec
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___lbtoft
               ___ftpack
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Monitor_Fan
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         _get_RPM (ARG)
           _Wait_One_Sec
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft
             ___ftpack
       ___lbtoft
         ___ftpack
     _get_duty_cycle
       ___awtoft
         ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         _get_RPM (ARG)
           _Wait_One_Sec
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft
             ___ftpack
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
   _Setup_Temp_Fan
     _Decrease_Fan_Temp
       _Update_Setup_Fan_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             _get_RPM (ARG)
               _Wait_One_Sec
               ___ftmul
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___lbtoft
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           _get_RPM (ARG)
             _Wait_One_Sec
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___lbtoft
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           _get_RPM (ARG)
             _Wait_One_Sec
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___lbtoft
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Save_New_Fan_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Setup_Fan_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Increase_Fan_Temp
       _Update_Setup_Fan_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             _get_RPM (ARG)
               _Wait_One_Sec
               ___ftmul
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___lbtoft
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Fan_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Fan_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           _get_RPM (ARG)
             _Wait_One_Sec
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___lbtoft
               ___ftpack
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _check_for_button_input
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Toggle_Fan
     _Turn_Off_Fan
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           _get_RPM (ARG)
             _Wait_One_Sec
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___lbtoft
               ___ftpack
         ___lbtoft
           ___ftpack
   _Toggle_Fan_Monitor
     _Toggle_Fan
       _Turn_Off_Fan
       _Turn_On_Fan
         _do_update_pwm
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             _get_RPM (ARG)
               _Wait_One_Sec
               ___ftmul
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___lbtoft
                 ___ftpack
           ___lbtoft
             ___ftpack
   _Update_Screen
     ___awdiv
       ___wmul (ARG)
     ___awmod
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         _get_RPM (ARG)
           _Wait_One_Sec
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft
             ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       _get_RPM (ARG)
         _Wait_One_Sec
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___wmul (ARG)
   ___fttol
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___ftmul (ARG)
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     _get_RPM (ARG)
       _Wait_One_Sec
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft
         ___ftpack
   ___wmul
   _check_for_button_input
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
   _get_RPM
     _Wait_One_Sec
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___lbtoft
       ___ftpack
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
   _read_volt
     ___awtoft
       ___ftpack
       ___wmul (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___wmul
     _get_full_ADC
   _test_alarm
     _Activate_Buzzer
     _DS3231_Turn_Off_Alarm
       _DS3231_Init
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write_Address_Read_One_Byte
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Write_Address_Write_One_Byte
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _DS3231_Turn_On_Alarm
       _DS3231_Init
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write_Address_Read_One_Byte
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Write_Address_Write_One_Byte
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _Deactivate_Buzzer
     _Wait_One_Sec
     ___ftge
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch

 _chkisr (ROOT)
   _INT0_isr
     _Reset_Nec_State
   _INT1_isr
   _INT2_isr
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      F      53       7       32.4%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      2      80       5      100.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     47      6E       1       86.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     141      34        0.0%
DATA                 0      0     141       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Nov 30 21:50:52 2023

                                 drawCircle@f 002A                                   drawCircle@r 0020  
                                 drawCircle@x 002C                                   drawCircle@y 002E  
                          __size_of_I2C_Start 0012                                   _SSPSTATbits 000FC7  
                          __size_of_I2C_Write 003E                                  drawCircle@x0 001C  
                                drawCircle@y0 001E                                            l35 363E  
                                          l45 3D16                                            l95 302E  
                                          l89 3A0E                  __size_of_Do_Setup_Alarm_Time 00DE  
                                ___awdiv@sign 001C                          __size_of_Turn_On_Fan 0010  
                               read_volt@volt 003E                           ___wmul@multiplicand 0013  
                             ??_Update_Screen 014B                                           l111 1C02  
                                         l120 1B58                                           l113 1ADC  
                                         l151 2666                                           l303 111C  
                                         l152 2688                                           l148 268A  
                                         l308 3CA2                                           l341 38D4  
                                         l149 25F6                                           l254 34A6  
                                         l159 154E                                           l338 3804  
                                         l259 3CB6                                           l292 35EE  
                                         l453 397A                                           l294 35F2  
                                         l375 39AC                                           l707 2C36  
                                         l652 3A38                                           l655 3342  
                                         l690 32DE                                           l669 3B5C  
                                         l693 3A90                                           l696 3AB0  
                                         _FAN 0054                                           l965 12D6  
                                         l976 148A                                           _LED 0134  
                                         _PR2 000FCB                                read_volt@nStep 0041  
                        DS3231_Init@Address_7 0017                          DS3231_Init@Address_E 0018  
                                         _day 005C                             _Deactivate_Buzzer 3E90  
                        __size_of_I2C_ReStart 0016                     __size_of_Do_Save_New_Time 0014  
                                         _dow 00FC                                           _nbr 00EB  
                                         _rpm 0050                         __size_of_Turn_Off_Fan 000A  
                                         _rps 00EF                                           _txt 0052  
                                ___awmod@sign 00FF                                           wreg 000FE8  
                               _Increase_Time 30B4                  __size_of_Go_Next_Alarm_Field 0018  
                          ?_Deactivate_Buzzer 0001               Update_Setup_Fan_Screen@dc_char1 014B  
             Update_Setup_Fan_Screen@dc_char2 014C               Update_Setup_Fan_Screen@dc_char3 014D  
                                  _Fan_SW_Txt 00CC                   __end_of_Decrease_Alarm_Time 3694  
      Update_Setup_Screen_Cursor_Forward@xinc 0030        Update_Setup_Screen_Cursor_Forward@yinc 002F  
                             ??_fillRectangle 001D                                  __CFG_LVP$OFF 000000  
                     _TFT_GreenTab_Initialize 3A3A                                  ___ftdiv@cntr 0035  
                                ___ftdiv@sign 003A                                  __CFG_WDT$OFF 000000  
                              drawFastVLine@h 0019                                          l2005 3AD6  
                                        l2110 38C4                                          l1405 3E22  
                                        l2071 3396                                          l1512 0D14  
                                        l2081 3722                                          l1417 0D2E  
                                        l1443 1AAC                                          l1540 31EC  
                              drawFastVLine@x 0022                                          l1541 31EE  
                              drawFastVLine@y 0018                                          l1542 31F8  
                                        l1543 31FA                                          l1536 31D2  
                                        l1545 3214                                          l1475 0ABC  
                                        l1548 3A8A                                          l1741 2D62  
                                        l1754 2F16                                          l1931 23BC  
                                        l1766 393E                                          l1943 2132  
                                        l1856 2822                                          l1928 23F0  
                                        l1937 2CCC                                          l6202 3B46  
                                        l1867 27FA                                          l1964 1E20  
                                        l6206 3B54                                          l1979 3B1C  
                                        l7062 2C6A                I2C_Write_Cmd_Write_Data@Device 0015  
                                        l6520 31B8                                          l7072 2CC8  
                                        l9010 28BC                                          l7066 2C9C  
                                        l6540 31E4                                          l6532 31D6  
                                        l6524 31C2                                          l9020 09D6  
                                        l9110 0BEC                                          l9102 0BCA  
                                        l9022 09E4                                          l8310 277E  
                                        l6528 31CA                                          l8240 3024  
                                        l8224 2FB8                                          l9112 0BF4  
                                        l9104 0BD4                                          l9040 0A86  
                                        l9032 0A22                                          l9016 09C6  
                                        l8320 27E2                                          l8312 278A  
                                        l9130 0C8C                                          l9122 0C2C  
                                        l9026 09EE                                          l8322 27EE  
                                        l8314 27AA                                          l8306 276E  
                                        l8228 2FF0                                          l9140 0CEC  
                                        l9116 0C0C                                          l9060 0B04  
                                        l9044 0A8E                                          l9028 0A04  
                                        l9204 39B8                                          l8238 3016  
                                        l9118 0C14                                          l9126 0C40  
                                        l9070 0B38                                          l9062 0B08  
                                        l9142 0CF8                                          l8334 2814  
                                        l8318 27C2                                          l9206 39C2  
                                        l9128 0C48                                          l9136 0CD2  
                                        l9080 0B4E                                          l9056 0AEA  
                                        l8328 2802                                          l8520 266A  
                                        l8504 262E                                          l8442 1AD8  
                                        l8434 1ABE                                          l9138 0CE4  
                                        l9074 0B3E                                          l9066 0B14  
                                        l9090 0B78                                          l8530 2684  
                                        l8276 39F0                                          l8284 3736  
                                        l8452 1B18                                          l8444 1AE0  
                                        l9084 0B72                                          l9076 0B42  
                                        l9092 0B8A                                          l8524 2674  
                                        l8516 265C                                          l8550 37E6  
                                        l8542 37D0                                          l8454 1B4C  
                                        l8438 1ACA                                          l8710 20DE  
                                        l8702 20B6                                          l9430 11BC  
                                        l8560 37FA                                          l8800 2F0C  
                                        l8288 3752                                          l8472 1BCE  
                                        l8464 1B7A                                          l8480 1BFE  
                                        l8456 1B50                                          l8448 1AE8  
                                        l8720 210C                                          l8712 20E4  
                                        l9440 126E                                          l9424 112A  
                                        l8562 3800                                          l8538 37C8  
                                        l8474 1BF6                                          l8466 1BA2  
                                        l8626 3B14                                          l9098 0BA6  
                                        l8642 2356                                          l8706 20C8  
                                        l8810 1D36                                          l9434 11F8  
                                        l9450 12E4                                          l9506 391A  
                                        l9522 0F46                                          l9514 3CB0  
                                        l8548 37DE                                          l8556 37EE  
                                        l8732 2CE4                                          l8636 232E  
                                        l8716 20F6                                          l9428 1186  
                                        l9460 13AC                                          l9452 131A  
                                        l9700 3BFA                                          l9540 0FFA  
                                        l8574 38DE                                          l8486 3892  
                                        l8662 2396                                          l8638 2348  
                                        l9438 1234                                          l9446 12AE  
                                        l9462 13E6                                          l9550 106C  
                                        l8576 38E4                                          l8568 38CC  
                                        l8744 2D0C                                          l8760 2D48  
                                        l8488 3898                                          l8672 23CA  
                                        l8840 1DE2                                          l8832 1DB4  
                                        l9456 1356                                          l9472 1462  
                                        l9640 2BDC                                          l9720 2E06  
                                        l9560 10CE                                          l9536 0FCE  
                                        l9528 0F8E                                          l8586 38F6  
                                        l8746 2D16                                          l8738 2CF6  
                                        l8930 1F12                                          l8922 1EC0  
                                        l8906 1E4E                                          l8682 205A  
                                        l8834 1DBC                                          l8842 1DF0  
                                        l8498 25C0                                          l9466 1426  
                                        l9650 2C14                                          l9722 2E0A  
                                        l9546 1040                                          l8764 2D58  
                                        l8756 2D3C                                          l8748 2D1E  
                                        l8780 2EB0                                          l8932 1F1A  
                                        l8860 335A                                          l9900 3668  
                                        l8684 2074                                          l8828 1DA0  
                                        l9644 2BF0                                          l9740 2E3A  
                                        l9732 2E26                                          l9716 2DFA  
                                        l9556 10B2                                          l8918 1EA2  
                                        l8862 3364                                          l9910 368E  
                                        l8846 1E0E                                          l8838 1DD0  
                                        l9654 2C1C                                          l9750 2E56  
                                        l9734 2E2A                                          l9726 2E16  
                                        l9566 1114                                          l8792 2EEA  
                                        l8784 2EC0                                          l8776 2EA2  
                                        l8872 338A                                          l8864 336C  
                                        l8880 36EE                                          l9904 3674  
                                        l8688 2082                                          l8952 1534  
                                        l9920 3786                                          l9664 2C32  
                                        l9744 2E46                                          l9728 2E1A  
                                        l9760 30B6                                          l9832 3CEE  
                                        l9840 3CC6                                          l8786 2ECC  
                                        l8882 36F8                                          l9914 3778  
                                        l9746 2E4A                                          l9738 2E36  
                                        l9754 2E5A                                          l9690 3BDE  
                                        l8788 2ED4                                          l8796 2EF8  
                                        l8884 3700                                          l9908 3678  
                                        l8980 1624                                          l9756 2E82  
                                        l9692 3BE2                                          l9772 30D2  
                                        l9862 3C0E                                          l9926 3794  
                                        l9934 37A2                                          l9790 3100  
                                        l9766 30C4                                          STR_1 FD98  
                                        l8888 3716                                          l9872 3C2A  
                                        l9864 3C12                                          l9936 37B8  
                                        l9784 30F0                                          STR_2 FFA4  
                                        STR_3 FF23                                          l9778 30E0  
                                        l9794 3104                                          STR_4 FE41  
                                        STR_5 FEB7                                          l9892 3654  
                                        l9796 312C                                          STR_6 FFD7  
                                        STR_7 FFBF                                          l9894 3658  
                                        STR_8 FFC6                                          STR_9 FFDC  
                                        l9888 3648                                          l9898 3664  
                                        u6011 2320                                          u6031 233E  
                                        u6061 204C                                          u6081 206A  
                                        u6241 1D24                                          u5540 2FE6  
                                        u6260 1D54                                          u6265 1D4C  
                                        u6390 1E7C                  __end_of_Activate_Buzzer_2KHz 3D66  
                                        u5850 25EE                                          u5780 1BB0  
                                        u5860 2624                                          u6740 0FBC  
                                        u6750 0FE4                                          u6770 1056  
                                        _RBPU 007F8F                                          u7957 3E3E  
                                        _TRMT 007D61                      ??_Do_Save_New_Alarm_Time 0048  
                                _DS1621_tempC 004A                                  _DS1621_tempF 004C  
                         ??_Deactivate_Buzzer 0011                                          _date 008B  
                                        _main 0D16                                          _font FBAB  
     Update_Setup_Screen_Cursor_Backward@xinc 0030                                  ___ftpack@arg 0011  
     Update_Setup_Screen_Cursor_Backward@yinc 002F                                          _hour 005F  
                                ___ftpack@exp 0014                              __end_of_I2C_Init 3E72  
                            __end_of_I2C_Read 3806                                          _time 00A6  
                                        _year 006D                                          fsr0h 000FEA  
                                        fsr1h 000FE2                                ??_get_full_ADC 0013  
                                        fsr0l 000FE9                                          fsr2h 000FDA  
                                        fsr1l 000FE1                                          indf2 000FDF  
                                        fsr2l 000FD9                                          _wrap 0081  
                                        _volt 00DE                              __end_of_I2C_Stop 3D8A  
                      ?_DS3231_Turn_Off_Alarm 0001                                          pclat 000FFA  
                          __size_of_LCD_Reset 0012                                          prodh 000FF4  
                                        prodl 000FF3                                          start 0018  
                 __size_of_I2C_Write_Cmd_Only 001A                               __end_of_Do_Init 3452  
                                 _Do_Beep_Bad 3C62                                 test_alarm@num 003B  
                             ??_drawFastVLine 001C                                  ___ftmul@cntr 002A  
                             __end_of_i2cNack 3E7C                                  ___param_bank 000010  
                                ___ftmul@sign 002B                               _Reset_Nec_State 3E86  
     Update_Setup_Screen_Cursor_Forward@field 002E                                  ___fttol@exp1 0149  
                   ??_DS3231_Write_Alarm_Time 0048                         __size_of_Do_Beep_Good 0018  
                                _Turn_Off_Fan 3E5E                                  ___fttol@lval 0145  
                                 ?_TIMER1_isr 0001                              __end_of_INT0_isr 193E  
                            __end_of_INT1_isr 3E5E                              __end_of_INT2_isr 3E52  
                                       l10042 3C9C                                         l10310 2DE4  
                                       l10302 2DC8                                         l10134 0200  
                                       l10312 2DE8                                         l10152 02B2  
                                       l10136 0216                                         l10072 0058  
                                       l10242 22A6                                         l10306 2DD6  
                                       l10314 2DEE                                         l10154 02BA  
                                       l10146 0294                                         l10260 22E0  
                                       l10252 22C6                                         l10228 226E  
                                       l10148 02AA                                         l10350 2546  
                                       l10270 2300                                         l10094 012E  
                                       l10078 0098                                         l10360 2566  
                                       l10336 250E                                         l10264 22EE  
                                       l10256 22D4                                         l10248 22B8  
                                       l10272 2306                                         l10088 00EE  
                                       l10424 196E                                         l10282 2D78  
                                       l10372 258E                                         l10364 2574  
                                       l10356 2558                                         l10380 25A6  
                                       l10268 22FC                                         l10292 2DAA  
                                       l10444 19AC                                         l10376 259C  
                                       l10368 2580                                         l10472 1A4A  
                                       l10378 25A0                                         l10298 2DBC  
                                       l10474 1A58                                         l10910 0EB8  
                                       l10904 0EA2                                         l10930 0F0E  
                                       l10922 0EF0                                         l10914 0EBE  
                                       l10916 0EDC                __size_of_Activate_Buzzer_500Hz 0012  
                                       l10880 0E3C                                         l10892 0E76  
                   __end_of_Deactivate_Buzzer 3E98                                         l10886 0E60  
                                       l10898 0E8C                               ??_do_update_pwm 0044  
                             drawFastVLine@hi 0020                               drawFastVLine@lo 0021  
               __end_of_Activate_Buzzer_500Hz 3D78                                         ?_main 0001  
                             __end_of___awdiv 2D64                               drawCircle@ddF_x 0026  
                                       STR_10 FE6A                               drawCircle@ddF_y 0028  
                                       STR_11 FF51                                         STR_20 FFF0  
                                       STR_12 FFED                                         STR_13 FFE7  
                                       STR_21 FFF3                                         STR_14 FF9F  
                                       STR_22 FFD2                                         STR_30 FDEC  
                                       STR_31 FE6A                                         STR_23 FFE9  
                                       STR_15 FFCD                                         STR_40 FF9F  
                                       STR_24 FFE1                                         STR_16 FF99  
                                       STR_32 FF77                                         STR_33 FF9F  
                                       STR_25 FFE5                                         STR_17 FFAF  
                                       STR_41 FF83                                         STR_26 FFE1  
                                       STR_34 FFCD                                         STR_18 FF5E  
                                       STR_50 FECA                                         STR_42 FDB8  
                                       STR_27 FFE5                                         STR_19 FFB8  
                                       STR_51 FEEE                                         STR_35 FE2C  
                                       STR_43 FE17                                         STR_52 FFF6  
                                       STR_36 FF6B                                         STR_28 FEA4  
                                       STR_44 FDD6                               __end_of___awmod 2F18  
                                       STR_53 FFF8                                         STR_37 FF34  
                                       STR_29 FF00                                         STR_45 FE56  
                                       STR_54 FFFA                                         STR_46 FF43  
                                       STR_38 FE91                                         STR_55 FFFC  
                                       STR_39 FF8E                                         STR_47 FE02  
                                       STR_56 FF12                                         STR_48 FEDC  
                                       STR_49 FE7E                               __end_of___ftdiv 23F2  
                             __end_of___ftmul 2134                                         _T0CON 000FD5  
                             ___awdiv@divisor 0019                                         _T1CON 000FCD  
                             __end_of___fttol 1E22                                         _T2CON 000FCA  
                                       _T3CON 000FB1                               __end_of___lwdiv 33A0  
                             __end_of___lwmod 372C                                         i2l760 2F6E  
                                       i2l763 3E5C                                         i2l772 3E1C  
                                       i2l781 193C                                         i2l766 3E50  
                             ___awdiv@counter 001B                               drawCircle@color 0022  
                                       _RCSTA 000FAB                                         _TMR0H 000FD7  
                                       _TMR1H 000FCF                                         _TMR0L 000FD6  
                                       _TMR1L 000FCE                                         _TMR3L 000FB2  
                                       _SPBRG 000FAF                                         _PORTB 000F81  
                                       _PORTE 000F84                                ?_Increase_Time 0001  
                                       _TRISA 000F92                                         _TRISB 000F93  
                                       _TRISC 000F94                                         _TRISD 000F95  
                                       _TRISE 000F96                                         _TXREG 000FAD  
                                       _TXSTA 000FAC                               __end_of_get_RPM 34A8  
                                       _Rcmd1 1C04                                         _Rcmd3 2134  
    Update_Setup_Screen_Cursor_Backward@field 002E                 __size_of_Do_Save_New_Fan_Temp 0014  
                                  _i2cHighSda 3EA0                                    _i2cHighScl 3E3A  
                                bcd_2_dec@bcd 0015                                  bcd_2_dec@dec 0013  
                               ___awtoft@sign 001C                               __end_of_dpowers FD90  
                                       _color 00E7                                         _font2 FCAA  
            __size_of_Update_Setup_Fan_Screen 00A2                                         _found 005E  
                             __end_of_isdigit 3B1E                                         _tempC 00D0  
                                       _tempF 00D4                                         _month 0061  
                               ___ftpack@sign 0015                                         _putch 3E1E  
                           __end_of_I2C_Start 3D9C                             __end_of_I2C_Write 3904  
                              __CFG_BOREN$OFF 000000                                         tablat 000FF5  
                                  _Nec_button 00F8                                         status 000FD8  
                           ?_DS1621_Read_Temp 0014                                  _Do_Beep_Good 3C4A  
             __size_of_check_for_button_input 009E                         __end_of_Go_Next_Field 3C02  
                             write_data@data_ 0013                            ??_DS1621_Read_Temp 0016  
                       _Select_Fan_Temp_Field 00F9                               __initialization 3132  
                                __end_of_main 0F1C                                  __end_of_font FCAA  
                            __end_of_Init_ADC 3E3A                              get_duty_cycle@dc 014F  
                            __end_of_Rcmd2red 3888                            _Select_Alarm_Field 0055  
                                      ??_main 0048                                 ___fttol@sign1 0144  
                __size_of_Exit_Setup_Fan_Temp 0010                             _Decrease_Fan_Temp 3CE0  
                               __activetblptr 000002                             ?_DS3231_Read_Time 0001  
                           __end_of_LCD_Reset 3D54       I2C_Write_Address_Write_One_Byte@Address 0013  
                       __end_of_Go_Prev_Field 3BEA                     ??_TFT_GreenTab_Initialize 001D  
                          ?_Decrease_Fan_Temp 0001                    ??_Update_Setup_Time_Screen 0048  
                          ??_DS3231_Read_Time 0014                                        ?_Rcmd1 0001  
                                      ?_Rcmd3 0001                       __size_of_init_INTERRUPT 0024  
                                   I2C_Init@c 0011                           _In_Alarm_Time_Setup 00F4  
                                   I2C_Read@n 0012                   DS3231_Turn_Off_Alarm@Device 001F  
                                      _ADCON0 000FC2                                        _ADCON1 000FC1  
                                      _ADCON2 000FC0                           DS1621_Read_Temp@Cmd 0016  
                                      _ADRESH 000FC4                                        _ADRESL 000FC3  
                                      _CCPR1L 000FBE                                        _CCPR2L 000FBB  
                            ___awdiv@dividend 0017                            __size_of_i2cLowSda 000A  
                          __size_of_i2cLowScl 0008                              __end_of___awtoft 3940  
                                      ?_putch 0001                              __end_of___ftpack 2824  
                            __end_of___lbtoft 3AD8                            _Toggle_Fan_Monitor 3C90  
                         ??_Decrease_Fan_Temp 0048                                 ??_Monitor_Fan 0048  
                                      _DC_Txt 00C8                                     ??_Do_Init 0017  
                                      i2l7410 1890                                        i2l7404 1886  
                                      i2l7430 190E                                        i2l7406 188C  
                                      i2l7432 1914                                        i2l7418 18E6  
                                      i2l7434 1918                                        i2l8090 2F50  
                                      i2l7380 183A                                        i2l7364 17E8  
                                      i2l7374 181A                                        i2l8094 2F5A  
                                      i2l7392 1860                                        i2l7386 1844  
                                      i2l8098 2F64                                        i2l7398 186A  
                                      _OSCCON 000FD3               __size_of_Do_Save_New_Alarm_Time 0018  
                         __size_of_TIMER1_isr 0010                                        _SPBRGH 000FB0  
                     __end_of_Reset_Nec_State 3E90                                        _SSPBUF 000FC9  
                                   ??_i2cNack 0011                                  _Alarm_SW_Txt 00C4  
                            __end_of_delay_ms 3646                                        _i2cAck 3D9C  
                         ?_Toggle_Fan_Monitor 0001                                        _Nec_ok 00E3  
                __size_of_Go_Prev_Alarm_Field 0018                              __end_of_fillRect 3776  
                            __end_of_drawChar 1C04                            __size_of_OpenUSART 0070  
                                      ___ftge 2C38           __end_of_Initialize_Setup_Fan_Screen 2A56  
                 _Initialize_Setup_Fan_Screen 299E                   __end_of_Increase_Alarm_Time 37BE  
                        DS3231_Init@control_E 0019                      __size_of_Activate_Buzzer 0012  
                                      ___wmul 3A64                                     ??___awdiv 001B  
                            __end_of_drawtext 1F30                                     ??___awmod 0048  
                                   ??___ftdiv 0032                             _In_Fan_Temp_Setup 00F5  
                                   ??___ftmul 0023                                     ??___fttol 003F  
                                      _chkisr 0008                                     ??___lwdiv 0015  
                                      _array1 011F                                     ??___lwmod 001C  
                                      _buffer 0100                __size_of_Exit_Setup_Alarm_Time 0010  
                                      _nec_ok 00ED                 __end_of_Exit_Setup_Alarm_Time 3DEE  
                   __end_of_Decrease_Fan_Temp 3CF4                                        clear_0 3138  
                                      clear_1 3144                              ___awdiv@quotient 001D  
                                      _minute 0060                                        _second 0062  
                             ___awmod@divisor 0046                          _Activate_Buzzer_2KHz 3D54  
                                   ??_get_RPM 002F                    __size_of_Deactivate_Buzzer 0008  
                             ___awmod@counter 00FE                                        _printf 09BC  
                                drawtext@size 0040                               ??_Increase_Time 0048  
                                      _strcpy 39AE                                        _strlen 3888  
                       ___ftmul@f3_as_product 0027                                    _Toggle_Fan 3CA4  
                        __end_of_get_full_ADC 3AB2                        _check_for_button_input 2B9A  
                            _Do_Save_New_Time 3CF4                          ??_Toggle_Fan_Monitor 0047  
                                __pdataCOMRAM 006E                                     ??_isdigit 0011  
                                   ?_I2C_Init 0011                                     ?_I2C_Read 0001  
                      get_duty_cycle@set_temp 0046                                     ?_I2C_Stop 0001  
                                __mediumconst FBAA                                        tblptrh 000FF7  
                                      tblptrl 000FF6                                        tblptru 000FF8  
            __end_of_I2C_Write_Cmd_Write_Data 3B7E                                   ?_i2cHighSda 0001  
                                 ?_i2cHighScl 0001                                        putch@c 0011  
                            __end_of_spiwrite 3D1C                      __size_of_Exit_Time_Setup 0010  
                          __size_of_bcd_2_dec 002A                           _Do_Setup_Alarm_Time 24D2  
                                  __accesstop 0080                       __end_of__initialization 319C  
                            ??_get_duty_cycle 00FE         I2C_Write_Address_Read_One_Byte@Device 0016  
                          __size_of_dec_2_bcd 0064                                    ___ftge@ff1 0011  
                                  ___ftge@ff2 0014                                     ?_INT0_isr 0001  
                                   ?_INT1_isr 0001                                     ?_INT2_isr 0001  
                          _setup_alarm_minute 0064                            _setup_alarm_second 0065  
                               ___rparam_used 000001                                    ___ftdiv@f1 002C  
                                  ___ftdiv@f2 002F                                    ___ftdiv@f3 0036  
                                  ___awtoft@c 0019                                    ___lbtoft@c 001C  
                         __end_of_Monitor_Fan 35F4                       __size_of_Setup_Temp_Fan 0094  
                         _Go_Next_Alarm_Field 3C1A                                    ___ftmul@f1 001D  
                                  ___ftmul@f2 0020                                    ___fttol@f1 003B  
                               __end_of_Rcmd1 1D14                                 __end_of_Rcmd3 2226  
                              __pcstackCOMRAM 0001                 DS3231_Turn_On_Alarm@Address_E 001B  
               DS3231_Turn_On_Alarm@Address_F 001C                                  __pidataBANK0 33A0  
                                __pidataBANK1 3806                                 __end_of_font2 FD86  
                           __end_of_i2cLowSda 3E86                             __end_of_i2cLowScl 3EA0  
                        ?_Do_Setup_Alarm_Time 0001                                 __end_of_putch 3E2C  
                       ?_Activate_Buzzer_2KHz 0001                        _Do_Save_New_Alarm_Time 3C32  
                              drawPixel@color 0019                                  dec_2_bcd@bcd 014E  
                                dec_2_bcd@dec 0150                        __size_of_Decrease_Time 0090  
                          _setup_fan_set_temp 0067                            _setup_fan_set_text 00BF  
                      __size_of_write_command 0010                                    ??_I2C_Init 0015  
                                  ??_I2C_Read 0011                                  _alarm_minute 005A  
                                _alarm_second 005B              ??_Update_Setup_Alarm_Time_Screen 0048  
             ?_Update_Setup_Alarm_Time_Screen 0001                  __end_of_DS3231_Turn_On_Alarm 3550  
                                  ??_I2C_Stop 0011                          ?_Go_Next_Alarm_Field 0001  
                                     ??_Rcmd1 001D                                       ??_Rcmd3 001D  
                     _Update_Setup_Fan_Screen 2A56                            __size_of_drawPixel 0030  
                           __end_of_OpenUSART 3216                                       ??_putch 0011  
                     ??_DS3231_Turn_Off_Alarm 001B                                    __pbssBANK0 00DA  
                            _setup_alarm_hour 0063                                     ?_Init_ADC 0001  
                            _setup_alarm_time 013B          __end_of_Initialize_Setup_Time_Screen 203C  
       __size_of_Initialize_Setup_Time_Screen 010C                  _Initialize_Setup_Time_Screen 1F30  
                               ??_DS1621_Init 0016                                 ??_DS3231_Init 0017  
                                   ?_Rcmd2red 0001                            __size_of_init_UART 0014  
                             spiwrite@spidata 0012                                    _alarm_date 0058  
                            ?_Reset_Nec_State 0001                                    ??_INT0_isr 0001  
                                  ??_INT1_isr 0001                                    ??_INT2_isr 0001  
                                  _alarm_mode 00E5                                    _alarm_hour 0059  
                                  _alarm_time 0082                                 ?_Wait_One_Sec 0001  
    I2C_Write_Address_Write_One_Byte@Data_Out 0014                                  _fan_set_temp 006E  
                                     ?_i2cAck 0001                                  ?_Do_Beep_Bad 0001  
                          __size_of_read_volt 0064                                 ??_Turn_On_Fan 0047  
                              I2C_Read@inByte 0013                                       ?___ftge 0011  
                  DS3231_Turn_On_Alarm@Device 001F                                       ?___wmul 0011  
                         __size_of_i2cHighSda 0008                           __size_of_i2cHighScl 000C  
                       ??_Do_Setup_Alarm_Time 0048                                       ?_chkisr 0001  
                      __size_of_setAddrWindow 0056                             __end_of_bcd_2_dec 3A3A  
                                     _CCP1CON 000FBD              I2C_Write_Cmd_Write_Data@Data_Out 0014  
                                     _CCP2CON 000FBA                        __size_of_Do_Setup_Time 00EA  
                                ??_TIMER1_isr 0001                    __size_of_Decrease_Fan_Temp 0014  
                               ??_I2C_ReStart 0011                                       _ALARMEN 0048  
                                   ?___awtoft 0019                                     ?___ftpack 0011  
                                   ?___lbtoft 0019                                    I2C_Write@n 0012  
                                     ?_printf 001D                                       ?_strcpy 0011  
                                     ?_strlen 0011                             __end_of_dec_2_bcd 3344  
                                 ?_Toggle_Fan 0001                             ??_Activate_Buzzer 0011  
                                  _fillScreen 3B9C                                       _MATCHED 00E1  
                       __end_of_Update_Screen 063C                      ??_DS3231_Read_Alarm_Time 0014  
                                  _drawCircle 148C                         ??_Go_Next_Alarm_Field 0031  
                              _init_INTERRUPT 3AD8                                     ?_delay_ms 0017  
                                   ?_fillRect 0023                                     ?_drawChar 002E  
                                     _SSPCON1 000FC6                                       _SSPSTAT 000FC7  
                                     _RPM_Txt 00BA                         __end_of_fillRectangle 268C  
                                   ?_drawtext 0039                                    ??_Init_ADC 0011  
                                     _Do_Init 33FA                                   _Monitor_Fan 35A2  
                    _I2C_Write_Cmd_Write_Data 3B5E                    __end_of_I2C_Write_Cmd_Only 3BD2  
                                  ??_Rcmd2red 0014                        DS1621_Read_Temp@Device 0018  
                               _Decrease_Time 2DF8                           _Exit_Setup_Fan_Temp 3DBE  
                     get_duty_cycle@diff_temp 0151                                ??_Wait_One_Sec 0011  
                                     _i2cNack 3E72                            __end_of_TIMER1_isr 3E1E  
               ?_Initialize_Setup_Time_Screen 0001                  __size_of_Decrease_Alarm_Time 004E  
                               _write_command 3DFE                                     _I2C_Start 3D8A  
                                   _I2C_Write 38C6                             ??_Exit_Time_Setup 0043  
                             __size_of_i2cAck 0012                                       __Hparam 0000  
                __end_of_Do_Save_New_Fan_Temp 3CE0                                       __Lparam 0000  
                         __end_of_DS1621_Init 3B9C                           __end_of_DS3231_Init 299E  
                           __end_of_drawPixel 3A10                         __end_of_drawFastVLine 3030  
                             __size_of___ftge 0096                                       ___awdiv 2CCE  
                                     ___awmod 2E88                                       ___ftdiv 2310  
                             __size_of___wmul 0028                        ??_Activate_Buzzer_2KHz 0011  
                                     ___ftmul 203C                                       ___fttol 1D14  
                                     ___lwdiv 3344                                       ___lwmod 36E0  
                       __size_of_get_full_ADC 0026                               __size_of_chkisr 2FA0  
                                   ?_spiwrite 0001                                       __pcinit 3132  
                                  ??___awtoft 001C                                    ??___ftpack 0016  
                                  ??___lbtoft 001C                                       __ramtop 1000  
                                     _get_RPM 3452                                       __ptext0 0D16  
                                     __ptext1 193E                                       __ptext2 2C38  
                                     __ptext3 34FE                                       __ptext4 3550  
                                     __ptext5 28E6                     __size_of_DS1621_Read_Temp 003C  
                                     __ptext6 3B1E                                       __ptext7 397C  
                                     __ptext8 3D30                                       __ptext9 327C  
                        ?_Exit_Setup_Fan_Temp 0001                               __size_of_printf 035A  
                           __end_of_init_UART 3D30                           __end_of_Turn_On_Fan 3DBE  
                      __end_of_init_INTERRUPT 3AFC                                     _T0CONbits 000FD5  
                             __size_of_strcpy 0032                               __size_of_strlen 003E  
                           __end_of_hexpowers FD98                                     _T1CONbits 000FCD  
                   ??_Update_Setup_Fan_Screen 0048                                       _dpowers FD86  
                       __end_of_do_update_pwm 28E6                                       _isdigit 3AFC  
                                   _T3CONbits 000FB1                         _Activate_Buzzer_500Hz 3D66  
                            ___awmod@dividend 0044                                    _duty_cycle 005D  
                         _Go_Prev_Alarm_Field 3C02                             __end_of_read_volt 32E0  
                                  ??_delay_ms 0019                           __end_of_I2C_ReStart 3C90  
                               drawtext@_text 003A                                 drawtext@color 003C  
                                  ??_fillRect 0028                                    ??_drawChar 0035  
                                   _LCD_Reset 3D42                             _DS3231_Write_Time 2AF8  
                               _setAddrWindow 34A8                                __pintcode_body 2F18  
                               Wait_One_Sec@k 0011                                    delay_ms@ms 0017  
                        end_of_initialization 319C                                 _Do_Setup_Time 2226  
                                   _INT0_flag 00F1                                     _INT1_flag 00F2  
                                   _INT2_flag 00F3                                    ??_drawtext 0041  
                           _Increase_Fan_Temp 3CB8                            ?_DS3231_Write_Time 0001  
                              ?_Decrease_Time 0001                 DS3231_Turn_On_Alarm@control_E 001D  
               DS3231_Turn_On_Alarm@control_F 001E                                ?_write_command 0001  
                               __Lmediumconst FBAA                     __size_of_DS3231_Read_Time 0066  
                                     int_func 2F18                            ?_Increase_Fan_Temp 0001  
                     DS3231_Read_Time@Address 0014                      DS3231_Write_Time@Address 0152  
                                  ?_I2C_Start 0001                                    ?_I2C_Write 0001  
                                  get_RPM@RPS 002F                      __end_of_Do_Save_New_Time 3D08  
                                _get_full_ADC 3A8C                           __size_of_Toggle_Fan 0014  
                              _Setup_Temp_Fan 2D64                           ??_DS3231_Write_Time 0048  
                        ?_Go_Prev_Alarm_Field 0001                       check_for_button_input@j 003A  
                    ?_DS3231_Write_Alarm_Time 0001                                    _tempSecond 0080  
                        _DS3231_Turn_On_Alarm 34FE                                     _RCSTAbits 000FAB  
                                     printf@c 0038                                       printf@f 001D  
                         ??_Increase_Fan_Temp 0048                                       postdec1 000FE5  
                                     postdec2 000FDD                                       postinc0 000FEE  
                                     postinc2 000FDE                                    ??_spiwrite 0011  
                     ?_check_for_button_input 0001                                       strlen@s 0011  
                 I2C_Write_Cmd_Write_Data@Cmd 0013                         ??_Exit_Setup_Fan_Temp 0043  
                                   _PORTAbits 000F80                              drawtext@cursor_x 014A  
                            drawtext@cursor_y 0149                                     _PORTBbits 000F81  
                                   _PORTCbits 000F82                                     _PORTDbits 000F83  
                                  _test_alarm 193E                              I2C_Write@outByte 0011  
                             ?_init_INTERRUPT 0001                                    _setup_date 0094  
                                 ?_fillScreen 0024                                    _setup_hour 0068  
                                  _setup_time 009D                                    _setup_year 006C  
                                 ?_drawCircle 001C               __size_of_DS3231_Read_Alarm_Time 004C  
                                  drawChar@bg 0032                     __end_of_DS3231_Write_Time 2B9A  
              DS3231_Turn_Off_Alarm@Address_E 001B                DS3231_Turn_Off_Alarm@Address_F 001C  
                                   _TRISCbits 000F94                                     _TRISDbits 000F95  
        __size_of_Initialize_Setup_Fan_Screen 00B8                        __size_of_Go_Next_Field 0018  
      I2C_Write_Address_Read_One_Byte@Address 0014                                  ??_i2cHighSda 0011  
                                ??_i2cHighScl 0011                             __size_of_I2C_Init 000A  
                           __size_of_I2C_Read 0048                     __end_of_Increase_Fan_Temp 3CCC  
                           __size_of_I2C_Stop 0012                                ?_setAddrWindow 0014  
                                  ?_LCD_Reset 0001                                ?_Do_Setup_Time 0001  
                            drawtext@textsize 0145                                    drawPixel@x 001B  
                                  drawPixel@y 0018                                   _DS1621_Init 3B7E  
                                 _DS3231_Init 28E6                        __end_of_Setup_Temp_Fan 2DF8  
                                 ___ftdiv@exp 0039                                   printf@width 0036  
                                   _TXSTAbits 000FAC                         ??_Go_Prev_Alarm_Field 0031  
           __size_of_Update_Setup_Time_Screen 0184                            get_full_ADC@result 0015  
                   ?_Update_Setup_Time_Screen 0001                         ?_DS3231_Turn_On_Alarm 0001  
                           __size_of_INT0_isr 0180                             __size_of_INT1_isr 000C  
                           __size_of_INT2_isr 000C                                __end_of_i2cAck 3DAE  
                                 ___ftmul@exp 0026                        __size_of_Go_Prev_Field 0018  
              ??_Initialize_Setup_Time_Screen 0043                       ?_Do_Save_New_Alarm_Time 0001  
                        __size_of_Do_Beep_Bad 0018                      DS1621_Read_Temp@Data_Ret 0017  
                                 _Turn_On_Fan 3DAE                __end_of_check_for_button_input 2C38  
                          __end_of_i2cHighSda 3EA8                                __end_of___ftge 2CCE  
                          __end_of_i2cHighScl 3E46                                __end_of___wmul 3A8C  
                               delay_ms@count 001B                                    _write_data 3DEE  
                               __pidataCOMRAM 3EA8                                __end_of_chkisr 2FA8  
                    ?_TFT_GreenTab_Initialize 0001                                   _I2C_ReStart 3C7A  
                                   _Nec_State 00F7                                    drawtext@bg 003E  
                       _Exit_Setup_Alarm_Time 3DDE                        ?_Activate_Buzzer_500Hz 0001  
                                   _i2cLowSda 3E7C                                     _i2cLowScl 3E98  
                __size_of_Increase_Alarm_Time 0048                          __end_of_Wait_One_Sec 3B5E  
                              __end_of_printf 0D16                         __end_of_Increase_Time 3132  
                              __end_of_strcpy 39E0                                __end_of_strlen 38C6  
                 __size_of_Toggle_Fan_Monitor 0014                           start_initialization 3132  
                        _Do_Save_New_Fan_Temp 3CCC                        Update_Screen@neg_tempF 014D  
                             ??_Decrease_Time 0048                               ??_write_command 0013  
               get_duty_cycle@diff_temp_float 014C               __end_of_DS3231_Write_Alarm_Time 30B4  
                                   _OpenUSART 31A6                __size_of_DS3231_Turn_Off_Alarm 0052  
                DS3231_Read_Alarm_Time@Device 0015                 __end_of_DS3231_Turn_Off_Alarm 35A2  
                             ?_Setup_Temp_Fan 0001                              __CFG_OSC$INTIO67 000000  
                                 ??_I2C_Start 0011                             __size_of_Init_ADC 000E  
                                 ??_I2C_Write 0011                        _DS3231_Read_Alarm_Time 3694  
                                    ??_i2cAck 0011                             __size_of_Rcmd2red 003E  
                         __size_of_fillScreen 001C       I2C_Write_Address_Read_One_Byte@Data_Ret 0015  
              __end_of_Do_Save_New_Alarm_Time 3C4A                           __size_of_drawCircle 01AE  
                               _Go_Next_Field 3BEA                               _Activate_Buzzer 3D30  
                                    ??___ftge 0017                                      ??___wmul 0015  
                               ?_Turn_Off_Fan 0001                                      ??_chkisr 0003  
                                 __pdataBANK0 0080                                   __pdataBANK1 0100  
                             setAddrWindow@x0 0017                               setAddrWindow@x1 0015  
                             setAddrWindow@y0 0014                               setAddrWindow@y1 0016  
                                    ??_printf 002B                              _DS1621_Read_Temp 3940  
                                 ?_test_alarm 0001                                      ??_strcpy 0015  
                                    ??_strlen 0013                                  ??_Toggle_Fan 0047  
                                  ?_i2cLowSda 0001                                    ?_i2cLowScl 0001  
                         _Decrease_Alarm_Time 3646                                     _bcd_2_dec 3A10  
                           __size_of___awtoft 003C                             __size_of___ftpack 00C6  
                           __size_of___lbtoft 0026                                   __pbssCOMRAM 0048  
                  ??_I2C_Write_Cmd_Write_Data 0015                    __size_of_DS3231_Write_Time 00A2  
                             ??_setAddrWindow 0017                                 __pcstackBANK0 00FE  
                               __pcstackBANK1 0144                                 _Go_Prev_Field 3BD2  
                             ??_Do_Setup_Time 0048                         ?_Do_Save_New_Fan_Temp 0001  
                                   _dec_2_bcd 32E0                               _Exit_Time_Setup 3DCE  
                  __size_of_Increase_Fan_Temp 0014                                   ??_LCD_Reset 001D  
                                _isdigit$2887 0012                             __size_of_delay_ms 0052  
                                    ?_Do_Init 0001                                  ?_Monitor_Fan 0001  
                           __size_of_fillRect 004A                             __size_of_drawChar 0156  
                                  ?_OpenUSART 0011                              _DS3231_Read_Time 3216  
                                    ?_i2cNack 0001                          ?_Decrease_Alarm_Time 0001  
                           __size_of_drawtext 010E                                 ?_Do_Beep_Good 0001  
                      ??_DS3231_Turn_On_Alarm 001B   __end_of_Update_Setup_Screen_Cursor_Backward 148C  
__size_of_Update_Setup_Screen_Cursor_Backward 01B4         ??_Update_Setup_Screen_Cursor_Backward 002E  
        ?_Update_Setup_Screen_Cursor_Backward 0001           _Update_Setup_Screen_Cursor_Backward 12D8  
                 __end_of_Do_Setup_Alarm_Time 25B0                                ?_Go_Next_Field 0001  
                            ___lwdiv@dividend 0011                            __end_of_Toggle_Fan 3CB8  
                                 I2C_Read@ack 0011                                     _bit_count 00FA  
                                   __pintcode 0008               __end_of_TFT_GreenTab_Initialize 3A64  
                              ??_Turn_Off_Fan 0011                                 __pmediumconst FBAA  
                                    ?___awdiv 0017                                     __ptext100 3E68  
                                   __ptext101 3B7E                                     __ptext110 3D9C  
                                   __ptext102 3B5E                                     __ptext111 3C7A  
                                   __ptext103 3BB8                                     __ptext120 17BE  
                                   __ptext112 3E7C                                     __ptext104 3940  
                                   __ptext121 3E86                                     __ptext113 3E98  
                                   __ptext105 38C6                                     __ptext114 3EA0  
                                   __ptext106 3D78                                     __ptext115 3E3A  
                                   __ptext107 3D8A                                     __ptext108 37BE  
                                   __ptext117 3E0E                                     __ptext109 3E72  
                                   __ptext118 3E46                                     __ptext119 3E52  
                                    ?___awmod 0044                                      ?___ftdiv 002C  
                    __size_of_Reset_Nec_State 000A                                      ?___ftmul 001D  
                                    ?___fttol 003B                       __size_of_get_duty_cycle 0202  
                                   __tft_type 0057                                      ?___lwdiv 0011  
                          _I2C_Write_Cmd_Only 3BB8                                      ?___lwmod 0018  
                 __end_of_Go_Next_Alarm_Field 3C32                DS3231_Turn_Off_Alarm@control_E 001D  
              DS3231_Turn_Off_Alarm@control_F 001E                            drawFastVLine@color 001A  
                                 ?_write_data 0001                        ?_Exit_Setup_Alarm_Time 0001  
                                   _drawPixel 39E0                                      ?_get_RPM 002C  
                           __size_of_spiwrite 0014                                    ?_bcd_2_dec 0001  
                         ?_I2C_Write_Cmd_Only 0013                                      ?_isdigit 0001  
                                    _I2C_Init 3E68                                      _I2C_Read 37BE  
                              ?_Go_Prev_Field 0001                                      _I2C_Stop 3D78  
                           _Initialize_Screen 063C                                __size_of_Rcmd1 0110  
                              __size_of_Rcmd3 00F2                                     _init_UART 3D1C  
                                  ?_dec_2_bcd 014A                      I2C_Write_Cmd_Only@Device 0014  
                                   _hexpowers FD90                            ?_Initialize_Screen 0001  
                            ___lwdiv@quotient 0016                                __size_of_putch 000E  
                                   _read_volt 327C      __end_of_I2C_Write_Address_Write_One_Byte 3B3E  
   __size_of_I2C_Write_Address_Write_One_Byte 0020            ??_I2C_Write_Address_Write_One_Byte 0015  
           ?_I2C_Write_Address_Write_One_Byte 0013              _I2C_Write_Address_Write_One_Byte 3B1E  
                     __end_of_Activate_Buzzer 3D42                         ??_Decrease_Alarm_Time 0048  
                              ___wmul@product 0015                                ??_Do_Beep_Good 0047  
                         ??_Initialize_Screen 0043                                  _Select_Field 0056  
                                    _INT0_isr 17BE                                      _INT1_isr 3E52  
                                    _INT2_isr 3E46                          ??_I2C_Write_Cmd_Only 0014  
                         __size_of_test_alarm 0170                                      _PIE1bits 000F9D  
                           ?_Do_Save_New_Time 0001                        __size_of_Update_Screen 0620  
                      DS3231_Read_Time@Device 0015                       DS3231_Write_Time@Device 0151  
                                    _PIR1bits 000F9E                                 _In_Time_Setup 00F6  
                          ??_Do_Save_New_Time 0048                              _Fan_Set_Temp_Txt 00B5  
                            ??_init_INTERRUPT 0011                   get_duty_cycle@diff_temp_816 014A  
                ?_Initialize_Setup_Fan_Screen 0001                         __size_of_Wait_One_Sec 0020  
                                   _setup_day 0066                             DS1621_Init@Device 0016  
                                   fillRect@h 0025                                     fillRect@i 002C  
                                   fillRect@w 0024                                     fillRect@x 002B  
                                   fillRect@y 0023                                     drawChar@c 002F  
                                   drawChar@i 0038                                     drawChar@j 0037  
                                   drawChar@x 0036                                     drawChar@y 002E  
               __size_of_Activate_Buzzer_2KHz 0012                                    ?_drawPixel 0018  
                      __size_of_fillRectangle 00DC                                    _ADCON0bits 000FC2  
                     __end_of_Exit_Time_Setup 3DDE                             ___wmul@multiplier 0011  
                   __end_of_Initialize_Screen 09BC                                   ??_i2cLowSda 0011  
                                 ??_i2cLowScl 0011                 DS3231_Read_Alarm_Time@Address 0014  
                                ??_fillScreen 0026              __size_of_DS3231_Write_Alarm_Time 0084  
                                ??_drawCircle 0024                                    printf@flag 0035  
                                  printf@prec 0032                        ??_Do_Save_New_Fan_Temp 0043  
                                  ?_init_UART 0001              __end_of_Update_Setup_Time_Screen 17BE  
                                 _INTCON2bits 000FF1       __end_of_I2C_Write_Address_Read_One_Byte 39AE  
    __size_of_I2C_Write_Address_Read_One_Byte 0032             ??_I2C_Write_Address_Read_One_Byte 0015  
            ?_I2C_Write_Address_Read_One_Byte 0014               _I2C_Write_Address_Read_One_Byte 397C  
                                 _INTCON3bits 000FF0                                     copy_data0 315E  
                                   copy_data1 317E                                     drawtext@i 0147  
                      __size_of_drawFastVLine 0088                                     drawtext@x 0144  
                                   drawtext@y 0039                                    ?_read_volt 003B  
                                    _Nec_code 00DA                                      _Init_ADC 3E2C  
                           write_command@cmd_ 0013    __end_of_Initialize_Setup_Alarm_Time_Screen 275E  
 __size_of_Initialize_Setup_Alarm_Time_Screen 00D2          ??_Initialize_Setup_Alarm_Time_Screen 0043  
         ?_Initialize_Setup_Alarm_Time_Screen 0001            _Initialize_Setup_Alarm_Time_Screen 268C  
                                 ??_OpenUSART 0013                                  ?_DS1621_Init 0001  
                                    _Rcmd2red 384A                              __size_of_Do_Init 0058  
                         __size_of_write_data 0010                                  ?_DS3231_Init 0001  
                             ??_Go_Next_Field 0031                               OpenUSART@config 0013  
      I2C_Write_Address_Write_One_Byte@Device 0015                                  _Time_Elapsed 004E  
                         _Increase_Alarm_Time 3776                              __size_of_i2cNack 000A  
                               _RTC_ALARM_Txt 00D8                                  _Wait_One_Sec 3B3E  
                                    __Hrparam 0000                        __size_of_do_update_pwm 00C2  
                          __end_of_fillScreen 3BB8                                      __Lrparam 0000  
                          __end_of_drawCircle 163A                   __end_of_Exit_Setup_Fan_Temp 3DCE  
                                ?_Turn_On_Fan 0001                       ??_Activate_Buzzer_500Hz 0011  
                            __size_of___awdiv 0096                      ?_Update_Setup_Fan_Screen 0001  
                            __size_of___awmod 0090                              __size_of___ftdiv 00E2  
                            __size_of___ftmul 00F8                              __size_of___fttol 010E  
                            __size_of___lwdiv 005C                                      _Volt_Txt 00AF  
                            __size_of___lwmod 004C                 ??_Initialize_Setup_Fan_Screen 0043  
                                    ___awtoft 3904                                      ___ftpack 275E  
                                    ___lbtoft 3AB2                                  ?_I2C_ReStart 0001  
                             ??_Go_Prev_Field 0031                              __size_of_get_RPM 0056  
                                 ??_bcd_2_dec 0011                          ?_Increase_Alarm_Time 0001  
                           ??_Reset_Nec_State 0001                                 _Update_Screen 001C  
                  get_duty_cycle@ambient_temp 0044                              __size_of_isdigit 0022  
                                    _delay_ms 35F4                               ___lwdiv@divisor 0013  
                                 ??_dec_2_bcd 014C                               ___lwdiv@counter 0015  
                                    __ptext10 3A8C                                      __ptext11 3452  
                                    __ptext20 3CCC                                      __ptext12 001C  
                                    __ptext21 3CE0                                      __ptext13 3C90  
                                    __ptext30 3BEA                                      __ptext22 2A56  
                                    __ptext14 3CA4                                      __ptext31 3DCE  
                                    __ptext23 35A2                                      __ptext15 3DAE  
                                    __ptext40 3776                                      __ptext32 3CF4  
                                    __ptext24 0F1C                                      __ptext16 2D64  
                                    __ptext41 3C02                                      __ptext33 2AF8  
                                    __ptext25 3904                                      __ptext17 299E  
                                    __ptext50 25B0                                      __ptext42 12D8  
                                    __ptext34 2DF8                                      __ptext26 2226  
                                    __ptext18 3CB8                                      __ptext51 148C  
                                    __ptext43 3C1A                                      __ptext35 163A  
                                    __ptext27 1F30                                      __ptext19 3DBE  
                                    __ptext60 3216                                      __ptext52 3A3A  
                                    __ptext44 111E                                      __ptext36 24D2  
                                    __ptext28 30B4                                      __ptext61 3694  
                                    __ptext53 2134                                      __ptext45 3DDE  
                                    __ptext37 2B9A                                      __ptext29 3BD2  
                                    __ptext70 275E                                      __ptext62 3C4A  
                                    __ptext54 384A                                      __ptext46 3C32  
                                    __ptext38 3A10                                      __ptext71 3B3E  
                                    __ptext63 3D54                                      __ptext55 1C04  
                                    __ptext47 063C                                      __ptext39 268C  
                                    __ptext80 3344                                      __ptext72 3E90  
                                    __ptext64 3C62                                      __ptext56 3D42  
                                    __ptext48 39AE                                      __ptext81 1E22  
                                    __ptext73 3D66                                      __ptext65 2824  
                                    __ptext57 35F4                                      __ptext49 3B9C  
                                    __ptext90 3D08                                      __ptext82 3888  
                                    __ptext74 3646                                      __ptext66 3AB2  
                                    __ptext58 3030                                      __ptext91 3A64  
                                    __ptext83 1AAE                                      __ptext75 23F2  
                                    __ptext67 1D14                                      __ptext59 32E0  
                                    __ptext92 2E88                                      __ptext84 372C  
                                    __ptext76 09BC                                      __ptext68 203C  
                                    __ptext93 2CCE                                      __ptext85 2FA8  
                                    __ptext77 3E1E                                      __ptext69 2310  
                                    __ptext94 33FA                                      __ptext86 39E0  
                                    __ptext78 3AFC                                      __ptext95 3D1C  
                                    __ptext87 34A8                                      __ptext79 36E0  
                                    __ptext96 31A6                                      __ptext88 3DEE  
                                    __ptext97 3AD8                                      __ptext89 3DFE  
                                    __ptext98 3E5E                                      __ptext99 3E2C  
                                    _fillRect 372C                                      _drawChar 1AAE  
                            ??_Setup_Temp_Fan 0048                          __end_of_Turn_Off_Fan 3E68  
                                    _glob_RGB 00E9              __size_of_TFT_GreenTab_Initialize 002A  
  __end_of_Update_Setup_Screen_Cursor_Forward 12D8   __size_of_Update_Setup_Screen_Cursor_Forward 01BA  
        ??_Update_Setup_Screen_Cursor_Forward 002E           ?_Update_Setup_Screen_Cursor_Forward 0001  
          _Update_Setup_Screen_Cursor_Forward 111E                                      _colstart 00FB  
                 __end_of_Go_Prev_Alarm_Field 3C1A                                      _drawtext 1E22  
                                  strcpy@from 0013                       ?_DS3231_Read_Alarm_Time 0001  
                               _fillRectangle 25B0                DS3231_Write_Alarm_Time@Address 0152  
                    __end_of_DS1621_Read_Temp 397C                              ?_Activate_Buzzer 0001  
                               __size_of_main 0206                          __size_of_Monitor_Fan 0052  
                               ??_Do_Beep_Bad 0047                               fillRectangle@hi 0021  
                             fillRectangle@lo 0022                                _get_duty_cycle 0F1C  
                               _drawFastVLine 2FA8                                     printf@idx 002F  
                                    _spiwrite 3D08                                     printf@val 0033  
                           DS3231_Init@Device 001A                                   ??_drawPixel 001B  
                                    _rowstart 00FD                    __end_of_Toggle_Fan_Monitor 3CA4  
                                ??_test_alarm 0039                      __end_of_DS3231_Read_Time 327C  
                       ??_Increase_Alarm_Time 0048                    __size_of_Initialize_Screen 0380  
                            ?_Exit_Time_Setup 0001                          __end_of_Do_Beep_Good 3C62  
                              ?_Update_Screen 0001                                    _INTCONbits 000FF2  
                               _do_update_pwm 2824                                OpenUSART@spbrg 0011  
                                 ??_init_UART 0014                                      isdigit@c 0013  
              __end_of_DS3231_Read_Alarm_Time 36E0                                   ??_read_volt 003E  
                                   spiwrite@x 0011                                      intlevel2 0000  
                              ?_fillRectangle 0018                         __end_of_Decrease_Time 2E88  
                    _Update_Setup_Time_Screen 163A                              ___lwmod@dividend 0018  
                       __end_of_write_command 3E0E                               fillScreen@color 0024  
                          __end_of_test_alarm 1AAE                         _DS3231_Turn_Off_Alarm 3550  
               DS3231_Write_Alarm_Time@Device 0151                       do_update_pwm@duty_cycle 014D  
                      __end_of_get_duty_cycle 111E                        __size_of_Increase_Time 007E  
             __end_of_Update_Setup_Fan_Screen 2AF8                                fillRectangle@h 001A  
                              fillRectangle@w 0019                                fillRectangle@x 0023  
                              fillRectangle@y 0018                       ??_Exit_Setup_Alarm_Time 0043  
                              ?_drawFastVLine 0018                                      printf@ap 0030  
                         __end_of_Do_Beep_Bad 3C7A                                  ??_write_data 0013  
                                  _TIMER1_isr 3E0E                                 fillRect@color 0026  
                     _DS3231_Write_Alarm_Time 3030                                ?_do_update_pwm 0001  
                             ___lwmod@divisor 001A                                      strcpy@cp 0015  
                                    strlen@cp 0015                                      strcpy@to 0011  
                       I2C_Write_Cmd_Only@Cmd 0013                               ___lwmod@counter 001C  
                                _setup_minute 0069                                  _setup_second 006B  
                       __end_of_setAddrWindow 34FE                         __end_of_Do_Setup_Time 2310  
                          fillRectangle@color 001B                             do_update_pwm@dc_I 014E  
                           do_update_pwm@dc_f 014A                                 drawChar@color 0030  
                                 _setup_month 006A                            __end_of_write_data 3DFE  
                                drawChar@line 0035                                 ?_get_full_ADC 0011  
                    ??_check_for_button_input 0039                                  drawChar@size 0034  
           __size_of_I2C_Write_Cmd_Write_Data 0020                          __size_of_DS1621_Init 001E  
                   ?_I2C_Write_Cmd_Write_Data 0013                          __size_of_DS3231_Init 00B8  
                             ?_get_duty_cycle 0044                 __size_of_DS3231_Turn_On_Alarm 0052  
      __end_of_Update_Setup_Alarm_Time_Screen 24D2       __size_of_Update_Setup_Alarm_Time_Screen 00E0  
              _Update_Setup_Alarm_Time_Screen 23F2  
